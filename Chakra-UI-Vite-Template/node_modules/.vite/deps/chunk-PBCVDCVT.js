import {
  import_index
} from "./chunk-2VH2HQQI.js";
import {
  BigInt as BigInt2,
  _0n,
  _1n,
  bip39Generate,
  bip39ToEntropy,
  bip39ToMiniSecret,
  bip39ToSeed,
  bip39Validate,
  blake2b,
  bnToU8a,
  compactAddLength,
  detectPackage,
  ed25519KeypairFromSeed,
  ed25519Sign,
  ed25519Verify,
  esm_default,
  exposeGlobal,
  extractGlobal,
  getRandomValues,
  hasBigInt,
  hexToU8a,
  hmacSha256,
  hmacSha512,
  import_bn,
  isFunction,
  isHex,
  isNumber,
  isReady,
  isString,
  isU8a,
  keccak256,
  keccak512,
  logger,
  packageInfo,
  packageInfo2,
  pbkdf2,
  scrypt,
  secp256k1Compress,
  secp256k1Expand,
  secp256k1FromSeed,
  secp256k1Recover,
  secp256k1Sign,
  sha256,
  sha512,
  sr25519DeriveKeypairHard,
  sr25519DeriveKeypairSoft,
  sr25519KeypairFromSeed,
  sr25519Sign,
  sr25519Verify,
  stringCamelCase,
  stringToU8a,
  twox,
  u8aConcat,
  u8aConcatStrict,
  u8aEmpty,
  u8aEq,
  u8aIsWrapped,
  u8aToBigInt,
  u8aToHex,
  u8aToString,
  u8aToU8a,
  u8aUnwrapBytes,
  u8aWrapBytes,
  vrfSign,
  vrfVerify,
  waitReady,
  xglobal
} from "./chunk-GXCWJNGX.js";
import {
  require_callBound,
  require_call_bind,
  require_define_data_property,
  require_has_property_descriptors,
  require_shams,
  require_util
} from "./chunk-VPYCDFDB.js";
import {
  __asyncGenerator,
  __asyncValues,
  __await,
  __awaiter,
  __extends,
  __generator,
  __read,
  __spreadArray,
  __values
} from "./chunk-3MR7IDAQ.js";
import {
  __commonJS,
  __export,
  __privateAdd,
  __privateMethod,
  __publicField,
  __toESM,
  global,
  import_buffer,
  import_process,
  init_shim,
  require_buffer
} from "./chunk-LTWQHXZQ.js";

// node_modules/@polkadot/api-augment/node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/@polkadot/api-augment/node_modules/bn.js/lib/bn.js"(exports, module2) {
    init_shim();
    (function(module3, exports2) {
      "use strict";
      function assert7(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN12(number5, base, endian) {
        if (BN12.isBN(number5)) {
          return number5;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number5 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number5 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN12;
      } else {
        exports2.BN = BN12;
      }
      BN12.BN = BN12;
      BN12.wordSize = 26;
      var Buffer;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer = window.Buffer;
        } else {
          Buffer = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN12.isBN = function isBN(num) {
        if (num instanceof BN12) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN12.wordSize && Array.isArray(num.words);
      };
      BN12.max = function max2(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN12.min = function min2(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN12.prototype._init = function init5(number5, base, endian) {
        if (typeof number5 === "number") {
          return this._initNumber(number5, base, endian);
        }
        if (typeof number5 === "object") {
          return this._initArray(number5, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert7(base === (base | 0) && base >= 2 && base <= 36);
        number5 = number5.toString().replace(/\s+/g, "");
        var start = 0;
        if (number5[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number5.length) {
          if (base === 16) {
            this._parseHex(number5, start, endian);
          } else {
            this._parseBase(number5, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN12.prototype._initNumber = function _initNumber(number5, base, endian) {
        if (number5 < 0) {
          this.negative = 1;
          number5 = -number5;
        }
        if (number5 < 67108864) {
          this.words = [number5 & 67108863];
          this.length = 1;
        } else if (number5 < 4503599627370496) {
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert7(number5 < 9007199254740992);
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN12.prototype._initArray = function _initArray(number5, base, endian) {
        assert7(typeof number5.length === "number");
        if (number5.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number5.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number5.length - 1, j = 0; i >= 0; i -= 3) {
            w = number5[i] | number5[i - 1] << 8 | number5[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number5.length; i += 3) {
            w = number5[i] | number5[i + 1] << 8 | number5[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert7(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN12.prototype._parseHex = function _parseHex(number5, start, endian) {
        this.length = Math.ceil((number5.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number5.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number5.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number5.length; i += 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert7(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN12.prototype._parseBase = function _parseBase(number5, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number5.length - start;
        var mod5 = total % limbLen;
        var end = Math.min(total, total - mod5) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number5, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod5 !== 0) {
          var pow6 = 1;
          word = parseBase(number5, i, number5.length, base);
          for (i = 0; i < mod5; i++) {
            pow6 *= base;
          }
          this.imuln(pow6);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN12.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN12.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN12.prototype.clone = function clone() {
        var r = new BN12(null);
        this.copy(r);
        return r;
      };
      BN12.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN12.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN12.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN12.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN12.prototype.inspect = inspect;
        }
      } else {
        BN12.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN12.prototype.toString = function toString(base, padding5) {
        base = base || 10;
        padding5 = padding5 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert7(false, "Base should be between 2 and 36");
      };
      BN12.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert7(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN12.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer) {
        BN12.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
      BN12.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN12.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert7(byteLength <= reqLength, "byte array longer than desired length");
        assert7(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN12.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN12.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN12.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN12.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN12.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN12.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN12.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN12.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN12.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN12.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN12.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN12.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN12.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN12.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN12.prototype.ior = function ior(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN12.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN12.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN12.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN12.prototype.iand = function iand(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN12.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN12.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN12.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN12.prototype.ixor = function ixor(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN12.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN12.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN12.prototype.inotn = function inotn(width) {
        assert7(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN12.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN12.prototype.setn = function setn(bit, val) {
        assert7(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN12.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN12.prototype.add = function add5(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN12.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN12.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN12.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N5) {
        var t = new Array(N5);
        var l19 = BN12.prototype._countBits(N5) - 1;
        for (var i = 0; i < N5; i++) {
          t[i] = this.revBin(i, l19, N5);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l19, N5) {
        if (x === 0 || x === N5 - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l19; i++) {
          rb |= (x & 1) << l19 - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N5) {
        for (var i = 0; i < N5; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N5, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N5);
        for (var s = 1; s < N5; s <<= 1) {
          var l19 = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l19);
          var itwdf = Math.sin(2 * Math.PI / l19);
          for (var p = 0; p < N5; p += l19) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l19) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N5 = Math.max(m, n) | 1;
        var odd = N5 & 1;
        var i = 0;
        for (N5 = N5 / 2 | 0; N5; N5 = N5 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N5) {
        if (N5 <= 1)
          return;
        for (var i = 0; i < N5 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N5 - i - 1];
          rws[N5 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N5 - i - 1];
          iws[N5 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N5) {
        var carry = 0;
        for (var i = 0; i < N5 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N5) * 8192 + Math.round(ws[2 * i] / N5) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N5) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N5; ++i) {
          rws[i] = 0;
        }
        assert7(carry === 0);
        assert7((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N5) {
        var ph = new Array(N5);
        for (var i = 0; i < N5; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N5 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N5);
        var _ = this.stub(N5);
        var rws = new Array(N5);
        var rwst = new Array(N5);
        var iwst = new Array(N5);
        var nrws = new Array(N5);
        var nrwst = new Array(N5);
        var niwst = new Array(N5);
        var rmws = out.words;
        rmws.length = N5;
        this.convert13b(x.words, x.length, rws, N5);
        this.convert13b(y.words, y.length, nrws, N5);
        this.transform(rws, _, rwst, iwst, N5, rbt);
        this.transform(nrws, _, nrwst, niwst, N5, rbt);
        for (var i = 0; i < N5; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N5);
        this.transform(rwst, iwst, rmws, _, N5, rbt);
        this.conjugate(rmws, _, N5);
        this.normalize13b(rmws, N5);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN12.prototype.mul = function mul(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN12.prototype.mulf = function mulf(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN12.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN12.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(typeof num === "number");
        assert7(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN12.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN12.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN12.prototype.pow = function pow6(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN12(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN12.prototype.iushln = function iushln(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN12.prototype.ishln = function ishln(bits) {
        assert7(this.negative === 0);
        return this.iushln(bits);
      };
      BN12.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert7(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN12.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert7(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN12.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN12.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN12.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN12.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN12.prototype.testn = function testn(bit) {
        assert7(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN12.prototype.imaskn = function imaskn(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert7(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN12.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN12.prototype.iaddn = function iaddn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN12.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN12.prototype.isubn = function isubn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN12.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN12.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN12.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN12.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN12.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert7(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN12.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN12(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN12.prototype.divmod = function divmod(num, mode, positive) {
        assert7(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN12(0),
            mod: new BN12(0)
          };
        }
        var div, mod5, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.iadd(num);
            }
          }
          return {
            div,
            mod: mod5
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod5
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN12(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN12(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN12(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN12.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN12.prototype.mod = function mod5(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN12.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN12.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod5 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod5.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN12.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN12.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN12.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN12.prototype.egcd = function egcd(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN12(1);
        var B = new BN12(0);
        var C = new BN12(0);
        var D = new BN12(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN12.prototype._invmp = function _invmp(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN12(1);
        var x2 = new BN12(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN12.prototype.gcd = function gcd5(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN12.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN12.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN12.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN12.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN12.prototype.bincn = function bincn(bit) {
        assert7(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN12.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN12.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert7(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN12.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN12.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN12.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN12.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN12.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN12.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN12.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN12.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN12.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN12.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN12.red = function red(num) {
        return new Red(num);
      };
      BN12.prototype.toRed = function toRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        assert7(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN12.prototype.fromRed = function fromRed() {
        assert7(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN12.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN12.prototype.forceRed = function forceRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN12.prototype.redAdd = function redAdd(num) {
        assert7(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN12.prototype.redIAdd = function redIAdd(num) {
        assert7(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN12.prototype.redSub = function redSub(num) {
        assert7(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN12.prototype.redISub = function redISub(num) {
        assert7(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN12.prototype.redShl = function redShl(num) {
        assert7(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN12.prototype.redMul = function redMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN12.prototype.redIMul = function redIMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN12.prototype.redSqr = function redSqr() {
        assert7(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN12.prototype.redISqr = function redISqr() {
        assert7(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN12.prototype.redSqrt = function redSqrt() {
        assert7(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN12.prototype.redInvm = function redInvm() {
        assert7(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN12.prototype.redNeg = function redNeg() {
        assert7(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN12.prototype.redPow = function redPow(num) {
        assert7(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN12(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN12(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN12(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split5(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split5(input, output5) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output5.words[i] = input.words[i];
        }
        output5.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output5.words[output5.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN12._prime = function prime6(name) {
        if (primes[name])
          return primes[name];
        var prime7;
        if (name === "k256") {
          prime7 = new K256();
        } else if (name === "p224") {
          prime7 = new P224();
        } else if (name === "p192") {
          prime7 = new P192();
        } else if (name === "p25519") {
          prime7 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime7;
        return prime7;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime6 = BN12._prime(m);
          this.m = prime6.p;
          this.prime = prime6;
        } else {
          assert7(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert7(a.negative === 0, "red works only with positives");
        assert7(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert7((a.negative | b.negative) === 0, "red works only with positives");
        assert7(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add5(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod32 = this.m.andln(3);
        assert7(mod32 % 2 === 1);
        if (mod32 === 3) {
          var pow6 = this.m.add(new BN12(1)).iushrn(2);
          return this.pow(a, pow6);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert7(!q.isZero());
        var one = new BN12(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN12(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert7(i < m);
          var b = this.pow(c, new BN12(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow6(a, num) {
        if (num.isZero())
          return new BN12(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN12(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN12.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN12(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN12(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports);
  }
});

// node_modules/@polkadot/rpc-augment/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "node_modules/@polkadot/rpc-augment/node_modules/bn.js/lib/bn.js"(exports, module2) {
    init_shim();
    (function(module3, exports2) {
      "use strict";
      function assert7(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN12(number5, base, endian) {
        if (BN12.isBN(number5)) {
          return number5;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number5 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number5 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN12;
      } else {
        exports2.BN = BN12;
      }
      BN12.BN = BN12;
      BN12.wordSize = 26;
      var Buffer;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer = window.Buffer;
        } else {
          Buffer = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN12.isBN = function isBN(num) {
        if (num instanceof BN12) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN12.wordSize && Array.isArray(num.words);
      };
      BN12.max = function max2(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN12.min = function min2(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN12.prototype._init = function init5(number5, base, endian) {
        if (typeof number5 === "number") {
          return this._initNumber(number5, base, endian);
        }
        if (typeof number5 === "object") {
          return this._initArray(number5, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert7(base === (base | 0) && base >= 2 && base <= 36);
        number5 = number5.toString().replace(/\s+/g, "");
        var start = 0;
        if (number5[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number5.length) {
          if (base === 16) {
            this._parseHex(number5, start, endian);
          } else {
            this._parseBase(number5, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN12.prototype._initNumber = function _initNumber(number5, base, endian) {
        if (number5 < 0) {
          this.negative = 1;
          number5 = -number5;
        }
        if (number5 < 67108864) {
          this.words = [number5 & 67108863];
          this.length = 1;
        } else if (number5 < 4503599627370496) {
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert7(number5 < 9007199254740992);
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN12.prototype._initArray = function _initArray(number5, base, endian) {
        assert7(typeof number5.length === "number");
        if (number5.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number5.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number5.length - 1, j = 0; i >= 0; i -= 3) {
            w = number5[i] | number5[i - 1] << 8 | number5[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number5.length; i += 3) {
            w = number5[i] | number5[i + 1] << 8 | number5[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert7(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN12.prototype._parseHex = function _parseHex(number5, start, endian) {
        this.length = Math.ceil((number5.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number5.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number5.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number5.length; i += 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert7(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN12.prototype._parseBase = function _parseBase(number5, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number5.length - start;
        var mod5 = total % limbLen;
        var end = Math.min(total, total - mod5) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number5, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod5 !== 0) {
          var pow6 = 1;
          word = parseBase(number5, i, number5.length, base);
          for (i = 0; i < mod5; i++) {
            pow6 *= base;
          }
          this.imuln(pow6);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN12.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN12.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN12.prototype.clone = function clone() {
        var r = new BN12(null);
        this.copy(r);
        return r;
      };
      BN12.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN12.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN12.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN12.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN12.prototype.inspect = inspect;
        }
      } else {
        BN12.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN12.prototype.toString = function toString(base, padding5) {
        base = base || 10;
        padding5 = padding5 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert7(false, "Base should be between 2 and 36");
      };
      BN12.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert7(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN12.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer) {
        BN12.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
      BN12.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN12.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert7(byteLength <= reqLength, "byte array longer than desired length");
        assert7(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN12.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN12.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN12.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN12.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN12.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN12.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN12.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN12.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN12.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN12.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN12.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN12.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN12.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN12.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN12.prototype.ior = function ior(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN12.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN12.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN12.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN12.prototype.iand = function iand(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN12.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN12.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN12.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN12.prototype.ixor = function ixor(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN12.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN12.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN12.prototype.inotn = function inotn(width) {
        assert7(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN12.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN12.prototype.setn = function setn(bit, val) {
        assert7(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN12.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN12.prototype.add = function add5(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN12.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN12.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN12.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N5) {
        var t = new Array(N5);
        var l19 = BN12.prototype._countBits(N5) - 1;
        for (var i = 0; i < N5; i++) {
          t[i] = this.revBin(i, l19, N5);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l19, N5) {
        if (x === 0 || x === N5 - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l19; i++) {
          rb |= (x & 1) << l19 - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N5) {
        for (var i = 0; i < N5; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N5, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N5);
        for (var s = 1; s < N5; s <<= 1) {
          var l19 = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l19);
          var itwdf = Math.sin(2 * Math.PI / l19);
          for (var p = 0; p < N5; p += l19) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l19) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N5 = Math.max(m, n) | 1;
        var odd = N5 & 1;
        var i = 0;
        for (N5 = N5 / 2 | 0; N5; N5 = N5 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N5) {
        if (N5 <= 1)
          return;
        for (var i = 0; i < N5 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N5 - i - 1];
          rws[N5 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N5 - i - 1];
          iws[N5 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N5) {
        var carry = 0;
        for (var i = 0; i < N5 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N5) * 8192 + Math.round(ws[2 * i] / N5) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N5) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N5; ++i) {
          rws[i] = 0;
        }
        assert7(carry === 0);
        assert7((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N5) {
        var ph = new Array(N5);
        for (var i = 0; i < N5; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N5 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N5);
        var _ = this.stub(N5);
        var rws = new Array(N5);
        var rwst = new Array(N5);
        var iwst = new Array(N5);
        var nrws = new Array(N5);
        var nrwst = new Array(N5);
        var niwst = new Array(N5);
        var rmws = out.words;
        rmws.length = N5;
        this.convert13b(x.words, x.length, rws, N5);
        this.convert13b(y.words, y.length, nrws, N5);
        this.transform(rws, _, rwst, iwst, N5, rbt);
        this.transform(nrws, _, nrwst, niwst, N5, rbt);
        for (var i = 0; i < N5; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N5);
        this.transform(rwst, iwst, rmws, _, N5, rbt);
        this.conjugate(rmws, _, N5);
        this.normalize13b(rmws, N5);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN12.prototype.mul = function mul(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN12.prototype.mulf = function mulf(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN12.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN12.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(typeof num === "number");
        assert7(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN12.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN12.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN12.prototype.pow = function pow6(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN12(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN12.prototype.iushln = function iushln(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN12.prototype.ishln = function ishln(bits) {
        assert7(this.negative === 0);
        return this.iushln(bits);
      };
      BN12.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert7(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN12.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert7(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN12.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN12.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN12.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN12.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN12.prototype.testn = function testn(bit) {
        assert7(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN12.prototype.imaskn = function imaskn(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert7(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN12.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN12.prototype.iaddn = function iaddn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN12.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN12.prototype.isubn = function isubn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN12.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN12.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN12.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN12.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN12.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert7(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN12.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN12(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN12.prototype.divmod = function divmod(num, mode, positive) {
        assert7(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN12(0),
            mod: new BN12(0)
          };
        }
        var div, mod5, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.iadd(num);
            }
          }
          return {
            div,
            mod: mod5
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod5
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN12(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN12(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN12(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN12.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN12.prototype.mod = function mod5(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN12.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN12.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod5 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod5.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN12.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN12.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN12.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN12.prototype.egcd = function egcd(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN12(1);
        var B = new BN12(0);
        var C = new BN12(0);
        var D = new BN12(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN12.prototype._invmp = function _invmp(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN12(1);
        var x2 = new BN12(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN12.prototype.gcd = function gcd5(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN12.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN12.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN12.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN12.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN12.prototype.bincn = function bincn(bit) {
        assert7(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN12.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN12.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert7(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN12.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN12.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN12.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN12.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN12.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN12.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN12.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN12.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN12.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN12.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN12.red = function red(num) {
        return new Red(num);
      };
      BN12.prototype.toRed = function toRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        assert7(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN12.prototype.fromRed = function fromRed() {
        assert7(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN12.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN12.prototype.forceRed = function forceRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN12.prototype.redAdd = function redAdd(num) {
        assert7(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN12.prototype.redIAdd = function redIAdd(num) {
        assert7(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN12.prototype.redSub = function redSub(num) {
        assert7(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN12.prototype.redISub = function redISub(num) {
        assert7(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN12.prototype.redShl = function redShl(num) {
        assert7(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN12.prototype.redMul = function redMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN12.prototype.redIMul = function redIMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN12.prototype.redSqr = function redSqr() {
        assert7(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN12.prototype.redISqr = function redISqr() {
        assert7(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN12.prototype.redSqrt = function redSqrt() {
        assert7(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN12.prototype.redInvm = function redInvm() {
        assert7(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN12.prototype.redNeg = function redNeg() {
        assert7(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN12.prototype.redPow = function redPow(num) {
        assert7(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN12(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN12(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN12(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split5(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split5(input, output5) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output5.words[i] = input.words[i];
        }
        output5.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output5.words[output5.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN12._prime = function prime6(name) {
        if (primes[name])
          return primes[name];
        var prime7;
        if (name === "k256") {
          prime7 = new K256();
        } else if (name === "p224") {
          prime7 = new P224();
        } else if (name === "p192") {
          prime7 = new P192();
        } else if (name === "p25519") {
          prime7 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime7;
        return prime7;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime6 = BN12._prime(m);
          this.m = prime6.p;
          this.prime = prime6;
        } else {
          assert7(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert7(a.negative === 0, "red works only with positives");
        assert7(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert7((a.negative | b.negative) === 0, "red works only with positives");
        assert7(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add5(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod32 = this.m.andln(3);
        assert7(mod32 % 2 === 1);
        if (mod32 === 3) {
          var pow6 = this.m.add(new BN12(1)).iushrn(2);
          return this.pow(a, pow6);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert7(!q.isZero());
        var one = new BN12(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN12(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert7(i < m);
          var b = this.pow(c, new BN12(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow6(a, num) {
        if (num.isZero())
          return new BN12(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN12(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN12.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN12(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN12(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports);
  }
});

// node_modules/@polkadot/types-augment/node_modules/bn.js/lib/bn.js
var require_bn3 = __commonJS({
  "node_modules/@polkadot/types-augment/node_modules/bn.js/lib/bn.js"(exports, module2) {
    init_shim();
    (function(module3, exports2) {
      "use strict";
      function assert7(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN12(number5, base, endian) {
        if (BN12.isBN(number5)) {
          return number5;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number5 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number5 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN12;
      } else {
        exports2.BN = BN12;
      }
      BN12.BN = BN12;
      BN12.wordSize = 26;
      var Buffer;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer = window.Buffer;
        } else {
          Buffer = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN12.isBN = function isBN(num) {
        if (num instanceof BN12) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN12.wordSize && Array.isArray(num.words);
      };
      BN12.max = function max2(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN12.min = function min2(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN12.prototype._init = function init5(number5, base, endian) {
        if (typeof number5 === "number") {
          return this._initNumber(number5, base, endian);
        }
        if (typeof number5 === "object") {
          return this._initArray(number5, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert7(base === (base | 0) && base >= 2 && base <= 36);
        number5 = number5.toString().replace(/\s+/g, "");
        var start = 0;
        if (number5[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number5.length) {
          if (base === 16) {
            this._parseHex(number5, start, endian);
          } else {
            this._parseBase(number5, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN12.prototype._initNumber = function _initNumber(number5, base, endian) {
        if (number5 < 0) {
          this.negative = 1;
          number5 = -number5;
        }
        if (number5 < 67108864) {
          this.words = [number5 & 67108863];
          this.length = 1;
        } else if (number5 < 4503599627370496) {
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert7(number5 < 9007199254740992);
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN12.prototype._initArray = function _initArray(number5, base, endian) {
        assert7(typeof number5.length === "number");
        if (number5.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number5.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number5.length - 1, j = 0; i >= 0; i -= 3) {
            w = number5[i] | number5[i - 1] << 8 | number5[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number5.length; i += 3) {
            w = number5[i] | number5[i + 1] << 8 | number5[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert7(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN12.prototype._parseHex = function _parseHex(number5, start, endian) {
        this.length = Math.ceil((number5.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number5.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number5.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number5.length; i += 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert7(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN12.prototype._parseBase = function _parseBase(number5, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number5.length - start;
        var mod5 = total % limbLen;
        var end = Math.min(total, total - mod5) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number5, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod5 !== 0) {
          var pow6 = 1;
          word = parseBase(number5, i, number5.length, base);
          for (i = 0; i < mod5; i++) {
            pow6 *= base;
          }
          this.imuln(pow6);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN12.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN12.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN12.prototype.clone = function clone() {
        var r = new BN12(null);
        this.copy(r);
        return r;
      };
      BN12.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN12.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN12.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN12.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN12.prototype.inspect = inspect;
        }
      } else {
        BN12.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN12.prototype.toString = function toString(base, padding5) {
        base = base || 10;
        padding5 = padding5 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert7(false, "Base should be between 2 and 36");
      };
      BN12.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert7(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN12.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer) {
        BN12.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
      BN12.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN12.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert7(byteLength <= reqLength, "byte array longer than desired length");
        assert7(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN12.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN12.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN12.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN12.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN12.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN12.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN12.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN12.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN12.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN12.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN12.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN12.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN12.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN12.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN12.prototype.ior = function ior(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN12.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN12.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN12.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN12.prototype.iand = function iand(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN12.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN12.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN12.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN12.prototype.ixor = function ixor(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN12.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN12.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN12.prototype.inotn = function inotn(width) {
        assert7(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN12.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN12.prototype.setn = function setn(bit, val) {
        assert7(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN12.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN12.prototype.add = function add5(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN12.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN12.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN12.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N5) {
        var t = new Array(N5);
        var l19 = BN12.prototype._countBits(N5) - 1;
        for (var i = 0; i < N5; i++) {
          t[i] = this.revBin(i, l19, N5);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l19, N5) {
        if (x === 0 || x === N5 - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l19; i++) {
          rb |= (x & 1) << l19 - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N5) {
        for (var i = 0; i < N5; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N5, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N5);
        for (var s = 1; s < N5; s <<= 1) {
          var l19 = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l19);
          var itwdf = Math.sin(2 * Math.PI / l19);
          for (var p = 0; p < N5; p += l19) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l19) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N5 = Math.max(m, n) | 1;
        var odd = N5 & 1;
        var i = 0;
        for (N5 = N5 / 2 | 0; N5; N5 = N5 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N5) {
        if (N5 <= 1)
          return;
        for (var i = 0; i < N5 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N5 - i - 1];
          rws[N5 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N5 - i - 1];
          iws[N5 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N5) {
        var carry = 0;
        for (var i = 0; i < N5 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N5) * 8192 + Math.round(ws[2 * i] / N5) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N5) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N5; ++i) {
          rws[i] = 0;
        }
        assert7(carry === 0);
        assert7((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N5) {
        var ph = new Array(N5);
        for (var i = 0; i < N5; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N5 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N5);
        var _ = this.stub(N5);
        var rws = new Array(N5);
        var rwst = new Array(N5);
        var iwst = new Array(N5);
        var nrws = new Array(N5);
        var nrwst = new Array(N5);
        var niwst = new Array(N5);
        var rmws = out.words;
        rmws.length = N5;
        this.convert13b(x.words, x.length, rws, N5);
        this.convert13b(y.words, y.length, nrws, N5);
        this.transform(rws, _, rwst, iwst, N5, rbt);
        this.transform(nrws, _, nrwst, niwst, N5, rbt);
        for (var i = 0; i < N5; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N5);
        this.transform(rwst, iwst, rmws, _, N5, rbt);
        this.conjugate(rmws, _, N5);
        this.normalize13b(rmws, N5);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN12.prototype.mul = function mul(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN12.prototype.mulf = function mulf(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN12.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN12.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(typeof num === "number");
        assert7(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN12.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN12.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN12.prototype.pow = function pow6(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN12(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN12.prototype.iushln = function iushln(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN12.prototype.ishln = function ishln(bits) {
        assert7(this.negative === 0);
        return this.iushln(bits);
      };
      BN12.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert7(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN12.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert7(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN12.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN12.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN12.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN12.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN12.prototype.testn = function testn(bit) {
        assert7(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN12.prototype.imaskn = function imaskn(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert7(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN12.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN12.prototype.iaddn = function iaddn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN12.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN12.prototype.isubn = function isubn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN12.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN12.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN12.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN12.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN12.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert7(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN12.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN12(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN12.prototype.divmod = function divmod(num, mode, positive) {
        assert7(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN12(0),
            mod: new BN12(0)
          };
        }
        var div, mod5, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.iadd(num);
            }
          }
          return {
            div,
            mod: mod5
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod5
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN12(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN12(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN12(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN12.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN12.prototype.mod = function mod5(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN12.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN12.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod5 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod5.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN12.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN12.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN12.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN12.prototype.egcd = function egcd(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN12(1);
        var B = new BN12(0);
        var C = new BN12(0);
        var D = new BN12(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN12.prototype._invmp = function _invmp(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN12(1);
        var x2 = new BN12(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN12.prototype.gcd = function gcd5(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN12.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN12.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN12.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN12.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN12.prototype.bincn = function bincn(bit) {
        assert7(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN12.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN12.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert7(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN12.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN12.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN12.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN12.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN12.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN12.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN12.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN12.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN12.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN12.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN12.red = function red(num) {
        return new Red(num);
      };
      BN12.prototype.toRed = function toRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        assert7(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN12.prototype.fromRed = function fromRed() {
        assert7(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN12.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN12.prototype.forceRed = function forceRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN12.prototype.redAdd = function redAdd(num) {
        assert7(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN12.prototype.redIAdd = function redIAdd(num) {
        assert7(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN12.prototype.redSub = function redSub(num) {
        assert7(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN12.prototype.redISub = function redISub(num) {
        assert7(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN12.prototype.redShl = function redShl(num) {
        assert7(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN12.prototype.redMul = function redMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN12.prototype.redIMul = function redIMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN12.prototype.redSqr = function redSqr() {
        assert7(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN12.prototype.redISqr = function redISqr() {
        assert7(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN12.prototype.redSqrt = function redSqrt() {
        assert7(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN12.prototype.redInvm = function redInvm() {
        assert7(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN12.prototype.redNeg = function redNeg() {
        assert7(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN12.prototype.redPow = function redPow(num) {
        assert7(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN12(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN12(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN12(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split5(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split5(input, output5) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output5.words[i] = input.words[i];
        }
        output5.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output5.words[output5.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN12._prime = function prime6(name) {
        if (primes[name])
          return primes[name];
        var prime7;
        if (name === "k256") {
          prime7 = new K256();
        } else if (name === "p224") {
          prime7 = new P224();
        } else if (name === "p192") {
          prime7 = new P192();
        } else if (name === "p25519") {
          prime7 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime7;
        return prime7;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime6 = BN12._prime(m);
          this.m = prime6.p;
          this.prime = prime6;
        } else {
          assert7(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert7(a.negative === 0, "red works only with positives");
        assert7(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert7((a.negative | b.negative) === 0, "red works only with positives");
        assert7(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add5(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod32 = this.m.andln(3);
        assert7(mod32 % 2 === 1);
        if (mod32 === 3) {
          var pow6 = this.m.add(new BN12(1)).iushrn(2);
          return this.pow(a, pow6);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert7(!q.isZero());
        var one = new BN12(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN12(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert7(i < m);
          var b = this.pow(c, new BN12(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow6(a, num) {
        if (num.isZero())
          return new BN12(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN12(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN12.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN12(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN12(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports);
  }
});

// node_modules/@polkadot/api/node_modules/bn.js/lib/bn.js
var require_bn4 = __commonJS({
  "node_modules/@polkadot/api/node_modules/bn.js/lib/bn.js"(exports, module2) {
    init_shim();
    (function(module3, exports2) {
      "use strict";
      function assert7(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN12(number5, base, endian) {
        if (BN12.isBN(number5)) {
          return number5;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number5 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number5 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN12;
      } else {
        exports2.BN = BN12;
      }
      BN12.BN = BN12;
      BN12.wordSize = 26;
      var Buffer;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer = window.Buffer;
        } else {
          Buffer = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN12.isBN = function isBN(num) {
        if (num instanceof BN12) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN12.wordSize && Array.isArray(num.words);
      };
      BN12.max = function max2(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN12.min = function min2(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN12.prototype._init = function init5(number5, base, endian) {
        if (typeof number5 === "number") {
          return this._initNumber(number5, base, endian);
        }
        if (typeof number5 === "object") {
          return this._initArray(number5, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert7(base === (base | 0) && base >= 2 && base <= 36);
        number5 = number5.toString().replace(/\s+/g, "");
        var start = 0;
        if (number5[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number5.length) {
          if (base === 16) {
            this._parseHex(number5, start, endian);
          } else {
            this._parseBase(number5, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN12.prototype._initNumber = function _initNumber(number5, base, endian) {
        if (number5 < 0) {
          this.negative = 1;
          number5 = -number5;
        }
        if (number5 < 67108864) {
          this.words = [number5 & 67108863];
          this.length = 1;
        } else if (number5 < 4503599627370496) {
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert7(number5 < 9007199254740992);
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN12.prototype._initArray = function _initArray(number5, base, endian) {
        assert7(typeof number5.length === "number");
        if (number5.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number5.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number5.length - 1, j = 0; i >= 0; i -= 3) {
            w = number5[i] | number5[i - 1] << 8 | number5[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number5.length; i += 3) {
            w = number5[i] | number5[i + 1] << 8 | number5[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert7(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN12.prototype._parseHex = function _parseHex(number5, start, endian) {
        this.length = Math.ceil((number5.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number5.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number5.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number5.length; i += 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert7(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN12.prototype._parseBase = function _parseBase(number5, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number5.length - start;
        var mod5 = total % limbLen;
        var end = Math.min(total, total - mod5) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number5, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod5 !== 0) {
          var pow6 = 1;
          word = parseBase(number5, i, number5.length, base);
          for (i = 0; i < mod5; i++) {
            pow6 *= base;
          }
          this.imuln(pow6);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN12.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN12.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN12.prototype.clone = function clone() {
        var r = new BN12(null);
        this.copy(r);
        return r;
      };
      BN12.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN12.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN12.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN12.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN12.prototype.inspect = inspect;
        }
      } else {
        BN12.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN12.prototype.toString = function toString(base, padding5) {
        base = base || 10;
        padding5 = padding5 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert7(false, "Base should be between 2 and 36");
      };
      BN12.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert7(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN12.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer) {
        BN12.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
      BN12.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN12.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert7(byteLength <= reqLength, "byte array longer than desired length");
        assert7(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN12.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN12.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN12.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN12.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN12.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN12.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN12.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN12.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN12.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN12.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN12.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN12.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN12.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN12.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN12.prototype.ior = function ior(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN12.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN12.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN12.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN12.prototype.iand = function iand(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN12.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN12.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN12.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN12.prototype.ixor = function ixor(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN12.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN12.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN12.prototype.inotn = function inotn(width) {
        assert7(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN12.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN12.prototype.setn = function setn(bit, val) {
        assert7(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN12.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN12.prototype.add = function add5(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN12.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN12.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN12.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N5) {
        var t = new Array(N5);
        var l19 = BN12.prototype._countBits(N5) - 1;
        for (var i = 0; i < N5; i++) {
          t[i] = this.revBin(i, l19, N5);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l19, N5) {
        if (x === 0 || x === N5 - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l19; i++) {
          rb |= (x & 1) << l19 - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N5) {
        for (var i = 0; i < N5; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N5, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N5);
        for (var s = 1; s < N5; s <<= 1) {
          var l19 = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l19);
          var itwdf = Math.sin(2 * Math.PI / l19);
          for (var p = 0; p < N5; p += l19) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l19) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N5 = Math.max(m, n) | 1;
        var odd = N5 & 1;
        var i = 0;
        for (N5 = N5 / 2 | 0; N5; N5 = N5 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N5) {
        if (N5 <= 1)
          return;
        for (var i = 0; i < N5 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N5 - i - 1];
          rws[N5 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N5 - i - 1];
          iws[N5 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N5) {
        var carry = 0;
        for (var i = 0; i < N5 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N5) * 8192 + Math.round(ws[2 * i] / N5) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N5) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N5; ++i) {
          rws[i] = 0;
        }
        assert7(carry === 0);
        assert7((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N5) {
        var ph = new Array(N5);
        for (var i = 0; i < N5; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N5 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N5);
        var _ = this.stub(N5);
        var rws = new Array(N5);
        var rwst = new Array(N5);
        var iwst = new Array(N5);
        var nrws = new Array(N5);
        var nrwst = new Array(N5);
        var niwst = new Array(N5);
        var rmws = out.words;
        rmws.length = N5;
        this.convert13b(x.words, x.length, rws, N5);
        this.convert13b(y.words, y.length, nrws, N5);
        this.transform(rws, _, rwst, iwst, N5, rbt);
        this.transform(nrws, _, nrwst, niwst, N5, rbt);
        for (var i = 0; i < N5; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N5);
        this.transform(rwst, iwst, rmws, _, N5, rbt);
        this.conjugate(rmws, _, N5);
        this.normalize13b(rmws, N5);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN12.prototype.mul = function mul(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN12.prototype.mulf = function mulf(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN12.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN12.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(typeof num === "number");
        assert7(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN12.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN12.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN12.prototype.pow = function pow6(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN12(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN12.prototype.iushln = function iushln(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN12.prototype.ishln = function ishln(bits) {
        assert7(this.negative === 0);
        return this.iushln(bits);
      };
      BN12.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert7(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN12.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert7(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN12.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN12.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN12.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN12.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN12.prototype.testn = function testn(bit) {
        assert7(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN12.prototype.imaskn = function imaskn(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert7(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN12.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN12.prototype.iaddn = function iaddn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN12.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN12.prototype.isubn = function isubn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN12.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN12.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN12.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN12.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN12.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert7(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN12.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN12(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN12.prototype.divmod = function divmod(num, mode, positive) {
        assert7(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN12(0),
            mod: new BN12(0)
          };
        }
        var div, mod5, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.iadd(num);
            }
          }
          return {
            div,
            mod: mod5
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod5
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN12(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN12(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN12(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN12.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN12.prototype.mod = function mod5(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN12.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN12.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod5 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod5.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN12.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN12.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN12.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN12.prototype.egcd = function egcd(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN12(1);
        var B = new BN12(0);
        var C = new BN12(0);
        var D = new BN12(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN12.prototype._invmp = function _invmp(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN12(1);
        var x2 = new BN12(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN12.prototype.gcd = function gcd5(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN12.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN12.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN12.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN12.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN12.prototype.bincn = function bincn(bit) {
        assert7(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN12.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN12.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert7(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN12.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN12.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN12.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN12.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN12.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN12.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN12.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN12.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN12.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN12.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN12.red = function red(num) {
        return new Red(num);
      };
      BN12.prototype.toRed = function toRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        assert7(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN12.prototype.fromRed = function fromRed() {
        assert7(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN12.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN12.prototype.forceRed = function forceRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN12.prototype.redAdd = function redAdd(num) {
        assert7(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN12.prototype.redIAdd = function redIAdd(num) {
        assert7(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN12.prototype.redSub = function redSub(num) {
        assert7(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN12.prototype.redISub = function redISub(num) {
        assert7(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN12.prototype.redShl = function redShl(num) {
        assert7(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN12.prototype.redMul = function redMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN12.prototype.redIMul = function redIMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN12.prototype.redSqr = function redSqr() {
        assert7(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN12.prototype.redISqr = function redISqr() {
        assert7(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN12.prototype.redSqrt = function redSqrt() {
        assert7(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN12.prototype.redInvm = function redInvm() {
        assert7(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN12.prototype.redNeg = function redNeg() {
        assert7(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN12.prototype.redPow = function redPow(num) {
        assert7(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN12(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN12(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN12(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split5(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split5(input, output5) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output5.words[i] = input.words[i];
        }
        output5.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output5.words[output5.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN12._prime = function prime6(name) {
        if (primes[name])
          return primes[name];
        var prime7;
        if (name === "k256") {
          prime7 = new K256();
        } else if (name === "p224") {
          prime7 = new P224();
        } else if (name === "p192") {
          prime7 = new P192();
        } else if (name === "p25519") {
          prime7 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime7;
        return prime7;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime6 = BN12._prime(m);
          this.m = prime6.p;
          this.prime = prime6;
        } else {
          assert7(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert7(a.negative === 0, "red works only with positives");
        assert7(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert7((a.negative | b.negative) === 0, "red works only with positives");
        assert7(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add5(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod32 = this.m.andln(3);
        assert7(mod32 % 2 === 1);
        if (mod32 === 3) {
          var pow6 = this.m.add(new BN12(1)).iushrn(2);
          return this.pow(a, pow6);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert7(!q.isZero());
        var one = new BN12(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN12(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert7(i < m);
          var b = this.pow(c, new BN12(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow6(a, num) {
        if (num.isZero())
          return new BN12(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN12(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN12.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN12(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN12(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports);
  }
});

// node_modules/@polkadot/api-derive/node_modules/bn.js/lib/bn.js
var require_bn5 = __commonJS({
  "node_modules/@polkadot/api-derive/node_modules/bn.js/lib/bn.js"(exports, module2) {
    init_shim();
    (function(module3, exports2) {
      "use strict";
      function assert7(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN12(number5, base, endian) {
        if (BN12.isBN(number5)) {
          return number5;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number5 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number5 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN12;
      } else {
        exports2.BN = BN12;
      }
      BN12.BN = BN12;
      BN12.wordSize = 26;
      var Buffer;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer = window.Buffer;
        } else {
          Buffer = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN12.isBN = function isBN(num) {
        if (num instanceof BN12) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN12.wordSize && Array.isArray(num.words);
      };
      BN12.max = function max2(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN12.min = function min2(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN12.prototype._init = function init5(number5, base, endian) {
        if (typeof number5 === "number") {
          return this._initNumber(number5, base, endian);
        }
        if (typeof number5 === "object") {
          return this._initArray(number5, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert7(base === (base | 0) && base >= 2 && base <= 36);
        number5 = number5.toString().replace(/\s+/g, "");
        var start = 0;
        if (number5[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number5.length) {
          if (base === 16) {
            this._parseHex(number5, start, endian);
          } else {
            this._parseBase(number5, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN12.prototype._initNumber = function _initNumber(number5, base, endian) {
        if (number5 < 0) {
          this.negative = 1;
          number5 = -number5;
        }
        if (number5 < 67108864) {
          this.words = [number5 & 67108863];
          this.length = 1;
        } else if (number5 < 4503599627370496) {
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert7(number5 < 9007199254740992);
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN12.prototype._initArray = function _initArray(number5, base, endian) {
        assert7(typeof number5.length === "number");
        if (number5.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number5.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number5.length - 1, j = 0; i >= 0; i -= 3) {
            w = number5[i] | number5[i - 1] << 8 | number5[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number5.length; i += 3) {
            w = number5[i] | number5[i + 1] << 8 | number5[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert7(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN12.prototype._parseHex = function _parseHex(number5, start, endian) {
        this.length = Math.ceil((number5.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number5.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number5.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number5.length; i += 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert7(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN12.prototype._parseBase = function _parseBase(number5, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number5.length - start;
        var mod5 = total % limbLen;
        var end = Math.min(total, total - mod5) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number5, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod5 !== 0) {
          var pow6 = 1;
          word = parseBase(number5, i, number5.length, base);
          for (i = 0; i < mod5; i++) {
            pow6 *= base;
          }
          this.imuln(pow6);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN12.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN12.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN12.prototype.clone = function clone() {
        var r = new BN12(null);
        this.copy(r);
        return r;
      };
      BN12.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN12.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN12.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN12.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN12.prototype.inspect = inspect;
        }
      } else {
        BN12.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN12.prototype.toString = function toString(base, padding5) {
        base = base || 10;
        padding5 = padding5 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert7(false, "Base should be between 2 and 36");
      };
      BN12.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert7(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN12.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer) {
        BN12.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
      BN12.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN12.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert7(byteLength <= reqLength, "byte array longer than desired length");
        assert7(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN12.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN12.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN12.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN12.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN12.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN12.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN12.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN12.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN12.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN12.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN12.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN12.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN12.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN12.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN12.prototype.ior = function ior(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN12.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN12.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN12.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN12.prototype.iand = function iand(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN12.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN12.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN12.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN12.prototype.ixor = function ixor(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN12.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN12.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN12.prototype.inotn = function inotn(width) {
        assert7(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN12.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN12.prototype.setn = function setn(bit, val) {
        assert7(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN12.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN12.prototype.add = function add5(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN12.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN12.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN12.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N5) {
        var t = new Array(N5);
        var l19 = BN12.prototype._countBits(N5) - 1;
        for (var i = 0; i < N5; i++) {
          t[i] = this.revBin(i, l19, N5);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l19, N5) {
        if (x === 0 || x === N5 - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l19; i++) {
          rb |= (x & 1) << l19 - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N5) {
        for (var i = 0; i < N5; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N5, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N5);
        for (var s = 1; s < N5; s <<= 1) {
          var l19 = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l19);
          var itwdf = Math.sin(2 * Math.PI / l19);
          for (var p = 0; p < N5; p += l19) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l19) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N5 = Math.max(m, n) | 1;
        var odd = N5 & 1;
        var i = 0;
        for (N5 = N5 / 2 | 0; N5; N5 = N5 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N5) {
        if (N5 <= 1)
          return;
        for (var i = 0; i < N5 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N5 - i - 1];
          rws[N5 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N5 - i - 1];
          iws[N5 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N5) {
        var carry = 0;
        for (var i = 0; i < N5 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N5) * 8192 + Math.round(ws[2 * i] / N5) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N5) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N5; ++i) {
          rws[i] = 0;
        }
        assert7(carry === 0);
        assert7((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N5) {
        var ph = new Array(N5);
        for (var i = 0; i < N5; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N5 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N5);
        var _ = this.stub(N5);
        var rws = new Array(N5);
        var rwst = new Array(N5);
        var iwst = new Array(N5);
        var nrws = new Array(N5);
        var nrwst = new Array(N5);
        var niwst = new Array(N5);
        var rmws = out.words;
        rmws.length = N5;
        this.convert13b(x.words, x.length, rws, N5);
        this.convert13b(y.words, y.length, nrws, N5);
        this.transform(rws, _, rwst, iwst, N5, rbt);
        this.transform(nrws, _, nrwst, niwst, N5, rbt);
        for (var i = 0; i < N5; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N5);
        this.transform(rwst, iwst, rmws, _, N5, rbt);
        this.conjugate(rmws, _, N5);
        this.normalize13b(rmws, N5);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN12.prototype.mul = function mul(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN12.prototype.mulf = function mulf(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN12.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN12.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(typeof num === "number");
        assert7(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN12.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN12.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN12.prototype.pow = function pow6(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN12(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN12.prototype.iushln = function iushln(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN12.prototype.ishln = function ishln(bits) {
        assert7(this.negative === 0);
        return this.iushln(bits);
      };
      BN12.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert7(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN12.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert7(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN12.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN12.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN12.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN12.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN12.prototype.testn = function testn(bit) {
        assert7(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN12.prototype.imaskn = function imaskn(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert7(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN12.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN12.prototype.iaddn = function iaddn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN12.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN12.prototype.isubn = function isubn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN12.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN12.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN12.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN12.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN12.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert7(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN12.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN12(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN12.prototype.divmod = function divmod(num, mode, positive) {
        assert7(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN12(0),
            mod: new BN12(0)
          };
        }
        var div, mod5, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.iadd(num);
            }
          }
          return {
            div,
            mod: mod5
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod5
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN12(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN12(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN12(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN12.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN12.prototype.mod = function mod5(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN12.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN12.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod5 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod5.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN12.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN12.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN12.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN12.prototype.egcd = function egcd(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN12(1);
        var B = new BN12(0);
        var C = new BN12(0);
        var D = new BN12(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN12.prototype._invmp = function _invmp(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN12(1);
        var x2 = new BN12(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN12.prototype.gcd = function gcd5(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN12.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN12.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN12.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN12.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN12.prototype.bincn = function bincn(bit) {
        assert7(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN12.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN12.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert7(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN12.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN12.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN12.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN12.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN12.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN12.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN12.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN12.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN12.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN12.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN12.red = function red(num) {
        return new Red(num);
      };
      BN12.prototype.toRed = function toRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        assert7(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN12.prototype.fromRed = function fromRed() {
        assert7(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN12.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN12.prototype.forceRed = function forceRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN12.prototype.redAdd = function redAdd(num) {
        assert7(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN12.prototype.redIAdd = function redIAdd(num) {
        assert7(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN12.prototype.redSub = function redSub(num) {
        assert7(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN12.prototype.redISub = function redISub(num) {
        assert7(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN12.prototype.redShl = function redShl(num) {
        assert7(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN12.prototype.redMul = function redMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN12.prototype.redIMul = function redIMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN12.prototype.redSqr = function redSqr() {
        assert7(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN12.prototype.redISqr = function redISqr() {
        assert7(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN12.prototype.redSqrt = function redSqrt() {
        assert7(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN12.prototype.redInvm = function redInvm() {
        assert7(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN12.prototype.redNeg = function redNeg() {
        assert7(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN12.prototype.redPow = function redPow(num) {
        assert7(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN12(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN12(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN12(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split5(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split5(input, output5) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output5.words[i] = input.words[i];
        }
        output5.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output5.words[output5.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN12._prime = function prime6(name) {
        if (primes[name])
          return primes[name];
        var prime7;
        if (name === "k256") {
          prime7 = new K256();
        } else if (name === "p224") {
          prime7 = new P224();
        } else if (name === "p192") {
          prime7 = new P192();
        } else if (name === "p25519") {
          prime7 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime7;
        return prime7;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime6 = BN12._prime(m);
          this.m = prime6.p;
          this.prime = prime6;
        } else {
          assert7(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert7(a.negative === 0, "red works only with positives");
        assert7(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert7((a.negative | b.negative) === 0, "red works only with positives");
        assert7(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add5(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod32 = this.m.andln(3);
        assert7(mod32 % 2 === 1);
        if (mod32 === 3) {
          var pow6 = this.m.add(new BN12(1)).iushrn(2);
          return this.pow(a, pow6);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert7(!q.isZero());
        var one = new BN12(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN12(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert7(i < m);
          var b = this.pow(c, new BN12(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow6(a, num) {
        if (num.isZero())
          return new BN12(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN12(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN12.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN12(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN12(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports);
  }
});

// node_modules/@polkadot/rpc-core/node_modules/bn.js/lib/bn.js
var require_bn6 = __commonJS({
  "node_modules/@polkadot/rpc-core/node_modules/bn.js/lib/bn.js"(exports, module2) {
    init_shim();
    (function(module3, exports2) {
      "use strict";
      function assert7(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN12(number5, base, endian) {
        if (BN12.isBN(number5)) {
          return number5;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number5 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number5 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN12;
      } else {
        exports2.BN = BN12;
      }
      BN12.BN = BN12;
      BN12.wordSize = 26;
      var Buffer;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer = window.Buffer;
        } else {
          Buffer = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN12.isBN = function isBN(num) {
        if (num instanceof BN12) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN12.wordSize && Array.isArray(num.words);
      };
      BN12.max = function max2(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN12.min = function min2(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN12.prototype._init = function init5(number5, base, endian) {
        if (typeof number5 === "number") {
          return this._initNumber(number5, base, endian);
        }
        if (typeof number5 === "object") {
          return this._initArray(number5, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert7(base === (base | 0) && base >= 2 && base <= 36);
        number5 = number5.toString().replace(/\s+/g, "");
        var start = 0;
        if (number5[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number5.length) {
          if (base === 16) {
            this._parseHex(number5, start, endian);
          } else {
            this._parseBase(number5, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN12.prototype._initNumber = function _initNumber(number5, base, endian) {
        if (number5 < 0) {
          this.negative = 1;
          number5 = -number5;
        }
        if (number5 < 67108864) {
          this.words = [number5 & 67108863];
          this.length = 1;
        } else if (number5 < 4503599627370496) {
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert7(number5 < 9007199254740992);
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN12.prototype._initArray = function _initArray(number5, base, endian) {
        assert7(typeof number5.length === "number");
        if (number5.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number5.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number5.length - 1, j = 0; i >= 0; i -= 3) {
            w = number5[i] | number5[i - 1] << 8 | number5[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number5.length; i += 3) {
            w = number5[i] | number5[i + 1] << 8 | number5[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert7(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN12.prototype._parseHex = function _parseHex(number5, start, endian) {
        this.length = Math.ceil((number5.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number5.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number5.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number5.length; i += 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert7(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN12.prototype._parseBase = function _parseBase(number5, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number5.length - start;
        var mod5 = total % limbLen;
        var end = Math.min(total, total - mod5) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number5, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod5 !== 0) {
          var pow6 = 1;
          word = parseBase(number5, i, number5.length, base);
          for (i = 0; i < mod5; i++) {
            pow6 *= base;
          }
          this.imuln(pow6);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN12.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN12.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN12.prototype.clone = function clone() {
        var r = new BN12(null);
        this.copy(r);
        return r;
      };
      BN12.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN12.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN12.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN12.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN12.prototype.inspect = inspect;
        }
      } else {
        BN12.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN12.prototype.toString = function toString(base, padding5) {
        base = base || 10;
        padding5 = padding5 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert7(false, "Base should be between 2 and 36");
      };
      BN12.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert7(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN12.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer) {
        BN12.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
      BN12.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN12.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert7(byteLength <= reqLength, "byte array longer than desired length");
        assert7(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN12.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN12.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN12.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN12.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN12.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN12.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN12.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN12.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN12.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN12.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN12.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN12.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN12.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN12.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN12.prototype.ior = function ior(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN12.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN12.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN12.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN12.prototype.iand = function iand(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN12.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN12.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN12.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN12.prototype.ixor = function ixor(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN12.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN12.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN12.prototype.inotn = function inotn(width) {
        assert7(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN12.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN12.prototype.setn = function setn(bit, val) {
        assert7(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN12.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN12.prototype.add = function add5(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN12.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN12.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN12.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N5) {
        var t = new Array(N5);
        var l19 = BN12.prototype._countBits(N5) - 1;
        for (var i = 0; i < N5; i++) {
          t[i] = this.revBin(i, l19, N5);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l19, N5) {
        if (x === 0 || x === N5 - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l19; i++) {
          rb |= (x & 1) << l19 - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N5) {
        for (var i = 0; i < N5; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N5, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N5);
        for (var s = 1; s < N5; s <<= 1) {
          var l19 = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l19);
          var itwdf = Math.sin(2 * Math.PI / l19);
          for (var p = 0; p < N5; p += l19) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l19) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N5 = Math.max(m, n) | 1;
        var odd = N5 & 1;
        var i = 0;
        for (N5 = N5 / 2 | 0; N5; N5 = N5 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N5) {
        if (N5 <= 1)
          return;
        for (var i = 0; i < N5 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N5 - i - 1];
          rws[N5 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N5 - i - 1];
          iws[N5 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N5) {
        var carry = 0;
        for (var i = 0; i < N5 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N5) * 8192 + Math.round(ws[2 * i] / N5) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N5) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N5; ++i) {
          rws[i] = 0;
        }
        assert7(carry === 0);
        assert7((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N5) {
        var ph = new Array(N5);
        for (var i = 0; i < N5; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N5 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N5);
        var _ = this.stub(N5);
        var rws = new Array(N5);
        var rwst = new Array(N5);
        var iwst = new Array(N5);
        var nrws = new Array(N5);
        var nrwst = new Array(N5);
        var niwst = new Array(N5);
        var rmws = out.words;
        rmws.length = N5;
        this.convert13b(x.words, x.length, rws, N5);
        this.convert13b(y.words, y.length, nrws, N5);
        this.transform(rws, _, rwst, iwst, N5, rbt);
        this.transform(nrws, _, nrwst, niwst, N5, rbt);
        for (var i = 0; i < N5; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N5);
        this.transform(rwst, iwst, rmws, _, N5, rbt);
        this.conjugate(rmws, _, N5);
        this.normalize13b(rmws, N5);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN12.prototype.mul = function mul(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN12.prototype.mulf = function mulf(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN12.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN12.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(typeof num === "number");
        assert7(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN12.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN12.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN12.prototype.pow = function pow6(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN12(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN12.prototype.iushln = function iushln(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN12.prototype.ishln = function ishln(bits) {
        assert7(this.negative === 0);
        return this.iushln(bits);
      };
      BN12.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert7(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN12.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert7(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN12.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN12.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN12.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN12.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN12.prototype.testn = function testn(bit) {
        assert7(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN12.prototype.imaskn = function imaskn(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert7(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN12.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN12.prototype.iaddn = function iaddn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN12.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN12.prototype.isubn = function isubn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN12.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN12.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN12.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN12.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN12.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert7(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN12.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN12(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN12.prototype.divmod = function divmod(num, mode, positive) {
        assert7(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN12(0),
            mod: new BN12(0)
          };
        }
        var div, mod5, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.iadd(num);
            }
          }
          return {
            div,
            mod: mod5
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod5
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN12(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN12(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN12(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN12.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN12.prototype.mod = function mod5(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN12.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN12.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod5 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod5.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN12.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN12.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN12.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN12.prototype.egcd = function egcd(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN12(1);
        var B = new BN12(0);
        var C = new BN12(0);
        var D = new BN12(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN12.prototype._invmp = function _invmp(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN12(1);
        var x2 = new BN12(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN12.prototype.gcd = function gcd5(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN12.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN12.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN12.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN12.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN12.prototype.bincn = function bincn(bit) {
        assert7(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN12.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN12.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert7(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN12.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN12.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN12.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN12.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN12.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN12.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN12.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN12.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN12.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN12.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN12.red = function red(num) {
        return new Red(num);
      };
      BN12.prototype.toRed = function toRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        assert7(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN12.prototype.fromRed = function fromRed() {
        assert7(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN12.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN12.prototype.forceRed = function forceRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN12.prototype.redAdd = function redAdd(num) {
        assert7(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN12.prototype.redIAdd = function redIAdd(num) {
        assert7(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN12.prototype.redSub = function redSub(num) {
        assert7(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN12.prototype.redISub = function redISub(num) {
        assert7(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN12.prototype.redShl = function redShl(num) {
        assert7(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN12.prototype.redMul = function redMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN12.prototype.redIMul = function redIMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN12.prototype.redSqr = function redSqr() {
        assert7(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN12.prototype.redISqr = function redISqr() {
        assert7(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN12.prototype.redSqrt = function redSqrt() {
        assert7(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN12.prototype.redInvm = function redInvm() {
        assert7(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN12.prototype.redNeg = function redNeg() {
        assert7(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN12.prototype.redPow = function redPow(num) {
        assert7(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN12(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN12(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN12(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split5(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split5(input, output5) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output5.words[i] = input.words[i];
        }
        output5.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output5.words[output5.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN12._prime = function prime6(name) {
        if (primes[name])
          return primes[name];
        var prime7;
        if (name === "k256") {
          prime7 = new K256();
        } else if (name === "p224") {
          prime7 = new P224();
        } else if (name === "p192") {
          prime7 = new P192();
        } else if (name === "p25519") {
          prime7 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime7;
        return prime7;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime6 = BN12._prime(m);
          this.m = prime6.p;
          this.prime = prime6;
        } else {
          assert7(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert7(a.negative === 0, "red works only with positives");
        assert7(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert7((a.negative | b.negative) === 0, "red works only with positives");
        assert7(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add5(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod32 = this.m.andln(3);
        assert7(mod32 % 2 === 1);
        if (mod32 === 3) {
          var pow6 = this.m.add(new BN12(1)).iushrn(2);
          return this.pow(a, pow6);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert7(!q.isZero());
        var one = new BN12(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN12(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert7(i < m);
          var b = this.pow(c, new BN12(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow6(a, num) {
        if (num.isZero())
          return new BN12(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN12(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN12.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN12(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN12(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports);
  }
});

// node_modules/@polkadot/types/node_modules/bn.js/lib/bn.js
var require_bn7 = __commonJS({
  "node_modules/@polkadot/types/node_modules/bn.js/lib/bn.js"(exports, module2) {
    init_shim();
    (function(module3, exports2) {
      "use strict";
      function assert7(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN12(number5, base, endian) {
        if (BN12.isBN(number5)) {
          return number5;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number5 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number5 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN12;
      } else {
        exports2.BN = BN12;
      }
      BN12.BN = BN12;
      BN12.wordSize = 26;
      var Buffer;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer = window.Buffer;
        } else {
          Buffer = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN12.isBN = function isBN(num) {
        if (num instanceof BN12) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN12.wordSize && Array.isArray(num.words);
      };
      BN12.max = function max2(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN12.min = function min2(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN12.prototype._init = function init5(number5, base, endian) {
        if (typeof number5 === "number") {
          return this._initNumber(number5, base, endian);
        }
        if (typeof number5 === "object") {
          return this._initArray(number5, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert7(base === (base | 0) && base >= 2 && base <= 36);
        number5 = number5.toString().replace(/\s+/g, "");
        var start = 0;
        if (number5[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number5.length) {
          if (base === 16) {
            this._parseHex(number5, start, endian);
          } else {
            this._parseBase(number5, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN12.prototype._initNumber = function _initNumber(number5, base, endian) {
        if (number5 < 0) {
          this.negative = 1;
          number5 = -number5;
        }
        if (number5 < 67108864) {
          this.words = [number5 & 67108863];
          this.length = 1;
        } else if (number5 < 4503599627370496) {
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert7(number5 < 9007199254740992);
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN12.prototype._initArray = function _initArray(number5, base, endian) {
        assert7(typeof number5.length === "number");
        if (number5.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number5.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number5.length - 1, j = 0; i >= 0; i -= 3) {
            w = number5[i] | number5[i - 1] << 8 | number5[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number5.length; i += 3) {
            w = number5[i] | number5[i + 1] << 8 | number5[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert7(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN12.prototype._parseHex = function _parseHex(number5, start, endian) {
        this.length = Math.ceil((number5.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number5.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number5.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number5.length; i += 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert7(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN12.prototype._parseBase = function _parseBase(number5, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number5.length - start;
        var mod5 = total % limbLen;
        var end = Math.min(total, total - mod5) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number5, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod5 !== 0) {
          var pow6 = 1;
          word = parseBase(number5, i, number5.length, base);
          for (i = 0; i < mod5; i++) {
            pow6 *= base;
          }
          this.imuln(pow6);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN12.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN12.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN12.prototype.clone = function clone() {
        var r = new BN12(null);
        this.copy(r);
        return r;
      };
      BN12.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN12.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN12.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN12.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN12.prototype.inspect = inspect;
        }
      } else {
        BN12.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN12.prototype.toString = function toString(base, padding5) {
        base = base || 10;
        padding5 = padding5 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert7(false, "Base should be between 2 and 36");
      };
      BN12.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert7(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN12.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer) {
        BN12.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
      BN12.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN12.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert7(byteLength <= reqLength, "byte array longer than desired length");
        assert7(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN12.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN12.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN12.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN12.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN12.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN12.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN12.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN12.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN12.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN12.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN12.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN12.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN12.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN12.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN12.prototype.ior = function ior(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN12.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN12.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN12.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN12.prototype.iand = function iand(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN12.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN12.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN12.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN12.prototype.ixor = function ixor(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN12.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN12.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN12.prototype.inotn = function inotn(width) {
        assert7(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN12.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN12.prototype.setn = function setn(bit, val) {
        assert7(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN12.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN12.prototype.add = function add5(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN12.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN12.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN12.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N5) {
        var t = new Array(N5);
        var l19 = BN12.prototype._countBits(N5) - 1;
        for (var i = 0; i < N5; i++) {
          t[i] = this.revBin(i, l19, N5);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l19, N5) {
        if (x === 0 || x === N5 - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l19; i++) {
          rb |= (x & 1) << l19 - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N5) {
        for (var i = 0; i < N5; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N5, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N5);
        for (var s = 1; s < N5; s <<= 1) {
          var l19 = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l19);
          var itwdf = Math.sin(2 * Math.PI / l19);
          for (var p = 0; p < N5; p += l19) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l19) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N5 = Math.max(m, n) | 1;
        var odd = N5 & 1;
        var i = 0;
        for (N5 = N5 / 2 | 0; N5; N5 = N5 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N5) {
        if (N5 <= 1)
          return;
        for (var i = 0; i < N5 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N5 - i - 1];
          rws[N5 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N5 - i - 1];
          iws[N5 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N5) {
        var carry = 0;
        for (var i = 0; i < N5 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N5) * 8192 + Math.round(ws[2 * i] / N5) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N5) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N5; ++i) {
          rws[i] = 0;
        }
        assert7(carry === 0);
        assert7((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N5) {
        var ph = new Array(N5);
        for (var i = 0; i < N5; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N5 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N5);
        var _ = this.stub(N5);
        var rws = new Array(N5);
        var rwst = new Array(N5);
        var iwst = new Array(N5);
        var nrws = new Array(N5);
        var nrwst = new Array(N5);
        var niwst = new Array(N5);
        var rmws = out.words;
        rmws.length = N5;
        this.convert13b(x.words, x.length, rws, N5);
        this.convert13b(y.words, y.length, nrws, N5);
        this.transform(rws, _, rwst, iwst, N5, rbt);
        this.transform(nrws, _, nrwst, niwst, N5, rbt);
        for (var i = 0; i < N5; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N5);
        this.transform(rwst, iwst, rmws, _, N5, rbt);
        this.conjugate(rmws, _, N5);
        this.normalize13b(rmws, N5);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN12.prototype.mul = function mul(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN12.prototype.mulf = function mulf(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN12.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN12.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(typeof num === "number");
        assert7(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN12.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN12.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN12.prototype.pow = function pow6(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN12(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN12.prototype.iushln = function iushln(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN12.prototype.ishln = function ishln(bits) {
        assert7(this.negative === 0);
        return this.iushln(bits);
      };
      BN12.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert7(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN12.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert7(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN12.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN12.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN12.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN12.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN12.prototype.testn = function testn(bit) {
        assert7(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN12.prototype.imaskn = function imaskn(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert7(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN12.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN12.prototype.iaddn = function iaddn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN12.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN12.prototype.isubn = function isubn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN12.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN12.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN12.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN12.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN12.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert7(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN12.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN12(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN12.prototype.divmod = function divmod(num, mode, positive) {
        assert7(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN12(0),
            mod: new BN12(0)
          };
        }
        var div, mod5, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.iadd(num);
            }
          }
          return {
            div,
            mod: mod5
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod5
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN12(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN12(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN12(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN12.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN12.prototype.mod = function mod5(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN12.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN12.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod5 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod5.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN12.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN12.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN12.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN12.prototype.egcd = function egcd(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN12(1);
        var B = new BN12(0);
        var C = new BN12(0);
        var D = new BN12(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN12.prototype._invmp = function _invmp(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN12(1);
        var x2 = new BN12(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN12.prototype.gcd = function gcd5(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN12.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN12.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN12.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN12.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN12.prototype.bincn = function bincn(bit) {
        assert7(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN12.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN12.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert7(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN12.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN12.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN12.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN12.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN12.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN12.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN12.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN12.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN12.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN12.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN12.red = function red(num) {
        return new Red(num);
      };
      BN12.prototype.toRed = function toRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        assert7(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN12.prototype.fromRed = function fromRed() {
        assert7(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN12.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN12.prototype.forceRed = function forceRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN12.prototype.redAdd = function redAdd(num) {
        assert7(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN12.prototype.redIAdd = function redIAdd(num) {
        assert7(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN12.prototype.redSub = function redSub(num) {
        assert7(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN12.prototype.redISub = function redISub(num) {
        assert7(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN12.prototype.redShl = function redShl(num) {
        assert7(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN12.prototype.redMul = function redMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN12.prototype.redIMul = function redIMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN12.prototype.redSqr = function redSqr() {
        assert7(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN12.prototype.redISqr = function redISqr() {
        assert7(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN12.prototype.redSqrt = function redSqrt() {
        assert7(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN12.prototype.redInvm = function redInvm() {
        assert7(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN12.prototype.redNeg = function redNeg() {
        assert7(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN12.prototype.redPow = function redPow(num) {
        assert7(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN12(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN12(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN12(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split5(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split5(input, output5) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output5.words[i] = input.words[i];
        }
        output5.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output5.words[output5.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN12._prime = function prime6(name) {
        if (primes[name])
          return primes[name];
        var prime7;
        if (name === "k256") {
          prime7 = new K256();
        } else if (name === "p224") {
          prime7 = new P224();
        } else if (name === "p192") {
          prime7 = new P192();
        } else if (name === "p25519") {
          prime7 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime7;
        return prime7;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime6 = BN12._prime(m);
          this.m = prime6.p;
          this.prime = prime6;
        } else {
          assert7(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert7(a.negative === 0, "red works only with positives");
        assert7(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert7((a.negative | b.negative) === 0, "red works only with positives");
        assert7(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add5(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod32 = this.m.andln(3);
        assert7(mod32 % 2 === 1);
        if (mod32 === 3) {
          var pow6 = this.m.add(new BN12(1)).iushrn(2);
          return this.pow(a, pow6);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert7(!q.isZero());
        var one = new BN12(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN12(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert7(i < m);
          var b = this.pow(c, new BN12(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow6(a, num) {
        if (num.isZero())
          return new BN12(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN12(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN12.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN12(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN12(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports);
  }
});

// node_modules/@polkadot/types-create/node_modules/bn.js/lib/bn.js
var require_bn8 = __commonJS({
  "node_modules/@polkadot/types-create/node_modules/bn.js/lib/bn.js"(exports, module2) {
    init_shim();
    (function(module3, exports2) {
      "use strict";
      function assert7(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN12(number5, base, endian) {
        if (BN12.isBN(number5)) {
          return number5;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number5 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number5 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN12;
      } else {
        exports2.BN = BN12;
      }
      BN12.BN = BN12;
      BN12.wordSize = 26;
      var Buffer;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer = window.Buffer;
        } else {
          Buffer = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN12.isBN = function isBN(num) {
        if (num instanceof BN12) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN12.wordSize && Array.isArray(num.words);
      };
      BN12.max = function max2(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN12.min = function min2(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN12.prototype._init = function init5(number5, base, endian) {
        if (typeof number5 === "number") {
          return this._initNumber(number5, base, endian);
        }
        if (typeof number5 === "object") {
          return this._initArray(number5, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert7(base === (base | 0) && base >= 2 && base <= 36);
        number5 = number5.toString().replace(/\s+/g, "");
        var start = 0;
        if (number5[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number5.length) {
          if (base === 16) {
            this._parseHex(number5, start, endian);
          } else {
            this._parseBase(number5, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN12.prototype._initNumber = function _initNumber(number5, base, endian) {
        if (number5 < 0) {
          this.negative = 1;
          number5 = -number5;
        }
        if (number5 < 67108864) {
          this.words = [number5 & 67108863];
          this.length = 1;
        } else if (number5 < 4503599627370496) {
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert7(number5 < 9007199254740992);
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN12.prototype._initArray = function _initArray(number5, base, endian) {
        assert7(typeof number5.length === "number");
        if (number5.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number5.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number5.length - 1, j = 0; i >= 0; i -= 3) {
            w = number5[i] | number5[i - 1] << 8 | number5[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number5.length; i += 3) {
            w = number5[i] | number5[i + 1] << 8 | number5[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert7(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN12.prototype._parseHex = function _parseHex(number5, start, endian) {
        this.length = Math.ceil((number5.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number5.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number5.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number5.length; i += 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert7(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN12.prototype._parseBase = function _parseBase(number5, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number5.length - start;
        var mod5 = total % limbLen;
        var end = Math.min(total, total - mod5) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number5, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod5 !== 0) {
          var pow6 = 1;
          word = parseBase(number5, i, number5.length, base);
          for (i = 0; i < mod5; i++) {
            pow6 *= base;
          }
          this.imuln(pow6);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN12.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN12.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN12.prototype.clone = function clone() {
        var r = new BN12(null);
        this.copy(r);
        return r;
      };
      BN12.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN12.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN12.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN12.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN12.prototype.inspect = inspect;
        }
      } else {
        BN12.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN12.prototype.toString = function toString(base, padding5) {
        base = base || 10;
        padding5 = padding5 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert7(false, "Base should be between 2 and 36");
      };
      BN12.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert7(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN12.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer) {
        BN12.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
      BN12.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN12.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert7(byteLength <= reqLength, "byte array longer than desired length");
        assert7(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN12.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN12.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN12.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN12.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN12.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN12.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN12.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN12.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN12.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN12.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN12.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN12.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN12.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN12.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN12.prototype.ior = function ior(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN12.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN12.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN12.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN12.prototype.iand = function iand(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN12.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN12.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN12.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN12.prototype.ixor = function ixor(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN12.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN12.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN12.prototype.inotn = function inotn(width) {
        assert7(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN12.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN12.prototype.setn = function setn(bit, val) {
        assert7(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN12.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN12.prototype.add = function add5(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN12.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN12.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN12.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N5) {
        var t = new Array(N5);
        var l19 = BN12.prototype._countBits(N5) - 1;
        for (var i = 0; i < N5; i++) {
          t[i] = this.revBin(i, l19, N5);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l19, N5) {
        if (x === 0 || x === N5 - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l19; i++) {
          rb |= (x & 1) << l19 - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N5) {
        for (var i = 0; i < N5; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N5, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N5);
        for (var s = 1; s < N5; s <<= 1) {
          var l19 = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l19);
          var itwdf = Math.sin(2 * Math.PI / l19);
          for (var p = 0; p < N5; p += l19) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l19) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N5 = Math.max(m, n) | 1;
        var odd = N5 & 1;
        var i = 0;
        for (N5 = N5 / 2 | 0; N5; N5 = N5 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N5) {
        if (N5 <= 1)
          return;
        for (var i = 0; i < N5 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N5 - i - 1];
          rws[N5 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N5 - i - 1];
          iws[N5 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N5) {
        var carry = 0;
        for (var i = 0; i < N5 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N5) * 8192 + Math.round(ws[2 * i] / N5) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N5) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N5; ++i) {
          rws[i] = 0;
        }
        assert7(carry === 0);
        assert7((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N5) {
        var ph = new Array(N5);
        for (var i = 0; i < N5; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N5 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N5);
        var _ = this.stub(N5);
        var rws = new Array(N5);
        var rwst = new Array(N5);
        var iwst = new Array(N5);
        var nrws = new Array(N5);
        var nrwst = new Array(N5);
        var niwst = new Array(N5);
        var rmws = out.words;
        rmws.length = N5;
        this.convert13b(x.words, x.length, rws, N5);
        this.convert13b(y.words, y.length, nrws, N5);
        this.transform(rws, _, rwst, iwst, N5, rbt);
        this.transform(nrws, _, nrwst, niwst, N5, rbt);
        for (var i = 0; i < N5; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N5);
        this.transform(rwst, iwst, rmws, _, N5, rbt);
        this.conjugate(rmws, _, N5);
        this.normalize13b(rmws, N5);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN12.prototype.mul = function mul(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN12.prototype.mulf = function mulf(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN12.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN12.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(typeof num === "number");
        assert7(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN12.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN12.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN12.prototype.pow = function pow6(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN12(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN12.prototype.iushln = function iushln(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN12.prototype.ishln = function ishln(bits) {
        assert7(this.negative === 0);
        return this.iushln(bits);
      };
      BN12.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert7(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN12.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert7(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN12.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN12.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN12.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN12.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN12.prototype.testn = function testn(bit) {
        assert7(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN12.prototype.imaskn = function imaskn(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert7(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN12.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN12.prototype.iaddn = function iaddn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN12.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN12.prototype.isubn = function isubn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN12.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN12.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN12.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN12.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN12.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert7(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN12.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN12(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN12.prototype.divmod = function divmod(num, mode, positive) {
        assert7(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN12(0),
            mod: new BN12(0)
          };
        }
        var div, mod5, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.iadd(num);
            }
          }
          return {
            div,
            mod: mod5
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod5
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN12(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN12(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN12(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN12.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN12.prototype.mod = function mod5(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN12.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN12.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod5 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod5.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN12.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN12.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN12.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN12.prototype.egcd = function egcd(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN12(1);
        var B = new BN12(0);
        var C = new BN12(0);
        var D = new BN12(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN12.prototype._invmp = function _invmp(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN12(1);
        var x2 = new BN12(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN12.prototype.gcd = function gcd5(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN12.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN12.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN12.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN12.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN12.prototype.bincn = function bincn(bit) {
        assert7(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN12.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN12.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert7(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN12.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN12.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN12.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN12.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN12.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN12.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN12.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN12.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN12.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN12.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN12.red = function red(num) {
        return new Red(num);
      };
      BN12.prototype.toRed = function toRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        assert7(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN12.prototype.fromRed = function fromRed() {
        assert7(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN12.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN12.prototype.forceRed = function forceRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN12.prototype.redAdd = function redAdd(num) {
        assert7(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN12.prototype.redIAdd = function redIAdd(num) {
        assert7(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN12.prototype.redSub = function redSub(num) {
        assert7(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN12.prototype.redISub = function redISub(num) {
        assert7(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN12.prototype.redShl = function redShl(num) {
        assert7(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN12.prototype.redMul = function redMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN12.prototype.redIMul = function redIMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN12.prototype.redSqr = function redSqr() {
        assert7(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN12.prototype.redISqr = function redISqr() {
        assert7(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN12.prototype.redSqrt = function redSqrt() {
        assert7(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN12.prototype.redInvm = function redInvm() {
        assert7(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN12.prototype.redNeg = function redNeg() {
        assert7(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN12.prototype.redPow = function redPow(num) {
        assert7(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN12(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN12(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN12(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split5(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split5(input, output5) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output5.words[i] = input.words[i];
        }
        output5.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output5.words[output5.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN12._prime = function prime6(name) {
        if (primes[name])
          return primes[name];
        var prime7;
        if (name === "k256") {
          prime7 = new K256();
        } else if (name === "p224") {
          prime7 = new P224();
        } else if (name === "p192") {
          prime7 = new P192();
        } else if (name === "p25519") {
          prime7 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime7;
        return prime7;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime6 = BN12._prime(m);
          this.m = prime6.p;
          this.prime = prime6;
        } else {
          assert7(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert7(a.negative === 0, "red works only with positives");
        assert7(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert7((a.negative | b.negative) === 0, "red works only with positives");
        assert7(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add5(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod32 = this.m.andln(3);
        assert7(mod32 % 2 === 1);
        if (mod32 === 3) {
          var pow6 = this.m.add(new BN12(1)).iushrn(2);
          return this.pow(a, pow6);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert7(!q.isZero());
        var one = new BN12(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN12(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert7(i < m);
          var b = this.pow(c, new BN12(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow6(a, num) {
        if (num.isZero())
          return new BN12(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN12(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN12.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN12(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN12(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports);
  }
});

// node_modules/@polkadot/types-codec/node_modules/bn.js/lib/bn.js
var require_bn9 = __commonJS({
  "node_modules/@polkadot/types-codec/node_modules/bn.js/lib/bn.js"(exports, module2) {
    init_shim();
    (function(module3, exports2) {
      "use strict";
      function assert7(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN12(number5, base, endian) {
        if (BN12.isBN(number5)) {
          return number5;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number5 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number5 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN12;
      } else {
        exports2.BN = BN12;
      }
      BN12.BN = BN12;
      BN12.wordSize = 26;
      var Buffer;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer = window.Buffer;
        } else {
          Buffer = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN12.isBN = function isBN(num) {
        if (num instanceof BN12) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN12.wordSize && Array.isArray(num.words);
      };
      BN12.max = function max2(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN12.min = function min2(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN12.prototype._init = function init5(number5, base, endian) {
        if (typeof number5 === "number") {
          return this._initNumber(number5, base, endian);
        }
        if (typeof number5 === "object") {
          return this._initArray(number5, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert7(base === (base | 0) && base >= 2 && base <= 36);
        number5 = number5.toString().replace(/\s+/g, "");
        var start = 0;
        if (number5[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number5.length) {
          if (base === 16) {
            this._parseHex(number5, start, endian);
          } else {
            this._parseBase(number5, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN12.prototype._initNumber = function _initNumber(number5, base, endian) {
        if (number5 < 0) {
          this.negative = 1;
          number5 = -number5;
        }
        if (number5 < 67108864) {
          this.words = [number5 & 67108863];
          this.length = 1;
        } else if (number5 < 4503599627370496) {
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert7(number5 < 9007199254740992);
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN12.prototype._initArray = function _initArray(number5, base, endian) {
        assert7(typeof number5.length === "number");
        if (number5.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number5.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number5.length - 1, j = 0; i >= 0; i -= 3) {
            w = number5[i] | number5[i - 1] << 8 | number5[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number5.length; i += 3) {
            w = number5[i] | number5[i + 1] << 8 | number5[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert7(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN12.prototype._parseHex = function _parseHex(number5, start, endian) {
        this.length = Math.ceil((number5.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number5.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number5.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number5.length; i += 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert7(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN12.prototype._parseBase = function _parseBase(number5, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number5.length - start;
        var mod5 = total % limbLen;
        var end = Math.min(total, total - mod5) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number5, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod5 !== 0) {
          var pow6 = 1;
          word = parseBase(number5, i, number5.length, base);
          for (i = 0; i < mod5; i++) {
            pow6 *= base;
          }
          this.imuln(pow6);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN12.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN12.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN12.prototype.clone = function clone() {
        var r = new BN12(null);
        this.copy(r);
        return r;
      };
      BN12.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN12.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN12.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN12.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN12.prototype.inspect = inspect;
        }
      } else {
        BN12.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN12.prototype.toString = function toString(base, padding5) {
        base = base || 10;
        padding5 = padding5 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert7(false, "Base should be between 2 and 36");
      };
      BN12.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert7(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN12.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer) {
        BN12.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
      BN12.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN12.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert7(byteLength <= reqLength, "byte array longer than desired length");
        assert7(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN12.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN12.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN12.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN12.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN12.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN12.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN12.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN12.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN12.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN12.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN12.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN12.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN12.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN12.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN12.prototype.ior = function ior(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN12.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN12.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN12.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN12.prototype.iand = function iand(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN12.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN12.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN12.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN12.prototype.ixor = function ixor(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN12.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN12.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN12.prototype.inotn = function inotn(width) {
        assert7(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN12.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN12.prototype.setn = function setn(bit, val) {
        assert7(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN12.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN12.prototype.add = function add5(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN12.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN12.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN12.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N5) {
        var t = new Array(N5);
        var l19 = BN12.prototype._countBits(N5) - 1;
        for (var i = 0; i < N5; i++) {
          t[i] = this.revBin(i, l19, N5);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l19, N5) {
        if (x === 0 || x === N5 - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l19; i++) {
          rb |= (x & 1) << l19 - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N5) {
        for (var i = 0; i < N5; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N5, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N5);
        for (var s = 1; s < N5; s <<= 1) {
          var l19 = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l19);
          var itwdf = Math.sin(2 * Math.PI / l19);
          for (var p = 0; p < N5; p += l19) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l19) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N5 = Math.max(m, n) | 1;
        var odd = N5 & 1;
        var i = 0;
        for (N5 = N5 / 2 | 0; N5; N5 = N5 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N5) {
        if (N5 <= 1)
          return;
        for (var i = 0; i < N5 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N5 - i - 1];
          rws[N5 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N5 - i - 1];
          iws[N5 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N5) {
        var carry = 0;
        for (var i = 0; i < N5 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N5) * 8192 + Math.round(ws[2 * i] / N5) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N5) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N5; ++i) {
          rws[i] = 0;
        }
        assert7(carry === 0);
        assert7((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N5) {
        var ph = new Array(N5);
        for (var i = 0; i < N5; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N5 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N5);
        var _ = this.stub(N5);
        var rws = new Array(N5);
        var rwst = new Array(N5);
        var iwst = new Array(N5);
        var nrws = new Array(N5);
        var nrwst = new Array(N5);
        var niwst = new Array(N5);
        var rmws = out.words;
        rmws.length = N5;
        this.convert13b(x.words, x.length, rws, N5);
        this.convert13b(y.words, y.length, nrws, N5);
        this.transform(rws, _, rwst, iwst, N5, rbt);
        this.transform(nrws, _, nrwst, niwst, N5, rbt);
        for (var i = 0; i < N5; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N5);
        this.transform(rwst, iwst, rmws, _, N5, rbt);
        this.conjugate(rmws, _, N5);
        this.normalize13b(rmws, N5);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN12.prototype.mul = function mul(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN12.prototype.mulf = function mulf(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN12.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN12.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(typeof num === "number");
        assert7(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN12.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN12.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN12.prototype.pow = function pow6(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN12(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN12.prototype.iushln = function iushln(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN12.prototype.ishln = function ishln(bits) {
        assert7(this.negative === 0);
        return this.iushln(bits);
      };
      BN12.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert7(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN12.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert7(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN12.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN12.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN12.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN12.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN12.prototype.testn = function testn(bit) {
        assert7(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN12.prototype.imaskn = function imaskn(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert7(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN12.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN12.prototype.iaddn = function iaddn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN12.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN12.prototype.isubn = function isubn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN12.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN12.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN12.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN12.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN12.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert7(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN12.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN12(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN12.prototype.divmod = function divmod(num, mode, positive) {
        assert7(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN12(0),
            mod: new BN12(0)
          };
        }
        var div, mod5, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.iadd(num);
            }
          }
          return {
            div,
            mod: mod5
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod5
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN12(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN12(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN12(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN12.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN12.prototype.mod = function mod5(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN12.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN12.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod5 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod5.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN12.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN12.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN12.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN12.prototype.egcd = function egcd(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN12(1);
        var B = new BN12(0);
        var C = new BN12(0);
        var D = new BN12(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN12.prototype._invmp = function _invmp(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN12(1);
        var x2 = new BN12(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN12.prototype.gcd = function gcd5(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN12.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN12.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN12.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN12.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN12.prototype.bincn = function bincn(bit) {
        assert7(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN12.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN12.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert7(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN12.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN12.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN12.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN12.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN12.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN12.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN12.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN12.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN12.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN12.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN12.red = function red(num) {
        return new Red(num);
      };
      BN12.prototype.toRed = function toRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        assert7(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN12.prototype.fromRed = function fromRed() {
        assert7(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN12.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN12.prototype.forceRed = function forceRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN12.prototype.redAdd = function redAdd(num) {
        assert7(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN12.prototype.redIAdd = function redIAdd(num) {
        assert7(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN12.prototype.redSub = function redSub(num) {
        assert7(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN12.prototype.redISub = function redISub(num) {
        assert7(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN12.prototype.redShl = function redShl(num) {
        assert7(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN12.prototype.redMul = function redMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN12.prototype.redIMul = function redIMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN12.prototype.redSqr = function redSqr() {
        assert7(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN12.prototype.redISqr = function redISqr() {
        assert7(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN12.prototype.redSqrt = function redSqrt() {
        assert7(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN12.prototype.redInvm = function redInvm() {
        assert7(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN12.prototype.redNeg = function redNeg() {
        assert7(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN12.prototype.redPow = function redPow(num) {
        assert7(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN12(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN12(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN12(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split5(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split5(input, output5) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output5.words[i] = input.words[i];
        }
        output5.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output5.words[output5.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN12._prime = function prime6(name) {
        if (primes[name])
          return primes[name];
        var prime7;
        if (name === "k256") {
          prime7 = new K256();
        } else if (name === "p224") {
          prime7 = new P224();
        } else if (name === "p192") {
          prime7 = new P192();
        } else if (name === "p25519") {
          prime7 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime7;
        return prime7;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime6 = BN12._prime(m);
          this.m = prime6.p;
          this.prime = prime6;
        } else {
          assert7(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert7(a.negative === 0, "red works only with positives");
        assert7(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert7((a.negative | b.negative) === 0, "red works only with positives");
        assert7(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add5(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod32 = this.m.andln(3);
        assert7(mod32 % 2 === 1);
        if (mod32 === 3) {
          var pow6 = this.m.add(new BN12(1)).iushrn(2);
          return this.pow(a, pow6);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert7(!q.isZero());
        var one = new BN12(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN12(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert7(i < m);
          var b = this.pow(c, new BN12(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow6(a, num) {
        if (num.isZero())
          return new BN12(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN12(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN12.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN12(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN12(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports);
  }
});

// node_modules/@polkadot/types-known/node_modules/bn.js/lib/bn.js
var require_bn10 = __commonJS({
  "node_modules/@polkadot/types-known/node_modules/bn.js/lib/bn.js"(exports, module2) {
    init_shim();
    (function(module3, exports2) {
      "use strict";
      function assert7(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN12(number5, base, endian) {
        if (BN12.isBN(number5)) {
          return number5;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number5 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number5 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN12;
      } else {
        exports2.BN = BN12;
      }
      BN12.BN = BN12;
      BN12.wordSize = 26;
      var Buffer;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer = window.Buffer;
        } else {
          Buffer = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN12.isBN = function isBN(num) {
        if (num instanceof BN12) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN12.wordSize && Array.isArray(num.words);
      };
      BN12.max = function max2(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN12.min = function min2(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN12.prototype._init = function init5(number5, base, endian) {
        if (typeof number5 === "number") {
          return this._initNumber(number5, base, endian);
        }
        if (typeof number5 === "object") {
          return this._initArray(number5, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert7(base === (base | 0) && base >= 2 && base <= 36);
        number5 = number5.toString().replace(/\s+/g, "");
        var start = 0;
        if (number5[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number5.length) {
          if (base === 16) {
            this._parseHex(number5, start, endian);
          } else {
            this._parseBase(number5, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN12.prototype._initNumber = function _initNumber(number5, base, endian) {
        if (number5 < 0) {
          this.negative = 1;
          number5 = -number5;
        }
        if (number5 < 67108864) {
          this.words = [number5 & 67108863];
          this.length = 1;
        } else if (number5 < 4503599627370496) {
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert7(number5 < 9007199254740992);
          this.words = [
            number5 & 67108863,
            number5 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN12.prototype._initArray = function _initArray(number5, base, endian) {
        assert7(typeof number5.length === "number");
        if (number5.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number5.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number5.length - 1, j = 0; i >= 0; i -= 3) {
            w = number5[i] | number5[i - 1] << 8 | number5[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number5.length; i += 3) {
            w = number5[i] | number5[i + 1] << 8 | number5[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert7(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN12.prototype._parseHex = function _parseHex(number5, start, endian) {
        this.length = Math.ceil((number5.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number5.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number5.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number5.length; i += 2) {
            w = parseHexByte(number5, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert7(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN12.prototype._parseBase = function _parseBase(number5, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number5.length - start;
        var mod5 = total % limbLen;
        var end = Math.min(total, total - mod5) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number5, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod5 !== 0) {
          var pow6 = 1;
          word = parseBase(number5, i, number5.length, base);
          for (i = 0; i < mod5; i++) {
            pow6 *= base;
          }
          this.imuln(pow6);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN12.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN12.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN12.prototype.clone = function clone() {
        var r = new BN12(null);
        this.copy(r);
        return r;
      };
      BN12.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN12.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN12.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN12.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN12.prototype.inspect = inspect;
        }
      } else {
        BN12.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN12.prototype.toString = function toString(base, padding5) {
        base = base || 10;
        padding5 = padding5 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding5 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert7(false, "Base should be between 2 and 36");
      };
      BN12.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert7(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN12.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer) {
        BN12.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
      BN12.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN12.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert7(byteLength <= reqLength, "byte array longer than desired length");
        assert7(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN12.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN12.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN12.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN12.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN12.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN12.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN12.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN12.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN12.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN12.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN12.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN12.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN12.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN12.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN12.prototype.ior = function ior(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN12.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN12.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN12.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN12.prototype.iand = function iand(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN12.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN12.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN12.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN12.prototype.ixor = function ixor(num) {
        assert7((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN12.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN12.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN12.prototype.inotn = function inotn(width) {
        assert7(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN12.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN12.prototype.setn = function setn(bit, val) {
        assert7(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN12.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN12.prototype.add = function add5(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN12.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN12.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN12.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N5) {
        var t = new Array(N5);
        var l19 = BN12.prototype._countBits(N5) - 1;
        for (var i = 0; i < N5; i++) {
          t[i] = this.revBin(i, l19, N5);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l19, N5) {
        if (x === 0 || x === N5 - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l19; i++) {
          rb |= (x & 1) << l19 - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N5) {
        for (var i = 0; i < N5; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N5, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N5);
        for (var s = 1; s < N5; s <<= 1) {
          var l19 = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l19);
          var itwdf = Math.sin(2 * Math.PI / l19);
          for (var p = 0; p < N5; p += l19) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l19) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N5 = Math.max(m, n) | 1;
        var odd = N5 & 1;
        var i = 0;
        for (N5 = N5 / 2 | 0; N5; N5 = N5 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N5) {
        if (N5 <= 1)
          return;
        for (var i = 0; i < N5 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N5 - i - 1];
          rws[N5 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N5 - i - 1];
          iws[N5 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N5) {
        var carry = 0;
        for (var i = 0; i < N5 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N5) * 8192 + Math.round(ws[2 * i] / N5) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N5) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N5; ++i) {
          rws[i] = 0;
        }
        assert7(carry === 0);
        assert7((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N5) {
        var ph = new Array(N5);
        for (var i = 0; i < N5; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N5 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N5);
        var _ = this.stub(N5);
        var rws = new Array(N5);
        var rwst = new Array(N5);
        var iwst = new Array(N5);
        var nrws = new Array(N5);
        var nrwst = new Array(N5);
        var niwst = new Array(N5);
        var rmws = out.words;
        rmws.length = N5;
        this.convert13b(x.words, x.length, rws, N5);
        this.convert13b(y.words, y.length, nrws, N5);
        this.transform(rws, _, rwst, iwst, N5, rbt);
        this.transform(nrws, _, nrwst, niwst, N5, rbt);
        for (var i = 0; i < N5; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N5);
        this.transform(rwst, iwst, rmws, _, N5, rbt);
        this.conjugate(rmws, _, N5);
        this.normalize13b(rmws, N5);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN12.prototype.mul = function mul(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN12.prototype.mulf = function mulf(num) {
        var out = new BN12(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN12.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN12.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(typeof num === "number");
        assert7(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN12.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN12.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN12.prototype.pow = function pow6(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN12(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN12.prototype.iushln = function iushln(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN12.prototype.ishln = function ishln(bits) {
        assert7(this.negative === 0);
        return this.iushln(bits);
      };
      BN12.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert7(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN12.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert7(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN12.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN12.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN12.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN12.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN12.prototype.testn = function testn(bit) {
        assert7(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN12.prototype.imaskn = function imaskn(bits) {
        assert7(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert7(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN12.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN12.prototype.iaddn = function iaddn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN12.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN12.prototype.isubn = function isubn(num) {
        assert7(typeof num === "number");
        assert7(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN12.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN12.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN12.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN12.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN12.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert7(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN12.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN12(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN12.prototype.divmod = function divmod(num, mode, positive) {
        assert7(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN12(0),
            mod: new BN12(0)
          };
        }
        var div, mod5, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.iadd(num);
            }
          }
          return {
            div,
            mod: mod5
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod5 = res.mod.neg();
            if (positive && mod5.negative !== 0) {
              mod5.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod5
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN12(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN12(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN12(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN12.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN12.prototype.mod = function mod5(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN12.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN12.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod5 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod5.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN12.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN12.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN12.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert7(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN12.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN12.prototype.egcd = function egcd(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN12(1);
        var B = new BN12(0);
        var C = new BN12(0);
        var D = new BN12(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN12.prototype._invmp = function _invmp(p) {
        assert7(p.negative === 0);
        assert7(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN12(1);
        var x2 = new BN12(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN12.prototype.gcd = function gcd5(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN12.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN12.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN12.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN12.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN12.prototype.bincn = function bincn(bit) {
        assert7(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN12.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN12.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert7(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN12.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN12.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN12.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN12.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN12.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN12.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN12.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN12.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN12.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN12.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN12.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN12.red = function red(num) {
        return new Red(num);
      };
      BN12.prototype.toRed = function toRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        assert7(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN12.prototype.fromRed = function fromRed() {
        assert7(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN12.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN12.prototype.forceRed = function forceRed(ctx) {
        assert7(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN12.prototype.redAdd = function redAdd(num) {
        assert7(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN12.prototype.redIAdd = function redIAdd(num) {
        assert7(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN12.prototype.redSub = function redSub(num) {
        assert7(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN12.prototype.redISub = function redISub(num) {
        assert7(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN12.prototype.redShl = function redShl(num) {
        assert7(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN12.prototype.redMul = function redMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN12.prototype.redIMul = function redIMul(num) {
        assert7(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN12.prototype.redSqr = function redSqr() {
        assert7(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN12.prototype.redISqr = function redISqr() {
        assert7(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN12.prototype.redSqrt = function redSqrt() {
        assert7(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN12.prototype.redInvm = function redInvm() {
        assert7(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN12.prototype.redNeg = function redNeg() {
        assert7(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN12.prototype.redPow = function redPow(num) {
        assert7(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN12(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN12(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN12(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split5(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split5(input, output5) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output5.words[i] = input.words[i];
        }
        output5.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output5.words[output5.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN12._prime = function prime6(name) {
        if (primes[name])
          return primes[name];
        var prime7;
        if (name === "k256") {
          prime7 = new K256();
        } else if (name === "p224") {
          prime7 = new P224();
        } else if (name === "p192") {
          prime7 = new P192();
        } else if (name === "p25519") {
          prime7 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime7;
        return prime7;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime6 = BN12._prime(m);
          this.m = prime6.p;
          this.prime = prime6;
        } else {
          assert7(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert7(a.negative === 0, "red works only with positives");
        assert7(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert7((a.negative | b.negative) === 0, "red works only with positives");
        assert7(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add5(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod32 = this.m.andln(3);
        assert7(mod32 % 2 === 1);
        if (mod32 === 3) {
          var pow6 = this.m.add(new BN12(1)).iushrn(2);
          return this.pow(a, pow6);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert7(!q.isZero());
        var one = new BN12(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN12(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert7(i < m);
          var b = this.pow(c, new BN12(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow6(a, num) {
        if (num.isZero())
          return new BN12(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN12(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN12.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN12(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN12(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports);
  }
});

// node_modules/assert/build/internal/errors.js
var require_errors = __commonJS({
  "node_modules/assert/build/internal/errors.js"(exports, module2) {
    "use strict";
    init_shim();
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var codes = {};
    var assert7;
    var util;
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = function(_Base) {
        _inherits(NodeError2, _Base);
        var _super = _createSuper(NodeError2);
        function NodeError2(arg1, arg2, arg3) {
          var _this;
          _classCallCheck(this, NodeError2);
          _this = _super.call(this, getMessage(arg1, arg2, arg3));
          _this.code = code;
          return _this;
        }
        return _createClass(NodeError2);
      }(Base);
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      if (assert7 === void 0)
        assert7 = require_assert();
      assert7(typeof name === "string", "'name' must be a string");
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith(name, " argument")) {
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(_typeof(actual));
      return msg;
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_VALUE", function(name, value) {
      var reason = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "is invalid";
      if (util === void 0)
        util = require_util();
      var inspected = util.inspect(value);
      if (inspected.length > 128) {
        inspected = "".concat(inspected.slice(0, 128), "...");
      }
      return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
    }, TypeError, RangeError);
    createErrorType("ERR_INVALID_RETURN_VALUE", function(input, name, value) {
      var type;
      if (value && value.constructor && value.constructor.name) {
        type = "instance of ".concat(value.constructor.name);
      } else {
        type = "type ".concat(_typeof(value));
      }
      return "Expected ".concat(input, ' to be returned from the "').concat(name, '"') + " function but got ".concat(type, ".");
    }, TypeError);
    createErrorType("ERR_MISSING_ARGS", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (assert7 === void 0)
        assert7 = require_assert();
      assert7(args.length > 0, "At least one arg needs to be specified");
      var msg = "The ";
      var len = args.length;
      args = args.map(function(a) {
        return '"'.concat(a, '"');
      });
      switch (len) {
        case 1:
          msg += "".concat(args[0], " argument");
          break;
        case 2:
          msg += "".concat(args[0], " and ").concat(args[1], " arguments");
          break;
        default:
          msg += args.slice(0, len - 1).join(", ");
          msg += ", and ".concat(args[len - 1], " arguments");
          break;
      }
      return "".concat(msg, " must be specified");
    }, TypeError);
    module2.exports.codes = codes;
  }
});

// node_modules/assert/build/internal/assert/assertion_error.js
var require_assertion_error = __commonJS({
  "node_modules/assert/build/internal/assert/assertion_error.js"(exports, module2) {
    "use strict";
    init_shim();
    function ownKeys(e, r) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r2) {
          return Object.getOwnPropertyDescriptor(e, r2).enumerable;
        })), t.push.apply(t, o);
      }
      return t;
    }
    function _objectSpread(e) {
      for (var r = 1; r < arguments.length; r++) {
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
          _defineProperty(e, r2, t[r2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
          Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
        });
      }
      return e;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !_isNativeFunction(Class2))
          return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2))
            return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
        return _setPrototypeOf(Wrapper, Class2);
      };
      return _wrapNativeSuper(Class);
    }
    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct.bind();
      } else {
        _construct = function _construct2(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2)
            _setPrototypeOf(instance, Class2.prototype);
          return instance;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    var _require = require_util();
    var inspect = _require.inspect;
    var _require2 = require_errors();
    var ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function repeat2(str, count2) {
      count2 = Math.floor(count2);
      if (str.length == 0 || count2 == 0)
        return "";
      var maxCount = str.length * count2;
      count2 = Math.floor(Math.log(count2) / Math.log(2));
      while (count2) {
        str += str;
        count2--;
      }
      str += str.substring(0, maxCount - str.length);
      return str;
    }
    var blue = "";
    var green = "";
    var red = "";
    var white = "";
    var kReadableOperator = {
      deepStrictEqual: "Expected values to be strictly deep-equal:",
      strictEqual: "Expected values to be strictly equal:",
      strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
      deepEqual: "Expected values to be loosely deep-equal:",
      equal: "Expected values to be loosely equal:",
      notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
      notStrictEqual: 'Expected "actual" to be strictly unequal to:',
      notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
      notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
      notEqual: 'Expected "actual" to be loosely unequal to:',
      notIdentical: "Values identical but not reference-equal:"
    };
    var kMaxShortLength = 10;
    function copyError(source) {
      var keys2 = Object.keys(source);
      var target = Object.create(Object.getPrototypeOf(source));
      keys2.forEach(function(key) {
        target[key] = source[key];
      });
      Object.defineProperty(target, "message", {
        value: source.message
      });
      return target;
    }
    function inspectValue(val) {
      return inspect(val, {
        compact: false,
        customInspect: false,
        depth: 1e3,
        maxArrayLength: Infinity,
        // Assert compares only enumerable properties (with a few exceptions).
        showHidden: false,
        // Having a long line as error is better than wrapping the line for
        // comparison for now.
        // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
        // have meta information about the inspected properties (i.e., know where
        // in what line the property starts and ends).
        breakLength: Infinity,
        // Assert does not detect proxies currently.
        showProxy: false,
        sorted: true,
        // Inspect getters as we also check them when comparing entries.
        getters: true
      });
    }
    function createErrDiff(actual, expected, operator) {
      var other = "";
      var res = "";
      var lastPos = 0;
      var end = "";
      var skipped = false;
      var actualInspected = inspectValue(actual);
      var actualLines = actualInspected.split("\n");
      var expectedLines = inspectValue(expected).split("\n");
      var i = 0;
      var indicator = "";
      if (operator === "strictEqual" && _typeof(actual) === "object" && _typeof(expected) === "object" && actual !== null && expected !== null) {
        operator = "strictEqualObject";
      }
      if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
        var inputLength = actualLines[0].length + expectedLines[0].length;
        if (inputLength <= kMaxShortLength) {
          if ((_typeof(actual) !== "object" || actual === null) && (_typeof(expected) !== "object" || expected === null) && (actual !== 0 || expected !== 0)) {
            return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
          }
        } else if (operator !== "strictEqualObject") {
          var maxLength = import_process.default.stderr && import_process.default.stderr.isTTY ? import_process.default.stderr.columns : 80;
          if (inputLength < maxLength) {
            while (actualLines[0][i] === expectedLines[0][i]) {
              i++;
            }
            if (i > 2) {
              indicator = "\n  ".concat(repeat2(" ", i), "^");
              i = 0;
            }
          }
        }
      }
      var a = actualLines[actualLines.length - 1];
      var b = expectedLines[expectedLines.length - 1];
      while (a === b) {
        if (i++ < 2) {
          end = "\n  ".concat(a).concat(end);
        } else {
          other = a;
        }
        actualLines.pop();
        expectedLines.pop();
        if (actualLines.length === 0 || expectedLines.length === 0)
          break;
        a = actualLines[actualLines.length - 1];
        b = expectedLines[expectedLines.length - 1];
      }
      var maxLines = Math.max(actualLines.length, expectedLines.length);
      if (maxLines === 0) {
        var _actualLines = actualInspected.split("\n");
        if (_actualLines.length > 30) {
          _actualLines[26] = "".concat(blue, "...").concat(white);
          while (_actualLines.length > 27) {
            _actualLines.pop();
          }
        }
        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join("\n"), "\n");
      }
      if (i > 3) {
        end = "\n".concat(blue, "...").concat(white).concat(end);
        skipped = true;
      }
      if (other !== "") {
        end = "\n  ".concat(other).concat(end);
        other = "";
      }
      var printedLines = 0;
      var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
      var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
      for (i = 0; i < maxLines; i++) {
        var cur = i - lastPos;
        if (actualLines.length < i + 1) {
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(expectedLines[i - 2]);
              printedLines++;
            }
            res += "\n  ".concat(expectedLines[i - 1]);
            printedLines++;
          }
          lastPos = i;
          other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
          printedLines++;
        } else if (expectedLines.length < i + 1) {
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(actualLines[i - 2]);
              printedLines++;
            }
            res += "\n  ".concat(actualLines[i - 1]);
            printedLines++;
          }
          lastPos = i;
          res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
          printedLines++;
        } else {
          var expectedLine = expectedLines[i];
          var actualLine = actualLines[i];
          var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ",") || actualLine.slice(0, -1) !== expectedLine);
          if (divergingLines && endsWith(expectedLine, ",") && expectedLine.slice(0, -1) === actualLine) {
            divergingLines = false;
            actualLine += ",";
          }
          if (divergingLines) {
            if (cur > 1 && i > 2) {
              if (cur > 4) {
                res += "\n".concat(blue, "...").concat(white);
                skipped = true;
              } else if (cur > 3) {
                res += "\n  ".concat(actualLines[i - 2]);
                printedLines++;
              }
              res += "\n  ".concat(actualLines[i - 1]);
              printedLines++;
            }
            lastPos = i;
            res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
            printedLines += 2;
          } else {
            res += other;
            other = "";
            if (cur === 1 || i === 0) {
              res += "\n  ".concat(actualLine);
              printedLines++;
            }
          }
        }
        if (printedLines > 20 && i < maxLines - 2) {
          return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
        }
      }
      return "".concat(msg).concat(skipped ? skippedMsg : "", "\n").concat(res).concat(other).concat(end).concat(indicator);
    }
    var AssertionError = function(_Error, _inspect$custom) {
      _inherits(AssertionError2, _Error);
      var _super = _createSuper(AssertionError2);
      function AssertionError2(options) {
        var _this;
        _classCallCheck(this, AssertionError2);
        if (_typeof(options) !== "object" || options === null) {
          throw new ERR_INVALID_ARG_TYPE("options", "Object", options);
        }
        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
        var actual = options.actual, expected = options.expected;
        var limit = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        if (message != null) {
          _this = _super.call(this, String(message));
        } else {
          if (import_process.default.stderr && import_process.default.stderr.isTTY) {
            if (import_process.default.stderr && import_process.default.stderr.getColorDepth && import_process.default.stderr.getColorDepth() !== 1) {
              blue = "\x1B[34m";
              green = "\x1B[32m";
              white = "\x1B[39m";
              red = "\x1B[31m";
            } else {
              blue = "";
              green = "";
              white = "";
              red = "";
            }
          }
          if (_typeof(actual) === "object" && actual !== null && _typeof(expected) === "object" && expected !== null && "stack" in actual && actual instanceof Error && "stack" in expected && expected instanceof Error) {
            actual = copyError(actual);
            expected = copyError(expected);
          }
          if (operator === "deepStrictEqual" || operator === "strictEqual") {
            _this = _super.call(this, createErrDiff(actual, expected, operator));
          } else if (operator === "notDeepStrictEqual" || operator === "notStrictEqual") {
            var base = kReadableOperator[operator];
            var res = inspectValue(actual).split("\n");
            if (operator === "notStrictEqual" && _typeof(actual) === "object" && actual !== null) {
              base = kReadableOperator.notStrictEqualObject;
            }
            if (res.length > 30) {
              res[26] = "".concat(blue, "...").concat(white);
              while (res.length > 27) {
                res.pop();
              }
            }
            if (res.length === 1) {
              _this = _super.call(this, "".concat(base, " ").concat(res[0]));
            } else {
              _this = _super.call(this, "".concat(base, "\n\n").concat(res.join("\n"), "\n"));
            }
          } else {
            var _res = inspectValue(actual);
            var other = "";
            var knownOperators = kReadableOperator[operator];
            if (operator === "notDeepEqual" || operator === "notEqual") {
              _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
              if (_res.length > 1024) {
                _res = "".concat(_res.slice(0, 1021), "...");
              }
            } else {
              other = "".concat(inspectValue(expected));
              if (_res.length > 512) {
                _res = "".concat(_res.slice(0, 509), "...");
              }
              if (other.length > 512) {
                other = "".concat(other.slice(0, 509), "...");
              }
              if (operator === "deepEqual" || operator === "equal") {
                _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
              } else {
                other = " ".concat(operator, " ").concat(other);
              }
            }
            _this = _super.call(this, "".concat(_res).concat(other));
          }
        }
        Error.stackTraceLimit = limit;
        _this.generatedMessage = !message;
        Object.defineProperty(_assertThisInitialized(_this), "name", {
          value: "AssertionError [ERR_ASSERTION]",
          enumerable: false,
          writable: true,
          configurable: true
        });
        _this.code = "ERR_ASSERTION";
        _this.actual = actual;
        _this.expected = expected;
        _this.operator = operator;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
        }
        _this.stack;
        _this.name = "AssertionError";
        return _possibleConstructorReturn(_this);
      }
      _createClass(AssertionError2, [{
        key: "toString",
        value: function toString() {
          return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
        }
      }, {
        key: _inspect$custom,
        value: function value(recurseTimes, ctx) {
          return inspect(this, _objectSpread(_objectSpread({}, ctx), {}, {
            customInspect: false,
            depth: 0
          }));
        }
      }]);
      return AssertionError2;
    }(_wrapNativeSuper(Error), inspect.custom);
    module2.exports = AssertionError;
  }
});

// node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/object-keys/isArguments.js"(exports, module2) {
    "use strict";
    init_shim();
    var toStr4 = Object.prototype.toString;
    module2.exports = function isArguments(value) {
      var str = toStr4.call(value);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr4.call(value.callee) === "[object Function]";
      }
      return isArgs;
    };
  }
});

// node_modules/object-keys/implementation.js
var require_implementation = __commonJS({
  "node_modules/object-keys/implementation.js"(exports, module2) {
    "use strict";
    init_shim();
    var keysShim;
    if (!Object.keys) {
      has = Object.prototype.hasOwnProperty;
      toStr4 = Object.prototype.toString;
      isArgs = require_isArguments();
      isEnumerable = Object.prototype.propertyIsEnumerable;
      hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
      hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype");
      dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
      };
      excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k in window) {
          try {
            if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") {
              try {
                equalsConstructorPrototype(window[k]);
              } catch (e) {
                return true;
              }
            }
          } catch (e) {
            return true;
          }
        }
        return false;
      }();
      equalsConstructorPrototypeIfNotBuggy = function(o) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o);
        }
        try {
          return equalsConstructorPrototype(o);
        } catch (e) {
          return false;
        }
      };
      keysShim = function keys2(object) {
        var isObject11 = object !== null && typeof object === "object";
        var isFunction13 = toStr4.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString12 = isObject11 && toStr4.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject11 && !isFunction13 && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction13;
        if (isString12 && object.length > 0 && !has.call(object, 0)) {
          for (var i = 0; i < object.length; ++i) {
            theKeys.push(String(i));
          }
        }
        if (isArguments && object.length > 0) {
          for (var j = 0; j < object.length; ++j) {
            theKeys.push(String(j));
          }
        } else {
          for (var name in object) {
            if (!(skipProto && name === "prototype") && has.call(object, name)) {
              theKeys.push(String(name));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
          for (var k = 0; k < dontEnums.length; ++k) {
            if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) {
              theKeys.push(dontEnums[k]);
            }
          }
        }
        return theKeys;
      };
    }
    var has;
    var toStr4;
    var isArgs;
    var isEnumerable;
    var hasDontEnumBug;
    var hasProtoEnumBug;
    var dontEnums;
    var equalsConstructorPrototype;
    var excludedKeys;
    var hasAutomationEqualityBug;
    var equalsConstructorPrototypeIfNotBuggy;
    module2.exports = keysShim;
  }
});

// node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "node_modules/object-keys/index.js"(exports, module2) {
    "use strict";
    init_shim();
    var slice = Array.prototype.slice;
    var isArgs = require_isArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys2(o) {
      return origKeys(o);
    } : require_implementation();
    var originalKeys = Object.keys;
    keysShim.shim = function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = function keys2(object) {
            if (isArgs(object)) {
              return originalKeys(slice.call(object));
            }
            return originalKeys(object);
          };
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    };
    module2.exports = keysShim;
  }
});

// node_modules/object.assign/implementation.js
var require_implementation2 = __commonJS({
  "node_modules/object.assign/implementation.js"(exports, module2) {
    "use strict";
    init_shim();
    var objectKeys11 = require_object_keys();
    var hasSymbols = require_shams()();
    var callBound = require_callBound();
    var toObject = Object;
    var $push = callBound("Array.prototype.push");
    var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
    var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;
    module2.exports = function assign(target, source1) {
      if (target == null) {
        throw new TypeError("target must be an object");
      }
      var to = toObject(target);
      if (arguments.length === 1) {
        return to;
      }
      for (var s = 1; s < arguments.length; ++s) {
        var from2 = toObject(arguments[s]);
        var keys2 = objectKeys11(from2);
        var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
        if (getSymbols) {
          var syms = getSymbols(from2);
          for (var j = 0; j < syms.length; ++j) {
            var key = syms[j];
            if ($propIsEnumerable(from2, key)) {
              $push(keys2, key);
            }
          }
        }
        for (var i = 0; i < keys2.length; ++i) {
          var nextKey = keys2[i];
          if ($propIsEnumerable(from2, nextKey)) {
            var propValue = from2[nextKey];
            to[nextKey] = propValue;
          }
        }
      }
      return to;
    };
  }
});

// node_modules/object.assign/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/object.assign/polyfill.js"(exports, module2) {
    "use strict";
    init_shim();
    var implementation = require_implementation2();
    var lacksProperEnumerationOrder = function() {
      if (!Object.assign) {
        return false;
      }
      var str = "abcdefghijklmnopqrst";
      var letters = str.split("");
      var map2 = {};
      for (var i = 0; i < letters.length; ++i) {
        map2[letters[i]] = letters[i];
      }
      var obj = Object.assign({}, map2);
      var actual = "";
      for (var k in obj) {
        actual += k;
      }
      return str !== actual;
    };
    var assignHasPendingExceptions = function() {
      if (!Object.assign || !Object.preventExtensions) {
        return false;
      }
      var thrower = Object.preventExtensions({ 1: 2 });
      try {
        Object.assign(thrower, "xy");
      } catch (e) {
        return thrower[1] === "y";
      }
      return false;
    };
    module2.exports = function getPolyfill() {
      if (!Object.assign) {
        return implementation;
      }
      if (lacksProperEnumerationOrder()) {
        return implementation;
      }
      if (assignHasPendingExceptions()) {
        return implementation;
      }
      return Object.assign;
    };
  }
});

// node_modules/object-is/implementation.js
var require_implementation3 = __commonJS({
  "node_modules/object-is/implementation.js"(exports, module2) {
    "use strict";
    init_shim();
    var numberIsNaN = function(value) {
      return value !== value;
    };
    module2.exports = function is(a, b) {
      if (a === 0 && b === 0) {
        return 1 / a === 1 / b;
      }
      if (a === b) {
        return true;
      }
      if (numberIsNaN(a) && numberIsNaN(b)) {
        return true;
      }
      return false;
    };
  }
});

// node_modules/object-is/polyfill.js
var require_polyfill2 = __commonJS({
  "node_modules/object-is/polyfill.js"(exports, module2) {
    "use strict";
    init_shim();
    var implementation = require_implementation3();
    module2.exports = function getPolyfill() {
      return typeof Object.is === "function" ? Object.is : implementation;
    };
  }
});

// node_modules/define-properties/index.js
var require_define_properties = __commonJS({
  "node_modules/define-properties/index.js"(exports, module2) {
    "use strict";
    init_shim();
    var keys2 = require_object_keys();
    var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    var toStr4 = Object.prototype.toString;
    var concat3 = Array.prototype.concat;
    var defineDataProperty = require_define_data_property();
    var isFunction13 = function(fn) {
      return typeof fn === "function" && toStr4.call(fn) === "[object Function]";
    };
    var supportsDescriptors = require_has_property_descriptors()();
    var defineProperty = function(object, name, value, predicate) {
      if (name in object) {
        if (predicate === true) {
          if (object[name] === value) {
            return;
          }
        } else if (!isFunction13(predicate) || !predicate()) {
          return;
        }
      }
      if (supportsDescriptors) {
        defineDataProperty(object, name, value, true);
      } else {
        defineDataProperty(object, name, value);
      }
    };
    var defineProperties = function(object, map2) {
      var predicates = arguments.length > 2 ? arguments[2] : {};
      var props = keys2(map2);
      if (hasSymbols) {
        props = concat3.call(props, Object.getOwnPropertySymbols(map2));
      }
      for (var i = 0; i < props.length; i += 1) {
        defineProperty(object, props[i], map2[props[i]], predicates[props[i]]);
      }
    };
    defineProperties.supportsDescriptors = !!supportsDescriptors;
    module2.exports = defineProperties;
  }
});

// node_modules/object-is/shim.js
var require_shim = __commonJS({
  "node_modules/object-is/shim.js"(exports, module2) {
    "use strict";
    init_shim();
    var getPolyfill = require_polyfill2();
    var define = require_define_properties();
    module2.exports = function shimObjectIs() {
      var polyfill = getPolyfill();
      define(Object, { is: polyfill }, {
        is: function testObjectIs() {
          return Object.is !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// node_modules/object-is/index.js
var require_object_is = __commonJS({
  "node_modules/object-is/index.js"(exports, module2) {
    "use strict";
    init_shim();
    var define = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation3();
    var getPolyfill = require_polyfill2();
    var shim = require_shim();
    var polyfill = callBind(getPolyfill(), Object);
    define(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = polyfill;
  }
});

// node_modules/is-nan/implementation.js
var require_implementation4 = __commonJS({
  "node_modules/is-nan/implementation.js"(exports, module2) {
    "use strict";
    init_shim();
    module2.exports = function isNaN2(value) {
      return value !== value;
    };
  }
});

// node_modules/is-nan/polyfill.js
var require_polyfill3 = __commonJS({
  "node_modules/is-nan/polyfill.js"(exports, module2) {
    "use strict";
    init_shim();
    var implementation = require_implementation4();
    module2.exports = function getPolyfill() {
      if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a")) {
        return Number.isNaN;
      }
      return implementation;
    };
  }
});

// node_modules/is-nan/shim.js
var require_shim2 = __commonJS({
  "node_modules/is-nan/shim.js"(exports, module2) {
    "use strict";
    init_shim();
    var define = require_define_properties();
    var getPolyfill = require_polyfill3();
    module2.exports = function shimNumberIsNaN() {
      var polyfill = getPolyfill();
      define(Number, { isNaN: polyfill }, {
        isNaN: function testIsNaN() {
          return Number.isNaN !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// node_modules/is-nan/index.js
var require_is_nan = __commonJS({
  "node_modules/is-nan/index.js"(exports, module2) {
    "use strict";
    init_shim();
    var callBind = require_call_bind();
    var define = require_define_properties();
    var implementation = require_implementation4();
    var getPolyfill = require_polyfill3();
    var shim = require_shim2();
    var polyfill = callBind(getPolyfill(), Number);
    define(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = polyfill;
  }
});

// node_modules/assert/build/internal/util/comparisons.js
var require_comparisons = __commonJS({
  "node_modules/assert/build/internal/util/comparisons.js"(exports, module2) {
    "use strict";
    init_shim();
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function _iterableToArrayLimit(r, l19) {
      var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (null != t) {
        var e, n, i, u, a = [], f = true, o = false;
        try {
          if (i = (t = t.call(r)).next, 0 === l19) {
            if (Object(t) !== t)
              return;
            f = false;
          } else
            for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l19); f = true)
              ;
        } catch (r2) {
          o = true, n = r2;
        } finally {
          try {
            if (!f && null != t.return && (u = t.return(), Object(u) !== u))
              return;
          } finally {
            if (o)
              throw n;
          }
        }
        return a;
      }
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    var regexFlagsSupported = /a/g.flags !== void 0;
    var arrayFromSet = function arrayFromSet2(set) {
      var array = [];
      set.forEach(function(value) {
        return array.push(value);
      });
      return array;
    };
    var arrayFromMap = function arrayFromMap2(map2) {
      var array = [];
      map2.forEach(function(value, key) {
        return array.push([key, value]);
      });
      return array;
    };
    var objectIs = Object.is ? Object.is : require_object_is();
    var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
      return [];
    };
    var numberIsNaN = Number.isNaN ? Number.isNaN : require_is_nan();
    function uncurryThis(f) {
      return f.call.bind(f);
    }
    var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
    var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
    var objectToString = uncurryThis(Object.prototype.toString);
    var _require$types = require_util().types;
    var isAnyArrayBuffer = _require$types.isAnyArrayBuffer;
    var isArrayBufferView = _require$types.isArrayBufferView;
    var isDate = _require$types.isDate;
    var isMap = _require$types.isMap;
    var isRegExp = _require$types.isRegExp;
    var isSet = _require$types.isSet;
    var isNativeError = _require$types.isNativeError;
    var isBoxedPrimitive = _require$types.isBoxedPrimitive;
    var isNumberObject = _require$types.isNumberObject;
    var isStringObject = _require$types.isStringObject;
    var isBooleanObject = _require$types.isBooleanObject;
    var isBigIntObject = _require$types.isBigIntObject;
    var isSymbolObject = _require$types.isSymbolObject;
    var isFloat32Array = _require$types.isFloat32Array;
    var isFloat64Array = _require$types.isFloat64Array;
    function isNonIndex(key) {
      if (key.length === 0 || key.length > 10)
        return true;
      for (var i = 0; i < key.length; i++) {
        var code = key.charCodeAt(i);
        if (code < 48 || code > 57)
          return true;
      }
      return key.length === 10 && key >= Math.pow(2, 32);
    }
    function getOwnNonIndexProperties(value) {
      return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
    }
    function compare(a, b) {
      if (a === b) {
        return 0;
      }
      var x = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y) {
        return -1;
      }
      if (y < x) {
        return 1;
      }
      return 0;
    }
    var ONLY_ENUMERABLE = void 0;
    var kStrict = true;
    var kLoose = false;
    var kNoIterator = 0;
    var kIsArray = 1;
    var kIsSet = 2;
    var kIsMap = 3;
    function areSimilarRegExps(a, b) {
      return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
    }
    function areSimilarFloatArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      for (var offset = 0; offset < a.byteLength; offset++) {
        if (a[offset] !== b[offset]) {
          return false;
        }
      }
      return true;
    }
    function areSimilarTypedArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
    }
    function areEqualArrayBuffers(buf1, buf2) {
      return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
    }
    function isEqualBoxedPrimitive(val1, val2) {
      if (isNumberObject(val1)) {
        return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
      }
      if (isStringObject(val1)) {
        return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
      }
      if (isBooleanObject(val1)) {
        return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
      }
      if (isBigIntObject(val1)) {
        return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
      }
      return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
    }
    function innerDeepEqual(val1, val2, strict, memos) {
      if (val1 === val2) {
        if (val1 !== 0)
          return true;
        return strict ? objectIs(val1, val2) : true;
      }
      if (strict) {
        if (_typeof(val1) !== "object") {
          return typeof val1 === "number" && numberIsNaN(val1) && numberIsNaN(val2);
        }
        if (_typeof(val2) !== "object" || val1 === null || val2 === null) {
          return false;
        }
        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
          return false;
        }
      } else {
        if (val1 === null || _typeof(val1) !== "object") {
          if (val2 === null || _typeof(val2) !== "object") {
            return val1 == val2;
          }
          return false;
        }
        if (val2 === null || _typeof(val2) !== "object") {
          return false;
        }
      }
      var val1Tag = objectToString(val1);
      var val2Tag = objectToString(val2);
      if (val1Tag !== val2Tag) {
        return false;
      }
      if (Array.isArray(val1)) {
        if (val1.length !== val2.length) {
          return false;
        }
        var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (keys1.length !== keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
      }
      if (val1Tag === "[object Object]") {
        if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
          return false;
        }
      }
      if (isDate(val1)) {
        if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
          return false;
        }
      } else if (isRegExp(val1)) {
        if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
          return false;
        }
      } else if (isNativeError(val1) || val1 instanceof Error) {
        if (val1.message !== val2.message || val1.name !== val2.name) {
          return false;
        }
      } else if (isArrayBufferView(val1)) {
        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
          if (!areSimilarFloatArrays(val1, val2)) {
            return false;
          }
        } else if (!areSimilarTypedArrays(val1, val2)) {
          return false;
        }
        var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (_keys.length !== _keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
      } else if (isSet(val1)) {
        if (!isSet(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsSet);
      } else if (isMap(val1)) {
        if (!isMap(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsMap);
      } else if (isAnyArrayBuffer(val1)) {
        if (!areEqualArrayBuffers(val1, val2)) {
          return false;
        }
      } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
        return false;
      }
      return keyCheck(val1, val2, strict, memos, kNoIterator);
    }
    function getEnumerables(val, keys2) {
      return keys2.filter(function(k) {
        return propertyIsEnumerable(val, k);
      });
    }
    function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
      if (arguments.length === 5) {
        aKeys = Object.keys(val1);
        var bKeys = Object.keys(val2);
        if (aKeys.length !== bKeys.length) {
          return false;
        }
      }
      var i = 0;
      for (; i < aKeys.length; i++) {
        if (!hasOwnProperty(val2, aKeys[i])) {
          return false;
        }
      }
      if (strict && arguments.length === 5) {
        var symbolKeysA = objectGetOwnPropertySymbols(val1);
        if (symbolKeysA.length !== 0) {
          var count2 = 0;
          for (i = 0; i < symbolKeysA.length; i++) {
            var key = symbolKeysA[i];
            if (propertyIsEnumerable(val1, key)) {
              if (!propertyIsEnumerable(val2, key)) {
                return false;
              }
              aKeys.push(key);
              count2++;
            } else if (propertyIsEnumerable(val2, key)) {
              return false;
            }
          }
          var symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count2) {
            return false;
          }
        } else {
          var _symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
            return false;
          }
        }
      }
      if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
        return true;
      }
      if (memos === void 0) {
        memos = {
          val1: /* @__PURE__ */ new Map(),
          val2: /* @__PURE__ */ new Map(),
          position: 0
        };
      } else {
        var val2MemoA = memos.val1.get(val1);
        if (val2MemoA !== void 0) {
          var val2MemoB = memos.val2.get(val2);
          if (val2MemoB !== void 0) {
            return val2MemoA === val2MemoB;
          }
        }
        memos.position++;
      }
      memos.val1.set(val1, memos.position);
      memos.val2.set(val2, memos.position);
      var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
      memos.val1.delete(val1);
      memos.val2.delete(val2);
      return areEq;
    }
    function setHasEqualElement(set, val1, strict, memo2) {
      var setValues = arrayFromSet(set);
      for (var i = 0; i < setValues.length; i++) {
        var val2 = setValues[i];
        if (innerDeepEqual(val1, val2, strict, memo2)) {
          set.delete(val2);
          return true;
        }
      }
      return false;
    }
    function findLooseMatchingPrimitives(prim) {
      switch (_typeof(prim)) {
        case "undefined":
          return null;
        case "object":
          return void 0;
        case "symbol":
          return false;
        case "string":
          prim = +prim;
        case "number":
          if (numberIsNaN(prim)) {
            return false;
          }
      }
      return true;
    }
    function setMightHaveLoosePrim(a, b, prim) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null)
        return altValue;
      return b.has(altValue) && !a.has(altValue);
    }
    function mapMightHaveLoosePrim(a, b, prim, item, memo2) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      var curB = b.get(altValue);
      if (curB === void 0 && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo2)) {
        return false;
      }
      return !a.has(altValue) && innerDeepEqual(item, curB, false, memo2);
    }
    function setEquiv(a, b, strict, memo2) {
      var set = null;
      var aValues = arrayFromSet(a);
      for (var i = 0; i < aValues.length; i++) {
        var val = aValues[i];
        if (_typeof(val) === "object" && val !== null) {
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(val);
        } else if (!b.has(val)) {
          if (strict)
            return false;
          if (!setMightHaveLoosePrim(a, b, val)) {
            return false;
          }
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(val);
        }
      }
      if (set !== null) {
        var bValues = arrayFromSet(b);
        for (var _i = 0; _i < bValues.length; _i++) {
          var _val = bValues[_i];
          if (_typeof(_val) === "object" && _val !== null) {
            if (!setHasEqualElement(set, _val, strict, memo2))
              return false;
          } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo2)) {
            return false;
          }
        }
        return set.size === 0;
      }
      return true;
    }
    function mapHasEqualEntry(set, map2, key1, item1, strict, memo2) {
      var setValues = arrayFromSet(set);
      for (var i = 0; i < setValues.length; i++) {
        var key2 = setValues[i];
        if (innerDeepEqual(key1, key2, strict, memo2) && innerDeepEqual(item1, map2.get(key2), strict, memo2)) {
          set.delete(key2);
          return true;
        }
      }
      return false;
    }
    function mapEquiv(a, b, strict, memo2) {
      var set = null;
      var aEntries = arrayFromMap(a);
      for (var i = 0; i < aEntries.length; i++) {
        var _aEntries$i = _slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
        if (_typeof(key) === "object" && key !== null) {
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(key);
        } else {
          var item2 = b.get(key);
          if (item2 === void 0 && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo2)) {
            if (strict)
              return false;
            if (!mapMightHaveLoosePrim(a, b, key, item1, memo2))
              return false;
            if (set === null) {
              set = /* @__PURE__ */ new Set();
            }
            set.add(key);
          }
        }
      }
      if (set !== null) {
        var bEntries = arrayFromMap(b);
        for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
          var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), _key = _bEntries$_i[0], item = _bEntries$_i[1];
          if (_typeof(_key) === "object" && _key !== null) {
            if (!mapHasEqualEntry(set, a, _key, item, strict, memo2))
              return false;
          } else if (!strict && (!a.has(_key) || !innerDeepEqual(a.get(_key), item, false, memo2)) && !mapHasEqualEntry(set, a, _key, item, false, memo2)) {
            return false;
          }
        }
        return set.size === 0;
      }
      return true;
    }
    function objEquiv(a, b, strict, keys2, memos, iterationType) {
      var i = 0;
      if (iterationType === kIsSet) {
        if (!setEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsMap) {
        if (!mapEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsArray) {
        for (; i < a.length; i++) {
          if (hasOwnProperty(a, i)) {
            if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
              return false;
            }
          } else if (hasOwnProperty(b, i)) {
            return false;
          } else {
            var keysA = Object.keys(a);
            for (; i < keysA.length; i++) {
              var key = keysA[i];
              if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
                return false;
              }
            }
            if (keysA.length !== Object.keys(b).length) {
              return false;
            }
            return true;
          }
        }
      }
      for (i = 0; i < keys2.length; i++) {
        var _key2 = keys2[i];
        if (!innerDeepEqual(a[_key2], b[_key2], strict, memos)) {
          return false;
        }
      }
      return true;
    }
    function isDeepEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kLoose);
    }
    function isDeepStrictEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kStrict);
    }
    module2.exports = {
      isDeepEqual,
      isDeepStrictEqual
    };
  }
});

// node_modules/assert/build/assert.js
var require_assert = __commonJS({
  "node_modules/assert/build/assert.js"(exports, module2) {
    "use strict";
    init_shim();
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var _require = require_errors();
    var _require$codes = _require.codes;
    var ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE;
    var ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var AssertionError = require_assertion_error();
    var _require2 = require_util();
    var inspect = _require2.inspect;
    var _require$types = require_util().types;
    var isPromise12 = _require$types.isPromise;
    var isRegExp = _require$types.isRegExp;
    var objectAssign = require_polyfill()();
    var objectIs = require_polyfill2()();
    var RegExpPrototypeTest = require_callBound()("RegExp.prototype.test");
    var isDeepEqual;
    var isDeepStrictEqual;
    function lazyLoadComparison() {
      var comparison = require_comparisons();
      isDeepEqual = comparison.isDeepEqual;
      isDeepStrictEqual = comparison.isDeepStrictEqual;
    }
    var warned = false;
    var assert7 = module2.exports = ok;
    var NO_EXCEPTION_SENTINEL = {};
    function innerFail(obj) {
      if (obj.message instanceof Error)
        throw obj.message;
      throw new AssertionError(obj);
    }
    function fail(actual, expected, message, operator, stackStartFn) {
      var argsLen = arguments.length;
      var internalMessage;
      if (argsLen === 0) {
        internalMessage = "Failed";
      } else if (argsLen === 1) {
        message = actual;
        actual = void 0;
      } else {
        if (warned === false) {
          warned = true;
          var warn12 = import_process.default.emitWarning ? import_process.default.emitWarning : console.warn.bind(console);
          warn12("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
        }
        if (argsLen === 2)
          operator = "!=";
      }
      if (message instanceof Error)
        throw message;
      var errArgs = {
        actual,
        expected,
        operator: operator === void 0 ? "fail" : operator,
        stackStartFn: stackStartFn || fail
      };
      if (message !== void 0) {
        errArgs.message = message;
      }
      var err = new AssertionError(errArgs);
      if (internalMessage) {
        err.message = internalMessage;
        err.generatedMessage = true;
      }
      throw err;
    }
    assert7.fail = fail;
    assert7.AssertionError = AssertionError;
    function innerOk(fn, argLen, value, message) {
      if (!value) {
        var generatedMessage = false;
        if (argLen === 0) {
          generatedMessage = true;
          message = "No value argument passed to `assert.ok()`";
        } else if (message instanceof Error) {
          throw message;
        }
        var err = new AssertionError({
          actual: value,
          expected: true,
          message,
          operator: "==",
          stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
      }
    }
    function ok() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      innerOk.apply(void 0, [ok, args.length].concat(args));
    }
    assert7.ok = ok;
    assert7.equal = function equal(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual != expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "==",
          stackStartFn: equal
        });
      }
    };
    assert7.notEqual = function notEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual == expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "!=",
          stackStartFn: notEqual
        });
      }
    };
    assert7.deepEqual = function deepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0)
        lazyLoadComparison();
      if (!isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepEqual",
          stackStartFn: deepEqual
        });
      }
    };
    assert7.notDeepEqual = function notDeepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0)
        lazyLoadComparison();
      if (isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepEqual",
          stackStartFn: notDeepEqual
        });
      }
    };
    assert7.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0)
        lazyLoadComparison();
      if (!isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepStrictEqual",
          stackStartFn: deepStrictEqual
        });
      }
    };
    assert7.notDeepStrictEqual = notDeepStrictEqual;
    function notDeepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0)
        lazyLoadComparison();
      if (isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepStrictEqual",
          stackStartFn: notDeepStrictEqual
        });
      }
    }
    assert7.strictEqual = function strictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (!objectIs(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "strictEqual",
          stackStartFn: strictEqual
        });
      }
    };
    assert7.notStrictEqual = function notStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (objectIs(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notStrictEqual",
          stackStartFn: notStrictEqual
        });
      }
    };
    var Comparison = _createClass(function Comparison2(obj, keys2, actual) {
      var _this = this;
      _classCallCheck(this, Comparison2);
      keys2.forEach(function(key) {
        if (key in obj) {
          if (actual !== void 0 && typeof actual[key] === "string" && isRegExp(obj[key]) && RegExpPrototypeTest(obj[key], actual[key])) {
            _this[key] = actual[key];
          } else {
            _this[key] = obj[key];
          }
        }
      });
    });
    function compareExceptionKey(actual, expected, key, message, keys2, fn) {
      if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
        if (!message) {
          var a = new Comparison(actual, keys2);
          var b = new Comparison(expected, keys2, actual);
          var err = new AssertionError({
            actual: a,
            expected: b,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.actual = actual;
          err.expected = expected;
          err.operator = fn.name;
          throw err;
        }
        innerFail({
          actual,
          expected,
          message,
          operator: fn.name,
          stackStartFn: fn
        });
      }
    }
    function expectedException(actual, expected, msg, fn) {
      if (typeof expected !== "function") {
        if (isRegExp(expected))
          return RegExpPrototypeTest(expected, actual);
        if (arguments.length === 2) {
          throw new ERR_INVALID_ARG_TYPE("expected", ["Function", "RegExp"], expected);
        }
        if (_typeof(actual) !== "object" || actual === null) {
          var err = new AssertionError({
            actual,
            expected,
            message: msg,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.operator = fn.name;
          throw err;
        }
        var keys2 = Object.keys(expected);
        if (expected instanceof Error) {
          keys2.push("name", "message");
        } else if (keys2.length === 0) {
          throw new ERR_INVALID_ARG_VALUE("error", expected, "may not be an empty object");
        }
        if (isDeepEqual === void 0)
          lazyLoadComparison();
        keys2.forEach(function(key) {
          if (typeof actual[key] === "string" && isRegExp(expected[key]) && RegExpPrototypeTest(expected[key], actual[key])) {
            return;
          }
          compareExceptionKey(actual, expected, key, msg, keys2, fn);
        });
        return true;
      }
      if (expected.prototype !== void 0 && actual instanceof expected) {
        return true;
      }
      if (Error.isPrototypeOf(expected)) {
        return false;
      }
      return expected.call({}, actual) === true;
    }
    function getActual(fn) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE("fn", "Function", fn);
      }
      try {
        fn();
      } catch (e) {
        return e;
      }
      return NO_EXCEPTION_SENTINEL;
    }
    function checkIsPromise(obj) {
      return isPromise12(obj) || obj !== null && _typeof(obj) === "object" && typeof obj.then === "function" && typeof obj.catch === "function";
    }
    function waitForActual(promiseFn) {
      return Promise.resolve().then(function() {
        var resultPromise;
        if (typeof promiseFn === "function") {
          resultPromise = promiseFn();
          if (!checkIsPromise(resultPromise)) {
            throw new ERR_INVALID_RETURN_VALUE("instance of Promise", "promiseFn", resultPromise);
          }
        } else if (checkIsPromise(promiseFn)) {
          resultPromise = promiseFn;
        } else {
          throw new ERR_INVALID_ARG_TYPE("promiseFn", ["Function", "Promise"], promiseFn);
        }
        return Promise.resolve().then(function() {
          return resultPromise;
        }).then(function() {
          return NO_EXCEPTION_SENTINEL;
        }).catch(function(e) {
          return e;
        });
      });
    }
    function expectsError(stackStartFn, actual, error, message) {
      if (typeof error === "string") {
        if (arguments.length === 4) {
          throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
        }
        if (_typeof(actual) === "object" && actual !== null) {
          if (actual.message === error) {
            throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error message "'.concat(actual.message, '" is identical to the message.'));
          }
        } else if (actual === error) {
          throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error "'.concat(actual, '" is identical to the message.'));
        }
        message = error;
        error = void 0;
      } else if (error != null && _typeof(error) !== "object" && typeof error !== "function") {
        throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
      }
      if (actual === NO_EXCEPTION_SENTINEL) {
        var details = "";
        if (error && error.name) {
          details += " (".concat(error.name, ")");
        }
        details += message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "rejects" ? "rejection" : "exception";
        innerFail({
          actual: void 0,
          expected: error,
          operator: stackStartFn.name,
          message: "Missing expected ".concat(fnType).concat(details),
          stackStartFn
        });
      }
      if (error && !expectedException(actual, error, message, stackStartFn)) {
        throw actual;
      }
    }
    function expectsNoError(stackStartFn, actual, error, message) {
      if (actual === NO_EXCEPTION_SENTINEL)
        return;
      if (typeof error === "string") {
        message = error;
        error = void 0;
      }
      if (!error || expectedException(actual, error)) {
        var details = message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "doesNotReject" ? "rejection" : "exception";
        innerFail({
          actual,
          expected: error,
          operator: stackStartFn.name,
          message: "Got unwanted ".concat(fnType).concat(details, "\n") + 'Actual message: "'.concat(actual && actual.message, '"'),
          stackStartFn
        });
      }
      throw actual;
    }
    assert7.throws = function throws(promiseFn) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
    };
    assert7.rejects = function rejects(promiseFn) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      return waitForActual(promiseFn).then(function(result) {
        return expectsError.apply(void 0, [rejects, result].concat(args));
      });
    };
    assert7.doesNotThrow = function doesNotThrow(fn) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
    };
    assert7.doesNotReject = function doesNotReject(fn) {
      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }
      return waitForActual(fn).then(function(result) {
        return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
      });
    };
    assert7.ifError = function ifError(err) {
      if (err !== null && err !== void 0) {
        var message = "ifError got unwanted exception: ";
        if (_typeof(err) === "object" && typeof err.message === "string") {
          if (err.message.length === 0 && err.constructor) {
            message += err.constructor.name;
          } else {
            message += err.message;
          }
        } else {
          message += inspect(err);
        }
        var newErr = new AssertionError({
          actual: err,
          expected: null,
          operator: "ifError",
          message,
          stackStartFn: ifError
        });
        var origStack = err.stack;
        if (typeof origStack === "string") {
          var tmp2 = origStack.split("\n");
          tmp2.shift();
          var tmp1 = newErr.stack.split("\n");
          for (var i = 0; i < tmp2.length; i++) {
            var pos = tmp1.indexOf(tmp2[i]);
            if (pos !== -1) {
              tmp1 = tmp1.slice(0, pos);
              break;
            }
          }
          newErr.stack = "".concat(tmp1.join("\n"), "\n").concat(tmp2.join("\n"));
        }
        throw newErr;
      }
    };
    function internalMatch(string, regexp, message, fn, fnName) {
      if (!isRegExp(regexp)) {
        throw new ERR_INVALID_ARG_TYPE("regexp", "RegExp", regexp);
      }
      var match = fnName === "match";
      if (typeof string !== "string" || RegExpPrototypeTest(regexp, string) !== match) {
        if (message instanceof Error) {
          throw message;
        }
        var generatedMessage = !message;
        message = message || (typeof string !== "string" ? 'The "string" argument must be of type string. Received type ' + "".concat(_typeof(string), " (").concat(inspect(string), ")") : (match ? "The input did not match the regular expression " : "The input was expected to not match the regular expression ") + "".concat(inspect(regexp), ". Input:\n\n").concat(inspect(string), "\n"));
        var err = new AssertionError({
          actual: string,
          expected: regexp,
          message,
          operator: fnName,
          stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
      }
    }
    assert7.match = function match(string, regexp, message) {
      internalMatch(string, regexp, message, match, "match");
    };
    assert7.doesNotMatch = function doesNotMatch(string, regexp, message) {
      internalMatch(string, regexp, message, doesNotMatch, "doesNotMatch");
    };
    function strict() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      innerOk.apply(void 0, [strict, args.length].concat(args));
    }
    assert7.strict = objectAssign(strict, assert7, {
      equal: assert7.strictEqual,
      deepEqual: assert7.deepStrictEqual,
      notEqual: assert7.notStrictEqual,
      notDeepEqual: assert7.notDeepStrictEqual
    });
    assert7.strict.strict = assert7.strict;
  }
});

// node_modules/@gear-js/api/index.js
init_shim();

// node_modules/@polkadot/api-augment/index.js
init_shim();

// node_modules/@polkadot/api-augment/detectPackage.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/detectPackage.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/detectOther.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/x-textdecoder/browser.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/x-textdecoder/fallback.js
init_shim();
var TextDecoder2 = class {
  constructor(encoding) {
    __publicField(this, "__encoding");
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count2 = value.length; i < count2; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/api-augment/node_modules/@polkadot/x-textdecoder/packageInfo.js
init_shim();
var packageInfo3 = { name: "@polkadot/x-textdecoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/api-augment/node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder3 = extractGlobal("TextDecoder", TextDecoder2);

// node_modules/@polkadot/api-augment/node_modules/@polkadot/x-textencoder/browser.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/x-textencoder/fallback.js
init_shim();
var TextEncoder2 = class {
  encode(value) {
    const count2 = value.length;
    const u8a9 = new Uint8Array(count2);
    for (let i = 0; i < count2; i++) {
      u8a9[i] = value.charCodeAt(i);
    }
    return u8a9;
  }
};

// node_modules/@polkadot/api-augment/node_modules/@polkadot/x-textencoder/packageInfo.js
init_shim();
var packageInfo4 = { name: "@polkadot/x-textencoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/api-augment/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder3 = extractGlobal("TextEncoder", TextEncoder2);

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/detectOther.js
var detectOther_default = [packageInfo3, packageInfo4];

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/packageInfo.js
init_shim();
var packageInfo5 = { name: "@polkadot/util", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/versionDetect.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/function.js
init_shim();
function isFunction2(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/versionDetect.js
var DEDUPE = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
var POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG = "POLKADOTJS_DISABLE_ESM_CJS_WARNING";
function getEntry(name) {
  const _global = xglobal;
  if (!_global.__polkadotjs) {
    _global.__polkadotjs = {};
  }
  if (!_global.__polkadotjs[name]) {
    _global.__polkadotjs[name] = [];
  }
  return _global.__polkadotjs[name];
}
function formatDisplay(all3, fmt) {
  let max2 = 0;
  for (let i = 0, count2 = all3.length; i < count2; i++) {
    max2 = Math.max(max2, all3[i].version.length);
  }
  return all3.map((d) => `	${fmt(d.version.padEnd(max2), d).join("	")}`).join("\n");
}
function formatInfo(version, { name }) {
  return [
    version,
    name
  ];
}
function formatVersion(version, { path, type }) {
  let extracted;
  if (path && path.length >= 5) {
    const nmIndex = path.indexOf("node_modules");
    extracted = nmIndex === -1 ? path : path.substring(nmIndex);
  } else {
    extracted = "<unknown>";
  }
  return [
    `${`${type || ""}`.padStart(3)} ${version}`,
    extracted
  ];
}
function getPath(infoPath, pathOrFn) {
  if (infoPath) {
    return infoPath;
  } else if (isFunction2(pathOrFn)) {
    try {
      return pathOrFn() || "";
    } catch {
      return "";
    }
  }
  return pathOrFn || "";
}
function warn(pre, all3, fmt) {
  console.warn(`${pre}
${DEDUPE}
${formatDisplay(all3, fmt)}`);
}
function detectPackage2({ name, path, type, version }, pathOrFn, deps = []) {
  var _a, _b;
  if (!name.startsWith("@polkadot")) {
    throw new Error(`Invalid package descriptor ${name}`);
  }
  const entry = getEntry(name);
  entry.push({ path: getPath(path, pathOrFn), type, version });
  const entriesSameVersion = entry.every((e) => e.version === version);
  const esmCjsWarningDisabled = ((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG]) === "1";
  const multipleEntries = entry.length !== 1;
  const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;
  if (multipleEntries && !disableWarnings) {
    warn(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion);
  } else {
    const mismatches = deps.filter((d) => d && d.version !== version);
    if (mismatches.length) {
      warn(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo);
    }
  }
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/detectPackage.js
detectPackage2(packageInfo5, null, detectOther_default);

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bundle.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/array/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/array/chunk.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/array/filter.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/array/flatten.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/array/range.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/array/shuffle.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/array/unzip.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/array/zip.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/assert.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bi/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bi/min.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bi/helpers.js
init_shim();
function createCmp(cmp) {
  return (...items) => {
    const count2 = items.length;
    if (count2 === 0) {
      throw new Error("Must provide one or more arguments");
    }
    let result = items[0];
    for (let i = 1; i < count2; i++) {
      if (cmp(items[i], result)) {
        result = items[i];
      }
    }
    return result;
  };
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bi/min.js
var nMax = createCmp((a, b) => a > b);
var nMin = createCmp((a, b) => a < b);

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bi/sqrt.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bi/consts.js
init_shim();
var _0n2 = BigInt2(0);
var _1n2 = BigInt2(1);
var _2n = BigInt2(2);
var _3n = BigInt2(3);
var _4n = BigInt2(4);
var _5n = BigInt2(5);
var _6n = BigInt2(6);
var _7n = BigInt2(7);
var _8n = BigInt2(8);
var _9n = BigInt2(9);
var _10n = BigInt2(10);
var _100n = BigInt2(100);
var _1000n = BigInt2(1e3);
var _1Mn = BigInt2(1e6);
var _1Bn = BigInt2(1e9);
var _1Qn = _1Bn * _1Bn;
var _2pow53n = BigInt2(Number.MAX_SAFE_INTEGER);
var _sqrt2pow53n = BigInt2(94906265);

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bi/toBigInt.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/hex/toBigInt.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/toBigInt.js
init_shim();
var U8_MAX = BigInt2(256);
var U16_MAX = BigInt2(256 * 256);
var U64_MAX = BigInt2("0x10000000000000000");

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/hex/toU8a.js
init_shim();
var CHR = "0123456789abcdef";
var U8 = new Uint8Array(256);
var U16 = new Uint8Array(256 * 256);
for (let i = 0, count2 = CHR.length; i < count2; i++) {
  U8[CHR[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U8[CHR[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U16[s | j] = U8[i] << 4 | U8[j];
  }
}
function hexToU8a2(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U16[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/bn.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bn/bn.js
init_shim();
var import_bn2 = __toESM(require_bn(), 1);

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/hex.js
init_shim();
var REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
function isHex2(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/toBigInt.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/helpers.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/object.js
init_shim();
function isObject(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/helpers.js
function isOn(...fns) {
  return (value) => (isObject(value) || isFunction2(value)) && fns.every((f) => isFunction2(value[f]));
}
function isOnFunction(...fns) {
  return (value) => isFunction2(value) && fns.every((f) => isFunction2(value[f]));
}
function isOnObject(...fns) {
  return (value) => isObject(value) && fns.every((f) => isFunction2(value[f]));
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt = isOn("toBigInt");

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/toBn.js
init_shim();
var isToBn = isOn("toBn");

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bi/toHex.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/cmp.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/toU8a.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/buffer.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/has.js
init_shim();
var hasBigInt2 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess = typeof xglobal.process === "object";

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/buffer.js
function isBuffer(value) {
  return hasBuffer && !!value && isFunction2(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/u8a.js
init_shim();
function isU8a2(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/string/toU8a.js
init_shim();
var encoder = new TextEncoder3();
function stringToU8a2(value) {
  return value ? encoder.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a2(value) {
  return isU8a2(value) ? isBuffer(value) ? new Uint8Array(value) : value : isHex2(value) ? hexToU8a2(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a2(value);
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/concat.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/empty.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/eq.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/fixLength.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/sorted.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/toBn.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/toBuffer.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/toFloat.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/toHex.js
init_shim();
var U82 = new Array(256);
var U162 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U82[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U162[s | j] = U82[i] + U82[j];
  }
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/toNumber.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/toString.js
init_shim();
var decoder = new TextDecoder3("utf-8");

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/u8a/wrap.js
init_shim();
var U8A_WRAP_ETHEREUM = u8aToU8a2("Ethereum Signed Message:\n");
var U8A_WRAP_PREFIX = u8aToU8a2("<Bytes>");
var U8A_WRAP_POSTFIX = u8aToU8a2("</Bytes>");
var WRAP_LEN = U8A_WRAP_PREFIX.length + U8A_WRAP_POSTFIX.length;

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bi/toU8a.js
init_shim();
var DIV = BigInt2(256);
var NEG_MASK = BigInt2(255);

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bn/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bn/fromHex.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/hex/toBn.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/hex/stripPrefix.js
init_shim();
function hexStripPrefix(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/hex/toBn.js
function hexToBn(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn2.default(0);
  }
  const stripped = hexStripPrefix(value);
  const bn = new import_bn2.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bn/min.js
init_shim();
var bnMax = createCmp((a, b) => a.gt(b));
var bnMin = createCmp((a, b) => a.lt(b));

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bn/sqrt.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bn/consts.js
init_shim();
var BN_ZERO = new import_bn2.default(0);
var BN_ONE = new import_bn2.default(1);
var BN_TWO = new import_bn2.default(2);
var BN_THREE = new import_bn2.default(3);
var BN_FOUR = new import_bn2.default(4);
var BN_FIVE = new import_bn2.default(5);
var BN_SIX = new import_bn2.default(6);
var BN_SEVEN = new import_bn2.default(7);
var BN_EIGHT = new import_bn2.default(8);
var BN_NINE = new import_bn2.default(9);
var BN_TEN = new import_bn2.default(10);
var BN_HUNDRED = new import_bn2.default(100);
var BN_THOUSAND = new import_bn2.default(1e3);
var BN_MILLION = new import_bn2.default(1e6);
var BN_BILLION = new import_bn2.default(1e9);
var BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
var BN_MAX_INTEGER = new import_bn2.default(Number.MAX_SAFE_INTEGER);
var BN_SQRT_MAX_INTEGER = new import_bn2.default(94906265);

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bn/toBn.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/bigInt.js
init_shim();
function isBigInt(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bn/toBn.js
function bnToBn(value) {
  return value ? import_bn2.default.isBN(value) ? value : isHex2(value) ? hexToBn(value.toString()) : isBigInt(value) ? new import_bn2.default(value.toString()) : isToBn(value) ? value.toBn() : isToBigInt(value) ? new import_bn2.default(value.toBigInt().toString()) : new import_bn2.default(value) : new import_bn2.default(0);
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bn/toHex.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/bn/toU8a.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/buffer/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/buffer/toU8a.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/compact/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/compact/addLength.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/compact/toU8a.js
init_shim();
var MAX_U8 = BN_TWO.pow(new import_bn2.default(8 - 2)).isub(BN_ONE);
var MAX_U16 = BN_TWO.pow(new import_bn2.default(16 - 2)).isub(BN_ONE);
var MAX_U32 = BN_TWO.pow(new import_bn2.default(32 - 2)).isub(BN_ONE);

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/compact/fromU8a.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/compact/stripLength.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/extractTime.js
init_shim();
var MIN_MS = 60 * 1e3;
var HR_MS = MIN_MS * 60;
var DAY_MS = HR_MS * 24;

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/float/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/float/toU8a.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/format/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/format/formatBalance.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/boolean.js
init_shim();
function isBoolean(value) {
  return typeof value === "boolean";
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/format/formatDecimal.js
init_shim();
var NUMBER_REGEX = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/format/getSeparator.js
init_shim();
function getSeparator(locale) {
  return {
    decimal: 0.1.toLocaleString(locale).substring(1, 2),
    thousand: 1e3.toLocaleString(locale).substring(1, 2)
  };
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/format/si.js
init_shim();
var SI_MID = 8;
var SI = [
  { power: -24, text: "yocto", value: "y" },
  { power: -21, text: "zepto", value: "z" },
  { power: -18, text: "atto", value: "a" },
  { power: -15, text: "femto", value: "f" },
  { power: -12, text: "pico", value: "p" },
  { power: -9, text: "nano", value: "n" },
  { power: -6, text: "micro", value: "µ" },
  { power: -3, text: "milli", value: "m" },
  { power: 0, text: "Unit", value: "-" },
  { power: 3, text: "Kilo", value: "k" },
  { power: 6, text: "Mill", value: "M" },
  { power: 9, text: "Bill", value: "B" },
  { power: 12, text: "Tril", value: "T" },
  { power: 15, text: "Peta", value: "P" },
  { power: 18, text: "Exa", value: "E" },
  { power: 21, text: "Zeta", value: "Z" },
  { power: 24, text: "Yotta", value: "Y" }
];
function findSi(type) {
  for (let i = 0, count2 = SI.length; i < count2; i++) {
    if (SI[i].value === type) {
      return SI[i];
    }
  }
  return SI[SI_MID];
}
function calcSi(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi(forceUnit);
  }
  const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);
  return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
}

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/format/formatBalance.js
var DEFAULT_DECIMALS = 0;
var DEFAULT_UNIT = SI[SI_MID].text;
var defaultDecimals = DEFAULT_DECIMALS;
var defaultUnit = DEFAULT_UNIT;
function _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text = bnToBn(input).toString();
  if (text.length === 0 || text === "0") {
    return "0";
  }
  let sign2 = "";
  if (text[0].startsWith("-")) {
    sign2 = "-";
    text = text.substring(1);
  }
  const si = calcSi(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text.substring(0, mid);
  let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean(withUnit) ? SI[SI_MID].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator(locale);
  return `${sign2}${formatDecimal(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
var formatBalance = _formatBalance;
formatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals);
formatBalance.findSi = findSi;
formatBalance.getDefaults = () => {
  return {
    decimals: defaultDecimals,
    unit: defaultUnit
  };
};
formatBalance.getOptions = (decimals = defaultDecimals) => {
  return SI.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
};
formatBalance.setDefaults = ({ decimals, unit }) => {
  defaultDecimals = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals;
  defaultUnit = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit;
  SI[SI_MID].text = defaultUnit;
};

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/format/formatDate.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/format/formatElapsed.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/format/formatNumber.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/hex/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/hex/addPrefix.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/hex/hasPrefix.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/hex/fixLength.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/hex/toNumber.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/hex/toString.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/array.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/ascii.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/string.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/childClass.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/class.js
init_shim();
var isClass = isOnFunction("isPrototypeOf", "hasOwnProperty");

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/codec.js
init_shim();
var checkCodec = isOnObject("toHex", "toHuman", "toU8a");
var checkRegistry = isOnObject("get");

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/compact.js
init_shim();
var isCompact = isOnObject("toBigInt", "toBn", "toNumber", "unwrap");

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/error.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/instanceOf.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/ip.js
init_shim();
var v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
var v6s = "[a-fA-F\\d]{1,4}";
var v6 = `
(?:
(?:${v6s}:){7}(?:${v6s}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6s}:){6}(?:${v4}|:${v6s}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6s}:){5}(?::${v4}|(?::${v6s}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6s}:){4}(?:(?::${v6s}){0,1}:${v4}|(?::${v6s}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6s}:){3}(?:(?::${v6s}){0,2}:${v4}|(?::${v6s}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6s}:){2}(?:(?::${v6s}){0,3}:${v4}|(?::${v6s}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6s}:){1}(?:(?::${v6s}){0,4}:${v4}|(?::${v6s}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6s}){0,5}:${v4}|(?::${v6s}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
var v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);
var v4exact = new RegExp(`^${v4}$`);
var v6exact = new RegExp(`^${v6}$`);

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/jsonObject.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/stringify.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/null.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/number.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/observable.js
init_shim();
var isObservable = isOn("next");

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/promise.js
init_shim();
var isPromise = isOnObject("catch", "then");

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/riscv.js
init_shim();
var ELF_MAGIC = new Uint8Array([127, 69, 76, 70]);
var PVM_MAGIC = new Uint8Array([80, 86, 77, 0]);

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/testChain.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/undefined.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/utf8.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/is/wasm.js
init_shim();
var WASM_MAGIC = new Uint8Array([0, 97, 115, 109]);

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/lazy.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/logger.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/noop.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/memoize.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/nextTick.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/number/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/number/toHex.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/number/toU8a.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/object/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/object/clear.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/object/copy.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/object/spread.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/object/entries.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/object/keys.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/object/property.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/object/values.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/promisify.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/string/index.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/string/camelCase.js
init_shim();
var CC_TO_UP = new Array(256);
var CC_TO_LO = new Array(256);
for (let i = 0, count2 = CC_TO_UP.length; i < count2; i++) {
  CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];
}
function converter(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count2 = parts.length; i < count2; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps), i);
    }
    return result;
  };
}
var stringCamelCase2 = converter((w, i) => (i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));
var stringPascalCase = converter((w) => CC_TO_UP[w.charCodeAt(0)] + w.slice(1));

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/string/lowerFirst.js
init_shim();
function converter2(map2) {
  return (value) => value ? map2[value.charCodeAt(0)] + value.slice(1) : "";
}
var stringLowerFirst = converter2(CC_TO_LO);
var stringUpperFirst = converter2(CC_TO_UP);

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/string/shorten.js
init_shim();

// node_modules/@polkadot/api-augment/node_modules/@polkadot/util/string/toHex.js
init_shim();

// node_modules/@polkadot/api-augment/detectOther.js
init_shim();

// node_modules/@polkadot/api-base/packageInfo.js
init_shim();
var packageInfo6 = { name: "@polkadot/api-base", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.10.1" };

// node_modules/@polkadot/types/packageInfo.js
init_shim();
var packageInfo7 = { name: "@polkadot/types", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.10.1" };

// node_modules/@polkadot/types-codec/packageInfo.js
init_shim();
var packageInfo8 = { name: "@polkadot/types-codec", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.10.1" };

// node_modules/@polkadot/api-augment/detectOther.js
var detectOther_default2 = [packageInfo6, packageInfo7, packageInfo8];

// node_modules/@polkadot/api-augment/packageInfo.js
init_shim();
var packageInfo9 = { name: "@polkadot/api-augment", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.10.1" };

// node_modules/@polkadot/api-augment/detectPackage.js
detectPackage2(packageInfo9, null, detectOther_default2);

// node_modules/@polkadot/api-augment/bundle.js
init_shim();

// node_modules/@polkadot/api-augment/substrate/index.js
init_shim();

// node_modules/@polkadot/api-augment/base.js
init_shim();

// node_modules/@polkadot/rpc-augment/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/detectPackage.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/detectPackage.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/detectOther.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/x-textdecoder/browser.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/x-textdecoder/fallback.js
init_shim();
var TextDecoder4 = class {
  constructor(encoding) {
    __publicField(this, "__encoding");
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count2 = value.length; i < count2; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/x-textdecoder/packageInfo.js
init_shim();
var packageInfo10 = { name: "@polkadot/x-textdecoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder5 = extractGlobal("TextDecoder", TextDecoder4);

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/x-textencoder/browser.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/x-textencoder/fallback.js
init_shim();
var TextEncoder4 = class {
  encode(value) {
    const count2 = value.length;
    const u8a9 = new Uint8Array(count2);
    for (let i = 0; i < count2; i++) {
      u8a9[i] = value.charCodeAt(i);
    }
    return u8a9;
  }
};

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/x-textencoder/packageInfo.js
init_shim();
var packageInfo11 = { name: "@polkadot/x-textencoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder5 = extractGlobal("TextEncoder", TextEncoder4);

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/detectOther.js
var detectOther_default3 = [packageInfo10, packageInfo11];

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/packageInfo.js
init_shim();
var packageInfo12 = { name: "@polkadot/util", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/versionDetect.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/function.js
init_shim();
function isFunction3(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/versionDetect.js
var DEDUPE2 = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
var POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG2 = "POLKADOTJS_DISABLE_ESM_CJS_WARNING";
function getEntry2(name) {
  const _global = xglobal;
  if (!_global.__polkadotjs) {
    _global.__polkadotjs = {};
  }
  if (!_global.__polkadotjs[name]) {
    _global.__polkadotjs[name] = [];
  }
  return _global.__polkadotjs[name];
}
function formatDisplay2(all3, fmt) {
  let max2 = 0;
  for (let i = 0, count2 = all3.length; i < count2; i++) {
    max2 = Math.max(max2, all3[i].version.length);
  }
  return all3.map((d) => `	${fmt(d.version.padEnd(max2), d).join("	")}`).join("\n");
}
function formatInfo2(version, { name }) {
  return [
    version,
    name
  ];
}
function formatVersion2(version, { path, type }) {
  let extracted;
  if (path && path.length >= 5) {
    const nmIndex = path.indexOf("node_modules");
    extracted = nmIndex === -1 ? path : path.substring(nmIndex);
  } else {
    extracted = "<unknown>";
  }
  return [
    `${`${type || ""}`.padStart(3)} ${version}`,
    extracted
  ];
}
function getPath2(infoPath, pathOrFn) {
  if (infoPath) {
    return infoPath;
  } else if (isFunction3(pathOrFn)) {
    try {
      return pathOrFn() || "";
    } catch {
      return "";
    }
  }
  return pathOrFn || "";
}
function warn2(pre, all3, fmt) {
  console.warn(`${pre}
${DEDUPE2}
${formatDisplay2(all3, fmt)}`);
}
function detectPackage3({ name, path, type, version }, pathOrFn, deps = []) {
  var _a, _b;
  if (!name.startsWith("@polkadot")) {
    throw new Error(`Invalid package descriptor ${name}`);
  }
  const entry = getEntry2(name);
  entry.push({ path: getPath2(path, pathOrFn), type, version });
  const entriesSameVersion = entry.every((e) => e.version === version);
  const esmCjsWarningDisabled = ((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG2]) === "1";
  const multipleEntries = entry.length !== 1;
  const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;
  if (multipleEntries && !disableWarnings) {
    warn2(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion2);
  } else {
    const mismatches = deps.filter((d) => d && d.version !== version);
    if (mismatches.length) {
      warn2(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo2);
    }
  }
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/detectPackage.js
detectPackage3(packageInfo12, null, detectOther_default3);

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bundle.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/array/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/array/chunk.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/array/filter.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/array/flatten.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/array/range.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/array/shuffle.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/array/unzip.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/array/zip.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/assert.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bi/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bi/min.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bi/helpers.js
init_shim();
function createCmp2(cmp) {
  return (...items) => {
    const count2 = items.length;
    if (count2 === 0) {
      throw new Error("Must provide one or more arguments");
    }
    let result = items[0];
    for (let i = 1; i < count2; i++) {
      if (cmp(items[i], result)) {
        result = items[i];
      }
    }
    return result;
  };
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bi/min.js
var nMax2 = createCmp2((a, b) => a > b);
var nMin2 = createCmp2((a, b) => a < b);

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bi/sqrt.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bi/consts.js
init_shim();
var _0n3 = BigInt2(0);
var _1n3 = BigInt2(1);
var _2n2 = BigInt2(2);
var _3n2 = BigInt2(3);
var _4n2 = BigInt2(4);
var _5n2 = BigInt2(5);
var _6n2 = BigInt2(6);
var _7n2 = BigInt2(7);
var _8n2 = BigInt2(8);
var _9n2 = BigInt2(9);
var _10n2 = BigInt2(10);
var _100n2 = BigInt2(100);
var _1000n2 = BigInt2(1e3);
var _1Mn2 = BigInt2(1e6);
var _1Bn2 = BigInt2(1e9);
var _1Qn2 = _1Bn2 * _1Bn2;
var _2pow53n2 = BigInt2(Number.MAX_SAFE_INTEGER);
var _sqrt2pow53n2 = BigInt2(94906265);

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bi/toBigInt.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/hex/toBigInt.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/toBigInt.js
init_shim();
var U8_MAX2 = BigInt2(256);
var U16_MAX2 = BigInt2(256 * 256);
var U64_MAX2 = BigInt2("0x10000000000000000");

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/hex/toU8a.js
init_shim();
var CHR2 = "0123456789abcdef";
var U83 = new Uint8Array(256);
var U163 = new Uint8Array(256 * 256);
for (let i = 0, count2 = CHR2.length; i < count2; i++) {
  U83[CHR2[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U83[CHR2[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U163[s | j] = U83[i] << 4 | U83[j];
  }
}
function hexToU8a3(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U163[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/bn.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bn/bn.js
init_shim();
var import_bn15 = __toESM(require_bn2(), 1);

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/hex.js
init_shim();
var REGEX_HEX_PREFIXED2 = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX2 = /^[\da-fA-F]+$/;
function isHex3(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED2.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/toBigInt.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/helpers.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/object.js
init_shim();
function isObject2(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/helpers.js
function isOn2(...fns) {
  return (value) => (isObject2(value) || isFunction3(value)) && fns.every((f) => isFunction3(value[f]));
}
function isOnFunction2(...fns) {
  return (value) => isFunction3(value) && fns.every((f) => isFunction3(value[f]));
}
function isOnObject2(...fns) {
  return (value) => isObject2(value) && fns.every((f) => isFunction3(value[f]));
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt2 = isOn2("toBigInt");

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/toBn.js
init_shim();
var isToBn2 = isOn2("toBn");

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bi/toHex.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/cmp.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/toU8a.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/buffer.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/has.js
init_shim();
var hasBigInt3 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer2 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess2 = typeof xglobal.process === "object";

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/buffer.js
function isBuffer2(value) {
  return hasBuffer2 && !!value && isFunction3(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/u8a.js
init_shim();
function isU8a3(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/string/toU8a.js
init_shim();
var encoder2 = new TextEncoder5();
function stringToU8a3(value) {
  return value ? encoder2.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a3(value) {
  return isU8a3(value) ? isBuffer2(value) ? new Uint8Array(value) : value : isHex3(value) ? hexToU8a3(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a3(value);
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/concat.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/empty.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/eq.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/fixLength.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/sorted.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/toBn.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/toBuffer.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/toFloat.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/toHex.js
init_shim();
var U84 = new Array(256);
var U164 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U84[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U164[s | j] = U84[i] + U84[j];
  }
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/toNumber.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/toString.js
init_shim();
var decoder2 = new TextDecoder5("utf-8");

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/u8a/wrap.js
init_shim();
var U8A_WRAP_ETHEREUM2 = u8aToU8a3("Ethereum Signed Message:\n");
var U8A_WRAP_PREFIX2 = u8aToU8a3("<Bytes>");
var U8A_WRAP_POSTFIX2 = u8aToU8a3("</Bytes>");
var WRAP_LEN2 = U8A_WRAP_PREFIX2.length + U8A_WRAP_POSTFIX2.length;

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bi/toU8a.js
init_shim();
var DIV2 = BigInt2(256);
var NEG_MASK2 = BigInt2(255);

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bn/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bn/fromHex.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/hex/toBn.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/hex/stripPrefix.js
init_shim();
function hexStripPrefix2(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED2.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX2.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/hex/toBn.js
function hexToBn2(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn15.default(0);
  }
  const stripped = hexStripPrefix2(value);
  const bn = new import_bn15.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bn/min.js
init_shim();
var bnMax2 = createCmp2((a, b) => a.gt(b));
var bnMin2 = createCmp2((a, b) => a.lt(b));

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bn/sqrt.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bn/consts.js
init_shim();
var BN_ZERO2 = new import_bn15.default(0);
var BN_ONE2 = new import_bn15.default(1);
var BN_TWO2 = new import_bn15.default(2);
var BN_THREE2 = new import_bn15.default(3);
var BN_FOUR2 = new import_bn15.default(4);
var BN_FIVE2 = new import_bn15.default(5);
var BN_SIX2 = new import_bn15.default(6);
var BN_SEVEN2 = new import_bn15.default(7);
var BN_EIGHT2 = new import_bn15.default(8);
var BN_NINE2 = new import_bn15.default(9);
var BN_TEN2 = new import_bn15.default(10);
var BN_HUNDRED2 = new import_bn15.default(100);
var BN_THOUSAND2 = new import_bn15.default(1e3);
var BN_MILLION2 = new import_bn15.default(1e6);
var BN_BILLION2 = new import_bn15.default(1e9);
var BN_QUINTILL2 = BN_BILLION2.mul(BN_BILLION2);
var BN_MAX_INTEGER2 = new import_bn15.default(Number.MAX_SAFE_INTEGER);
var BN_SQRT_MAX_INTEGER2 = new import_bn15.default(94906265);

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bn/toBn.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/bigInt.js
init_shim();
function isBigInt2(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bn/toBn.js
function bnToBn2(value) {
  return value ? import_bn15.default.isBN(value) ? value : isHex3(value) ? hexToBn2(value.toString()) : isBigInt2(value) ? new import_bn15.default(value.toString()) : isToBn2(value) ? value.toBn() : isToBigInt2(value) ? new import_bn15.default(value.toBigInt().toString()) : new import_bn15.default(value) : new import_bn15.default(0);
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bn/toHex.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/bn/toU8a.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/buffer/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/buffer/toU8a.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/compact/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/compact/addLength.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/compact/toU8a.js
init_shim();
var MAX_U82 = BN_TWO2.pow(new import_bn15.default(8 - 2)).isub(BN_ONE2);
var MAX_U162 = BN_TWO2.pow(new import_bn15.default(16 - 2)).isub(BN_ONE2);
var MAX_U322 = BN_TWO2.pow(new import_bn15.default(32 - 2)).isub(BN_ONE2);

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/compact/fromU8a.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/compact/stripLength.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/extractTime.js
init_shim();
var MIN_MS2 = 60 * 1e3;
var HR_MS2 = MIN_MS2 * 60;
var DAY_MS2 = HR_MS2 * 24;

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/float/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/float/toU8a.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/format/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/format/formatBalance.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/boolean.js
init_shim();
function isBoolean2(value) {
  return typeof value === "boolean";
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/format/formatDecimal.js
init_shim();
var NUMBER_REGEX2 = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal2(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX2) : value.match(NUMBER_REGEX2);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/format/getSeparator.js
init_shim();
function getSeparator2(locale) {
  return {
    decimal: 0.1.toLocaleString(locale).substring(1, 2),
    thousand: 1e3.toLocaleString(locale).substring(1, 2)
  };
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/format/si.js
init_shim();
var SI_MID2 = 8;
var SI2 = [
  { power: -24, text: "yocto", value: "y" },
  { power: -21, text: "zepto", value: "z" },
  { power: -18, text: "atto", value: "a" },
  { power: -15, text: "femto", value: "f" },
  { power: -12, text: "pico", value: "p" },
  { power: -9, text: "nano", value: "n" },
  { power: -6, text: "micro", value: "µ" },
  { power: -3, text: "milli", value: "m" },
  { power: 0, text: "Unit", value: "-" },
  { power: 3, text: "Kilo", value: "k" },
  { power: 6, text: "Mill", value: "M" },
  { power: 9, text: "Bill", value: "B" },
  { power: 12, text: "Tril", value: "T" },
  { power: 15, text: "Peta", value: "P" },
  { power: 18, text: "Exa", value: "E" },
  { power: 21, text: "Zeta", value: "Z" },
  { power: 24, text: "Yotta", value: "Y" }
];
function findSi2(type) {
  for (let i = 0, count2 = SI2.length; i < count2; i++) {
    if (SI2[i].value === type) {
      return SI2[i];
    }
  }
  return SI2[SI_MID2];
}
function calcSi2(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi2(forceUnit);
  }
  const siDefIndex = SI_MID2 - 1 + Math.ceil((text.length - decimals) / 3);
  return SI2[siDefIndex] || SI2[siDefIndex < 0 ? 0 : SI2.length - 1];
}

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/format/formatBalance.js
var DEFAULT_DECIMALS2 = 0;
var DEFAULT_UNIT2 = SI2[SI_MID2].text;
var defaultDecimals2 = DEFAULT_DECIMALS2;
var defaultUnit2 = DEFAULT_UNIT2;
function _formatBalance2(input, { decimals = defaultDecimals2, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text = bnToBn2(input).toString();
  if (text.length === 0 || text === "0") {
    return "0";
  }
  let sign2 = "";
  if (text[0].startsWith("-")) {
    sign2 = "-";
    text = text.substring(1);
  }
  const si = calcSi2(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text.substring(0, mid);
  let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean2(withUnit) ? SI2[SI_MID2].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator2(locale);
  return `${sign2}${formatDecimal2(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
var formatBalance2 = _formatBalance2;
formatBalance2.calcSi = (text, decimals = defaultDecimals2) => calcSi2(text, decimals);
formatBalance2.findSi = findSi2;
formatBalance2.getDefaults = () => {
  return {
    decimals: defaultDecimals2,
    unit: defaultUnit2
  };
};
formatBalance2.getOptions = (decimals = defaultDecimals2) => {
  return SI2.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
};
formatBalance2.setDefaults = ({ decimals, unit }) => {
  defaultDecimals2 = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals2;
  defaultUnit2 = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit2;
  SI2[SI_MID2].text = defaultUnit2;
};

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/format/formatDate.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/format/formatElapsed.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/format/formatNumber.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/hex/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/hex/addPrefix.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/hex/hasPrefix.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/hex/fixLength.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/hex/toNumber.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/hex/toString.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/array.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/ascii.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/string.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/childClass.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/class.js
init_shim();
var isClass2 = isOnFunction2("isPrototypeOf", "hasOwnProperty");

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/codec.js
init_shim();
var checkCodec2 = isOnObject2("toHex", "toHuman", "toU8a");
var checkRegistry2 = isOnObject2("get");

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/compact.js
init_shim();
var isCompact2 = isOnObject2("toBigInt", "toBn", "toNumber", "unwrap");

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/error.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/instanceOf.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/ip.js
init_shim();
var v42 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
var v6s2 = "[a-fA-F\\d]{1,4}";
var v62 = `
(?:
(?:${v6s2}:){7}(?:${v6s2}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6s2}:){6}(?:${v42}|:${v6s2}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6s2}:){5}(?::${v42}|(?::${v6s2}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6s2}:){4}(?:(?::${v6s2}){0,1}:${v42}|(?::${v6s2}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6s2}:){3}(?:(?::${v6s2}){0,2}:${v42}|(?::${v6s2}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6s2}:){2}(?:(?::${v6s2}){0,3}:${v42}|(?::${v6s2}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6s2}:){1}(?:(?::${v6s2}){0,4}:${v42}|(?::${v6s2}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6s2}){0,5}:${v42}|(?::${v6s2}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
var v46Exact2 = new RegExp(`(?:^${v42}$)|(?:^${v62}$)`);
var v4exact2 = new RegExp(`^${v42}$`);
var v6exact2 = new RegExp(`^${v62}$`);

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/jsonObject.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/stringify.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/null.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/number.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/observable.js
init_shim();
var isObservable2 = isOn2("next");

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/promise.js
init_shim();
var isPromise2 = isOnObject2("catch", "then");

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/riscv.js
init_shim();
var ELF_MAGIC2 = new Uint8Array([127, 69, 76, 70]);
var PVM_MAGIC2 = new Uint8Array([80, 86, 77, 0]);

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/testChain.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/undefined.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/utf8.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/is/wasm.js
init_shim();
var WASM_MAGIC2 = new Uint8Array([0, 97, 115, 109]);

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/lazy.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/logger.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/noop.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/memoize.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/nextTick.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/number/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/number/toHex.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/number/toU8a.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/object/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/object/clear.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/object/copy.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/object/spread.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/object/entries.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/object/keys.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/object/property.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/object/values.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/promisify.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/string/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/string/camelCase.js
init_shim();
var CC_TO_UP2 = new Array(256);
var CC_TO_LO2 = new Array(256);
for (let i = 0, count2 = CC_TO_UP2.length; i < count2; i++) {
  CC_TO_LO2[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP2[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps2(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP2[w.charCodeAt(w.length - 1)];
}
function converter3(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count2 = parts.length; i < count2; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps2), i);
    }
    return result;
  };
}
var stringCamelCase3 = converter3((w, i) => (i ? CC_TO_UP2[w.charCodeAt(0)] : CC_TO_LO2[w.charCodeAt(0)]) + w.slice(1));
var stringPascalCase2 = converter3((w) => CC_TO_UP2[w.charCodeAt(0)] + w.slice(1));

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/string/lowerFirst.js
init_shim();
function converter4(map2) {
  return (value) => value ? map2[value.charCodeAt(0)] + value.slice(1) : "";
}
var stringLowerFirst2 = converter4(CC_TO_LO2);
var stringUpperFirst2 = converter4(CC_TO_UP2);

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/string/shorten.js
init_shim();

// node_modules/@polkadot/rpc-augment/node_modules/@polkadot/util/string/toHex.js
init_shim();

// node_modules/@polkadot/rpc-augment/detectOther.js
init_shim();

// node_modules/@polkadot/rpc-core/packageInfo.js
init_shim();
var packageInfo13 = { name: "@polkadot/rpc-core", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.10.1" };

// node_modules/@polkadot/rpc-augment/detectOther.js
var detectOther_default4 = [packageInfo13, packageInfo7];

// node_modules/@polkadot/rpc-augment/packageInfo.js
init_shim();
var packageInfo14 = { name: "@polkadot/rpc-augment", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.10.1" };

// node_modules/@polkadot/rpc-augment/detectPackage.js
detectPackage3(packageInfo14, null, detectOther_default4);

// node_modules/@polkadot/rpc-augment/bundle.js
init_shim();

// node_modules/@polkadot/rpc-augment/augment/index.js
init_shim();

// node_modules/@polkadot/rpc-augment/augment/jsonrpc.js
init_shim();

// node_modules/@polkadot/rpc-core/types/jsonrpc.js
init_shim();

// node_modules/@polkadot/types-augment/index.js
init_shim();

// node_modules/@polkadot/types-augment/detectPackage.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/detectPackage.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/detectOther.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/x-textdecoder/browser.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/x-textdecoder/fallback.js
init_shim();
var TextDecoder6 = class {
  constructor(encoding) {
    __publicField(this, "__encoding");
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count2 = value.length; i < count2; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/types-augment/node_modules/@polkadot/x-textdecoder/packageInfo.js
init_shim();
var packageInfo15 = { name: "@polkadot/x-textdecoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types-augment/node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder7 = extractGlobal("TextDecoder", TextDecoder6);

// node_modules/@polkadot/types-augment/node_modules/@polkadot/x-textencoder/browser.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/x-textencoder/fallback.js
init_shim();
var TextEncoder6 = class {
  encode(value) {
    const count2 = value.length;
    const u8a9 = new Uint8Array(count2);
    for (let i = 0; i < count2; i++) {
      u8a9[i] = value.charCodeAt(i);
    }
    return u8a9;
  }
};

// node_modules/@polkadot/types-augment/node_modules/@polkadot/x-textencoder/packageInfo.js
init_shim();
var packageInfo16 = { name: "@polkadot/x-textencoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types-augment/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder7 = extractGlobal("TextEncoder", TextEncoder6);

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/detectOther.js
var detectOther_default5 = [packageInfo15, packageInfo16];

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/packageInfo.js
init_shim();
var packageInfo17 = { name: "@polkadot/util", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/versionDetect.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/function.js
init_shim();
function isFunction4(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/versionDetect.js
var DEDUPE3 = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
var POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG3 = "POLKADOTJS_DISABLE_ESM_CJS_WARNING";
function getEntry3(name) {
  const _global = xglobal;
  if (!_global.__polkadotjs) {
    _global.__polkadotjs = {};
  }
  if (!_global.__polkadotjs[name]) {
    _global.__polkadotjs[name] = [];
  }
  return _global.__polkadotjs[name];
}
function formatDisplay3(all3, fmt) {
  let max2 = 0;
  for (let i = 0, count2 = all3.length; i < count2; i++) {
    max2 = Math.max(max2, all3[i].version.length);
  }
  return all3.map((d) => `	${fmt(d.version.padEnd(max2), d).join("	")}`).join("\n");
}
function formatInfo3(version, { name }) {
  return [
    version,
    name
  ];
}
function formatVersion3(version, { path, type }) {
  let extracted;
  if (path && path.length >= 5) {
    const nmIndex = path.indexOf("node_modules");
    extracted = nmIndex === -1 ? path : path.substring(nmIndex);
  } else {
    extracted = "<unknown>";
  }
  return [
    `${`${type || ""}`.padStart(3)} ${version}`,
    extracted
  ];
}
function getPath3(infoPath, pathOrFn) {
  if (infoPath) {
    return infoPath;
  } else if (isFunction4(pathOrFn)) {
    try {
      return pathOrFn() || "";
    } catch {
      return "";
    }
  }
  return pathOrFn || "";
}
function warn3(pre, all3, fmt) {
  console.warn(`${pre}
${DEDUPE3}
${formatDisplay3(all3, fmt)}`);
}
function detectPackage4({ name, path, type, version }, pathOrFn, deps = []) {
  var _a, _b;
  if (!name.startsWith("@polkadot")) {
    throw new Error(`Invalid package descriptor ${name}`);
  }
  const entry = getEntry3(name);
  entry.push({ path: getPath3(path, pathOrFn), type, version });
  const entriesSameVersion = entry.every((e) => e.version === version);
  const esmCjsWarningDisabled = ((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG3]) === "1";
  const multipleEntries = entry.length !== 1;
  const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;
  if (multipleEntries && !disableWarnings) {
    warn3(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion3);
  } else {
    const mismatches = deps.filter((d) => d && d.version !== version);
    if (mismatches.length) {
      warn3(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo3);
    }
  }
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/detectPackage.js
detectPackage4(packageInfo17, null, detectOther_default5);

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bundle.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/array/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/array/chunk.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/array/filter.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/array/flatten.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/array/range.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/array/shuffle.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/array/unzip.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/array/zip.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/assert.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bi/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bi/min.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bi/helpers.js
init_shim();
function createCmp3(cmp) {
  return (...items) => {
    const count2 = items.length;
    if (count2 === 0) {
      throw new Error("Must provide one or more arguments");
    }
    let result = items[0];
    for (let i = 1; i < count2; i++) {
      if (cmp(items[i], result)) {
        result = items[i];
      }
    }
    return result;
  };
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bi/min.js
var nMax3 = createCmp3((a, b) => a > b);
var nMin3 = createCmp3((a, b) => a < b);

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bi/sqrt.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bi/consts.js
init_shim();
var _0n4 = BigInt2(0);
var _1n4 = BigInt2(1);
var _2n3 = BigInt2(2);
var _3n3 = BigInt2(3);
var _4n3 = BigInt2(4);
var _5n3 = BigInt2(5);
var _6n3 = BigInt2(6);
var _7n3 = BigInt2(7);
var _8n3 = BigInt2(8);
var _9n3 = BigInt2(9);
var _10n3 = BigInt2(10);
var _100n3 = BigInt2(100);
var _1000n3 = BigInt2(1e3);
var _1Mn3 = BigInt2(1e6);
var _1Bn3 = BigInt2(1e9);
var _1Qn3 = _1Bn3 * _1Bn3;
var _2pow53n3 = BigInt2(Number.MAX_SAFE_INTEGER);
var _sqrt2pow53n3 = BigInt2(94906265);

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bi/toBigInt.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/hex/toBigInt.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/toBigInt.js
init_shim();
var U8_MAX3 = BigInt2(256);
var U16_MAX3 = BigInt2(256 * 256);
var U64_MAX3 = BigInt2("0x10000000000000000");

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/hex/toU8a.js
init_shim();
var CHR3 = "0123456789abcdef";
var U85 = new Uint8Array(256);
var U165 = new Uint8Array(256 * 256);
for (let i = 0, count2 = CHR3.length; i < count2; i++) {
  U85[CHR3[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U85[CHR3[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U165[s | j] = U85[i] << 4 | U85[j];
  }
}
function hexToU8a4(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U165[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/bn.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bn/bn.js
init_shim();
var import_bn28 = __toESM(require_bn3(), 1);

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/hex.js
init_shim();
var REGEX_HEX_PREFIXED3 = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX3 = /^[\da-fA-F]+$/;
function isHex4(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED3.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/toBigInt.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/helpers.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/object.js
init_shim();
function isObject3(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/helpers.js
function isOn3(...fns) {
  return (value) => (isObject3(value) || isFunction4(value)) && fns.every((f) => isFunction4(value[f]));
}
function isOnFunction3(...fns) {
  return (value) => isFunction4(value) && fns.every((f) => isFunction4(value[f]));
}
function isOnObject3(...fns) {
  return (value) => isObject3(value) && fns.every((f) => isFunction4(value[f]));
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt3 = isOn3("toBigInt");

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/toBn.js
init_shim();
var isToBn3 = isOn3("toBn");

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bi/toHex.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/cmp.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/toU8a.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/buffer.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/has.js
init_shim();
var hasBigInt4 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer3 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess3 = typeof xglobal.process === "object";

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/buffer.js
function isBuffer3(value) {
  return hasBuffer3 && !!value && isFunction4(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/u8a.js
init_shim();
function isU8a4(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/string/toU8a.js
init_shim();
var encoder3 = new TextEncoder7();
function stringToU8a4(value) {
  return value ? encoder3.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a4(value) {
  return isU8a4(value) ? isBuffer3(value) ? new Uint8Array(value) : value : isHex4(value) ? hexToU8a4(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a4(value);
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/concat.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/empty.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/eq.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/fixLength.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/sorted.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/toBn.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/toBuffer.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/toFloat.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/toHex.js
init_shim();
var U86 = new Array(256);
var U166 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U86[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U166[s | j] = U86[i] + U86[j];
  }
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/toNumber.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/toString.js
init_shim();
var decoder3 = new TextDecoder7("utf-8");

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/u8a/wrap.js
init_shim();
var U8A_WRAP_ETHEREUM3 = u8aToU8a4("Ethereum Signed Message:\n");
var U8A_WRAP_PREFIX3 = u8aToU8a4("<Bytes>");
var U8A_WRAP_POSTFIX3 = u8aToU8a4("</Bytes>");
var WRAP_LEN3 = U8A_WRAP_PREFIX3.length + U8A_WRAP_POSTFIX3.length;

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bi/toU8a.js
init_shim();
var DIV3 = BigInt2(256);
var NEG_MASK3 = BigInt2(255);

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bn/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bn/fromHex.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/hex/toBn.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/hex/stripPrefix.js
init_shim();
function hexStripPrefix3(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED3.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX3.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/hex/toBn.js
function hexToBn3(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn28.default(0);
  }
  const stripped = hexStripPrefix3(value);
  const bn = new import_bn28.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bn/min.js
init_shim();
var bnMax3 = createCmp3((a, b) => a.gt(b));
var bnMin3 = createCmp3((a, b) => a.lt(b));

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bn/sqrt.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bn/consts.js
init_shim();
var BN_ZERO3 = new import_bn28.default(0);
var BN_ONE3 = new import_bn28.default(1);
var BN_TWO3 = new import_bn28.default(2);
var BN_THREE3 = new import_bn28.default(3);
var BN_FOUR3 = new import_bn28.default(4);
var BN_FIVE3 = new import_bn28.default(5);
var BN_SIX3 = new import_bn28.default(6);
var BN_SEVEN3 = new import_bn28.default(7);
var BN_EIGHT3 = new import_bn28.default(8);
var BN_NINE3 = new import_bn28.default(9);
var BN_TEN3 = new import_bn28.default(10);
var BN_HUNDRED3 = new import_bn28.default(100);
var BN_THOUSAND3 = new import_bn28.default(1e3);
var BN_MILLION3 = new import_bn28.default(1e6);
var BN_BILLION3 = new import_bn28.default(1e9);
var BN_QUINTILL3 = BN_BILLION3.mul(BN_BILLION3);
var BN_MAX_INTEGER3 = new import_bn28.default(Number.MAX_SAFE_INTEGER);
var BN_SQRT_MAX_INTEGER3 = new import_bn28.default(94906265);

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bn/toBn.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/bigInt.js
init_shim();
function isBigInt3(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bn/toBn.js
function bnToBn3(value) {
  return value ? import_bn28.default.isBN(value) ? value : isHex4(value) ? hexToBn3(value.toString()) : isBigInt3(value) ? new import_bn28.default(value.toString()) : isToBn3(value) ? value.toBn() : isToBigInt3(value) ? new import_bn28.default(value.toBigInt().toString()) : new import_bn28.default(value) : new import_bn28.default(0);
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bn/toHex.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/bn/toU8a.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/buffer/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/buffer/toU8a.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/compact/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/compact/addLength.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/compact/toU8a.js
init_shim();
var MAX_U83 = BN_TWO3.pow(new import_bn28.default(8 - 2)).isub(BN_ONE3);
var MAX_U163 = BN_TWO3.pow(new import_bn28.default(16 - 2)).isub(BN_ONE3);
var MAX_U323 = BN_TWO3.pow(new import_bn28.default(32 - 2)).isub(BN_ONE3);

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/compact/fromU8a.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/compact/stripLength.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/extractTime.js
init_shim();
var MIN_MS3 = 60 * 1e3;
var HR_MS3 = MIN_MS3 * 60;
var DAY_MS3 = HR_MS3 * 24;

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/float/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/float/toU8a.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/format/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/format/formatBalance.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/boolean.js
init_shim();
function isBoolean3(value) {
  return typeof value === "boolean";
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/format/formatDecimal.js
init_shim();
var NUMBER_REGEX3 = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal3(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX3) : value.match(NUMBER_REGEX3);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/format/getSeparator.js
init_shim();
function getSeparator3(locale) {
  return {
    decimal: 0.1.toLocaleString(locale).substring(1, 2),
    thousand: 1e3.toLocaleString(locale).substring(1, 2)
  };
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/format/si.js
init_shim();
var SI_MID3 = 8;
var SI3 = [
  { power: -24, text: "yocto", value: "y" },
  { power: -21, text: "zepto", value: "z" },
  { power: -18, text: "atto", value: "a" },
  { power: -15, text: "femto", value: "f" },
  { power: -12, text: "pico", value: "p" },
  { power: -9, text: "nano", value: "n" },
  { power: -6, text: "micro", value: "µ" },
  { power: -3, text: "milli", value: "m" },
  { power: 0, text: "Unit", value: "-" },
  { power: 3, text: "Kilo", value: "k" },
  { power: 6, text: "Mill", value: "M" },
  { power: 9, text: "Bill", value: "B" },
  { power: 12, text: "Tril", value: "T" },
  { power: 15, text: "Peta", value: "P" },
  { power: 18, text: "Exa", value: "E" },
  { power: 21, text: "Zeta", value: "Z" },
  { power: 24, text: "Yotta", value: "Y" }
];
function findSi3(type) {
  for (let i = 0, count2 = SI3.length; i < count2; i++) {
    if (SI3[i].value === type) {
      return SI3[i];
    }
  }
  return SI3[SI_MID3];
}
function calcSi3(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi3(forceUnit);
  }
  const siDefIndex = SI_MID3 - 1 + Math.ceil((text.length - decimals) / 3);
  return SI3[siDefIndex] || SI3[siDefIndex < 0 ? 0 : SI3.length - 1];
}

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/format/formatBalance.js
var DEFAULT_DECIMALS3 = 0;
var DEFAULT_UNIT3 = SI3[SI_MID3].text;
var defaultDecimals3 = DEFAULT_DECIMALS3;
var defaultUnit3 = DEFAULT_UNIT3;
function _formatBalance3(input, { decimals = defaultDecimals3, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text = bnToBn3(input).toString();
  if (text.length === 0 || text === "0") {
    return "0";
  }
  let sign2 = "";
  if (text[0].startsWith("-")) {
    sign2 = "-";
    text = text.substring(1);
  }
  const si = calcSi3(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text.substring(0, mid);
  let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean3(withUnit) ? SI3[SI_MID3].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator3(locale);
  return `${sign2}${formatDecimal3(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
var formatBalance3 = _formatBalance3;
formatBalance3.calcSi = (text, decimals = defaultDecimals3) => calcSi3(text, decimals);
formatBalance3.findSi = findSi3;
formatBalance3.getDefaults = () => {
  return {
    decimals: defaultDecimals3,
    unit: defaultUnit3
  };
};
formatBalance3.getOptions = (decimals = defaultDecimals3) => {
  return SI3.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
};
formatBalance3.setDefaults = ({ decimals, unit }) => {
  defaultDecimals3 = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals3;
  defaultUnit3 = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit3;
  SI3[SI_MID3].text = defaultUnit3;
};

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/format/formatDate.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/format/formatElapsed.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/format/formatNumber.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/hex/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/hex/addPrefix.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/hex/hasPrefix.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/hex/fixLength.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/hex/toNumber.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/hex/toString.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/array.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/ascii.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/string.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/childClass.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/class.js
init_shim();
var isClass3 = isOnFunction3("isPrototypeOf", "hasOwnProperty");

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/codec.js
init_shim();
var checkCodec3 = isOnObject3("toHex", "toHuman", "toU8a");
var checkRegistry3 = isOnObject3("get");

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/compact.js
init_shim();
var isCompact3 = isOnObject3("toBigInt", "toBn", "toNumber", "unwrap");

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/error.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/instanceOf.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/ip.js
init_shim();
var v43 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
var v6s3 = "[a-fA-F\\d]{1,4}";
var v63 = `
(?:
(?:${v6s3}:){7}(?:${v6s3}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6s3}:){6}(?:${v43}|:${v6s3}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6s3}:){5}(?::${v43}|(?::${v6s3}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6s3}:){4}(?:(?::${v6s3}){0,1}:${v43}|(?::${v6s3}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6s3}:){3}(?:(?::${v6s3}){0,2}:${v43}|(?::${v6s3}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6s3}:){2}(?:(?::${v6s3}){0,3}:${v43}|(?::${v6s3}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6s3}:){1}(?:(?::${v6s3}){0,4}:${v43}|(?::${v6s3}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6s3}){0,5}:${v43}|(?::${v6s3}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
var v46Exact3 = new RegExp(`(?:^${v43}$)|(?:^${v63}$)`);
var v4exact3 = new RegExp(`^${v43}$`);
var v6exact3 = new RegExp(`^${v63}$`);

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/jsonObject.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/stringify.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/null.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/number.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/observable.js
init_shim();
var isObservable3 = isOn3("next");

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/promise.js
init_shim();
var isPromise3 = isOnObject3("catch", "then");

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/riscv.js
init_shim();
var ELF_MAGIC3 = new Uint8Array([127, 69, 76, 70]);
var PVM_MAGIC3 = new Uint8Array([80, 86, 77, 0]);

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/testChain.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/undefined.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/utf8.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/is/wasm.js
init_shim();
var WASM_MAGIC3 = new Uint8Array([0, 97, 115, 109]);

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/lazy.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/logger.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/noop.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/memoize.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/nextTick.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/number/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/number/toHex.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/number/toU8a.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/object/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/object/clear.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/object/copy.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/object/spread.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/object/entries.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/object/keys.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/object/property.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/object/values.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/promisify.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/string/index.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/string/camelCase.js
init_shim();
var CC_TO_UP3 = new Array(256);
var CC_TO_LO3 = new Array(256);
for (let i = 0, count2 = CC_TO_UP3.length; i < count2; i++) {
  CC_TO_LO3[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP3[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps3(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP3[w.charCodeAt(w.length - 1)];
}
function converter5(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count2 = parts.length; i < count2; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps3), i);
    }
    return result;
  };
}
var stringCamelCase4 = converter5((w, i) => (i ? CC_TO_UP3[w.charCodeAt(0)] : CC_TO_LO3[w.charCodeAt(0)]) + w.slice(1));
var stringPascalCase3 = converter5((w) => CC_TO_UP3[w.charCodeAt(0)] + w.slice(1));

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/string/lowerFirst.js
init_shim();
function converter6(map2) {
  return (value) => value ? map2[value.charCodeAt(0)] + value.slice(1) : "";
}
var stringLowerFirst3 = converter6(CC_TO_LO3);
var stringUpperFirst3 = converter6(CC_TO_UP3);

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/string/shorten.js
init_shim();

// node_modules/@polkadot/types-augment/node_modules/@polkadot/util/string/toHex.js
init_shim();

// node_modules/@polkadot/types-augment/detectOther.js
init_shim();
var detectOther_default6 = [packageInfo7, packageInfo8];

// node_modules/@polkadot/types-augment/packageInfo.js
init_shim();
var packageInfo18 = { name: "@polkadot/types-augment", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.10.1" };

// node_modules/@polkadot/types-augment/detectPackage.js
detectPackage4(packageInfo18, null, detectOther_default6);

// node_modules/@polkadot/types-augment/bundle.js
init_shim();

// node_modules/@polkadot/types-augment/augment.js
init_shim();

// node_modules/@polkadot/types-augment/registry/index.js
init_shim();

// node_modules/@polkadot/types-augment/registry/interfaces.js
init_shim();

// node_modules/@polkadot/types/types/registry.js
init_shim();

// node_modules/@polkadot/types-augment/lookup/index.js
init_shim();

// node_modules/@polkadot/types-augment/lookup/types.js
init_shim();

// node_modules/@polkadot/types-augment/lookup/types-substrate.js
init_shim();

// node_modules/@polkadot/types/lookup.js
init_shim();

// node_modules/@polkadot/types-augment/lookup/types-polkadot.js
init_shim();

// node_modules/@polkadot/types-augment/lookup/types-kusama.js
init_shim();

// node_modules/@polkadot/api-augment/substrate/consts.js
init_shim();

// node_modules/@polkadot/api-base/types/consts.js
init_shim();

// node_modules/@polkadot/api-augment/substrate/errors.js
init_shim();

// node_modules/@polkadot/api-base/types/errors.js
init_shim();

// node_modules/@polkadot/api-augment/substrate/events.js
init_shim();

// node_modules/@polkadot/api-base/types/events.js
init_shim();

// node_modules/@polkadot/api-augment/substrate/query.js
init_shim();

// node_modules/@polkadot/api-base/types/storage.js
init_shim();

// node_modules/@polkadot/api-augment/substrate/registry.js
init_shim();

// node_modules/@polkadot/types-augment/registry/substrate.js
init_shim();

// node_modules/@polkadot/api-augment/substrate/runtime.js
init_shim();

// node_modules/@polkadot/api-base/types/calls.js
init_shim();

// node_modules/@polkadot/api-augment/substrate/tx.js
init_shim();

// node_modules/@polkadot/api-base/types/submittable.js
init_shim();

// node_modules/@gear-js/api/GearApi.js
init_shim();

// node_modules/@polkadot/api/index.js
init_shim();

// node_modules/@polkadot/api/detectPackage.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/detectPackage.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/detectOther.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/x-textdecoder/browser.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/x-textdecoder/fallback.js
init_shim();
var TextDecoder8 = class {
  constructor(encoding) {
    __publicField(this, "__encoding");
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count2 = value.length; i < count2; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/api/node_modules/@polkadot/x-textdecoder/packageInfo.js
init_shim();
var packageInfo19 = { name: "@polkadot/x-textdecoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/api/node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder9 = extractGlobal("TextDecoder", TextDecoder8);

// node_modules/@polkadot/api/node_modules/@polkadot/x-textencoder/browser.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/x-textencoder/fallback.js
init_shim();
var TextEncoder8 = class {
  encode(value) {
    const count2 = value.length;
    const u8a9 = new Uint8Array(count2);
    for (let i = 0; i < count2; i++) {
      u8a9[i] = value.charCodeAt(i);
    }
    return u8a9;
  }
};

// node_modules/@polkadot/api/node_modules/@polkadot/x-textencoder/packageInfo.js
init_shim();
var packageInfo20 = { name: "@polkadot/x-textencoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/api/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder9 = extractGlobal("TextEncoder", TextEncoder8);

// node_modules/@polkadot/api/node_modules/@polkadot/util/detectOther.js
var detectOther_default7 = [packageInfo19, packageInfo20];

// node_modules/@polkadot/api/node_modules/@polkadot/util/packageInfo.js
init_shim();
var packageInfo21 = { name: "@polkadot/util", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/api/node_modules/@polkadot/util/versionDetect.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/function.js
init_shim();
function isFunction5(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/versionDetect.js
var DEDUPE4 = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
var POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG4 = "POLKADOTJS_DISABLE_ESM_CJS_WARNING";
function getEntry4(name) {
  const _global = xglobal;
  if (!_global.__polkadotjs) {
    _global.__polkadotjs = {};
  }
  if (!_global.__polkadotjs[name]) {
    _global.__polkadotjs[name] = [];
  }
  return _global.__polkadotjs[name];
}
function formatDisplay4(all3, fmt) {
  let max2 = 0;
  for (let i = 0, count2 = all3.length; i < count2; i++) {
    max2 = Math.max(max2, all3[i].version.length);
  }
  return all3.map((d) => `	${fmt(d.version.padEnd(max2), d).join("	")}`).join("\n");
}
function formatInfo4(version, { name }) {
  return [
    version,
    name
  ];
}
function formatVersion4(version, { path, type }) {
  let extracted;
  if (path && path.length >= 5) {
    const nmIndex = path.indexOf("node_modules");
    extracted = nmIndex === -1 ? path : path.substring(nmIndex);
  } else {
    extracted = "<unknown>";
  }
  return [
    `${`${type || ""}`.padStart(3)} ${version}`,
    extracted
  ];
}
function getPath4(infoPath, pathOrFn) {
  if (infoPath) {
    return infoPath;
  } else if (isFunction5(pathOrFn)) {
    try {
      return pathOrFn() || "";
    } catch {
      return "";
    }
  }
  return pathOrFn || "";
}
function warn4(pre, all3, fmt) {
  console.warn(`${pre}
${DEDUPE4}
${formatDisplay4(all3, fmt)}`);
}
function detectPackage5({ name, path, type, version }, pathOrFn, deps = []) {
  var _a, _b;
  if (!name.startsWith("@polkadot")) {
    throw new Error(`Invalid package descriptor ${name}`);
  }
  const entry = getEntry4(name);
  entry.push({ path: getPath4(path, pathOrFn), type, version });
  const entriesSameVersion = entry.every((e) => e.version === version);
  const esmCjsWarningDisabled = ((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG4]) === "1";
  const multipleEntries = entry.length !== 1;
  const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;
  if (multipleEntries && !disableWarnings) {
    warn4(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion4);
  } else {
    const mismatches = deps.filter((d) => d && d.version !== version);
    if (mismatches.length) {
      warn4(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo4);
    }
  }
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/detectPackage.js
detectPackage5(packageInfo21, null, detectOther_default7);

// node_modules/@polkadot/api/node_modules/@polkadot/util/bundle.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/array/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/array/chunk.js
init_shim();
function arrayChunk4(array, chunkSize) {
  const outputSize = Math.ceil(array.length / chunkSize);
  if (outputSize === 1) {
    return [array];
  }
  const output5 = Array(outputSize);
  for (let i = 0; i < outputSize; i++) {
    const offset = i * chunkSize;
    output5[i] = array.slice(offset, offset + chunkSize);
  }
  return output5;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/array/filter.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/array/flatten.js
init_shim();
function arrayFlatten4(arrays) {
  const num = arrays.length;
  if (num === 0) {
    return [];
  } else if (num === 1) {
    return arrays[0];
  }
  let size = 0;
  for (let i2 = 0; i2 < num; i2++) {
    size += arrays[i2].length;
  }
  const output5 = new Array(size);
  let i = -1;
  for (let j = 0; j < num; j++) {
    const a = arrays[j];
    for (let e = 0, count2 = a.length; e < count2; e++) {
      output5[++i] = a[e];
    }
  }
  return output5;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/array/range.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/array/shuffle.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/array/unzip.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/array/zip.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/assert.js
init_shim();
function assert(condition, message) {
  if (!condition) {
    throw new Error(isFunction5(message) ? message() : message);
  }
}
function assertReturn(value, message) {
  assert(value !== void 0 && value !== null, message);
  return value;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/bi/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/bi/min.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/bi/helpers.js
init_shim();
function createCmp4(cmp) {
  return (...items) => {
    const count2 = items.length;
    if (count2 === 0) {
      throw new Error("Must provide one or more arguments");
    }
    let result = items[0];
    for (let i = 1; i < count2; i++) {
      if (cmp(items[i], result)) {
        result = items[i];
      }
    }
    return result;
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/bi/min.js
var nMax4 = createCmp4((a, b) => a > b);
var nMin4 = createCmp4((a, b) => a < b);

// node_modules/@polkadot/api/node_modules/@polkadot/util/bi/sqrt.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/bi/consts.js
init_shim();
var _0n5 = BigInt2(0);
var _1n5 = BigInt2(1);
var _2n4 = BigInt2(2);
var _3n4 = BigInt2(3);
var _4n4 = BigInt2(4);
var _5n4 = BigInt2(5);
var _6n4 = BigInt2(6);
var _7n4 = BigInt2(7);
var _8n4 = BigInt2(8);
var _9n4 = BigInt2(9);
var _10n4 = BigInt2(10);
var _100n4 = BigInt2(100);
var _1000n4 = BigInt2(1e3);
var _1Mn4 = BigInt2(1e6);
var _1Bn4 = BigInt2(1e9);
var _1Qn4 = _1Bn4 * _1Bn4;
var _2pow53n4 = BigInt2(Number.MAX_SAFE_INTEGER);
var _sqrt2pow53n4 = BigInt2(94906265);

// node_modules/@polkadot/api/node_modules/@polkadot/util/bi/toBigInt.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/hex/toBigInt.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/toBigInt.js
init_shim();
var U8_MAX4 = BigInt2(256);
var U16_MAX4 = BigInt2(256 * 256);
var U64_MAX4 = BigInt2("0x10000000000000000");
function u8aToBigInt5(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count2 = value.length;
  if (isNegative && count2 && value[count2 - 1] & 128) {
    switch (count2) {
      case 0:
        return BigInt2(0);
      case 1:
        return BigInt2((value[0] ^ 255) * -1 - 1);
      case 2:
        return BigInt2((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
      case 4:
        return BigInt2((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
    }
    const dvI2 = new DataView(value.buffer, value.byteOffset);
    if (count2 === 8) {
      return dvI2.getBigInt64(0, true);
    }
    let result = BigInt2(0);
    const mod5 = count2 % 2;
    for (let i = count2 - 2; i >= mod5; i -= 2) {
      result = result * U16_MAX4 + BigInt2(dvI2.getUint16(i, true) ^ 65535);
    }
    if (mod5) {
      result = result * U8_MAX4 + BigInt2(value[0] ^ 255);
    }
    return result * -_1n5 - _1n5;
  }
  switch (count2) {
    case 0:
      return BigInt2(0);
    case 1:
      return BigInt2(value[0]);
    case 2:
      return BigInt2(value[0] + (value[1] << 8));
    case 4:
      return BigInt2(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
  }
  const dvI = new DataView(value.buffer, value.byteOffset);
  switch (count2) {
    case 8:
      return dvI.getBigUint64(0, true);
    case 16:
      return dvI.getBigUint64(8, true) * U64_MAX4 + dvI.getBigUint64(0, true);
    default: {
      let result = BigInt2(0);
      const mod5 = count2 % 2;
      for (let i = count2 - 2; i >= mod5; i -= 2) {
        result = result * U16_MAX4 + BigInt2(dvI.getUint16(i, true));
      }
      if (mod5) {
        result = result * U8_MAX4 + BigInt2(value[0]);
      }
      return result;
    }
  }
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/hex/toU8a.js
init_shim();
var CHR4 = "0123456789abcdef";
var U87 = new Uint8Array(256);
var U167 = new Uint8Array(256 * 256);
for (let i = 0, count2 = CHR4.length; i < count2; i++) {
  U87[CHR4[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U87[CHR4[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U167[s | j] = U87[i] << 4 | U87[j];
  }
}
function hexToU8a5(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U167[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/hex/toBigInt.js
function hexToBigInt4(value, { isLe = false, isNegative = false } = {}) {
  return !value || value === "0x" ? BigInt2(0) : u8aToBigInt5(hexToU8a5(value), { isLe, isNegative });
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/bn.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/bn/bn.js
init_shim();
var import_bn41 = __toESM(require_bn4(), 1);

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/bn.js
function isBn4(value) {
  return import_bn41.default.isBN(value);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/hex.js
init_shim();
var REGEX_HEX_PREFIXED4 = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX4 = /^[\da-fA-F]+$/;
function isHex5(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED4.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/toBigInt.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/helpers.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/object.js
init_shim();
function isObject4(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/helpers.js
function isOn4(...fns) {
  return (value) => (isObject4(value) || isFunction5(value)) && fns.every((f) => isFunction5(value[f]));
}
function isOnFunction4(...fns) {
  return (value) => isFunction5(value) && fns.every((f) => isFunction5(value[f]));
}
function isOnObject4(...fns) {
  return (value) => isObject4(value) && fns.every((f) => isFunction5(value[f]));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt4 = isOn4("toBigInt");

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/toBn.js
init_shim();
var isToBn4 = isOn4("toBn");

// node_modules/@polkadot/api/node_modules/@polkadot/util/bi/toBigInt.js
function nToBigInt4(value) {
  return typeof value === "bigint" ? value : !value ? BigInt2(0) : isHex5(value) ? hexToBigInt4(value.toString()) : isBn4(value) ? BigInt2(value.toString()) : isToBigInt4(value) ? value.toBigInt() : isToBn4(value) ? BigInt2(value.toBn().toString()) : BigInt2(value);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/bi/toHex.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/cmp.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/toU8a.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/buffer.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/has.js
init_shim();
var hasBigInt5 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer4 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess4 = typeof xglobal.process === "object";

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/buffer.js
function isBuffer4(value) {
  return hasBuffer4 && !!value && isFunction5(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/u8a.js
init_shim();
function isU8a5(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/string/toU8a.js
init_shim();
var encoder4 = new TextEncoder9();
function stringToU8a5(value) {
  return value ? encoder4.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a5(value) {
  return isU8a5(value) ? isBuffer4(value) ? new Uint8Array(value) : value : isHex5(value) ? hexToU8a5(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a5(value);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/concat.js
init_shim();
function u8aConcat5(...list) {
  const count2 = list.length;
  const u8as = new Array(count2);
  let length = 0;
  for (let i = 0; i < count2; i++) {
    u8as[i] = u8aToU8a5(list[i]);
    length += u8as[i].length;
  }
  return u8aConcatStrict5(u8as, length);
}
function u8aConcatStrict5(u8as, length = 0) {
  const count2 = u8as.length;
  let offset = 0;
  if (!length) {
    for (let i = 0; i < count2; i++) {
      length += u8as[i].length;
    }
  }
  const result = new Uint8Array(length);
  for (let i = 0; i < count2; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }
  return result;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/empty.js
init_shim();
function u8aEmpty5(value) {
  const len = value.length | 0;
  for (let i = 0; i < len; i++) {
    if (value[i] | 0) {
      return false;
    }
  }
  return true;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/eq.js
init_shim();
function u8aEq5(a, b) {
  const u8aa = u8aToU8a5(a);
  const u8ab = u8aToU8a5(b);
  if (u8aa.length === u8ab.length) {
    const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
    const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
    const mod5 = u8aa.length % 4 | 0;
    const length = u8aa.length - mod5 | 0;
    for (let i = 0; i < length; i += 4) {
      if (dvA.getUint32(i) !== dvB.getUint32(i)) {
        return false;
      }
    }
    for (let i = length, count2 = u8aa.length; i < count2; i++) {
      if (u8aa[i] !== u8ab[i]) {
        return false;
      }
    }
    return true;
  }
  return false;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/fixLength.js
init_shim();
function u8aFixLength4(value, bitLength = -1, atStart = false) {
  const byteLength = Math.ceil(bitLength / 8);
  if (bitLength === -1 || value.length === byteLength) {
    return value;
  } else if (value.length > byteLength) {
    return value.subarray(0, byteLength);
  }
  const result = new Uint8Array(byteLength);
  result.set(value, atStart ? 0 : byteLength - value.length);
  return result;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/sorted.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/toBn.js
init_shim();
function u8aToBn4(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count2 = value.length;
  if (isNegative && count2 && value[count2 - 1] & 128) {
    switch (count2) {
      case 0:
        return new import_bn41.default(0);
      case 1:
        return new import_bn41.default((value[0] ^ 255) * -1 - 1);
      case 2:
        return new import_bn41.default((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
      case 3:
        return new import_bn41.default((value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1);
      case 4:
        return new import_bn41.default((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
      case 5:
        return new import_bn41.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1);
      case 6:
        return new import_bn41.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1);
      default:
        return new import_bn41.default(value, "le").fromTwos(count2 * 8);
    }
  }
  switch (count2) {
    case 0:
      return new import_bn41.default(0);
    case 1:
      return new import_bn41.default(value[0]);
    case 2:
      return new import_bn41.default(value[0] + (value[1] << 8));
    case 3:
      return new import_bn41.default(value[0] + (value[1] << 8) + (value[2] << 16));
    case 4:
      return new import_bn41.default(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
    case 5:
      return new import_bn41.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216);
    case 6:
      return new import_bn41.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
    default:
      return new import_bn41.default(value, "le");
  }
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/toBuffer.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/toFloat.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/toHex.js
init_shim();
var U88 = new Array(256);
var U168 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U88[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U168[s | j] = U88[i] + U88[j];
  }
}
function hex(value, result) {
  const mod5 = value.length % 2 | 0;
  const length = value.length - mod5 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U168[value[i] << 8 | value[i + 1]];
  }
  if (mod5) {
    result += U88[value[length] | 0];
  }
  return result;
}
function u8aToHex5(value, bitLength = -1, isPrefixed = true) {
  const empty3 = isPrefixed ? "0x" : "";
  if (!(value == null ? void 0 : value.length)) {
    return empty3;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex(value.subarray(0, length / 2), empty3)}…${hex(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex(value, empty3);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/toNumber.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/toString.js
init_shim();
var decoder4 = new TextDecoder9("utf-8");

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/wrap.js
init_shim();
var U8A_WRAP_ETHEREUM4 = u8aToU8a5("Ethereum Signed Message:\n");
var U8A_WRAP_PREFIX4 = u8aToU8a5("<Bytes>");
var U8A_WRAP_POSTFIX4 = u8aToU8a5("</Bytes>");
var WRAP_LEN4 = U8A_WRAP_PREFIX4.length + U8A_WRAP_POSTFIX4.length;
function u8aIsWrapped5(u8a9, withEthereum) {
  return u8a9.length >= WRAP_LEN4 && u8aEq5(u8a9.subarray(0, U8A_WRAP_PREFIX4.length), U8A_WRAP_PREFIX4) && u8aEq5(u8a9.slice(-U8A_WRAP_POSTFIX4.length), U8A_WRAP_POSTFIX4) || withEthereum && u8a9.length >= U8A_WRAP_ETHEREUM4.length && u8aEq5(u8a9.subarray(0, U8A_WRAP_ETHEREUM4.length), U8A_WRAP_ETHEREUM4);
}
function u8aUnwrapBytes5(bytes5) {
  const u8a9 = u8aToU8a5(bytes5);
  return u8aIsWrapped5(u8a9, false) ? u8a9.subarray(U8A_WRAP_PREFIX4.length, u8a9.length - U8A_WRAP_POSTFIX4.length) : u8a9;
}
function u8aWrapBytes5(bytes5) {
  const u8a9 = u8aToU8a5(bytes5);
  return u8aIsWrapped5(u8a9, true) ? u8a9 : u8aConcatStrict5([U8A_WRAP_PREFIX4, u8a9, U8A_WRAP_POSTFIX4]);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/bi/toU8a.js
init_shim();
var DIV4 = BigInt2(256);
var NEG_MASK4 = BigInt2(255);
function toU8a(value, isLe, isNegative) {
  const arr = [];
  const withSigned = isNegative && value < _0n5;
  if (withSigned) {
    value = (value + _1n5) * -_1n5;
  }
  while (value !== _0n5) {
    const mod5 = value % DIV4;
    const val = Number(withSigned ? mod5 ^ NEG_MASK4 : mod5);
    if (isLe) {
      arr.push(val);
    } else {
      arr.unshift(val);
    }
    value = (value - mod5) / DIV4;
  }
  return Uint8Array.from(arr);
}
function nToU8a4(value, { bitLength = -1, isLe = true, isNegative = false } = {}) {
  const valueBi = nToBigInt4(value);
  if (valueBi === _0n5) {
    return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(Math.ceil((bitLength || 0) / 8));
  }
  const u8a9 = toU8a(valueBi, isLe, isNegative);
  if (bitLength === -1) {
    return u8a9;
  }
  const byteLength = Math.ceil((bitLength || 0) / 8);
  const output5 = new Uint8Array(byteLength);
  if (isNegative) {
    output5.fill(255);
  }
  output5.set(u8a9, isLe ? 0 : byteLength - u8a9.length);
  return output5;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/bn/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/bn/fromHex.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/hex/toBn.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/hex/stripPrefix.js
init_shim();
function hexStripPrefix4(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED4.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX4.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/hex/toBn.js
function hexToBn4(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn41.default(0);
  }
  const stripped = hexStripPrefix4(value);
  const bn = new import_bn41.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/bn/min.js
init_shim();
var bnMax4 = createCmp4((a, b) => a.gt(b));
var bnMin4 = createCmp4((a, b) => a.lt(b));

// node_modules/@polkadot/api/node_modules/@polkadot/util/bn/sqrt.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/bn/consts.js
init_shim();
var BN_ZERO4 = new import_bn41.default(0);
var BN_ONE4 = new import_bn41.default(1);
var BN_TWO4 = new import_bn41.default(2);
var BN_THREE4 = new import_bn41.default(3);
var BN_FOUR4 = new import_bn41.default(4);
var BN_FIVE4 = new import_bn41.default(5);
var BN_SIX4 = new import_bn41.default(6);
var BN_SEVEN4 = new import_bn41.default(7);
var BN_EIGHT4 = new import_bn41.default(8);
var BN_NINE4 = new import_bn41.default(9);
var BN_TEN4 = new import_bn41.default(10);
var BN_HUNDRED4 = new import_bn41.default(100);
var BN_THOUSAND4 = new import_bn41.default(1e3);
var BN_MILLION4 = new import_bn41.default(1e6);
var BN_BILLION4 = new import_bn41.default(1e9);
var BN_QUINTILL4 = BN_BILLION4.mul(BN_BILLION4);
var BN_MAX_INTEGER4 = new import_bn41.default(Number.MAX_SAFE_INTEGER);
var BN_SQRT_MAX_INTEGER4 = new import_bn41.default(94906265);

// node_modules/@polkadot/api/node_modules/@polkadot/util/bn/toBn.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/bigInt.js
init_shim();
function isBigInt4(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/bn/toBn.js
function bnToBn4(value) {
  return value ? import_bn41.default.isBN(value) ? value : isHex5(value) ? hexToBn4(value.toString()) : isBigInt4(value) ? new import_bn41.default(value.toString()) : isToBn4(value) ? value.toBn() : isToBigInt4(value) ? new import_bn41.default(value.toBigInt().toString()) : new import_bn41.default(value) : new import_bn41.default(0);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/bn/toHex.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/bn/toU8a.js
init_shim();
var DEFAULT_OPTS = { bitLength: -1, isLe: true, isNegative: false };
function bnToU8a5(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS) {
  const valueBn = bnToBn4(value);
  const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);
  if (!value) {
    return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(byteLength);
  }
  const output5 = new Uint8Array(byteLength);
  const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
  output5.set(bn.toArray(isLe ? "le" : "be", byteLength), 0);
  return output5;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/buffer/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/buffer/toU8a.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/compact/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/compact/addLength.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/compact/toU8a.js
init_shim();
var MAX_U84 = BN_TWO4.pow(new import_bn41.default(8 - 2)).isub(BN_ONE4);
var MAX_U164 = BN_TWO4.pow(new import_bn41.default(16 - 2)).isub(BN_ONE4);
var MAX_U324 = BN_TWO4.pow(new import_bn41.default(32 - 2)).isub(BN_ONE4);
var BL_16 = { bitLength: 16 };
var BL_32 = { bitLength: 32 };
function compactToU8a4(value) {
  const bn = bnToBn4(value);
  if (bn.lte(MAX_U84)) {
    return new Uint8Array([bn.toNumber() << 2]);
  } else if (bn.lte(MAX_U164)) {
    return bnToU8a5(bn.shln(2).iadd(BN_ONE4), BL_16);
  } else if (bn.lte(MAX_U324)) {
    return bnToU8a5(bn.shln(2).iadd(BN_TWO4), BL_32);
  }
  const u8a9 = bnToU8a5(bn);
  let length = u8a9.length;
  while (u8a9[length - 1] === 0) {
    length--;
  }
  if (length < 4) {
    throw new Error("Invalid length, previous checks match anything less than 2^30");
  }
  return u8aConcatStrict5([
    // subtract 4 as minimum (also catered for in decoding)
    new Uint8Array([(length - 4 << 2) + 3]),
    u8a9.subarray(0, length)
  ]);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/compact/addLength.js
function compactAddLength5(input) {
  return u8aConcatStrict5([
    compactToU8a4(input.length),
    input
  ]);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/compact/fromU8a.js
init_shim();
function compactFromU8a4(input) {
  const u8a9 = u8aToU8a5(input);
  switch (u8a9[0] & 3) {
    case 0:
      return [1, new import_bn41.default(u8a9[0] >>> 2)];
    case 1:
      return [2, new import_bn41.default(u8a9[0] + (u8a9[1] << 8) >>> 2)];
    case 2:
      return [4, new import_bn41.default(u8a9[0] + (u8a9[1] << 8) + (u8a9[2] << 16) + u8a9[3] * 16777216 >>> 2)];
    default: {
      const offset = (u8a9[0] >>> 2) + 5;
      switch (offset) {
        case 5:
          return [5, new import_bn41.default(u8a9[1] + (u8a9[2] << 8) + (u8a9[3] << 16) + u8a9[4] * 16777216)];
        case 6:
          return [6, new import_bn41.default(u8a9[1] + (u8a9[2] << 8) + (u8a9[3] << 16) + (u8a9[4] + (u8a9[5] << 8)) * 16777216)];
        case 7:
          return [7, new import_bn41.default(u8a9[1] + (u8a9[2] << 8) + (u8a9[3] << 16) + (u8a9[4] + (u8a9[5] << 8) + (u8a9[6] << 16)) * 16777216)];
        default:
          return [offset, u8aToBn4(u8a9.subarray(1, offset))];
      }
    }
  }
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/compact/stripLength.js
init_shim();
function compactStripLength4(input) {
  const [offset, length] = compactFromU8a4(input);
  const total = offset + length.toNumber();
  return [
    total,
    input.subarray(offset, total)
  ];
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/extractTime.js
init_shim();
var MIN_MS4 = 60 * 1e3;
var HR_MS4 = MIN_MS4 * 60;
var DAY_MS4 = HR_MS4 * 24;

// node_modules/@polkadot/api/node_modules/@polkadot/util/float/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/float/toU8a.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/format/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/format/formatBalance.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/boolean.js
init_shim();
function isBoolean4(value) {
  return typeof value === "boolean";
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/format/formatDecimal.js
init_shim();
var NUMBER_REGEX4 = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal4(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX4) : value.match(NUMBER_REGEX4);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/format/getSeparator.js
init_shim();
function getSeparator4(locale) {
  return {
    decimal: 0.1.toLocaleString(locale).substring(1, 2),
    thousand: 1e3.toLocaleString(locale).substring(1, 2)
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/format/si.js
init_shim();
var SI_MID4 = 8;
var SI4 = [
  { power: -24, text: "yocto", value: "y" },
  { power: -21, text: "zepto", value: "z" },
  { power: -18, text: "atto", value: "a" },
  { power: -15, text: "femto", value: "f" },
  { power: -12, text: "pico", value: "p" },
  { power: -9, text: "nano", value: "n" },
  { power: -6, text: "micro", value: "µ" },
  { power: -3, text: "milli", value: "m" },
  { power: 0, text: "Unit", value: "-" },
  { power: 3, text: "Kilo", value: "k" },
  { power: 6, text: "Mill", value: "M" },
  { power: 9, text: "Bill", value: "B" },
  { power: 12, text: "Tril", value: "T" },
  { power: 15, text: "Peta", value: "P" },
  { power: 18, text: "Exa", value: "E" },
  { power: 21, text: "Zeta", value: "Z" },
  { power: 24, text: "Yotta", value: "Y" }
];
function findSi4(type) {
  for (let i = 0, count2 = SI4.length; i < count2; i++) {
    if (SI4[i].value === type) {
      return SI4[i];
    }
  }
  return SI4[SI_MID4];
}
function calcSi4(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi4(forceUnit);
  }
  const siDefIndex = SI_MID4 - 1 + Math.ceil((text.length - decimals) / 3);
  return SI4[siDefIndex] || SI4[siDefIndex < 0 ? 0 : SI4.length - 1];
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/format/formatBalance.js
var DEFAULT_DECIMALS4 = 0;
var DEFAULT_UNIT4 = SI4[SI_MID4].text;
var defaultDecimals4 = DEFAULT_DECIMALS4;
var defaultUnit4 = DEFAULT_UNIT4;
function _formatBalance4(input, { decimals = defaultDecimals4, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text = bnToBn4(input).toString();
  if (text.length === 0 || text === "0") {
    return "0";
  }
  let sign2 = "";
  if (text[0].startsWith("-")) {
    sign2 = "-";
    text = text.substring(1);
  }
  const si = calcSi4(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text.substring(0, mid);
  let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean4(withUnit) ? SI4[SI_MID4].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator4(locale);
  return `${sign2}${formatDecimal4(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
var formatBalance4 = _formatBalance4;
formatBalance4.calcSi = (text, decimals = defaultDecimals4) => calcSi4(text, decimals);
formatBalance4.findSi = findSi4;
formatBalance4.getDefaults = () => {
  return {
    decimals: defaultDecimals4,
    unit: defaultUnit4
  };
};
formatBalance4.getOptions = (decimals = defaultDecimals4) => {
  return SI4.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
};
formatBalance4.setDefaults = ({ decimals, unit }) => {
  defaultDecimals4 = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals4;
  defaultUnit4 = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit4;
  SI4[SI_MID4].text = defaultUnit4;
};

// node_modules/@polkadot/api/node_modules/@polkadot/util/format/formatDate.js
init_shim();
function zeroPad(value) {
  return value.toString().padStart(2, "0");
}
function formatDate4(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad(date.getMonth() + 1);
  const day = zeroPad(date.getDate());
  const hour = zeroPad(date.getHours());
  const minute = zeroPad(date.getMinutes());
  const second = zeroPad(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/format/formatElapsed.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/format/formatNumber.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/hex/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/hex/addPrefix.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/hex/hasPrefix.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/hex/fixLength.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/hex/toNumber.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/hex/toString.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/array.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/ascii.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/string.js
init_shim();
function isString5(value) {
  return typeof value === "string" || value instanceof String;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/childClass.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/class.js
init_shim();
var isClass4 = isOnFunction4("isPrototypeOf", "hasOwnProperty");

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/childClass.js
function isChildClass4(Parent, Child) {
  return isClass4(Child) && isClass4(Parent) ? Parent === Child || Parent.isPrototypeOf(Child) : false;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/codec.js
init_shim();
var checkCodec4 = isOnObject4("toHex", "toHuman", "toU8a");
var checkRegistry4 = isOnObject4("get");

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/compact.js
init_shim();
var isCompact4 = isOnObject4("toBigInt", "toBn", "toNumber", "unwrap");

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/error.js
init_shim();
function isError4(value) {
  return (value && value.constructor) === Error || value instanceof Error;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/instanceOf.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/ip.js
init_shim();
var v44 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
var v6s4 = "[a-fA-F\\d]{1,4}";
var v64 = `
(?:
(?:${v6s4}:){7}(?:${v6s4}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6s4}:){6}(?:${v44}|:${v6s4}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6s4}:){5}(?::${v44}|(?::${v6s4}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6s4}:){4}(?:(?::${v6s4}){0,1}:${v44}|(?::${v6s4}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6s4}:){3}(?:(?::${v6s4}){0,2}:${v44}|(?::${v6s4}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6s4}:){2}(?:(?::${v6s4}){0,3}:${v44}|(?::${v6s4}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6s4}:){1}(?:(?::${v6s4}){0,4}:${v44}|(?::${v6s4}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6s4}){0,5}:${v44}|(?::${v6s4}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
var v46Exact4 = new RegExp(`(?:^${v44}$)|(?:^${v64}$)`);
var v4exact4 = new RegExp(`^${v44}$`);
var v6exact4 = new RegExp(`^${v64}$`);

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/jsonObject.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/stringify.js
init_shim();
function replacer(_, v) {
  return isBigInt4(v) ? v.toString() : v;
}
function stringify4(value, space) {
  return JSON.stringify(value, replacer, space);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/null.js
init_shim();
function isNull4(value) {
  return value === null;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/number.js
init_shim();
function isNumber5(value) {
  return typeof value === "number";
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/observable.js
init_shim();
var isObservable4 = isOn4("next");

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/promise.js
init_shim();
var isPromise4 = isOnObject4("catch", "then");

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/riscv.js
init_shim();
var ELF_MAGIC4 = new Uint8Array([127, 69, 76, 70]);
var PVM_MAGIC4 = new Uint8Array([80, 86, 77, 0]);

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/testChain.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/undefined.js
init_shim();
function isUndefined4(value) {
  return value === void 0;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/utf8.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/wasm.js
init_shim();
var WASM_MAGIC4 = new Uint8Array([0, 97, 115, 109]);

// node_modules/@polkadot/api/node_modules/@polkadot/util/lazy.js
init_shim();
function lazyMethod(result, item, creator, getName, index = 0) {
  const name = getName ? getName(item, index) : item.toString();
  let value;
  Object.defineProperty(result, name, {
    // This allows for re-configuration with the embedded defineProperty below
    // and ensures that on tested browsers and Node, it _will_ be redefined
    // and thus short-circuited for future access
    configurable: true,
    enumerable: true,
    // Use a function here, we don't want to capture the outer this, i.e.
    // don't use arrow functions in this context since we have a this inside
    get: function() {
      if (value === void 0) {
        value = creator(item, index, this);
        try {
          Object.defineProperty(this, name, { value });
        } catch {
        }
      }
      return value;
    }
  });
}
function lazyMethods(result, items, creator, getName) {
  for (let i = 0, count2 = items.length; i < count2; i++) {
    lazyMethod(result, items[i], creator, getName, i);
  }
  return result;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/logger.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/noop.js
init_shim();
function identity(value) {
  return value;
}
function noop4() {
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/logger.js
var logTo = {
  debug: "log",
  error: "error",
  log: "log",
  warn: "warn"
};
function formatOther(value) {
  if (value && isObject4(value) && value.constructor === Object) {
    const result = {};
    for (const [k, v] of Object.entries(value)) {
      result[k] = loggerFormat(v);
    }
    return result;
  }
  return value;
}
function loggerFormat(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat);
  } else if (isBn4(value)) {
    return value.toString();
  } else if (isU8a5(value) || isBuffer4(value)) {
    return u8aToHex5(u8aToU8a5(value));
  }
  return formatOther(value);
}
function formatWithLength(maxLength) {
  return (v) => {
    if (maxLength <= 0) {
      return v;
    }
    const r = `${v}`;
    return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
  };
}
function apply(log, type, values, maxSize = -1) {
  if (values.length === 1 && isFunction5(values[0])) {
    const fnResult = values[0]();
    return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }
  console[logTo[log]](formatDate4(/* @__PURE__ */ new Date()), type, ...values.map(loggerFormat).map(formatWithLength(maxSize)));
}
function isDebugOn(e, type) {
  return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff(e, type) {
  return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
}
function getDebugFlag(env, type) {
  let flag = false;
  for (const e of env) {
    if (isDebugOn(e, type)) {
      flag = true;
    } else if (isDebugOff(e, type)) {
      flag = false;
    }
  }
  return flag;
}
function parseEnv(type) {
  var _a, _b, _c, _d;
  const maxSize = parseInt(((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b["DEBUG_MAX"]) || "-1", 10);
  return [
    getDebugFlag((((_d = (_c = xglobal.process) == null ? void 0 : _c.env) == null ? void 0 : _d["DEBUG"]) || "").toLowerCase().split(","), type),
    isNaN(maxSize) ? -1 : maxSize
  ];
}
function logger2(origin) {
  const type = `${origin.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv(origin.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply("debug", type, values, maxSize) : noop4,
    error: (...values) => apply("error", type, values),
    log: (...values) => apply("log", type, values),
    noop: noop4,
    warn: (...values) => apply("warn", type, values)
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/memoize.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/nextTick.js
init_shim();
function nextTick(onExec, onError) {
  setTimeout(() => {
    Promise.resolve().then(() => {
      onExec();
    }).catch((error) => {
      if (onError) {
        onError(error);
      } else {
        console.error(error);
      }
    });
  }, 0);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/number/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/number/toHex.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/number/toU8a.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/object/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/object/clear.js
init_shim();
function objectClear4(value) {
  const keys2 = Object.keys(value);
  for (let i = 0, count2 = keys2.length; i < count2; i++) {
    delete value[keys2[i]];
  }
  return value;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/object/copy.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/object/spread.js
init_shim();
function objectSpread4(dest, ...sources) {
  for (let i = 0, count2 = sources.length; i < count2; i++) {
    const src = sources[i];
    if (src) {
      if (typeof src.entries === "function") {
        for (const [key, value] of src.entries()) {
          dest[key] = value;
        }
      } else {
        Object.assign(dest, src);
      }
    }
  }
  return dest;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/object/entries.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/object/keys.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/object/property.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/object/values.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/promisify.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/string/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/string/camelCase.js
init_shim();
var CC_TO_UP4 = new Array(256);
var CC_TO_LO4 = new Array(256);
for (let i = 0, count2 = CC_TO_UP4.length; i < count2; i++) {
  CC_TO_LO4[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP4[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps4(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP4[w.charCodeAt(w.length - 1)];
}
function converter7(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count2 = parts.length; i < count2; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps4), i);
    }
    return result;
  };
}
var stringCamelCase5 = converter7((w, i) => (i ? CC_TO_UP4[w.charCodeAt(0)] : CC_TO_LO4[w.charCodeAt(0)]) + w.slice(1));
var stringPascalCase4 = converter7((w) => CC_TO_UP4[w.charCodeAt(0)] + w.slice(1));

// node_modules/@polkadot/api/node_modules/@polkadot/util/string/lowerFirst.js
init_shim();
function converter8(map2) {
  return (value) => value ? map2[value.charCodeAt(0)] + value.slice(1) : "";
}
var stringLowerFirst4 = converter8(CC_TO_LO4);
var stringUpperFirst4 = converter8(CC_TO_UP4);

// node_modules/@polkadot/api/node_modules/@polkadot/util/string/shorten.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util/string/toHex.js
init_shim();

// node_modules/@polkadot/api/detectOther.js
init_shim();

// node_modules/@polkadot/api-derive/packageInfo.js
init_shim();
var packageInfo22 = { name: "@polkadot/api-derive", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.10.1" };

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/packageInfo.js
init_shim();
var packageInfo23 = { name: "@polkadot/rpc-provider", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.10.1" };

// node_modules/@polkadot/types-known/packageInfo.js
init_shim();
var packageInfo24 = { name: "@polkadot/types-known", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.10.1" };

// node_modules/@polkadot/api/detectOther.js
var detectOther_default8 = [packageInfo22, packageInfo13, packageInfo23, packageInfo7, packageInfo24];

// node_modules/@polkadot/api/packageInfo.js
init_shim();
var packageInfo25 = { name: "@polkadot/api", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.10.1" };

// node_modules/@polkadot/api/detectPackage.js
detectPackage5(packageInfo25, null, detectOther_default8);

// node_modules/@polkadot/api/bundle.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/detectPackage.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/detectOther.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/packageInfo.js
init_shim();
var packageInfo26 = { name: "@polkadot/util-crypto", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/detectOther.js
var detectOther_default9 = [packageInfo21, packageInfo26];

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/packageInfo.js
init_shim();
var packageInfo27 = { name: "@polkadot/keyring", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/detectPackage.js
detectPackage5(packageInfo27, null, detectOther_default9);

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/bundle.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/detectPackage.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/detectOther.js
init_shim();

// node_modules/@polkadot/networks/packageInfo.js
init_shim();
var packageInfo28 = { name: "@polkadot/networks", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/detectOther.js
var detectOther_default10 = [packageInfo28, packageInfo21, packageInfo];

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/detectPackage.js
detectPackage5(packageInfo26, null, detectOther_default10);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/bundle.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/bundleInit.js
init_shim();

// node_modules/@polkadot/x-bigint/shim.js
init_shim();
exposeGlobal("BigInt", BigInt2);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/crypto.js
init_shim();
function cryptoWaitReady() {
  return waitReady().then(() => {
    if (!isReady()) {
      throw new Error("Unable to initialize @polkadot/util-crypto");
    }
    return true;
  }).catch(() => false);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/bundleInit.js
cryptoWaitReady().catch(() => {
});

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/addressToEvm.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/decode.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/base58/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/base58/bs58.js
init_shim();

// node_modules/@polkadot/api/node_modules/@scure/base/lib/esm/index.js
init_shim();
function assertNumber(n) {
  if (!Number.isSafeInteger(n))
    throw new Error(`Wrong integer: ${n}`);
}
function chain(...args) {
  const wrap = (a, b) => (c) => a(b(c));
  const encode = Array.from(args).reverse().reduce((acc, i) => acc ? wrap(acc, i.encode) : i.encode, void 0);
  const decode2 = args.reduce((acc, i) => acc ? wrap(acc, i.decode) : i.decode, void 0);
  return { encode, decode: decode2 };
}
function alphabet(alphabet5) {
  return {
    encode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return digits.map((i) => {
        assertNumber(i);
        if (i < 0 || i >= alphabet5.length)
          throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet5.length})`);
        return alphabet5[i];
      });
    },
    decode: (input) => {
      if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
        throw new Error("alphabet.decode input should be array of strings");
      return input.map((letter) => {
        if (typeof letter !== "string")
          throw new Error(`alphabet.decode: not string element=${letter}`);
        const index = alphabet5.indexOf(letter);
        if (index === -1)
          throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet5}`);
        return index;
      });
    }
  };
}
function join(separator = "") {
  if (typeof separator !== "string")
    throw new Error("join separator should be string");
  return {
    encode: (from2) => {
      if (!Array.isArray(from2) || from2.length && typeof from2[0] !== "string")
        throw new Error("join.encode input should be array of strings");
      for (let i of from2)
        if (typeof i !== "string")
          throw new Error(`join.encode: non-string input=${i}`);
      return from2.join(separator);
    },
    decode: (to) => {
      if (typeof to !== "string")
        throw new Error("join.decode input should be string");
      return to.split(separator);
    }
  };
}
function padding(bits, chr = "=") {
  assertNumber(bits);
  if (typeof chr !== "string")
    throw new Error("padding chr should be string");
  return {
    encode(data) {
      if (!Array.isArray(data) || data.length && typeof data[0] !== "string")
        throw new Error("padding.encode input should be array of strings");
      for (let i of data)
        if (typeof i !== "string")
          throw new Error(`padding.encode: non-string input=${i}`);
      while (data.length * bits % 8)
        data.push(chr);
      return data;
    },
    decode(input) {
      if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
        throw new Error("padding.encode input should be array of strings");
      for (let i of input)
        if (typeof i !== "string")
          throw new Error(`padding.decode: non-string input=${i}`);
      let end = input.length;
      if (end * bits % 8)
        throw new Error("Invalid padding: string should have whole number of bytes");
      for (; end > 0 && input[end - 1] === chr; end--) {
        if (!((end - 1) * bits % 8))
          throw new Error("Invalid padding: string has too much padding");
      }
      return input.slice(0, end);
    }
  };
}
function normalize(fn) {
  if (typeof fn !== "function")
    throw new Error("normalize fn should be function");
  return { encode: (from2) => from2, decode: (to) => fn(to) };
}
function convertRadix(data, from2, to) {
  if (from2 < 2)
    throw new Error(`convertRadix: wrong from=${from2}, base cannot be less than 2`);
  if (to < 2)
    throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
  if (!Array.isArray(data))
    throw new Error("convertRadix: data should be array");
  if (!data.length)
    return [];
  let pos = 0;
  const res = [];
  const digits = Array.from(data);
  digits.forEach((d) => {
    assertNumber(d);
    if (d < 0 || d >= from2)
      throw new Error(`Wrong integer: ${d}`);
  });
  while (true) {
    let carry = 0;
    let done = true;
    for (let i = pos; i < digits.length; i++) {
      const digit = digits[i];
      const digitBase = from2 * carry + digit;
      if (!Number.isSafeInteger(digitBase) || from2 * carry / from2 !== carry || digitBase - digit !== from2 * carry) {
        throw new Error("convertRadix: carry overflow");
      }
      carry = digitBase % to;
      const rounded = Math.floor(digitBase / to);
      digits[i] = rounded;
      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
        throw new Error("convertRadix: carry overflow");
      if (!done)
        continue;
      else if (!rounded)
        pos = i;
      else
        done = false;
    }
    res.push(carry);
    if (done)
      break;
  }
  for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
    res.push(0);
  return res.reverse();
}
var gcd = (
  /* @__NO_SIDE_EFFECTS__ */
  (a, b) => !b ? a : gcd(b, a % b)
);
var radix2carry = (
  /*@__NO_SIDE_EFFECTS__ */
  (from2, to) => from2 + (to - gcd(from2, to))
);
function convertRadix2(data, from2, to, padding5) {
  if (!Array.isArray(data))
    throw new Error("convertRadix2: data should be array");
  if (from2 <= 0 || from2 > 32)
    throw new Error(`convertRadix2: wrong from=${from2}`);
  if (to <= 0 || to > 32)
    throw new Error(`convertRadix2: wrong to=${to}`);
  if (radix2carry(from2, to) > 32) {
    throw new Error(`convertRadix2: carry overflow from=${from2} to=${to} carryBits=${radix2carry(from2, to)}`);
  }
  let carry = 0;
  let pos = 0;
  const mask = 2 ** to - 1;
  const res = [];
  for (const n of data) {
    assertNumber(n);
    if (n >= 2 ** from2)
      throw new Error(`convertRadix2: invalid data word=${n} from=${from2}`);
    carry = carry << from2 | n;
    if (pos + from2 > 32)
      throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from2}`);
    pos += from2;
    for (; pos >= to; pos -= to)
      res.push((carry >> pos - to & mask) >>> 0);
    carry &= 2 ** pos - 1;
  }
  carry = carry << to - pos & mask;
  if (!padding5 && pos >= from2)
    throw new Error("Excess padding");
  if (!padding5 && carry)
    throw new Error(`Non-zero padding: ${carry}`);
  if (padding5 && pos > 0)
    res.push(carry >>> 0);
  return res;
}
function radix(num) {
  assertNumber(num);
  return {
    encode: (bytes5) => {
      if (!(bytes5 instanceof Uint8Array))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix(Array.from(bytes5), 2 ** 8, num);
    },
    decode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("radix.decode input should be array of strings");
      return Uint8Array.from(convertRadix(digits, num, 2 ** 8));
    }
  };
}
function radix2(bits, revPadding = false) {
  assertNumber(bits);
  if (bits <= 0 || bits > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (bytes5) => {
      if (!(bytes5 instanceof Uint8Array))
        throw new Error("radix2.encode input should be Uint8Array");
      return convertRadix2(Array.from(bytes5), 8, bits, !revPadding);
    },
    decode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("radix2.decode input should be array of strings");
      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
    }
  };
}
function unsafeWrapper(fn) {
  if (typeof fn !== "function")
    throw new Error("unsafeWrapper fn should be function");
  return function(...args) {
    try {
      return fn.apply(null, args);
    } catch (e) {
    }
  };
}
function checksum(len, fn) {
  assertNumber(len);
  if (typeof fn !== "function")
    throw new Error("checksum fn should be function");
  return {
    encode(data) {
      if (!(data instanceof Uint8Array))
        throw new Error("checksum.encode: input should be Uint8Array");
      const checksum5 = fn(data).slice(0, len);
      const res = new Uint8Array(data.length + len);
      res.set(data);
      res.set(checksum5, data.length);
      return res;
    },
    decode(data) {
      if (!(data instanceof Uint8Array))
        throw new Error("checksum.decode: input should be Uint8Array");
      const payload = data.slice(0, -len);
      const newChecksum = fn(payload).slice(0, len);
      const oldChecksum = data.slice(-len);
      for (let i = 0; i < len; i++)
        if (newChecksum[i] !== oldChecksum[i])
          throw new Error("Invalid checksum");
      return payload;
    }
  };
}
var utils = { alphabet, chain, checksum, radix, radix2, join, padding };
var base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
var base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
var base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
var base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
var base64 = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
var base64url = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
var base64urlnopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join(""));
var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(""));
var base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
var base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod(pre) {
  const b = pre >> 25;
  let chk = (pre & 33554431) << 5;
  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
    if ((b >> i & 1) === 1)
      chk ^= POLYMOD_GENERATORS[i];
  }
  return chk;
}
function bechChecksum(prefix2, words, encodingConst = 1) {
  const len = prefix2.length;
  let chk = 1;
  for (let i = 0; i < len; i++) {
    const c = prefix2.charCodeAt(i);
    if (c < 33 || c > 126)
      throw new Error(`Invalid prefix (${prefix2})`);
    chk = bech32Polymod(chk) ^ c >> 5;
  }
  chk = bech32Polymod(chk);
  for (let i = 0; i < len; i++)
    chk = bech32Polymod(chk) ^ prefix2.charCodeAt(i) & 31;
  for (let v of words)
    chk = bech32Polymod(chk) ^ v;
  for (let i = 0; i < 6; i++)
    chk = bech32Polymod(chk);
  chk ^= encodingConst;
  return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));
}
function genBech32(encoding) {
  const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
  const _words = radix2(5);
  const fromWords = _words.decode;
  const toWords = _words.encode;
  const fromWordsUnsafe = unsafeWrapper(fromWords);
  function encode(prefix2, words, limit = 90) {
    if (typeof prefix2 !== "string")
      throw new Error(`bech32.encode prefix should be string, not ${typeof prefix2}`);
    if (!Array.isArray(words) || words.length && typeof words[0] !== "number")
      throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
    const actualLength = prefix2.length + 7 + words.length;
    if (limit !== false && actualLength > limit)
      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
    const lowered = prefix2.toLowerCase();
    const sum = bechChecksum(lowered, words, ENCODING_CONST);
    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
  }
  function decode2(str, limit = 90) {
    if (typeof str !== "string")
      throw new Error(`bech32.decode input should be string, not ${typeof str}`);
    if (str.length < 8 || limit !== false && str.length > limit)
      throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
    const lowered = str.toLowerCase();
    if (str !== lowered && str !== str.toUpperCase())
      throw new Error(`String must be lowercase or uppercase`);
    str = lowered;
    const sepIndex = str.lastIndexOf("1");
    if (sepIndex === 0 || sepIndex === -1)
      throw new Error(`Letter "1" must be present between prefix and data only`);
    const prefix2 = str.slice(0, sepIndex);
    const _words2 = str.slice(sepIndex + 1);
    if (_words2.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const words = BECH_ALPHABET.decode(_words2).slice(0, -6);
    const sum = bechChecksum(prefix2, words, ENCODING_CONST);
    if (!_words2.endsWith(sum))
      throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
    return { prefix: prefix2, words };
  }
  const decodeUnsafe = unsafeWrapper(decode2);
  function decodeToBytes(str) {
    const { prefix: prefix2, words } = decode2(str, false);
    return { prefix: prefix2, words, bytes: fromWords(words) };
  }
  return { encode, decode: decode2, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };
}
var bech32 = genBech32("bech32");
var bech32m = genBech32("bech32m");
var hex2 = chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize((s) => {
  if (typeof s !== "string" || s.length % 2)
    throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
  return s.toLowerCase();
}));

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/base32/helpers.js
init_shim();
function createDecode({ coder, ipfs }, validate) {
  return (value, ipfsCompat) => {
    validate(value, ipfsCompat);
    return coder.decode(ipfs && ipfsCompat ? value.substring(1) : value);
  };
}
function createEncode({ coder, ipfs }) {
  return (value, ipfsCompat) => {
    const out = coder.encode(u8aToU8a5(value));
    return ipfs && ipfsCompat ? `${ipfs}${out}` : out;
  };
}
function createIs(validate) {
  return (value, ipfsCompat) => {
    try {
      return validate(value, ipfsCompat);
    } catch {
      return false;
    }
  };
}
function createValidate({ chars: chars5, ipfs, type, withPadding }) {
  return (value, ipfsCompat) => {
    if (typeof value !== "string") {
      throw new Error(`Expected ${type} string input`);
    } else if (ipfs && ipfsCompat && !value.startsWith(ipfs)) {
      throw new Error(`Expected ipfs-compatible ${type} to start with '${ipfs}'`);
    }
    for (let i = ipfsCompat ? 1 : 0, count2 = value.length; i < count2; i++) {
      if (chars5.includes(value[i])) {
      } else if (withPadding && value[i] === "=") {
        if (i === count2 - 1) {
        } else if (value[i + 1] === "=") {
        } else {
          throw new Error(`Invalid ${type} padding sequence "${value[i]}${value[i + 1]}" at index ${i}`);
        }
      } else {
        throw new Error(`Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
      }
    }
    return true;
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/base58/bs58.js
var config = {
  chars: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
  coder: base58,
  ipfs: "z",
  type: "base58"
};
var base58Validate = createValidate(config);
var base58Decode = createDecode(config, base58Validate);
var base58Encode = createEncode(config);
var isBase58 = createIs(base58Validate);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/checksum.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/sshash.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/blake2/asU8a.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/blake2b.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/_blake2.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/_assert.js
init_shim();
function number(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error(`Wrong positive integer: ${n}`);
}
function bytes(b, ...lengths) {
  if (!(b instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
function hash(hash5) {
  if (typeof hash5 !== "function" || typeof hash5.create !== "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number(hash5.outputLen);
  number(hash5.blockLen);
}
function exists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function output(out, instance) {
  bytes(out);
  const min2 = instance.outputLen;
  if (out.length < min2) {
    throw new Error(`digestInto() expects output buffer of length at least ${min2}`);
  }
}

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/utils.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/crypto.js
init_shim();
var crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/utils.js
var u8a = (a) => a instanceof Uint8Array;
var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
var rotr = (word, shift) => word << 32 - shift | word >>> shift;
var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE)
  throw new Error("Non little-endian hardware is not supported");
var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  if (!u8a(data))
    throw new Error(`expected Uint8Array, got ${typeof data}`);
  return data;
}
function concatBytes(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a(a))
      throw new Error("Uint8Array expected");
    r.set(a, pad);
    pad += a.length;
  });
  return r;
}
var Hash = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
var toStr = {}.toString;
function checkOpts(defaults5, opts) {
  if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
    throw new Error("Options should be object or undefined");
  const merged = Object.assign(defaults5, opts);
  return merged;
}
function wrapConstructor(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function wrapConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function wrapXOFConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function randomBytes(bytesLength = 32) {
  if (crypto && typeof crypto.getRandomValues === "function") {
    return crypto.getRandomValues(new Uint8Array(bytesLength));
  }
  throw new Error("crypto.getRandomValues must be defined");
}

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/_blake2.js
var SIGMA = new Uint8Array([
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3,
  11,
  8,
  12,
  0,
  5,
  2,
  15,
  13,
  10,
  14,
  3,
  6,
  7,
  1,
  9,
  4,
  7,
  9,
  3,
  1,
  13,
  12,
  11,
  14,
  2,
  6,
  5,
  10,
  4,
  0,
  15,
  8,
  9,
  0,
  5,
  7,
  2,
  4,
  10,
  15,
  14,
  1,
  11,
  12,
  6,
  8,
  3,
  13,
  2,
  12,
  6,
  10,
  0,
  11,
  8,
  3,
  4,
  13,
  7,
  5,
  15,
  14,
  1,
  9,
  12,
  5,
  1,
  15,
  14,
  13,
  4,
  10,
  0,
  7,
  6,
  3,
  9,
  2,
  8,
  11,
  13,
  11,
  7,
  14,
  12,
  1,
  3,
  9,
  5,
  0,
  15,
  4,
  8,
  6,
  2,
  10,
  6,
  15,
  14,
  9,
  11,
  3,
  0,
  8,
  12,
  2,
  13,
  7,
  1,
  4,
  10,
  5,
  10,
  2,
  8,
  4,
  7,
  6,
  1,
  5,
  15,
  11,
  9,
  14,
  3,
  12,
  13,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3
]);
var BLAKE2 = class extends Hash {
  constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.length = 0;
    this.pos = 0;
    this.finished = false;
    this.destroyed = false;
    number(blockLen);
    number(outputLen);
    number(keyLen);
    if (outputLen < 0 || outputLen > keyLen)
      throw new Error("outputLen bigger than keyLen");
    if (opts.key !== void 0 && (opts.key.length < 1 || opts.key.length > keyLen))
      throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
    if (opts.salt !== void 0 && opts.salt.length !== saltLen)
      throw new Error(`salt must be ${saltLen} byte long or undefined`);
    if (opts.personalization !== void 0 && opts.personalization.length !== persLen)
      throw new Error(`personalization must be ${persLen} byte long or undefined`);
    this.buffer32 = u32(this.buffer = new Uint8Array(blockLen));
  }
  update(data) {
    exists(this);
    const { blockLen, buffer: buffer2, buffer32 } = this;
    data = toBytes(data);
    const len = data.length;
    const offset = data.byteOffset;
    const buf = data.buffer;
    for (let pos = 0; pos < len; ) {
      if (this.pos === blockLen) {
        this.compress(buffer32, 0, false);
        this.pos = 0;
      }
      const take2 = Math.min(blockLen - this.pos, len - pos);
      const dataOffset = offset + pos;
      if (take2 === blockLen && !(dataOffset % 4) && pos + take2 < len) {
        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
          this.length += blockLen;
          this.compress(data32, pos32, false);
        }
        continue;
      }
      buffer2.set(data.subarray(pos, pos + take2), this.pos);
      this.pos += take2;
      this.length += take2;
      pos += take2;
    }
    return this;
  }
  digestInto(out) {
    exists(this);
    output(out, this);
    const { pos, buffer32 } = this;
    this.finished = true;
    this.buffer.subarray(pos).fill(0);
    this.compress(buffer32, 0, true);
    const out32 = u32(out);
    this.get().forEach((v, i) => out32[i] = v);
  }
  digest() {
    const { buffer: buffer2, outputLen } = this;
    this.digestInto(buffer2);
    const res = buffer2.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    const { buffer: buffer2, length, finished, destroyed, outputLen, pos } = this;
    to || (to = new this.constructor({ dkLen: outputLen }));
    to.set(...this.get());
    to.length = length;
    to.finished = finished;
    to.destroyed = destroyed;
    to.outputLen = outputLen;
    to.buffer.set(buffer2);
    to.pos = pos;
    return to;
  }
};

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/_u64.js
init_shim();
var U32_MASK64 = BigInt(2 ** 32 - 1);
var _32n = BigInt(32);
function fromBig(n, le = false) {
  if (le)
    return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
  return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
function split(lst, le = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0; i < lst.length; i++) {
    const { h, l: l19 } = fromBig(lst[i], le);
    [Ah[i], Al[i]] = [h, l19];
  }
  return [Ah, Al];
}
var toBig = (h, l19) => BigInt(h >>> 0) << _32n | BigInt(l19 >>> 0);
var shrSH = (h, _l, s) => h >>> s;
var shrSL = (h, l19, s) => h << 32 - s | l19 >>> s;
var rotrSH = (h, l19, s) => h >>> s | l19 << 32 - s;
var rotrSL = (h, l19, s) => h << 32 - s | l19 >>> s;
var rotrBH = (h, l19, s) => h << 64 - s | l19 >>> s - 32;
var rotrBL = (h, l19, s) => h >>> s - 32 | l19 << 64 - s;
var rotr32H = (_h, l19) => l19;
var rotr32L = (h, _l) => h;
var rotlSH = (h, l19, s) => h << s | l19 >>> 32 - s;
var rotlSL = (h, l19, s) => l19 << s | h >>> 32 - s;
var rotlBH = (h, l19, s) => l19 << s - 32 | h >>> 64 - s;
var rotlBL = (h, l19, s) => h << s - 32 | l19 >>> 64 - s;
function add(Ah, Al, Bh, Bl) {
  const l19 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l19 / 2 ** 32 | 0) | 0, l: l19 | 0 };
}
var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
var u64 = {
  fromBig,
  split,
  toBig,
  shrSH,
  shrSL,
  rotrSH,
  rotrSL,
  rotrBH,
  rotrBL,
  rotr32H,
  rotr32L,
  rotlSH,
  rotlSL,
  rotlBH,
  rotlBL,
  add,
  add3L,
  add3H,
  add4L,
  add4H,
  add5H,
  add5L
};
var u64_default = u64;

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/blake2b.js
var IV = new Uint32Array([
  4089235720,
  1779033703,
  2227873595,
  3144134277,
  4271175723,
  1013904242,
  1595750129,
  2773480762,
  2917565137,
  1359893119,
  725511199,
  2600822924,
  4215389547,
  528734635,
  327033209,
  1541459225
]);
var BUF = new Uint32Array(32);
function G1(a, b, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BUF[2 * a], Ah = BUF[2 * a + 1];
  let Bl = BUF[2 * b], Bh = BUF[2 * b + 1];
  let Cl = BUF[2 * c], Ch = BUF[2 * c + 1];
  let Dl = BUF[2 * d], Dh = BUF[2 * d + 1];
  let ll = u64_default.add3L(Al, Bl, Xl);
  Ah = u64_default.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64_default.rotr32H(Dh, Dl), Dl: u64_default.rotr32L(Dh, Dl) });
  ({ h: Ch, l: Cl } = u64_default.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64_default.rotrSH(Bh, Bl, 24), Bl: u64_default.rotrSL(Bh, Bl, 24) });
  BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
  BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
  BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
  BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
}
function G2(a, b, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BUF[2 * a], Ah = BUF[2 * a + 1];
  let Bl = BUF[2 * b], Bh = BUF[2 * b + 1];
  let Cl = BUF[2 * c], Ch = BUF[2 * c + 1];
  let Dl = BUF[2 * d], Dh = BUF[2 * d + 1];
  let ll = u64_default.add3L(Al, Bl, Xl);
  Ah = u64_default.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64_default.rotrSH(Dh, Dl, 16), Dl: u64_default.rotrSL(Dh, Dl, 16) });
  ({ h: Ch, l: Cl } = u64_default.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64_default.rotrBH(Bh, Bl, 63), Bl: u64_default.rotrBL(Bh, Bl, 63) });
  BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
  BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
  BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
  BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
}
var BLAKE2b = class extends BLAKE2 {
  constructor(opts = {}) {
    super(128, opts.dkLen === void 0 ? 64 : opts.dkLen, opts, 64, 16, 16);
    this.v0l = IV[0] | 0;
    this.v0h = IV[1] | 0;
    this.v1l = IV[2] | 0;
    this.v1h = IV[3] | 0;
    this.v2l = IV[4] | 0;
    this.v2h = IV[5] | 0;
    this.v3l = IV[6] | 0;
    this.v3h = IV[7] | 0;
    this.v4l = IV[8] | 0;
    this.v4h = IV[9] | 0;
    this.v5l = IV[10] | 0;
    this.v5h = IV[11] | 0;
    this.v6l = IV[12] | 0;
    this.v6h = IV[13] | 0;
    this.v7l = IV[14] | 0;
    this.v7h = IV[15] | 0;
    const keyLength = opts.key ? opts.key.length : 0;
    this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
    if (opts.salt) {
      const salt = u32(toBytes(opts.salt));
      this.v4l ^= salt[0];
      this.v4h ^= salt[1];
      this.v5l ^= salt[2];
      this.v5h ^= salt[3];
    }
    if (opts.personalization) {
      const pers = u32(toBytes(opts.personalization));
      this.v6l ^= pers[0];
      this.v6h ^= pers[1];
      this.v7l ^= pers[2];
      this.v7h ^= pers[3];
    }
    if (opts.key) {
      const tmp = new Uint8Array(this.blockLen);
      tmp.set(toBytes(opts.key));
      this.update(tmp);
    }
  }
  // prettier-ignore
  get() {
    let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
    return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
  }
  // prettier-ignore
  set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
    this.v0l = v0l | 0;
    this.v0h = v0h | 0;
    this.v1l = v1l | 0;
    this.v1h = v1h | 0;
    this.v2l = v2l | 0;
    this.v2h = v2h | 0;
    this.v3l = v3l | 0;
    this.v3h = v3h | 0;
    this.v4l = v4l | 0;
    this.v4h = v4h | 0;
    this.v5l = v5l | 0;
    this.v5h = v5h | 0;
    this.v6l = v6l | 0;
    this.v6h = v6h | 0;
    this.v7l = v7l | 0;
    this.v7h = v7h | 0;
  }
  compress(msg, offset, isLast) {
    this.get().forEach((v, i) => BUF[i] = v);
    BUF.set(IV, 16);
    let { h, l: l19 } = u64_default.fromBig(BigInt(this.length));
    BUF[24] = IV[8] ^ l19;
    BUF[25] = IV[9] ^ h;
    if (isLast) {
      BUF[28] = ~BUF[28];
      BUF[29] = ~BUF[29];
    }
    let j = 0;
    const s = SIGMA;
    for (let i = 0; i < 12; i++) {
      G1(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G2(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G1(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G2(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G1(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G2(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G1(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G2(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G1(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G2(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G1(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G2(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G1(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G2(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G1(3, 4, 9, 14, msg, offset + 2 * s[j++]);
      G2(3, 4, 9, 14, msg, offset + 2 * s[j++]);
    }
    this.v0l ^= BUF[0] ^ BUF[16];
    this.v0h ^= BUF[1] ^ BUF[17];
    this.v1l ^= BUF[2] ^ BUF[18];
    this.v1h ^= BUF[3] ^ BUF[19];
    this.v2l ^= BUF[4] ^ BUF[20];
    this.v2h ^= BUF[5] ^ BUF[21];
    this.v3l ^= BUF[6] ^ BUF[22];
    this.v3h ^= BUF[7] ^ BUF[23];
    this.v4l ^= BUF[8] ^ BUF[24];
    this.v4h ^= BUF[9] ^ BUF[25];
    this.v5l ^= BUF[10] ^ BUF[26];
    this.v5h ^= BUF[11] ^ BUF[27];
    this.v6l ^= BUF[12] ^ BUF[28];
    this.v6h ^= BUF[13] ^ BUF[29];
    this.v7l ^= BUF[14] ^ BUF[30];
    this.v7h ^= BUF[15] ^ BUF[31];
    BUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer32.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var blake2b2 = wrapConstructorWithOpts((opts) => new BLAKE2b(opts));

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/helpers.js
init_shim();
function createAsHex(fn) {
  return (...args) => u8aToHex5(fn(...args));
}
function createBitHasher(bitLength, fn) {
  return (data, onlyJs) => fn(data, bitLength, onlyJs);
}
function createDualHasher(wa, js) {
  return (value, bitLength = 256, onlyJs) => {
    const u8a9 = u8aToU8a5(value);
    return !hasBigInt5 || !onlyJs && isReady() ? wa[bitLength](u8a9) : js[bitLength](u8a9);
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/blake2/asU8a.js
function blake2AsU8a(data, bitLength = 256, key, onlyJs) {
  const byteLength = Math.ceil(bitLength / 8);
  const u8a9 = u8aToU8a5(data);
  return !hasBigInt5 || !onlyJs && isReady() ? blake2b(u8a9, u8aToU8a5(key), byteLength) : key ? blake2b2(u8a9, { dkLen: byteLength, key }) : blake2b2(u8a9, { dkLen: byteLength });
}
var blake2AsHex = createAsHex(blake2AsU8a);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/sshash.js
var SS58_PREFIX = stringToU8a5("SS58PRE");
function sshash(key) {
  return blake2AsU8a(u8aConcat5(SS58_PREFIX, key), 512);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/checksum.js
function checkAddressChecksum(decoded) {
  const ss58Length = decoded[0] & 64 ? 2 : 1;
  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;
  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
  const length = decoded.length - (isPublicKey ? 2 : 1);
  const hash5 = sshash(decoded.subarray(0, length));
  const isValid = (decoded[0] & 128) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash5[0] && decoded[decoded.length - 1] === hash5[1] : decoded[decoded.length - 1] === hash5[0]);
  return [isValid, length, ss58Length, ss58Decoded];
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/defaults.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/networks.js
init_shim();

// node_modules/@polkadot/networks/index.js
init_shim();

// node_modules/@polkadot/networks/interfaces.js
init_shim();

// node_modules/@polkadot/networks/defaults/index.js
init_shim();

// node_modules/@polkadot/networks/defaults/genesis.js
init_shim();
var knownGenesis = {
  acala: [
    "0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"
  ],
  ajuna: [
    "0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"
  ],
  "aleph-node": [
    "0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"
  ],
  astar: [
    "0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"
  ],
  basilisk: [
    "0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"
  ],
  bifrost: [
    "0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"
  ],
  "bifrost-kusama": [
    "0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"
  ],
  bittensor: [
    "0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03"
  ],
  centrifuge: [
    "0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82",
    "0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"
  ],
  cere: [
    "0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c"
  ],
  composable: [
    "0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"
  ],
  darwinia: [
    "0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"
  ],
  "dock-mainnet": [
    "0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae",
    "0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"
  ],
  edgeware: [
    "0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"
  ],
  enjin: [
    "0xd8761d3c88f26dc12875c00d3165f7d67243d56fc85b4cf19937601a7916e5a9"
  ],
  equilibrium: [
    "0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"
  ],
  genshiro: [
    "0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"
  ],
  hydradx: [
    "0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d",
    "0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc",
    "0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9",
    "0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047",
    "0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"
    // Snakenet Gen1
  ],
  "interlay-parachain": [
    "0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"
  ],
  karura: [
    "0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"
  ],
  khala: [
    "0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"
  ],
  kulupu: [
    "0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"
  ],
  kusama: [
    "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe",
    "0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636",
    "0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"
    // Kusama CC1
  ],
  matrixchain: [
    "0x3af4ff48ec76d2efc8476730f423ac07e25ad48f5f4c9dc39c778b164d808615"
  ],
  nodle: [
    "0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"
  ],
  origintrail: [
    "0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"
  ],
  p3d: [
    "0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66"
  ],
  parallel: [
    "0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"
  ],
  pendulum: [
    "0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"
  ],
  phala: [
    "0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"
  ],
  picasso: [
    "0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc",
    "0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"
  ],
  polkadex: [
    "0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"
  ],
  polkadot: [
    "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"
  ],
  polymesh: [
    "0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"
  ],
  quartz: [
    "0xcd4d732201ebe5d6b014edda071c4203e16867305332301dc8d092044b28e554"
  ],
  rococo: [
    "0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e",
    "0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897",
    "0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770",
    "0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff",
    "0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a",
    "0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9",
    "0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779",
    "0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215",
    "0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9",
    "0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147",
    "0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd",
    "0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"
  ],
  sora: [
    "0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"
  ],
  stafi: [
    "0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"
  ],
  statemine: [
    "0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"
  ],
  statemint: [
    "0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"
  ],
  subsocial: [
    "0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"
  ],
  ternoa: [
    "0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"
  ],
  unique: [
    "0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"
  ],
  vtb: [
    "0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f",
    "0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"
  ],
  westend: [
    "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"
  ],
  xxnetwork: [
    "0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"
  ],
  zeitgeist: [
    "0x1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060"
  ]
};

// node_modules/@polkadot/networks/defaults/icons.js
init_shim();
var knownIcon = {
  centrifuge: "polkadot",
  kusama: "polkadot",
  polkadot: "polkadot",
  sora: "polkadot",
  statemine: "polkadot",
  statemint: "polkadot",
  westmint: "polkadot"
};

// node_modules/@polkadot/networks/defaults/ledger.js
init_shim();
var knownLedger = {
  acala: 787,
  ajuna: 354,
  "aleph-node": 643,
  astar: 810,
  bifrost: 788,
  "bifrost-kusama": 788,
  centrifuge: 747,
  composable: 354,
  darwinia: 354,
  "dock-mainnet": 594,
  edgeware: 523,
  enjin: 1155,
  equilibrium: 99999997,
  genshiro: 99999996,
  hydradx: 354,
  "interlay-parachain": 354,
  karura: 686,
  khala: 434,
  kusama: 434,
  matrixchain: 1155,
  nodle: 1003,
  origintrail: 354,
  parallel: 354,
  pendulum: 354,
  phala: 354,
  picasso: 434,
  polkadex: 799,
  polkadot: 354,
  polymesh: 595,
  quartz: 631,
  sora: 617,
  stafi: 907,
  statemine: 434,
  statemint: 354,
  ternoa: 995,
  unique: 661,
  vtb: 694,
  xxnetwork: 1955,
  zeitgeist: 354
};

// node_modules/@polkadot/networks/defaults/testnets.js
init_shim();
var knownTestnet = {
  "": true,
  "cess-testnet": true,
  "dock-testnet": true,
  jupiter: true,
  "mathchain-testnet": true,
  p3dt: true,
  subspace_testnet: true,
  "zero-alphaville": true
};

// node_modules/@polkadot/networks/interfaces.js
var UNSORTED = [0, 2, 42];
var TESTNETS = ["testnet"];
function toExpanded(o) {
  var _a, _b;
  const network = o.network || "";
  const nameParts = network.replace(/_/g, "-").split("-");
  const n = o;
  n.slip44 = knownLedger[network];
  n.hasLedgerSupport = !!n.slip44;
  n.genesisHash = knownGenesis[network] || [];
  n.icon = knownIcon[network] || "substrate";
  n.isTestnet = !!knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
  n.isIgnored = n.isTestnet || !(o.standardAccount && ((_a = o.decimals) == null ? void 0 : _a.length) && ((_b = o.symbols) == null ? void 0 : _b.length)) && o.prefix !== 42;
  return n;
}
function filterSelectable({ genesisHash, prefix: prefix2 }) {
  return !!genesisHash.length || prefix2 === 42;
}
function filterAvailable(n) {
  return !n.isIgnored && !!n.network;
}
function sortNetworks(a, b) {
  const isUnSortedA = UNSORTED.includes(a.prefix);
  const isUnSortedB = UNSORTED.includes(b.prefix);
  return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;
}
var allNetworks = esm_default.map(toExpanded);
var availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks);
var selectableNetworks = availableNetworks.filter(filterSelectable);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/defaults.js
var defaults = {
  allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
  // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
  allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
  allowedPrefix: availableNetworks.map(({ prefix: prefix2 }) => prefix2),
  prefix: 42
};

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/decode.js
function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
  if (!encoded) {
    throw new Error("Invalid empty address passed");
  }
  if (isU8a5(encoded) || isHex5(encoded)) {
    return u8aToU8a5(encoded);
  }
  try {
    const decoded = base58Decode(encoded);
    if (!defaults.allowedEncodedLengths.includes(decoded.length)) {
      throw new Error("Invalid decoded address length");
    }
    const [isValid, endPos, ss58Length, ss58Decoded] = checkAddressChecksum(decoded);
    if (!isValid && !ignoreChecksum) {
      throw new Error("Invalid decoded address checksum");
    } else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
      throw new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
    }
    return decoded.slice(ss58Length, endPos);
  } catch (error) {
    throw new Error(`Decoding ${encoded}: ${error.message}`);
  }
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/check.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/derive.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/extractPath.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/DeriveJunction.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/bn.js
init_shim();
var BN_BE_OPTS = { isLe: false };
var BN_LE_OPTS = { isLe: true };
var BN_BE_32_OPTS = { bitLength: 32, isLe: false };
var BN_LE_32_OPTS = { bitLength: 32, isLe: true };
var BN_BE_256_OPTS = { bitLength: 256, isLe: false };
var BN_LE_256_OPTS = { bitLength: 256, isLe: true };

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/DeriveJunction.js
var RE_NUMBER = /^\d+$/;
var JUNCTION_ID_LEN = 32;
var DeriveJunction = class {
  constructor() {
    __publicField(this, "__internal__chainCode", new Uint8Array(32));
    __publicField(this, "__internal__isHard", false);
  }
  static from(value) {
    const result = new DeriveJunction();
    const [code, isHard] = value.startsWith("/") ? [value.substring(1), true] : [value, false];
    result.soft(RE_NUMBER.test(code) ? new import_bn41.default(code, 10) : code);
    return isHard ? result.harden() : result;
  }
  get chainCode() {
    return this.__internal__chainCode;
  }
  get isHard() {
    return this.__internal__isHard;
  }
  get isSoft() {
    return !this.__internal__isHard;
  }
  hard(value) {
    return this.soft(value).harden();
  }
  harden() {
    this.__internal__isHard = true;
    return this;
  }
  soft(value) {
    if (isNumber5(value) || isBn4(value) || isBigInt4(value)) {
      return this.soft(bnToU8a5(value, BN_LE_256_OPTS));
    } else if (isHex5(value)) {
      return this.soft(hexToU8a5(value));
    } else if (isString5(value)) {
      return this.soft(compactAddLength5(stringToU8a5(value)));
    } else if (value.length > JUNCTION_ID_LEN) {
      return this.soft(blake2AsU8a(value));
    }
    this.__internal__chainCode.fill(0);
    this.__internal__chainCode.set(value, 0);
    return this;
  }
  soften() {
    this.__internal__isHard = false;
    return this;
  }
};

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/extractPath.js
var RE_JUNCTION = /\/(\/?)([^/]+)/g;
function keyExtractPath(derivePath) {
  const parts = derivePath.match(RE_JUNCTION);
  const path = [];
  let constructed = "";
  if (parts) {
    constructed = parts.join("");
    for (const p of parts) {
      path.push(DeriveJunction.from(p.substring(1)));
    }
  }
  if (constructed !== derivePath) {
    throw new Error(`Re-constructed path "${constructed}" does not match input`);
  }
  return {
    parts,
    path
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/extractSuri.js
init_shim();
var RE_CAPTURE = /^(\w+( \w+)*)((\/\/?[^/]+)*)(\/\/\/(.*))?$/;
function keyExtractSuri(suri) {
  const matches = suri.match(RE_CAPTURE);
  if (matches === null) {
    throw new Error("Unable to match provided value to a secret URI");
  }
  const [, phrase, , derivePath, , , password] = matches;
  const { path } = keyExtractPath(derivePath);
  return {
    derivePath,
    password,
    path,
    phrase
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/fromPath.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/hdkdEcdsa.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/deriveHard.js
init_shim();
var HDKD = compactAddLength5(stringToU8a5("Secp256k1HDKD"));
function secp256k1DeriveHard(seed, chainCode) {
  if (!isU8a5(chainCode) || chainCode.length !== 32) {
    throw new Error("Invalid chainCode passed to derive");
  }
  return blake2AsU8a(u8aConcat5(HDKD, seed, chainCode), 256);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/pair/fromSeed.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/secp256k1.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/sha256.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/_sha2.js
init_shim();
function setBigUint64(view, byteOffset, value, isLE5) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE5);
  const _32n9 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n9 & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE5 ? 4 : 0;
  const l19 = isLE5 ? 0 : 4;
  view.setUint32(byteOffset + h, wh, isLE5);
  view.setUint32(byteOffset + l19, wl, isLE5);
}
var SHA2 = class extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE5) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE5;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    exists(this);
    const { view, buffer: buffer2, blockLen } = this;
    data = toBytes(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take2 = Math.min(blockLen - this.pos, len - pos);
      if (take2 === blockLen) {
        const dataView = createView(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer2.set(data.subarray(pos, pos + take2), this.pos);
      this.pos += take2;
      pos += take2;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    exists(this);
    output(out, this);
    this.finished = true;
    const { buffer: buffer2, view, blockLen, isLE: isLE5 } = this;
    let { pos } = this;
    buffer2[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i = pos; i < blockLen; i++)
      buffer2[i] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE5);
    this.process(view, 0);
    const oview = createView(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i = 0; i < outLen; i++)
      oview.setUint32(4 * i, state[i], isLE5);
  }
  digest() {
    const { buffer: buffer2, outputLen } = this;
    this.digestInto(buffer2);
    const res = buffer2.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
    to.length = length;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length % blockLen)
      to.buffer.set(buffer2);
    return to;
  }
};

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/sha256.js
var Chi = (a, b, c) => a & b ^ ~a & c;
var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
var SHA256_K = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var IV2 = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA256_W = new Uint32Array(64);
var SHA256 = class extends SHA2 {
  constructor() {
    super(64, 32, 8, false);
    this.A = IV2[0] | 0;
    this.B = IV2[1] | 0;
    this.C = IV2[2] | 0;
    this.D = IV2[3] | 0;
    this.E = IV2[4] | 0;
    this.F = IV2[5] | 0;
    this.G = IV2[6] | 0;
    this.H = IV2[7] | 0;
  }
  get() {
    const { A, B, C, D, E, F, G, H } = this;
    return [A, B, C, D, E, F, G, H];
  }
  // prettier-ignore
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA256_W[i] = view.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W[i - 15];
      const W2 = SHA256_W[i - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
    }
    let { A, B, C, D, E, F, G, H } = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
      const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
      const T2 = sigma0 + Maj(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T1 | 0;
      D = C;
      C = B;
      B = A;
      A = T1 + T2 | 0;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    SHA256_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
};
var SHA224 = class extends SHA256 {
  constructor() {
    super();
    this.A = 3238371032 | 0;
    this.B = 914150663 | 0;
    this.C = 812702999 | 0;
    this.D = 4144912697 | 0;
    this.E = 4290775857 | 0;
    this.F = 1750603025 | 0;
    this.G = 1694076839 | 0;
    this.H = 3204075428 | 0;
    this.outputLen = 28;
  }
};
var sha2562 = wrapConstructor(() => new SHA256());
var sha224 = wrapConstructor(() => new SHA224());

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/abstract/modular.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/abstract/utils.js
var utils_exports = {};
__export(utils_exports, {
  bitGet: () => bitGet,
  bitLen: () => bitLen,
  bitMask: () => bitMask,
  bitSet: () => bitSet,
  bytesToHex: () => bytesToHex,
  bytesToNumberBE: () => bytesToNumberBE,
  bytesToNumberLE: () => bytesToNumberLE,
  concatBytes: () => concatBytes2,
  createHmacDrbg: () => createHmacDrbg,
  ensureBytes: () => ensureBytes,
  equalBytes: () => equalBytes,
  hexToBytes: () => hexToBytes,
  hexToNumber: () => hexToNumber5,
  numberToBytesBE: () => numberToBytesBE,
  numberToBytesLE: () => numberToBytesLE,
  numberToHexUnpadded: () => numberToHexUnpadded,
  numberToVarBytesBE: () => numberToVarBytesBE,
  utf8ToBytes: () => utf8ToBytes2,
  validateObject: () => validateObject
});
init_shim();
var _0n6 = BigInt(0);
var _1n6 = BigInt(1);
var _2n5 = BigInt(2);
var u8a2 = (a) => a instanceof Uint8Array;
var hexes2 = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function bytesToHex(bytes5) {
  if (!u8a2(bytes5))
    throw new Error("Uint8Array expected");
  let hex11 = "";
  for (let i = 0; i < bytes5.length; i++) {
    hex11 += hexes2[bytes5[i]];
  }
  return hex11;
}
function numberToHexUnpadded(num) {
  const hex11 = num.toString(16);
  return hex11.length & 1 ? `0${hex11}` : hex11;
}
function hexToNumber5(hex11) {
  if (typeof hex11 !== "string")
    throw new Error("hex string expected, got " + typeof hex11);
  return BigInt(hex11 === "" ? "0" : `0x${hex11}`);
}
function hexToBytes(hex11) {
  if (typeof hex11 !== "string")
    throw new Error("hex string expected, got " + typeof hex11);
  const len = hex11.length;
  if (len % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + len);
  const array = new Uint8Array(len / 2);
  for (let i = 0; i < array.length; i++) {
    const j = i * 2;
    const hexByte = hex11.slice(j, j + 2);
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte) || byte < 0)
      throw new Error("Invalid byte sequence");
    array[i] = byte;
  }
  return array;
}
function bytesToNumberBE(bytes5) {
  return hexToNumber5(bytesToHex(bytes5));
}
function bytesToNumberLE(bytes5) {
  if (!u8a2(bytes5))
    throw new Error("Uint8Array expected");
  return hexToNumber5(bytesToHex(Uint8Array.from(bytes5).reverse()));
}
function numberToBytesBE(n, len) {
  return hexToBytes(n.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE(n, len) {
  return numberToBytesBE(n, len).reverse();
}
function numberToVarBytesBE(n) {
  return hexToBytes(numberToHexUnpadded(n));
}
function ensureBytes(title, hex11, expectedLength) {
  let res;
  if (typeof hex11 === "string") {
    try {
      res = hexToBytes(hex11);
    } catch (e) {
      throw new Error(`${title} must be valid hex string, got "${hex11}". Cause: ${e}`);
    }
  } else if (u8a2(hex11)) {
    res = Uint8Array.from(hex11);
  } else {
    throw new Error(`${title} must be hex string or Uint8Array`);
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
  return res;
}
function concatBytes2(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a2(a))
      throw new Error("Uint8Array expected");
    r.set(a, pad);
    pad += a.length;
  });
  return r;
}
function equalBytes(b1, b2) {
  if (b1.length !== b2.length)
    return false;
  for (let i = 0; i < b1.length; i++)
    if (b1[i] !== b2[i])
      return false;
  return true;
}
function utf8ToBytes2(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function bitLen(n) {
  let len;
  for (len = 0; n > _0n6; n >>= _1n6, len += 1)
    ;
  return len;
}
function bitGet(n, pos) {
  return n >> BigInt(pos) & _1n6;
}
var bitSet = (n, pos, value) => {
  return n | (value ? _1n6 : _0n6) << BigInt(pos);
};
var bitMask = (n) => (_2n5 << BigInt(n - 1)) - _1n6;
var u8n = (data) => new Uint8Array(data);
var u8fr = (arr) => Uint8Array.from(arr);
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  let v = u8n(hashLen);
  let k = u8n(hashLen);
  let i = 0;
  const reset = () => {
    v.fill(1);
    k.fill(0);
    i = 0;
  };
  const h = (...b) => hmacFn(k, v, ...b);
  const reseed = (seed = u8n()) => {
    k = h(u8fr([0]), seed);
    v = h();
    if (seed.length === 0)
      return;
    k = h(u8fr([1]), seed);
    v = h();
  };
  const gen5 = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v = h();
      const sl = v.slice();
      out.push(sl);
      len += v.length;
    }
    return concatBytes2(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = void 0;
    while (!(res = pred(gen5())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
var validatorFns = {
  bigint: (val) => typeof val === "bigint",
  function: (val) => typeof val === "function",
  boolean: (val) => typeof val === "boolean",
  string: (val) => typeof val === "string",
  stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
  isSafeInteger: (val) => Number.isSafeInteger(val),
  array: (val) => Array.isArray(val),
  field: (val, object) => object.Fp.isValid(val),
  hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
function validateObject(object, validators2, optValidators = {}) {
  const checkField = (fieldName, type, isOptional) => {
    const checkVal = validatorFns[type];
    if (typeof checkVal !== "function")
      throw new Error(`Invalid validator "${type}", expected function`);
    const val = object[fieldName];
    if (isOptional && val === void 0)
      return;
    if (!checkVal(val, object)) {
      throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
    }
  };
  for (const [fieldName, type] of Object.entries(validators2))
    checkField(fieldName, type, false);
  for (const [fieldName, type] of Object.entries(optValidators))
    checkField(fieldName, type, true);
  return object;
}

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/abstract/modular.js
var _0n7 = BigInt(0);
var _1n7 = BigInt(1);
var _2n6 = BigInt(2);
var _3n5 = BigInt(3);
var _4n5 = BigInt(4);
var _5n5 = BigInt(5);
var _8n5 = BigInt(8);
var _9n5 = BigInt(9);
var _16n = BigInt(16);
function mod(a, b) {
  const result = a % b;
  return result >= _0n7 ? result : b + result;
}
function pow(num, power, modulo) {
  if (modulo <= _0n7 || power < _0n7)
    throw new Error("Expected power/modulo > 0");
  if (modulo === _1n7)
    return _0n7;
  let res = _1n7;
  while (power > _0n7) {
    if (power & _1n7)
      res = res * num % modulo;
    num = num * num % modulo;
    power >>= _1n7;
  }
  return res;
}
function pow2(x, power, modulo) {
  let res = x;
  while (power-- > _0n7) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert(number5, modulo) {
  if (number5 === _0n7 || modulo <= _0n7) {
    throw new Error(`invert: expected positive integers, got n=${number5} mod=${modulo}`);
  }
  let a = mod(number5, modulo);
  let b = modulo;
  let x = _0n7, y = _1n7, u = _1n7, v = _0n7;
  while (a !== _0n7) {
    const q = b / a;
    const r = b % a;
    const m = x - u * q;
    const n = y - v * q;
    b = a, a = r, x = u, y = v, u = m, v = n;
  }
  const gcd5 = b;
  if (gcd5 !== _1n7)
    throw new Error("invert: does not exist");
  return mod(x, modulo);
}
function tonelliShanks(P) {
  const legendreC = (P - _1n7) / _2n6;
  let Q, S, Z;
  for (Q = P - _1n7, S = 0; Q % _2n6 === _0n7; Q /= _2n6, S++)
    ;
  for (Z = _2n6; Z < P && pow(Z, legendreC, P) !== P - _1n7; Z++)
    ;
  if (S === 1) {
    const p1div4 = (P + _1n7) / _4n5;
    return function tonelliFast(Fp9, n) {
      const root = Fp9.pow(n, p1div4);
      if (!Fp9.eql(Fp9.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  const Q1div2 = (Q + _1n7) / _2n6;
  return function tonelliSlow(Fp9, n) {
    if (Fp9.pow(n, legendreC) === Fp9.neg(Fp9.ONE))
      throw new Error("Cannot find square root");
    let r = S;
    let g = Fp9.pow(Fp9.mul(Fp9.ONE, Z), Q);
    let x = Fp9.pow(n, Q1div2);
    let b = Fp9.pow(n, Q);
    while (!Fp9.eql(b, Fp9.ONE)) {
      if (Fp9.eql(b, Fp9.ZERO))
        return Fp9.ZERO;
      let m = 1;
      for (let t2 = Fp9.sqr(b); m < r; m++) {
        if (Fp9.eql(t2, Fp9.ONE))
          break;
        t2 = Fp9.sqr(t2);
      }
      const ge5 = Fp9.pow(g, _1n7 << BigInt(r - m - 1));
      g = Fp9.sqr(ge5);
      x = Fp9.mul(x, ge5);
      b = Fp9.mul(b, g);
      r = m;
    }
    return x;
  };
}
function FpSqrt(P) {
  if (P % _4n5 === _3n5) {
    const p1div4 = (P + _1n7) / _4n5;
    return function sqrt3mod4(Fp9, n) {
      const root = Fp9.pow(n, p1div4);
      if (!Fp9.eql(Fp9.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _8n5 === _5n5) {
    const c1 = (P - _5n5) / _8n5;
    return function sqrt5mod8(Fp9, n) {
      const n2 = Fp9.mul(n, _2n6);
      const v = Fp9.pow(n2, c1);
      const nv = Fp9.mul(n, v);
      const i = Fp9.mul(Fp9.mul(nv, _2n6), v);
      const root = Fp9.mul(nv, Fp9.sub(i, Fp9.ONE));
      if (!Fp9.eql(Fp9.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _16n === _9n5) {
  }
  return tonelliShanks(P);
}
var isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n7) === _1n7;
var FIELD_FIELDS = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  };
  const opts = FIELD_FIELDS.reduce((map2, val) => {
    map2[val] = "function";
    return map2;
  }, initial);
  return validateObject(field, opts);
}
function FpPow(f, num, power) {
  if (power < _0n7)
    throw new Error("Expected power > 0");
  if (power === _0n7)
    return f.ONE;
  if (power === _1n7)
    return num;
  let p = f.ONE;
  let d = num;
  while (power > _0n7) {
    if (power & _1n7)
      p = f.mul(p, d);
    d = f.sqr(d);
    power >>= _1n7;
  }
  return p;
}
function FpInvertBatch(f, nums) {
  const tmp = new Array(nums.length);
  const lastMultiplied = nums.reduce((acc, num, i) => {
    if (f.is0(num))
      return acc;
    tmp[i] = acc;
    return f.mul(acc, num);
  }, f.ONE);
  const inverted = f.inv(lastMultiplied);
  nums.reduceRight((acc, num, i) => {
    if (f.is0(num))
      return acc;
    tmp[i] = f.mul(acc, tmp[i]);
    return f.mul(acc, num);
  }, inverted);
  return tmp;
}
function nLength(n, nBitLength) {
  const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field(ORDER, bitLen5, isLE5 = false, redef = {}) {
  if (ORDER <= _0n7)
    throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen5);
  if (BYTES > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const sqrtP = FpSqrt(ORDER);
  const f = Object.freeze({
    ORDER,
    BITS,
    BYTES,
    MASK: bitMask(BITS),
    ZERO: _0n7,
    ONE: _1n7,
    create: (num) => mod(num, ORDER),
    isValid: (num) => {
      if (typeof num !== "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
      return _0n7 <= num && num < ORDER;
    },
    is0: (num) => num === _0n7,
    isOdd: (num) => (num & _1n7) === _1n7,
    neg: (num) => mod(-num, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num) => mod(num * num, ORDER),
    add: (lhs, rhs) => mod(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
    pow: (num, power) => FpPow(f, num, power),
    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
    // Same as above, but doesn't normalize
    sqrN: (num) => num * num,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num) => invert(num, ORDER),
    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
    invertBatch: (lst) => FpInvertBatch(f, lst),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (a, b, c) => c ? b : a,
    toBytes: (num) => isLE5 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),
    fromBytes: (bytes5) => {
      if (bytes5.length !== BYTES)
        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes5.length}`);
      return isLE5 ? bytesToNumberLE(bytes5) : bytesToNumberBE(bytes5);
    }
  });
  return Object.freeze(f);
}
function FpSqrtEven(Fp9, elm) {
  if (!Fp9.isOdd)
    throw new Error(`Field doesn't have isOdd`);
  const root = Fp9.sqrt(elm);
  return Fp9.isOdd(root) ? Fp9.neg(root) : root;
}
function getFieldBytesLength(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength(fieldOrder) {
  const length = getFieldBytesLength(fieldOrder);
  return length + Math.ceil(length / 2);
}
function mapHashToField(key, fieldOrder, isLE5 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength(fieldOrder);
  const minLen = getMinHashLength(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
  const num = isLE5 ? bytesToNumberBE(key) : bytesToNumberLE(key);
  const reduced = mod(num, fieldOrder - _1n7) + _1n7;
  return isLE5 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
}

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/abstract/weierstrass.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/abstract/curve.js
init_shim();
var _0n8 = BigInt(0);
var _1n8 = BigInt(1);
function wNAF(c, bits) {
  const constTimeNegate = (condition, item) => {
    const neg = item.negate();
    return condition ? neg : item;
  };
  const opts = (W) => {
    const windows = Math.ceil(bits / W) + 1;
    const windowSize = 2 ** (W - 1);
    return { windows, windowSize };
  };
  return {
    constTimeNegate,
    // non-const time multiplication ladder
    unsafeLadder(elm, n) {
      let p = c.ZERO;
      let d = elm;
      while (n > _0n8) {
        if (n & _1n8)
          p = p.add(d);
        d = d.double();
        n >>= _1n8;
      }
      return p;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(elm, W) {
      const { windows, windowSize } = opts(W);
      const points = [];
      let p = elm;
      let base = p;
      for (let window3 = 0; window3 < windows; window3++) {
        base = p;
        points.push(base);
        for (let i = 1; i < windowSize; i++) {
          base = base.add(p);
          points.push(base);
        }
        p = base.double();
      }
      return points;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(W, precomputes, n) {
      const { windows, windowSize } = opts(W);
      let p = c.ZERO;
      let f = c.BASE;
      const mask = BigInt(2 ** W - 1);
      const maxNumber = 2 ** W;
      const shiftBy = BigInt(W);
      for (let window3 = 0; window3 < windows; window3++) {
        const offset = window3 * windowSize;
        let wbits = Number(n & mask);
        n >>= shiftBy;
        if (wbits > windowSize) {
          wbits -= maxNumber;
          n += _1n8;
        }
        const offset1 = offset;
        const offset2 = offset + Math.abs(wbits) - 1;
        const cond1 = window3 % 2 !== 0;
        const cond2 = wbits < 0;
        if (wbits === 0) {
          f = f.add(constTimeNegate(cond1, precomputes[offset1]));
        } else {
          p = p.add(constTimeNegate(cond2, precomputes[offset2]));
        }
      }
      return { p, f };
    },
    wNAFCached(P, precomputesMap, n, transform) {
      const W = P._WINDOW_SIZE || 1;
      let comp = precomputesMap.get(P);
      if (!comp) {
        comp = this.precomputeWindow(P, W);
        if (W !== 1) {
          precomputesMap.set(P, transform(comp));
        }
      }
      return this.wNAF(W, comp, n);
    }
  };
}
function validateBasic(curve) {
  validateField(curve.Fp);
  validateObject(curve, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  });
  return Object.freeze({
    ...nLength(curve.n, curve.nBitLength),
    ...curve,
    ...{ p: curve.Fp.ORDER }
  });
}

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/abstract/weierstrass.js
function validatePointOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo, Fp: Fp9, a } = opts;
  if (endo) {
    if (!Fp9.eql(a, Fp9.ZERO)) {
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    }
    if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
    }
  }
  return Object.freeze({ ...opts });
}
var { bytesToNumberBE: b2n, hexToBytes: h2b } = utils_exports;
var DER = {
  // asn.1 DER encoding utils
  Err: class DERErr extends Error {
    constructor(m = "") {
      super(m);
    }
  },
  _parseInt(data) {
    const { Err: E } = DER;
    if (data.length < 2 || data[0] !== 2)
      throw new E("Invalid signature integer tag");
    const len = data[1];
    const res = data.subarray(2, len + 2);
    if (!len || res.length !== len)
      throw new E("Invalid signature integer: wrong length");
    if (res[0] & 128)
      throw new E("Invalid signature integer: negative");
    if (res[0] === 0 && !(res[1] & 128))
      throw new E("Invalid signature integer: unnecessary leading zero");
    return { d: b2n(res), l: data.subarray(len + 2) };
  },
  toSig(hex11) {
    const { Err: E } = DER;
    const data = typeof hex11 === "string" ? h2b(hex11) : hex11;
    if (!(data instanceof Uint8Array))
      throw new Error("ui8a expected");
    let l19 = data.length;
    if (l19 < 2 || data[0] != 48)
      throw new E("Invalid signature tag");
    if (data[1] !== l19 - 2)
      throw new E("Invalid signature: incorrect length");
    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
    if (rBytesLeft.length)
      throw new E("Invalid signature: left bytes after parsing");
    return { r, s };
  },
  hexFromSig(sig2) {
    const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
    const h = (num) => {
      const hex11 = num.toString(16);
      return hex11.length & 1 ? `0${hex11}` : hex11;
    };
    const s = slice(h(sig2.s));
    const r = slice(h(sig2.r));
    const shl = s.length / 2;
    const rhl = r.length / 2;
    const sl = h(shl);
    const rl = h(rhl);
    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
  }
};
var _0n9 = BigInt(0);
var _1n9 = BigInt(1);
var _2n7 = BigInt(2);
var _3n6 = BigInt(3);
var _4n6 = BigInt(4);
function weierstrassPoints(opts) {
  const CURVE = validatePointOpts(opts);
  const { Fp: Fp9 } = CURVE;
  const toBytes5 = CURVE.toBytes || ((_c, point, _isCompressed) => {
    const a = point.toAffine();
    return concatBytes2(Uint8Array.from([4]), Fp9.toBytes(a.x), Fp9.toBytes(a.y));
  });
  const fromBytes = CURVE.fromBytes || ((bytes5) => {
    const tail = bytes5.subarray(1);
    const x = Fp9.fromBytes(tail.subarray(0, Fp9.BYTES));
    const y = Fp9.fromBytes(tail.subarray(Fp9.BYTES, 2 * Fp9.BYTES));
    return { x, y };
  });
  function weierstrassEquation(x) {
    const { a, b } = CURVE;
    const x2 = Fp9.sqr(x);
    const x3 = Fp9.mul(x2, x);
    return Fp9.add(Fp9.add(x3, Fp9.mul(x, a)), b);
  }
  if (!Fp9.eql(Fp9.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
    throw new Error("bad generator point: equation left != right");
  function isWithinCurveOrder(num) {
    return typeof num === "bigint" && _0n9 < num && num < CURVE.n;
  }
  function assertGE(num) {
    if (!isWithinCurveOrder(num))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function normPrivateKeyToScalar(key) {
    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
    if (lengths && typeof key !== "bigint") {
      if (key instanceof Uint8Array)
        key = bytesToHex(key);
      if (typeof key !== "string" || !lengths.includes(key.length))
        throw new Error("Invalid key");
      key = key.padStart(nByteLength * 2, "0");
    }
    let num;
    try {
      num = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
    } catch (error) {
      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
    }
    if (wrapPrivateKey)
      num = mod(num, n);
    assertGE(num);
    return num;
  }
  const pointPrecomputes = /* @__PURE__ */ new Map();
  function assertPrjPoint(other) {
    if (!(other instanceof Point5))
      throw new Error("ProjectivePoint expected");
  }
  class Point5 {
    constructor(px, py, pz) {
      this.px = px;
      this.py = py;
      this.pz = pz;
      if (px == null || !Fp9.isValid(px))
        throw new Error("x required");
      if (py == null || !Fp9.isValid(py))
        throw new Error("y required");
      if (pz == null || !Fp9.isValid(pz))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(p) {
      const { x, y } = p || {};
      if (!p || !Fp9.isValid(x) || !Fp9.isValid(y))
        throw new Error("invalid affine point");
      if (p instanceof Point5)
        throw new Error("projective point not allowed");
      const is0 = (i) => Fp9.eql(i, Fp9.ZERO);
      if (is0(x) && is0(y))
        return Point5.ZERO;
      return new Point5(x, y, Fp9.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(points) {
      const toInv = Fp9.invertBatch(points.map((p) => p.pz));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point5.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(hex11) {
      const P = Point5.fromAffine(fromBytes(ensureBytes("pointHex", hex11)));
      P.assertValidity();
      return P;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(privateKey) {
      return Point5.BASE.multiply(normPrivateKeyToScalar(privateKey));
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (CURVE.allowInfinityPoint && !Fp9.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x, y } = this.toAffine();
      if (!Fp9.isValid(x) || !Fp9.isValid(y))
        throw new Error("bad point: x or y not FE");
      const left = Fp9.sqr(y);
      const right = weierstrassEquation(x);
      if (!Fp9.eql(left, right))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y } = this.toAffine();
      if (Fp9.isOdd)
        return !Fp9.isOdd(y);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      const U1 = Fp9.eql(Fp9.mul(X1, Z2), Fp9.mul(X2, Z1));
      const U2 = Fp9.eql(Fp9.mul(Y1, Z2), Fp9.mul(Y2, Z1));
      return U1 && U2;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new Point5(this.px, Fp9.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a, b } = CURVE;
      const b3 = Fp9.mul(b, _3n6);
      const { px: X1, py: Y1, pz: Z1 } = this;
      let X3 = Fp9.ZERO, Y3 = Fp9.ZERO, Z3 = Fp9.ZERO;
      let t0 = Fp9.mul(X1, X1);
      let t1 = Fp9.mul(Y1, Y1);
      let t2 = Fp9.mul(Z1, Z1);
      let t3 = Fp9.mul(X1, Y1);
      t3 = Fp9.add(t3, t3);
      Z3 = Fp9.mul(X1, Z1);
      Z3 = Fp9.add(Z3, Z3);
      X3 = Fp9.mul(a, Z3);
      Y3 = Fp9.mul(b3, t2);
      Y3 = Fp9.add(X3, Y3);
      X3 = Fp9.sub(t1, Y3);
      Y3 = Fp9.add(t1, Y3);
      Y3 = Fp9.mul(X3, Y3);
      X3 = Fp9.mul(t3, X3);
      Z3 = Fp9.mul(b3, Z3);
      t2 = Fp9.mul(a, t2);
      t3 = Fp9.sub(t0, t2);
      t3 = Fp9.mul(a, t3);
      t3 = Fp9.add(t3, Z3);
      Z3 = Fp9.add(t0, t0);
      t0 = Fp9.add(Z3, t0);
      t0 = Fp9.add(t0, t2);
      t0 = Fp9.mul(t0, t3);
      Y3 = Fp9.add(Y3, t0);
      t2 = Fp9.mul(Y1, Z1);
      t2 = Fp9.add(t2, t2);
      t0 = Fp9.mul(t2, t3);
      X3 = Fp9.sub(X3, t0);
      Z3 = Fp9.mul(t2, t1);
      Z3 = Fp9.add(Z3, Z3);
      Z3 = Fp9.add(Z3, Z3);
      return new Point5(X3, Y3, Z3);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      let X3 = Fp9.ZERO, Y3 = Fp9.ZERO, Z3 = Fp9.ZERO;
      const a = CURVE.a;
      const b3 = Fp9.mul(CURVE.b, _3n6);
      let t0 = Fp9.mul(X1, X2);
      let t1 = Fp9.mul(Y1, Y2);
      let t2 = Fp9.mul(Z1, Z2);
      let t3 = Fp9.add(X1, Y1);
      let t4 = Fp9.add(X2, Y2);
      t3 = Fp9.mul(t3, t4);
      t4 = Fp9.add(t0, t1);
      t3 = Fp9.sub(t3, t4);
      t4 = Fp9.add(X1, Z1);
      let t5 = Fp9.add(X2, Z2);
      t4 = Fp9.mul(t4, t5);
      t5 = Fp9.add(t0, t2);
      t4 = Fp9.sub(t4, t5);
      t5 = Fp9.add(Y1, Z1);
      X3 = Fp9.add(Y2, Z2);
      t5 = Fp9.mul(t5, X3);
      X3 = Fp9.add(t1, t2);
      t5 = Fp9.sub(t5, X3);
      Z3 = Fp9.mul(a, t4);
      X3 = Fp9.mul(b3, t2);
      Z3 = Fp9.add(X3, Z3);
      X3 = Fp9.sub(t1, Z3);
      Z3 = Fp9.add(t1, Z3);
      Y3 = Fp9.mul(X3, Z3);
      t1 = Fp9.add(t0, t0);
      t1 = Fp9.add(t1, t0);
      t2 = Fp9.mul(a, t2);
      t4 = Fp9.mul(b3, t4);
      t1 = Fp9.add(t1, t2);
      t2 = Fp9.sub(t0, t2);
      t2 = Fp9.mul(a, t2);
      t4 = Fp9.add(t4, t2);
      t0 = Fp9.mul(t1, t4);
      Y3 = Fp9.add(Y3, t0);
      t0 = Fp9.mul(t5, t4);
      X3 = Fp9.mul(t3, X3);
      X3 = Fp9.sub(X3, t0);
      t0 = Fp9.mul(t3, t1);
      Z3 = Fp9.mul(t5, Z3);
      Z3 = Fp9.add(Z3, t0);
      return new Point5(X3, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point5.ZERO);
    }
    wNAF(n) {
      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
        const toInv = Fp9.invertBatch(comp.map((p) => p.pz));
        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point5.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(n) {
      const I = Point5.ZERO;
      if (n === _0n9)
        return I;
      assertGE(n);
      if (n === _1n9)
        return this;
      const { endo } = CURVE;
      if (!endo)
        return wnaf.unsafeLadder(this, n);
      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
      let k1p = I;
      let k2p = I;
      let d = this;
      while (k1 > _0n9 || k2 > _0n9) {
        if (k1 & _1n9)
          k1p = k1p.add(d);
        if (k2 & _1n9)
          k2p = k2p.add(d);
        d = d.double();
        k1 >>= _1n9;
        k2 >>= _1n9;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new Point5(Fp9.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
      return k1p.add(k2p);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(scalar) {
      assertGE(scalar);
      let n = scalar;
      let point, fake;
      const { endo } = CURVE;
      if (endo) {
        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
        let { p: k1p, f: f1p } = this.wNAF(k1);
        let { p: k2p, f: f2p } = this.wNAF(k2);
        k1p = wnaf.constTimeNegate(k1neg, k1p);
        k2p = wnaf.constTimeNegate(k2neg, k2p);
        k2p = new Point5(Fp9.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p, f } = this.wNAF(n);
        point = p;
        fake = f;
      }
      return Point5.normalizeZ([point, fake])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(Q, a, b) {
      const G = Point5.BASE;
      const mul = (P, a2) => a2 === _0n9 || a2 === _1n9 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
      const sum = mul(this, a).add(mul(Q, b));
      return sum.is0() ? void 0 : sum;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(iz) {
      const { px: x, py: y, pz: z } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? Fp9.ONE : Fp9.inv(z);
      const ax = Fp9.mul(x, iz);
      const ay = Fp9.mul(y, iz);
      const zz = Fp9.mul(z, iz);
      if (is0)
        return { x: Fp9.ZERO, y: Fp9.ZERO };
      if (!Fp9.eql(zz, Fp9.ONE))
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    isTorsionFree() {
      const { h: cofactor, isTorsionFree } = CURVE;
      if (cofactor === _1n9)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point5, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: cofactor, clearCofactor } = CURVE;
      if (cofactor === _1n9)
        return this;
      if (clearCofactor)
        return clearCofactor(Point5, this);
      return this.multiplyUnsafe(CURVE.h);
    }
    toRawBytes(isCompressed = true) {
      this.assertValidity();
      return toBytes5(Point5, this, isCompressed);
    }
    toHex(isCompressed = true) {
      return bytesToHex(this.toRawBytes(isCompressed));
    }
  }
  Point5.BASE = new Point5(CURVE.Gx, CURVE.Gy, Fp9.ONE);
  Point5.ZERO = new Point5(Fp9.ZERO, Fp9.ONE, Fp9.ZERO);
  const _bits = CURVE.nBitLength;
  const wnaf = wNAF(Point5, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
  return {
    CURVE,
    ProjectivePoint: Point5,
    normPrivateKeyToScalar,
    weierstrassEquation,
    isWithinCurveOrder
  };
}
function validateOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  });
  return Object.freeze({ lowS: true, ...opts });
}
function weierstrass(curveDef) {
  const CURVE = validateOpts(curveDef);
  const { Fp: Fp9, n: CURVE_ORDER } = CURVE;
  const compressedLen = Fp9.BYTES + 1;
  const uncompressedLen = 2 * Fp9.BYTES + 1;
  function isValidFieldElement(num) {
    return _0n9 < num && num < Fp9.ORDER;
  }
  function modN5(a) {
    return mod(a, CURVE_ORDER);
  }
  function invN(a) {
    return invert(a, CURVE_ORDER);
  }
  const { ProjectivePoint: Point5, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
    ...CURVE,
    toBytes(_c, point, isCompressed) {
      const a = point.toAffine();
      const x = Fp9.toBytes(a.x);
      const cat = concatBytes2;
      if (isCompressed) {
        return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
      } else {
        return cat(Uint8Array.from([4]), x, Fp9.toBytes(a.y));
      }
    },
    fromBytes(bytes5) {
      const len = bytes5.length;
      const head = bytes5[0];
      const tail = bytes5.subarray(1);
      if (len === compressedLen && (head === 2 || head === 3)) {
        const x = bytesToNumberBE(tail);
        if (!isValidFieldElement(x))
          throw new Error("Point is not on curve");
        const y2 = weierstrassEquation(x);
        let y = Fp9.sqrt(y2);
        const isYOdd = (y & _1n9) === _1n9;
        const isHeadOdd = (head & 1) === 1;
        if (isHeadOdd !== isYOdd)
          y = Fp9.neg(y);
        return { x, y };
      } else if (len === uncompressedLen && head === 4) {
        const x = Fp9.fromBytes(tail.subarray(0, Fp9.BYTES));
        const y = Fp9.fromBytes(tail.subarray(Fp9.BYTES, 2 * Fp9.BYTES));
        return { x, y };
      } else {
        throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
      }
    }
  });
  const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
  function isBiggerThanHalfOrder(number5) {
    const HALF = CURVE_ORDER >> _1n9;
    return number5 > HALF;
  }
  function normalizeS(s) {
    return isBiggerThanHalfOrder(s) ? modN5(-s) : s;
  }
  const slcNum = (b, from2, to) => bytesToNumberBE(b.slice(from2, to));
  class Signature {
    constructor(r, s, recovery) {
      this.r = r;
      this.s = s;
      this.recovery = recovery;
      this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(hex11) {
      const l19 = CURVE.nByteLength;
      hex11 = ensureBytes("compactSignature", hex11, l19 * 2);
      return new Signature(slcNum(hex11, 0, l19), slcNum(hex11, l19, 2 * l19));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(hex11) {
      const { r, s } = DER.toSig(ensureBytes("DER", hex11));
      return new Signature(r, s);
    }
    assertValidity() {
      if (!isWithinCurveOrder(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!isWithinCurveOrder(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(recovery) {
      return new Signature(this.r, this.s, recovery);
    }
    recoverPublicKey(msgHash) {
      const { r, s, recovery: rec } = this;
      const h = bits2int_modN(ensureBytes("msgHash", msgHash));
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
      if (radj >= Fp9.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const prefix2 = (rec & 1) === 0 ? "02" : "03";
      const R = Point5.fromHex(prefix2 + numToNByteStr(radj));
      const ir = invN(radj);
      const u1 = modN5(-h * ir);
      const u2 = modN5(s * ir);
      const Q = Point5.BASE.multiplyAndAddUnsafe(R, u1, u2);
      if (!Q)
        throw new Error("point at infinify");
      Q.assertValidity();
      return Q;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, modN5(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes(this.toDERHex());
    }
    toDERHex() {
      return DER.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
      return numToNByteStr(this.r) + numToNByteStr(this.s);
    }
  }
  const utils5 = {
    isValidPrivateKey(privateKey) {
      try {
        normPrivateKeyToScalar(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    normPrivateKeyToScalar,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const length = getMinHashLength(CURVE.n);
      return mapHashToField(CURVE.randomBytes(length), CURVE.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(windowSize = 8, point = Point5.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  function getPublicKey(privateKey, isCompressed = true) {
    return Point5.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    const arr = item instanceof Uint8Array;
    const str = typeof item === "string";
    const len = (arr || str) && item.length;
    if (arr)
      return len === compressedLen || len === uncompressedLen;
    if (str)
      return len === 2 * compressedLen || len === 2 * uncompressedLen;
    if (item instanceof Point5)
      return true;
    return false;
  }
  function getSharedSecret(privateA, publicB, isCompressed = true) {
    if (isProbPub(privateA))
      throw new Error("first arg must be private key");
    if (!isProbPub(publicB))
      throw new Error("second arg must be public key");
    const b = Point5.fromHex(publicB);
    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
  }
  const bits2int = CURVE.bits2int || function(bytes5) {
    const num = bytesToNumberBE(bytes5);
    const delta = bytes5.length * 8 - CURVE.nBitLength;
    return delta > 0 ? num >> BigInt(delta) : num;
  };
  const bits2int_modN = CURVE.bits2int_modN || function(bytes5) {
    return modN5(bits2int(bytes5));
  };
  const ORDER_MASK = bitMask(CURVE.nBitLength);
  function int2octets(num) {
    if (typeof num !== "bigint")
      throw new Error("bigint expected");
    if (!(_0n9 <= num && num < ORDER_MASK))
      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
    return numberToBytesBE(num, CURVE.nByteLength);
  }
  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
    if (["recovered", "canonical"].some((k) => k in opts))
      throw new Error("sign() legacy options not supported");
    const { hash: hash5, randomBytes: randomBytes5 } = CURVE;
    let { lowS, prehash, extraEntropy: ent } = opts;
    if (lowS == null)
      lowS = true;
    msgHash = ensureBytes("msgHash", msgHash);
    if (prehash)
      msgHash = ensureBytes("prehashed msgHash", hash5(msgHash));
    const h1int = bits2int_modN(msgHash);
    const d = normPrivateKeyToScalar(privateKey);
    const seedArgs = [int2octets(d), int2octets(h1int)];
    if (ent != null) {
      const e = ent === true ? randomBytes5(Fp9.BYTES) : ent;
      seedArgs.push(ensureBytes("extraEntropy", e));
    }
    const seed = concatBytes2(...seedArgs);
    const m = h1int;
    function k2sig(kBytes) {
      const k = bits2int(kBytes);
      if (!isWithinCurveOrder(k))
        return;
      const ik = invN(k);
      const q = Point5.BASE.multiply(k).toAffine();
      const r = modN5(q.x);
      if (r === _0n9)
        return;
      const s = modN5(ik * modN5(m + r * d));
      if (s === _0n9)
        return;
      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n9);
      let normS = s;
      if (lowS && isBiggerThanHalfOrder(s)) {
        normS = normalizeS(s);
        recovery ^= 1;
      }
      return new Signature(r, normS, recovery);
    }
    return { seed, k2sig };
  }
  const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
  const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
  function sign2(msgHash, privKey, opts = defaultSigOpts) {
    const { seed, k2sig } = prepSig(msgHash, privKey, opts);
    const C = CURVE;
    const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
    return drbg(seed, k2sig);
  }
  Point5.BASE._setWindowSize(8);
  function verify(signature, msgHash, publicKey2, opts = defaultVerOpts) {
    var _a;
    const sg = signature;
    msgHash = ensureBytes("msgHash", msgHash);
    publicKey2 = ensureBytes("publicKey", publicKey2);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    const { lowS, prehash } = opts;
    let _sig = void 0;
    let P;
    try {
      if (typeof sg === "string" || sg instanceof Uint8Array) {
        try {
          _sig = Signature.fromDER(sg);
        } catch (derError) {
          if (!(derError instanceof DER.Err))
            throw derError;
          _sig = Signature.fromCompact(sg);
        }
      } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
        const { r: r2, s: s2 } = sg;
        _sig = new Signature(r2, s2);
      } else {
        throw new Error("PARSE");
      }
      P = Point5.fromHex(publicKey2);
    } catch (error) {
      if (error.message === "PARSE")
        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
      return false;
    }
    if (lowS && _sig.hasHighS())
      return false;
    if (prehash)
      msgHash = CURVE.hash(msgHash);
    const { r, s } = _sig;
    const h = bits2int_modN(msgHash);
    const is = invN(s);
    const u1 = modN5(h * is);
    const u2 = modN5(r * is);
    const R = (_a = Point5.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a.toAffine();
    if (!R)
      return false;
    const v = modN5(R.x);
    return v === r;
  }
  return {
    CURVE,
    getPublicKey,
    getSharedSecret,
    sign: sign2,
    verify,
    ProjectivePoint: Point5,
    Signature,
    utils: utils5
  };
}
function SWUFpSqrtRatio(Fp9, Z) {
  const q = Fp9.ORDER;
  let l19 = _0n9;
  for (let o = q - _1n9; o % _2n7 === _0n9; o /= _2n7)
    l19 += _1n9;
  const c1 = l19;
  const _2n_pow_c1_1 = _2n7 << c1 - _1n9 - _1n9;
  const _2n_pow_c1 = _2n_pow_c1_1 * _2n7;
  const c2 = (q - _1n9) / _2n_pow_c1;
  const c3 = (c2 - _1n9) / _2n7;
  const c4 = _2n_pow_c1 - _1n9;
  const c5 = _2n_pow_c1_1;
  const c6 = Fp9.pow(Z, c2);
  const c7 = Fp9.pow(Z, (c2 + _1n9) / _2n7);
  let sqrtRatio = (u, v) => {
    let tv1 = c6;
    let tv2 = Fp9.pow(v, c4);
    let tv3 = Fp9.sqr(tv2);
    tv3 = Fp9.mul(tv3, v);
    let tv5 = Fp9.mul(u, tv3);
    tv5 = Fp9.pow(tv5, c3);
    tv5 = Fp9.mul(tv5, tv2);
    tv2 = Fp9.mul(tv5, v);
    tv3 = Fp9.mul(tv5, u);
    let tv4 = Fp9.mul(tv3, tv2);
    tv5 = Fp9.pow(tv4, c5);
    let isQR = Fp9.eql(tv5, Fp9.ONE);
    tv2 = Fp9.mul(tv3, c7);
    tv5 = Fp9.mul(tv4, tv1);
    tv3 = Fp9.cmov(tv2, tv3, isQR);
    tv4 = Fp9.cmov(tv5, tv4, isQR);
    for (let i = c1; i > _1n9; i--) {
      let tv52 = i - _2n7;
      tv52 = _2n7 << tv52 - _1n9;
      let tvv5 = Fp9.pow(tv4, tv52);
      const e1 = Fp9.eql(tvv5, Fp9.ONE);
      tv2 = Fp9.mul(tv3, tv1);
      tv1 = Fp9.mul(tv1, tv1);
      tvv5 = Fp9.mul(tv4, tv1);
      tv3 = Fp9.cmov(tv2, tv3, e1);
      tv4 = Fp9.cmov(tvv5, tv4, e1);
    }
    return { isValid: isQR, value: tv3 };
  };
  if (Fp9.ORDER % _4n6 === _3n6) {
    const c12 = (Fp9.ORDER - _3n6) / _4n6;
    const c22 = Fp9.sqrt(Fp9.neg(Z));
    sqrtRatio = (u, v) => {
      let tv1 = Fp9.sqr(v);
      const tv2 = Fp9.mul(u, v);
      tv1 = Fp9.mul(tv1, tv2);
      let y1 = Fp9.pow(tv1, c12);
      y1 = Fp9.mul(y1, tv2);
      const y2 = Fp9.mul(y1, c22);
      const tv3 = Fp9.mul(Fp9.sqr(y1), v);
      const isQR = Fp9.eql(tv3, u);
      let y = Fp9.cmov(y2, y1, isQR);
      return { isValid: isQR, value: y };
    };
  }
  return sqrtRatio;
}
function mapToCurveSimpleSWU(Fp9, opts) {
  validateField(Fp9);
  if (!Fp9.isValid(opts.A) || !Fp9.isValid(opts.B) || !Fp9.isValid(opts.Z))
    throw new Error("mapToCurveSimpleSWU: invalid opts");
  const sqrtRatio = SWUFpSqrtRatio(Fp9, opts.Z);
  if (!Fp9.isOdd)
    throw new Error("Fp.isOdd is not implemented!");
  return (u) => {
    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
    tv1 = Fp9.sqr(u);
    tv1 = Fp9.mul(tv1, opts.Z);
    tv2 = Fp9.sqr(tv1);
    tv2 = Fp9.add(tv2, tv1);
    tv3 = Fp9.add(tv2, Fp9.ONE);
    tv3 = Fp9.mul(tv3, opts.B);
    tv4 = Fp9.cmov(opts.Z, Fp9.neg(tv2), !Fp9.eql(tv2, Fp9.ZERO));
    tv4 = Fp9.mul(tv4, opts.A);
    tv2 = Fp9.sqr(tv3);
    tv6 = Fp9.sqr(tv4);
    tv5 = Fp9.mul(tv6, opts.A);
    tv2 = Fp9.add(tv2, tv5);
    tv2 = Fp9.mul(tv2, tv3);
    tv6 = Fp9.mul(tv6, tv4);
    tv5 = Fp9.mul(tv6, opts.B);
    tv2 = Fp9.add(tv2, tv5);
    x = Fp9.mul(tv1, tv3);
    const { isValid, value } = sqrtRatio(tv2, tv6);
    y = Fp9.mul(tv1, u);
    y = Fp9.mul(y, value);
    x = Fp9.cmov(x, tv3, isValid);
    y = Fp9.cmov(y, value, isValid);
    const e1 = Fp9.isOdd(u) === Fp9.isOdd(y);
    y = Fp9.cmov(Fp9.neg(y), y, e1);
    x = Fp9.div(x, tv4);
    return { x, y };
  };
}

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/abstract/hash-to-curve.js
init_shim();
function validateDST(dst) {
  if (dst instanceof Uint8Array)
    return dst;
  if (typeof dst === "string")
    return utf8ToBytes2(dst);
  throw new Error("DST must be Uint8Array or string");
}
var os2ip = bytesToNumberBE;
function i2osp(value, length) {
  if (value < 0 || value >= 1 << 8 * length) {
    throw new Error(`bad I2OSP call: value=${value} length=${length}`);
  }
  const res = Array.from({ length }).fill(0);
  for (let i = length - 1; i >= 0; i--) {
    res[i] = value & 255;
    value >>>= 8;
  }
  return new Uint8Array(res);
}
function strxor(a, b) {
  const arr = new Uint8Array(a.length);
  for (let i = 0; i < a.length; i++) {
    arr[i] = a[i] ^ b[i];
  }
  return arr;
}
function isBytes(item) {
  if (!(item instanceof Uint8Array))
    throw new Error("Uint8Array expected");
}
function isNum(item) {
  if (!Number.isSafeInteger(item))
    throw new Error("number expected");
}
function expand_message_xmd(msg, DST, lenInBytes, H) {
  isBytes(msg);
  isBytes(DST);
  isNum(lenInBytes);
  if (DST.length > 255)
    DST = H(concatBytes2(utf8ToBytes2("H2C-OVERSIZE-DST-"), DST));
  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
  const ell = Math.ceil(lenInBytes / b_in_bytes);
  if (ell > 255)
    throw new Error("Invalid xmd length");
  const DST_prime = concatBytes2(DST, i2osp(DST.length, 1));
  const Z_pad = i2osp(0, r_in_bytes);
  const l_i_b_str = i2osp(lenInBytes, 2);
  const b = new Array(ell);
  const b_0 = H(concatBytes2(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
  b[0] = H(concatBytes2(b_0, i2osp(1, 1), DST_prime));
  for (let i = 1; i <= ell; i++) {
    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
    b[i] = H(concatBytes2(...args));
  }
  const pseudo_random_bytes = concatBytes2(...b);
  return pseudo_random_bytes.slice(0, lenInBytes);
}
function expand_message_xof(msg, DST, lenInBytes, k, H) {
  isBytes(msg);
  isBytes(DST);
  isNum(lenInBytes);
  if (DST.length > 255) {
    const dkLen = Math.ceil(2 * k / 8);
    DST = H.create({ dkLen }).update(utf8ToBytes2("H2C-OVERSIZE-DST-")).update(DST).digest();
  }
  if (lenInBytes > 65535 || DST.length > 255)
    throw new Error("expand_message_xof: invalid lenInBytes");
  return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
}
function hash_to_field(msg, count2, options) {
  validateObject(options, {
    DST: "stringOrUint8Array",
    p: "bigint",
    m: "isSafeInteger",
    k: "isSafeInteger",
    hash: "hash"
  });
  const { p, k, m, hash: hash5, expand: expand3, DST: _DST } = options;
  isBytes(msg);
  isNum(count2);
  const DST = validateDST(_DST);
  const log2p = p.toString(2).length;
  const L = Math.ceil((log2p + k) / 8);
  const len_in_bytes = count2 * m * L;
  let prb;
  if (expand3 === "xmd") {
    prb = expand_message_xmd(msg, DST, len_in_bytes, hash5);
  } else if (expand3 === "xof") {
    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash5);
  } else if (expand3 === "_internal_pass") {
    prb = msg;
  } else {
    throw new Error('expand must be "xmd" or "xof"');
  }
  const u = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const e = new Array(m);
    for (let j = 0; j < m; j++) {
      const elm_offset = L * (j + i * m);
      const tv = prb.subarray(elm_offset, elm_offset + L);
      e[j] = mod(os2ip(tv), p);
    }
    u[i] = e;
  }
  return u;
}
function isogenyMap(field, map2) {
  const COEFF = map2.map((i) => Array.from(i).reverse());
  return (x, y) => {
    const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
    x = field.div(xNum, xDen);
    y = field.mul(y, field.div(yNum, yDen));
    return { x, y };
  };
}
function createHasher(Point5, mapToCurve, def) {
  if (typeof mapToCurve !== "function")
    throw new Error("mapToCurve() must be defined");
  return {
    // Encodes byte string to elliptic curve.
    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    hashToCurve(msg, options) {
      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
      const u0 = Point5.fromAffine(mapToCurve(u[0]));
      const u1 = Point5.fromAffine(mapToCurve(u[1]));
      const P = u0.add(u1).clearCofactor();
      P.assertValidity();
      return P;
    },
    // Encodes byte string to elliptic curve.
    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    encodeToCurve(msg, options) {
      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
      const P = Point5.fromAffine(mapToCurve(u[0])).clearCofactor();
      P.assertValidity();
      return P;
    }
  };
}

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/_shortw_utils.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/hmac.js
init_shim();
var HMAC = class extends Hash {
  constructor(hash5, _key) {
    super();
    this.finished = false;
    this.destroyed = false;
    hash(hash5);
    const key = toBytes(_key);
    this.iHash = hash5.create();
    if (typeof this.iHash.update !== "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen;
    this.outputLen = this.iHash.outputLen;
    const blockLen = this.blockLen;
    const pad = new Uint8Array(blockLen);
    pad.set(key.length > blockLen ? hash5.create().update(key).digest() : key);
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54;
    this.iHash.update(pad);
    this.oHash = hash5.create();
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54 ^ 92;
    this.oHash.update(pad);
    pad.fill(0);
  }
  update(buf) {
    exists(this);
    this.iHash.update(buf);
    return this;
  }
  digestInto(out) {
    exists(this);
    bytes(out, this.outputLen);
    this.finished = true;
    this.iHash.digestInto(out);
    this.oHash.update(out);
    this.oHash.digestInto(out);
    this.destroy();
  }
  digest() {
    const out = new Uint8Array(this.oHash.outputLen);
    this.digestInto(out);
    return out;
  }
  _cloneInto(to) {
    to || (to = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
    to = to;
    to.finished = finished;
    to.destroyed = destroyed;
    to.blockLen = blockLen;
    to.outputLen = outputLen;
    to.oHash = oHash._cloneInto(to.oHash);
    to.iHash = iHash._cloneInto(to.iHash);
    return to;
  }
  destroy() {
    this.destroyed = true;
    this.oHash.destroy();
    this.iHash.destroy();
  }
};
var hmac = (hash5, key, message) => new HMAC(hash5, key).update(message).digest();
hmac.create = (hash5, key) => new HMAC(hash5, key);

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/_shortw_utils.js
function getHash(hash5) {
  return {
    hash: hash5,
    hmac: (key, ...msgs) => hmac(hash5, key, concatBytes(...msgs)),
    randomBytes
  };
}
function createCurve(curveDef, defHash) {
  const create = (hash5) => weierstrass({ ...curveDef, ...getHash(hash5) });
  return Object.freeze({ ...create(defHash), create });
}

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/secp256k1.js
var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var _1n10 = BigInt(1);
var _2n8 = BigInt(2);
var divNearest = (a, b) => (a + b / _2n8) / b;
function sqrtMod(y) {
  const P = secp256k1P;
  const _3n19 = BigInt(3), _6n11 = BigInt(6), _11n5 = BigInt(11), _22n = BigInt(22);
  const _23n5 = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b2 = y * y * y % P;
  const b3 = b2 * b2 * y % P;
  const b6 = pow2(b3, _3n19, P) * b3 % P;
  const b9 = pow2(b6, _3n19, P) * b3 % P;
  const b11 = pow2(b9, _2n8, P) * b2 % P;
  const b22 = pow2(b11, _11n5, P) * b11 % P;
  const b44 = pow2(b22, _22n, P) * b22 % P;
  const b88 = pow2(b44, _44n, P) * b44 % P;
  const b176 = pow2(b88, _88n, P) * b88 % P;
  const b220 = pow2(b176, _44n, P) * b44 % P;
  const b223 = pow2(b220, _3n19, P) * b3 % P;
  const t1 = pow2(b223, _23n5, P) * b22 % P;
  const t2 = pow2(t1, _6n11, P) * b2 % P;
  const root = pow2(t2, _2n8, P);
  if (!Fp.eql(Fp.sqr(root), y))
    throw new Error("Cannot find square root");
  return root;
}
var Fp = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
var secp256k1 = createCurve({
  a: BigInt(0),
  b: BigInt(7),
  Fp,
  n: secp256k1N,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: true,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (k) => {
      const n = secp256k1N;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n10 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b2 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest(b2 * k, n);
      const c2 = divNearest(-b1 * k, n);
      let k1 = mod(k - c1 * a1 - c2 * a2, n);
      let k2 = mod(-c1 * b1 - c2 * b2, n);
      const k1neg = k1 > POW_2_128;
      const k2neg = k2 > POW_2_128;
      if (k1neg)
        k1 = n - k1;
      if (k2neg)
        k2 = n - k2;
      if (k1 > POW_2_128 || k2 > POW_2_128) {
        throw new Error("splitScalar: Endomorphism failed, k=" + k);
      }
      return { k1neg, k1, k2neg, k2 };
    }
  }
}, sha2562);
var _0n10 = BigInt(0);
var fe = (x) => typeof x === "bigint" && _0n10 < x && x < secp256k1P;
var ge = (x) => typeof x === "bigint" && _0n10 < x && x < secp256k1N;
var TAGGED_HASH_PREFIXES = {};
function taggedHash(tag, ...messages) {
  let tagP = TAGGED_HASH_PREFIXES[tag];
  if (tagP === void 0) {
    const tagH = sha2562(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
    tagP = concatBytes2(tagH, tagH);
    TAGGED_HASH_PREFIXES[tag] = tagP;
  }
  return sha2562(concatBytes2(tagP, ...messages));
}
var pointToBytes = (point) => point.toRawBytes(true).slice(1);
var numTo32b = (n) => numberToBytesBE(n, 32);
var modP = (x) => mod(x, secp256k1P);
var modN = (x) => mod(x, secp256k1N);
var Point = secp256k1.ProjectivePoint;
var GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);
function schnorrGetExtPubKey(priv) {
  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv);
  let p = Point.fromPrivateKey(d_);
  const scalar = p.hasEvenY() ? d_ : modN(-d_);
  return { scalar, bytes: pointToBytes(p) };
}
function lift_x(x) {
  if (!fe(x))
    throw new Error("bad x: need 0 < x < p");
  const xx = modP(x * x);
  const c = modP(xx * x + BigInt(7));
  let y = sqrtMod(c);
  if (y % _2n8 !== _0n10)
    y = modP(-y);
  const p = new Point(x, y, _1n10);
  p.assertValidity();
  return p;
}
function challenge(...args) {
  return modN(bytesToNumberBE(taggedHash("BIP0340/challenge", ...args)));
}
function schnorrGetPublicKey(privateKey) {
  return schnorrGetExtPubKey(privateKey).bytes;
}
function schnorrSign(message, privateKey, auxRand = randomBytes(32)) {
  const m = ensureBytes("message", message);
  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
  const a = ensureBytes("auxRand", auxRand, 32);
  const t = numTo32b(d ^ bytesToNumberBE(taggedHash("BIP0340/aux", a)));
  const rand = taggedHash("BIP0340/nonce", t, px, m);
  const k_ = modN(bytesToNumberBE(rand));
  if (k_ === _0n10)
    throw new Error("sign failed: k is zero");
  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
  const e = challenge(rx, px, m);
  const sig2 = new Uint8Array(64);
  sig2.set(rx, 0);
  sig2.set(numTo32b(modN(k + e * d)), 32);
  if (!schnorrVerify(sig2, m, px))
    throw new Error("sign: Invalid signature produced");
  return sig2;
}
function schnorrVerify(signature, message, publicKey2) {
  const sig2 = ensureBytes("signature", signature, 64);
  const m = ensureBytes("message", message);
  const pub = ensureBytes("publicKey", publicKey2, 32);
  try {
    const P = lift_x(bytesToNumberBE(pub));
    const r = bytesToNumberBE(sig2.subarray(0, 32));
    if (!fe(r))
      return false;
    const s = bytesToNumberBE(sig2.subarray(32, 64));
    if (!ge(s))
      return false;
    const e = challenge(numTo32b(r), pointToBytes(P), m);
    const R = GmulAdd(P, s, modN(-e));
    if (!R || !R.hasEvenY() || R.toAffine().x !== r)
      return false;
    return true;
  } catch (error) {
    return false;
  }
}
var schnorr = (() => ({
  getPublicKey: schnorrGetPublicKey,
  sign: schnorrSign,
  verify: schnorrVerify,
  utils: {
    randomPrivateKey: secp256k1.utils.randomPrivateKey,
    lift_x,
    pointToBytes,
    numberToBytesBE,
    bytesToNumberBE,
    taggedHash,
    mod
  }
}))();
var isoMap = (() => isogenyMap(Fp, [
  // xNum
  [
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
    "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
    "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
  ],
  // xDen
  [
    "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
    "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
    "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
    "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
    "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
  ],
  // yDen
  [
    "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
    "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
    "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((i) => i.map((j) => BigInt(j)))))();
var mapSWU = (() => mapToCurveSimpleSWU(Fp, {
  A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
  B: BigInt("1771"),
  Z: Fp.create(BigInt("-11"))
}))();
var htf = (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {
  const { x, y } = mapSWU(Fp.create(scalars[0]));
  return isoMap(x, y);
}, {
  DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
  encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
  p: Fp.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha2562
}))();
var hashToCurve = (() => htf.hashToCurve)();
var encodeToCurve = (() => htf.encodeToCurve)();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/pair/fromSeed.js
function secp256k1PairFromSeed(seed, onlyJs) {
  if (seed.length !== 32) {
    throw new Error("Expected valid 32-byte private key as a seed");
  }
  if (!hasBigInt5 || !onlyJs && isReady()) {
    const full = secp256k1FromSeed(seed);
    const publicKey2 = full.slice(32);
    if (u8aEmpty5(publicKey2)) {
      throw new Error("Invalid publicKey generated from WASM interface");
    }
    return {
      publicKey: publicKey2,
      secretKey: full.slice(0, 32)
    };
  }
  return {
    publicKey: secp256k1.getPublicKey(seed, true),
    secretKey: seed
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/hdkdDerive.js
init_shim();
function createSeedDeriveFn(fromSeed, derive2) {
  return (keypair, { chainCode, isHard }) => {
    if (!isHard) {
      throw new Error("A soft key was found in the path and is not supported");
    }
    return fromSeed(derive2(keypair.secretKey.subarray(0, 32), chainCode));
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/hdkdEcdsa.js
var keyHdkdEcdsa = createSeedDeriveFn(secp256k1PairFromSeed, secp256k1DeriveHard);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/hdkdEd25519.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ed25519/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ed25519/deriveHard.js
init_shim();
var HDKD2 = compactAddLength5(stringToU8a5("Ed25519HDKD"));
function ed25519DeriveHard(seed, chainCode) {
  if (!isU8a5(chainCode) || chainCode.length !== 32) {
    throw new Error("Invalid chainCode passed to derive");
  }
  return blake2AsU8a(u8aConcat5(HDKD2, seed, chainCode));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ed25519/pair/fromRandom.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/random/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/random/asNumber.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/random/asU8a.js
init_shim();
function randomAsU8a(length = 32) {
  return getRandomValues(new Uint8Array(length));
}
var randomAsHex = createAsHex(randomAsU8a);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/random/asNumber.js
var BN_53 = new import_bn41.default(9007199254740991);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ed25519/pair/fromSeed.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/ed25519.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/sha512.js
init_shim();
var [SHA512_Kh, SHA512_Kl] = (() => u64_default.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n) => BigInt(n))))();
var SHA512_W_H = new Uint32Array(80);
var SHA512_W_L = new Uint32Array(80);
var SHA512 = class extends SHA2 {
  constructor() {
    super(128, 64, 16, false);
    this.Ah = 1779033703 | 0;
    this.Al = 4089235720 | 0;
    this.Bh = 3144134277 | 0;
    this.Bl = 2227873595 | 0;
    this.Ch = 1013904242 | 0;
    this.Cl = 4271175723 | 0;
    this.Dh = 2773480762 | 0;
    this.Dl = 1595750129 | 0;
    this.Eh = 1359893119 | 0;
    this.El = 2917565137 | 0;
    this.Fh = 2600822924 | 0;
    this.Fl = 725511199 | 0;
    this.Gh = 528734635 | 0;
    this.Gl = 4215389547 | 0;
    this.Hh = 1541459225 | 0;
    this.Hl = 327033209 | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4) {
      SHA512_W_H[i] = view.getUint32(offset);
      SHA512_W_L[i] = view.getUint32(offset += 4);
    }
    for (let i = 16; i < 80; i++) {
      const W15h = SHA512_W_H[i - 15] | 0;
      const W15l = SHA512_W_L[i - 15] | 0;
      const s0h = u64_default.rotrSH(W15h, W15l, 1) ^ u64_default.rotrSH(W15h, W15l, 8) ^ u64_default.shrSH(W15h, W15l, 7);
      const s0l = u64_default.rotrSL(W15h, W15l, 1) ^ u64_default.rotrSL(W15h, W15l, 8) ^ u64_default.shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H[i - 2] | 0;
      const W2l = SHA512_W_L[i - 2] | 0;
      const s1h = u64_default.rotrSH(W2h, W2l, 19) ^ u64_default.rotrBH(W2h, W2l, 61) ^ u64_default.shrSH(W2h, W2l, 6);
      const s1l = u64_default.rotrSL(W2h, W2l, 19) ^ u64_default.rotrBL(W2h, W2l, 61) ^ u64_default.shrSL(W2h, W2l, 6);
      const SUMl = u64_default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
      const SUMh = u64_default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
      SHA512_W_H[i] = SUMh | 0;
      SHA512_W_L[i] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i = 0; i < 80; i++) {
      const sigma1h = u64_default.rotrSH(Eh, El, 14) ^ u64_default.rotrSH(Eh, El, 18) ^ u64_default.rotrBH(Eh, El, 41);
      const sigma1l = u64_default.rotrSL(Eh, El, 14) ^ u64_default.rotrSL(Eh, El, 18) ^ u64_default.rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = u64_default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
      const T1h = u64_default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
      const T1l = T1ll | 0;
      const sigma0h = u64_default.rotrSH(Ah, Al, 28) ^ u64_default.rotrBH(Ah, Al, 34) ^ u64_default.rotrBH(Ah, Al, 39);
      const sigma0l = u64_default.rotrSL(Ah, Al, 28) ^ u64_default.rotrBL(Ah, Al, 34) ^ u64_default.rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = u64_default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = u64_default.add3L(T1l, sigma0l, MAJl);
      Ah = u64_default.add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = u64_default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = u64_default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = u64_default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = u64_default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = u64_default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = u64_default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = u64_default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = u64_default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    SHA512_W_H.fill(0);
    SHA512_W_L.fill(0);
  }
  destroy() {
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var SHA512_224 = class extends SHA512 {
  constructor() {
    super();
    this.Ah = 2352822216 | 0;
    this.Al = 424955298 | 0;
    this.Bh = 1944164710 | 0;
    this.Bl = 2312950998 | 0;
    this.Ch = 502970286 | 0;
    this.Cl = 855612546 | 0;
    this.Dh = 1738396948 | 0;
    this.Dl = 1479516111 | 0;
    this.Eh = 258812777 | 0;
    this.El = 2077511080 | 0;
    this.Fh = 2011393907 | 0;
    this.Fl = 79989058 | 0;
    this.Gh = 1067287976 | 0;
    this.Gl = 1780299464 | 0;
    this.Hh = 286451373 | 0;
    this.Hl = 2446758561 | 0;
    this.outputLen = 28;
  }
};
var SHA512_256 = class extends SHA512 {
  constructor() {
    super();
    this.Ah = 573645204 | 0;
    this.Al = 4230739756 | 0;
    this.Bh = 2673172387 | 0;
    this.Bl = 3360449730 | 0;
    this.Ch = 596883563 | 0;
    this.Cl = 1867755857 | 0;
    this.Dh = 2520282905 | 0;
    this.Dl = 1497426621 | 0;
    this.Eh = 2519219938 | 0;
    this.El = 2827943907 | 0;
    this.Fh = 3193839141 | 0;
    this.Fl = 1401305490 | 0;
    this.Gh = 721525244 | 0;
    this.Gl = 746961066 | 0;
    this.Hh = 246885852 | 0;
    this.Hl = 2177182882 | 0;
    this.outputLen = 32;
  }
};
var SHA384 = class extends SHA512 {
  constructor() {
    super();
    this.Ah = 3418070365 | 0;
    this.Al = 3238371032 | 0;
    this.Bh = 1654270250 | 0;
    this.Bl = 914150663 | 0;
    this.Ch = 2438529370 | 0;
    this.Cl = 812702999 | 0;
    this.Dh = 355462360 | 0;
    this.Dl = 4144912697 | 0;
    this.Eh = 1731405415 | 0;
    this.El = 4290775857 | 0;
    this.Fh = 2394180231 | 0;
    this.Fl = 1750603025 | 0;
    this.Gh = 3675008525 | 0;
    this.Gl = 1694076839 | 0;
    this.Hh = 1203062813 | 0;
    this.Hl = 3204075428 | 0;
    this.outputLen = 48;
  }
};
var sha5122 = wrapConstructor(() => new SHA512());
var sha512_224 = wrapConstructor(() => new SHA512_224());
var sha512_256 = wrapConstructor(() => new SHA512_256());
var sha384 = wrapConstructor(() => new SHA384());

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/abstract/edwards.js
init_shim();
var _0n11 = BigInt(0);
var _1n11 = BigInt(1);
var _2n9 = BigInt(2);
var _8n6 = BigInt(8);
var VERIFY_DEFAULT = { zip215: true };
function validateOpts2(curve) {
  const opts = validateBasic(curve);
  validateObject(curve, {
    hash: "function",
    a: "bigint",
    d: "bigint",
    randomBytes: "function"
  }, {
    adjustScalarBytes: "function",
    domain: "function",
    uvRatio: "function",
    mapToCurve: "function"
  });
  return Object.freeze({ ...opts });
}
function twistedEdwards(curveDef) {
  const CURVE = validateOpts2(curveDef);
  const { Fp: Fp9, n: CURVE_ORDER, prehash, hash: cHash, randomBytes: randomBytes5, nByteLength, h: cofactor } = CURVE;
  const MASK = _2n9 << BigInt(nByteLength * 8) - _1n11;
  const modP5 = Fp9.create;
  const uvRatio5 = CURVE.uvRatio || ((u, v) => {
    try {
      return { isValid: true, value: Fp9.sqrt(u * Fp9.inv(v)) };
    } catch (e) {
      return { isValid: false, value: _0n11 };
    }
  });
  const adjustScalarBytes5 = CURVE.adjustScalarBytes || ((bytes5) => bytes5);
  const domain = CURVE.domain || ((data, ctx, phflag) => {
    if (ctx.length || phflag)
      throw new Error("Contexts/pre-hash are not supported");
    return data;
  });
  const inBig = (n) => typeof n === "bigint" && _0n11 < n;
  const inRange = (n, max2) => inBig(n) && inBig(max2) && n < max2;
  const in0MaskRange = (n) => n === _0n11 || inRange(n, MASK);
  function assertInRange(n, max2) {
    if (inRange(n, max2))
      return n;
    throw new Error(`Expected valid scalar < ${max2}, got ${typeof n} ${n}`);
  }
  function assertGE0(n) {
    return n === _0n11 ? n : assertInRange(n, CURVE_ORDER);
  }
  const pointPrecomputes = /* @__PURE__ */ new Map();
  function isPoint(other) {
    if (!(other instanceof Point5))
      throw new Error("ExtendedPoint expected");
  }
  class Point5 {
    constructor(ex, ey, ez, et) {
      this.ex = ex;
      this.ey = ey;
      this.ez = ez;
      this.et = et;
      if (!in0MaskRange(ex))
        throw new Error("x required");
      if (!in0MaskRange(ey))
        throw new Error("y required");
      if (!in0MaskRange(ez))
        throw new Error("z required");
      if (!in0MaskRange(et))
        throw new Error("t required");
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(p) {
      if (p instanceof Point5)
        throw new Error("extended point not allowed");
      const { x, y } = p || {};
      if (!in0MaskRange(x) || !in0MaskRange(y))
        throw new Error("invalid affine point");
      return new Point5(x, y, _1n11, modP5(x * y));
    }
    static normalizeZ(points) {
      const toInv = Fp9.invertBatch(points.map((p) => p.ez));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point5.fromAffine);
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    // Not required for fromHex(), which always creates valid points.
    // Could be useful for fromAffine().
    assertValidity() {
      const { a, d } = CURVE;
      if (this.is0())
        throw new Error("bad point: ZERO");
      const { ex: X, ey: Y, ez: Z, et: T } = this;
      const X2 = modP5(X * X);
      const Y2 = modP5(Y * Y);
      const Z2 = modP5(Z * Z);
      const Z4 = modP5(Z2 * Z2);
      const aX2 = modP5(X2 * a);
      const left = modP5(Z2 * modP5(aX2 + Y2));
      const right = modP5(Z4 + modP5(d * modP5(X2 * Y2)));
      if (left !== right)
        throw new Error("bad point: equation left != right (1)");
      const XY = modP5(X * Y);
      const ZT = modP5(Z * T);
      if (XY !== ZT)
        throw new Error("bad point: equation left != right (2)");
    }
    // Compare one point to another.
    equals(other) {
      isPoint(other);
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const { ex: X2, ey: Y2, ez: Z2 } = other;
      const X1Z2 = modP5(X1 * Z2);
      const X2Z1 = modP5(X2 * Z1);
      const Y1Z2 = modP5(Y1 * Z2);
      const Y2Z1 = modP5(Y2 * Z1);
      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
    }
    is0() {
      return this.equals(Point5.ZERO);
    }
    negate() {
      return new Point5(modP5(-this.ex), this.ey, this.ez, modP5(-this.et));
    }
    // Fast algo for doubling Extended Point.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
    // Cost: 4M + 4S + 1*a + 6add + 1*2.
    double() {
      const { a } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const A = modP5(X1 * X1);
      const B = modP5(Y1 * Y1);
      const C = modP5(_2n9 * modP5(Z1 * Z1));
      const D = modP5(a * A);
      const x1y1 = X1 + Y1;
      const E = modP5(modP5(x1y1 * x1y1) - A - B);
      const G3 = D + B;
      const F = G3 - C;
      const H = D - B;
      const X3 = modP5(E * F);
      const Y3 = modP5(G3 * H);
      const T3 = modP5(E * H);
      const Z3 = modP5(F * G3);
      return new Point5(X3, Y3, Z3, T3);
    }
    // Fast algo for adding 2 Extended Points.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
    // Cost: 9M + 1*a + 1*d + 7add.
    add(other) {
      isPoint(other);
      const { a, d } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;
      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;
      if (a === BigInt(-1)) {
        const A2 = modP5((Y1 - X1) * (Y2 + X2));
        const B2 = modP5((Y1 + X1) * (Y2 - X2));
        const F2 = modP5(B2 - A2);
        if (F2 === _0n11)
          return this.double();
        const C2 = modP5(Z1 * _2n9 * T2);
        const D2 = modP5(T1 * _2n9 * Z2);
        const E2 = D2 + C2;
        const G4 = B2 + A2;
        const H2 = D2 - C2;
        const X32 = modP5(E2 * F2);
        const Y32 = modP5(G4 * H2);
        const T32 = modP5(E2 * H2);
        const Z32 = modP5(F2 * G4);
        return new Point5(X32, Y32, Z32, T32);
      }
      const A = modP5(X1 * X2);
      const B = modP5(Y1 * Y2);
      const C = modP5(T1 * d * T2);
      const D = modP5(Z1 * Z2);
      const E = modP5((X1 + Y1) * (X2 + Y2) - A - B);
      const F = D - C;
      const G3 = D + C;
      const H = modP5(B - a * A);
      const X3 = modP5(E * F);
      const Y3 = modP5(G3 * H);
      const T3 = modP5(E * H);
      const Z3 = modP5(F * G3);
      return new Point5(X3, Y3, Z3, T3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    wNAF(n) {
      return wnaf.wNAFCached(this, pointPrecomputes, n, Point5.normalizeZ);
    }
    // Constant-time multiplication.
    multiply(scalar) {
      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));
      return Point5.normalizeZ([p, f])[0];
    }
    // Non-constant-time multiplication. Uses double-and-add algorithm.
    // It's faster, but should only be used when you don't care about
    // an exposed private key e.g. sig verification.
    // Does NOT allow scalars higher than CURVE.n.
    multiplyUnsafe(scalar) {
      let n = assertGE0(scalar);
      if (n === _0n11)
        return I;
      if (this.equals(I) || n === _1n11)
        return this;
      if (this.equals(G))
        return this.wNAF(n).p;
      return wnaf.unsafeLadder(this, n);
    }
    // Checks if point is of small order.
    // If you add something to small order point, you will have "dirty"
    // point with torsion component.
    // Multiplies point by cofactor and checks if the result is 0.
    isSmallOrder() {
      return this.multiplyUnsafe(cofactor).is0();
    }
    // Multiplies point by curve order and checks if the result is 0.
    // Returns `false` is the point is dirty.
    isTorsionFree() {
      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
    }
    // Converts Extended point to default (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    toAffine(iz) {
      const { ex: x, ey: y, ez: z } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? _8n6 : Fp9.inv(z);
      const ax = modP5(x * iz);
      const ay = modP5(y * iz);
      const zz = modP5(z * iz);
      if (is0)
        return { x: _0n11, y: _1n11 };
      if (zz !== _1n11)
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    clearCofactor() {
      const { h: cofactor2 } = CURVE;
      if (cofactor2 === _1n11)
        return this;
      return this.multiplyUnsafe(cofactor2);
    }
    // Converts hash string or Uint8Array to Point.
    // Uses algo from RFC8032 5.1.3.
    static fromHex(hex11, zip215 = false) {
      const { d, a } = CURVE;
      const len = Fp9.BYTES;
      hex11 = ensureBytes("pointHex", hex11, len);
      const normed = hex11.slice();
      const lastByte = hex11[len - 1];
      normed[len - 1] = lastByte & ~128;
      const y = bytesToNumberLE(normed);
      if (y === _0n11) {
      } else {
        if (zip215)
          assertInRange(y, MASK);
        else
          assertInRange(y, Fp9.ORDER);
      }
      const y2 = modP5(y * y);
      const u = modP5(y2 - _1n11);
      const v = modP5(d * y2 - a);
      let { isValid, value: x } = uvRatio5(u, v);
      if (!isValid)
        throw new Error("Point.fromHex: invalid y coordinate");
      const isXOdd = (x & _1n11) === _1n11;
      const isLastByteOdd = (lastByte & 128) !== 0;
      if (!zip215 && x === _0n11 && isLastByteOdd)
        throw new Error("Point.fromHex: x=0 and x_0=1");
      if (isLastByteOdd !== isXOdd)
        x = modP5(-x);
      return Point5.fromAffine({ x, y });
    }
    static fromPrivateKey(privKey) {
      return getExtendedPublicKey(privKey).point;
    }
    toRawBytes() {
      const { x, y } = this.toAffine();
      const bytes5 = numberToBytesLE(y, Fp9.BYTES);
      bytes5[bytes5.length - 1] |= x & _1n11 ? 128 : 0;
      return bytes5;
    }
    toHex() {
      return bytesToHex(this.toRawBytes());
    }
  }
  Point5.BASE = new Point5(CURVE.Gx, CURVE.Gy, _1n11, modP5(CURVE.Gx * CURVE.Gy));
  Point5.ZERO = new Point5(_0n11, _1n11, _1n11, _0n11);
  const { BASE: G, ZERO: I } = Point5;
  const wnaf = wNAF(Point5, nByteLength * 8);
  function modN5(a) {
    return mod(a, CURVE_ORDER);
  }
  function modN_LE(hash5) {
    return modN5(bytesToNumberLE(hash5));
  }
  function getExtendedPublicKey(key) {
    const len = nByteLength;
    key = ensureBytes("private key", key, len);
    const hashed = ensureBytes("hashed private key", cHash(key), 2 * len);
    const head = adjustScalarBytes5(hashed.slice(0, len));
    const prefix2 = hashed.slice(len, 2 * len);
    const scalar = modN_LE(head);
    const point = G.multiply(scalar);
    const pointBytes = point.toRawBytes();
    return { head, prefix: prefix2, scalar, point, pointBytes };
  }
  function getPublicKey(privKey) {
    return getExtendedPublicKey(privKey).pointBytes;
  }
  function hashDomainToScalar(context2 = new Uint8Array(), ...msgs) {
    const msg = concatBytes2(...msgs);
    return modN_LE(cHash(domain(msg, ensureBytes("context", context2), !!prehash)));
  }
  function sign2(msg, privKey, options = {}) {
    msg = ensureBytes("message", msg);
    if (prehash)
      msg = prehash(msg);
    const { prefix: prefix2, scalar, pointBytes } = getExtendedPublicKey(privKey);
    const r = hashDomainToScalar(options.context, prefix2, msg);
    const R = G.multiply(r).toRawBytes();
    const k = hashDomainToScalar(options.context, R, pointBytes, msg);
    const s = modN5(r + k * scalar);
    assertGE0(s);
    const res = concatBytes2(R, numberToBytesLE(s, Fp9.BYTES));
    return ensureBytes("result", res, nByteLength * 2);
  }
  const verifyOpts = VERIFY_DEFAULT;
  function verify(sig2, msg, publicKey2, options = verifyOpts) {
    const { context: context2, zip215 } = options;
    const len = Fp9.BYTES;
    sig2 = ensureBytes("signature", sig2, 2 * len);
    msg = ensureBytes("message", msg);
    if (prehash)
      msg = prehash(msg);
    const s = bytesToNumberLE(sig2.slice(len, 2 * len));
    let A, R, SB;
    try {
      A = Point5.fromHex(publicKey2, zip215);
      R = Point5.fromHex(sig2.slice(0, len), zip215);
      SB = G.multiplyUnsafe(s);
    } catch (error) {
      return false;
    }
    if (!zip215 && A.isSmallOrder())
      return false;
    const k = hashDomainToScalar(context2, R.toRawBytes(), A.toRawBytes(), msg);
    const RkA = R.add(A.multiplyUnsafe(k));
    return RkA.subtract(SB).clearCofactor().equals(Point5.ZERO);
  }
  G._setWindowSize(8);
  const utils5 = {
    getExtendedPublicKey,
    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.
    randomPrivateKey: () => randomBytes5(Fp9.BYTES),
    /**
     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
     * values. This slows down first getPublicKey() by milliseconds (see Speed section),
     * but allows to speed-up subsequent getPublicKey() calls up to 20x.
     * @param windowSize 2, 4, 8, 16
     */
    precompute(windowSize = 8, point = Point5.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  return {
    CURVE,
    getPublicKey,
    sign: sign2,
    verify,
    ExtendedPoint: Point5,
    utils: utils5
  };
}

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/abstract/montgomery.js
init_shim();
var _0n12 = BigInt(0);
var _1n12 = BigInt(1);
function validateOpts3(curve) {
  validateObject(curve, {
    a: "bigint"
  }, {
    montgomeryBits: "isSafeInteger",
    nByteLength: "isSafeInteger",
    adjustScalarBytes: "function",
    domain: "function",
    powPminus2: "function",
    Gu: "bigint"
  });
  return Object.freeze({ ...curve });
}
function montgomery(curveDef) {
  const CURVE = validateOpts3(curveDef);
  const { P } = CURVE;
  const modP5 = (n) => mod(n, P);
  const montgomeryBits = CURVE.montgomeryBits;
  const montgomeryBytes = Math.ceil(montgomeryBits / 8);
  const fieldLen = CURVE.nByteLength;
  const adjustScalarBytes5 = CURVE.adjustScalarBytes || ((bytes5) => bytes5);
  const powPminus2 = CURVE.powPminus2 || ((x) => pow(x, P - BigInt(2), P));
  function cswap(swap, x_2, x_3) {
    const dummy = modP5(swap * (x_2 - x_3));
    x_2 = modP5(x_2 - dummy);
    x_3 = modP5(x_3 + dummy);
    return [x_2, x_3];
  }
  function assertFieldElement(n) {
    if (typeof n === "bigint" && _0n12 <= n && n < P)
      return n;
    throw new Error("Expected valid scalar 0 < scalar < CURVE.P");
  }
  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);
  function montgomeryLadder(pointU, scalar) {
    const u = assertFieldElement(pointU);
    const k = assertFieldElement(scalar);
    const x_1 = u;
    let x_2 = _1n12;
    let z_2 = _0n12;
    let x_3 = u;
    let z_3 = _1n12;
    let swap = _0n12;
    let sw;
    for (let t = BigInt(montgomeryBits - 1); t >= _0n12; t--) {
      const k_t = k >> t & _1n12;
      swap ^= k_t;
      sw = cswap(swap, x_2, x_3);
      x_2 = sw[0];
      x_3 = sw[1];
      sw = cswap(swap, z_2, z_3);
      z_2 = sw[0];
      z_3 = sw[1];
      swap = k_t;
      const A = x_2 + z_2;
      const AA = modP5(A * A);
      const B = x_2 - z_2;
      const BB = modP5(B * B);
      const E = AA - BB;
      const C = x_3 + z_3;
      const D = x_3 - z_3;
      const DA = modP5(D * A);
      const CB = modP5(C * B);
      const dacb = DA + CB;
      const da_cb = DA - CB;
      x_3 = modP5(dacb * dacb);
      z_3 = modP5(x_1 * modP5(da_cb * da_cb));
      x_2 = modP5(AA * BB);
      z_2 = modP5(E * (AA + modP5(a24 * E)));
    }
    sw = cswap(swap, x_2, x_3);
    x_2 = sw[0];
    x_3 = sw[1];
    sw = cswap(swap, z_2, z_3);
    z_2 = sw[0];
    z_3 = sw[1];
    const z2 = powPminus2(z_2);
    return modP5(x_2 * z2);
  }
  function encodeUCoordinate(u) {
    return numberToBytesLE(modP5(u), montgomeryBytes);
  }
  function decodeUCoordinate(uEnc) {
    const u = ensureBytes("u coordinate", uEnc, montgomeryBytes);
    if (fieldLen === montgomeryBytes)
      u[fieldLen - 1] &= 127;
    return bytesToNumberLE(u);
  }
  function decodeScalar(n) {
    const bytes5 = ensureBytes("scalar", n);
    if (bytes5.length !== montgomeryBytes && bytes5.length !== fieldLen)
      throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${bytes5.length}`);
    return bytesToNumberLE(adjustScalarBytes5(bytes5));
  }
  function scalarMult(scalar, u) {
    const pointU = decodeUCoordinate(u);
    const _scalar = decodeScalar(scalar);
    const pu = montgomeryLadder(pointU, _scalar);
    if (pu === _0n12)
      throw new Error("Invalid private or public key received");
    return encodeUCoordinate(pu);
  }
  const GuBytes = encodeUCoordinate(CURVE.Gu);
  function scalarMultBase(scalar) {
    return scalarMult(scalar, GuBytes);
  }
  return {
    scalarMult,
    scalarMultBase,
    getSharedSecret: (privateKey, publicKey2) => scalarMult(privateKey, publicKey2),
    getPublicKey: (privateKey) => scalarMultBase(privateKey),
    utils: { randomPrivateKey: () => CURVE.randomBytes(CURVE.nByteLength) },
    GuBytes
  };
}

// node_modules/@polkadot/api/node_modules/@noble/curves/esm/ed25519.js
var ED25519_P = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var ED25519_SQRT_M1 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
var _0n13 = BigInt(0);
var _1n13 = BigInt(1);
var _2n10 = BigInt(2);
var _5n6 = BigInt(5);
var _10n5 = BigInt(10);
var _20n = BigInt(20);
var _40n = BigInt(40);
var _80n = BigInt(80);
function ed25519_pow_2_252_3(x) {
  const P = ED25519_P;
  const x2 = x * x % P;
  const b2 = x2 * x % P;
  const b4 = pow2(b2, _2n10, P) * b2 % P;
  const b5 = pow2(b4, _1n13, P) * x % P;
  const b10 = pow2(b5, _5n6, P) * b5 % P;
  const b20 = pow2(b10, _10n5, P) * b10 % P;
  const b40 = pow2(b20, _20n, P) * b20 % P;
  const b80 = pow2(b40, _40n, P) * b40 % P;
  const b160 = pow2(b80, _80n, P) * b80 % P;
  const b240 = pow2(b160, _80n, P) * b80 % P;
  const b250 = pow2(b240, _10n5, P) * b10 % P;
  const pow_p_5_8 = pow2(b250, _2n10, P) * x % P;
  return { pow_p_5_8, b2 };
}
function adjustScalarBytes(bytes5) {
  bytes5[0] &= 248;
  bytes5[31] &= 127;
  bytes5[31] |= 64;
  return bytes5;
}
function uvRatio(u, v) {
  const P = ED25519_P;
  const v3 = mod(v * v * v, P);
  const v7 = mod(v3 * v3 * v, P);
  const pow6 = ed25519_pow_2_252_3(u * v7).pow_p_5_8;
  let x = mod(u * v3 * pow6, P);
  const vx2 = mod(v * x * x, P);
  const root1 = x;
  const root2 = mod(x * ED25519_SQRT_M1, P);
  const useRoot1 = vx2 === u;
  const useRoot2 = vx2 === mod(-u, P);
  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P);
  if (useRoot1)
    x = root1;
  if (useRoot2 || noRoot)
    x = root2;
  if (isNegativeLE(x, P))
    x = mod(-x, P);
  return { isValid: useRoot1 || useRoot2, value: x };
}
var Fp2 = Field(ED25519_P, void 0, true);
var ed25519Defaults = {
  // Param: a
  a: BigInt(-1),
  // d is equal to -121665/121666 over finite field.
  // Negative number is P - number, and division is invert(number, P)
  d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),
  // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n
  Fp: Fp2,
  // Subgroup order: how many points curve has
  // 2n**252n + 27742317777372353535851937790883648493n;
  n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),
  // Cofactor
  h: BigInt(8),
  // Base point (x, y) aka generator point
  Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),
  Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),
  hash: sha5122,
  randomBytes,
  adjustScalarBytes,
  // dom2
  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
  // Constant-time, u/√v
  uvRatio
};
var ed25519 = twistedEdwards(ed25519Defaults);
function ed25519_domain(data, ctx, phflag) {
  if (ctx.length > 255)
    throw new Error("Context is too big");
  return concatBytes(utf8ToBytes("SigEd25519 no Ed25519 collisions"), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);
}
var ed25519ctx = twistedEdwards({
  ...ed25519Defaults,
  domain: ed25519_domain
});
var ed25519ph = twistedEdwards({
  ...ed25519Defaults,
  domain: ed25519_domain,
  prehash: sha5122
});
var x25519 = (() => montgomery({
  P: ED25519_P,
  a: BigInt(486662),
  montgomeryBits: 255,
  nByteLength: 32,
  Gu: BigInt(9),
  powPminus2: (x) => {
    const P = ED25519_P;
    const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);
    return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);
  },
  adjustScalarBytes,
  randomBytes
}))();
var ELL2_C1 = (Fp2.ORDER + BigInt(3)) / BigInt(8);
var ELL2_C2 = Fp2.pow(_2n10, ELL2_C1);
var ELL2_C3 = Fp2.sqrt(Fp2.neg(Fp2.ONE));
var ELL2_C4 = (Fp2.ORDER - BigInt(5)) / BigInt(8);
var ELL2_J = BigInt(486662);
function map_to_curve_elligator2_curve25519(u) {
  let tv1 = Fp2.sqr(u);
  tv1 = Fp2.mul(tv1, _2n10);
  let xd = Fp2.add(tv1, Fp2.ONE);
  let x1n = Fp2.neg(ELL2_J);
  let tv2 = Fp2.sqr(xd);
  let gxd = Fp2.mul(tv2, xd);
  let gx1 = Fp2.mul(tv1, ELL2_J);
  gx1 = Fp2.mul(gx1, x1n);
  gx1 = Fp2.add(gx1, tv2);
  gx1 = Fp2.mul(gx1, x1n);
  let tv3 = Fp2.sqr(gxd);
  tv2 = Fp2.sqr(tv3);
  tv3 = Fp2.mul(tv3, gxd);
  tv3 = Fp2.mul(tv3, gx1);
  tv2 = Fp2.mul(tv2, tv3);
  let y11 = Fp2.pow(tv2, ELL2_C4);
  y11 = Fp2.mul(y11, tv3);
  let y12 = Fp2.mul(y11, ELL2_C3);
  tv2 = Fp2.sqr(y11);
  tv2 = Fp2.mul(tv2, gxd);
  let e1 = Fp2.eql(tv2, gx1);
  let y1 = Fp2.cmov(y12, y11, e1);
  let x2n = Fp2.mul(x1n, tv1);
  let y21 = Fp2.mul(y11, u);
  y21 = Fp2.mul(y21, ELL2_C2);
  let y22 = Fp2.mul(y21, ELL2_C3);
  let gx2 = Fp2.mul(gx1, tv1);
  tv2 = Fp2.sqr(y21);
  tv2 = Fp2.mul(tv2, gxd);
  let e2 = Fp2.eql(tv2, gx2);
  let y2 = Fp2.cmov(y22, y21, e2);
  tv2 = Fp2.sqr(y1);
  tv2 = Fp2.mul(tv2, gxd);
  let e3 = Fp2.eql(tv2, gx1);
  let xn = Fp2.cmov(x2n, x1n, e3);
  let y = Fp2.cmov(y2, y1, e3);
  let e4 = Fp2.isOdd(y);
  y = Fp2.cmov(y, Fp2.neg(y), e3 !== e4);
  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n13 };
}
var ELL2_C1_EDWARDS = FpSqrtEven(Fp2, Fp2.neg(BigInt(486664)));
function map_to_curve_elligator2_edwards25519(u) {
  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u);
  let xn = Fp2.mul(xMn, yMd);
  xn = Fp2.mul(xn, ELL2_C1_EDWARDS);
  let xd = Fp2.mul(xMd, yMn);
  let yn = Fp2.sub(xMn, xMd);
  let yd = Fp2.add(xMn, xMd);
  let tv1 = Fp2.mul(xd, yd);
  let e = Fp2.eql(tv1, Fp2.ZERO);
  xn = Fp2.cmov(xn, Fp2.ZERO, e);
  xd = Fp2.cmov(xd, Fp2.ONE, e);
  yn = Fp2.cmov(yn, Fp2.ONE, e);
  yd = Fp2.cmov(yd, Fp2.ONE, e);
  const inv = Fp2.invertBatch([xd, yd]);
  return { x: Fp2.mul(xn, inv[0]), y: Fp2.mul(yn, inv[1]) };
}
var htf2 = (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {
  DST: "edwards25519_XMD:SHA-512_ELL2_RO_",
  encodeDST: "edwards25519_XMD:SHA-512_ELL2_NU_",
  p: Fp2.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha5122
}))();
var hashToCurve2 = (() => htf2.hashToCurve)();
var encodeToCurve2 = (() => htf2.encodeToCurve)();
function assertRstPoint(other) {
  if (!(other instanceof RistPoint))
    throw new Error("RistrettoPoint expected");
}
var SQRT_M1 = ED25519_SQRT_M1;
var SQRT_AD_MINUS_ONE = BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235");
var INVSQRT_A_MINUS_D = BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578");
var ONE_MINUS_D_SQ = BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838");
var D_MINUS_ONE_SQ = BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
var invertSqrt = (number5) => uvRatio(_1n13, number5);
var MAX_255B = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var bytes255ToNumberLE = (bytes5) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes5) & MAX_255B);
function calcElligatorRistrettoMap(r0) {
  const { d } = ed25519.CURVE;
  const P = ed25519.CURVE.Fp.ORDER;
  const mod5 = ed25519.CURVE.Fp.create;
  const r = mod5(SQRT_M1 * r0 * r0);
  const Ns = mod5((r + _1n13) * ONE_MINUS_D_SQ);
  let c = BigInt(-1);
  const D = mod5((c - d * r) * mod5(r + d));
  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);
  let s_ = mod5(s * r0);
  if (!isNegativeLE(s_, P))
    s_ = mod5(-s_);
  if (!Ns_D_is_sq)
    s = s_;
  if (!Ns_D_is_sq)
    c = r;
  const Nt = mod5(c * (r - _1n13) * D_MINUS_ONE_SQ - D);
  const s2 = s * s;
  const W0 = mod5((s + s) * D);
  const W1 = mod5(Nt * SQRT_AD_MINUS_ONE);
  const W2 = mod5(_1n13 - s2);
  const W3 = mod5(_1n13 + s2);
  return new ed25519.ExtendedPoint(mod5(W0 * W3), mod5(W2 * W1), mod5(W1 * W3), mod5(W0 * W2));
}
var RistPoint = class {
  // Private property to discourage combining ExtendedPoint + RistrettoPoint
  // Always use Ristretto encoding/decoding instead.
  constructor(ep) {
    this.ep = ep;
  }
  static fromAffine(ap) {
    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));
  }
  /**
   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.
   * The hash-to-group operation applies Elligator twice and adds the results.
   * **Note:** this is one-way map, there is no conversion from point to hash.
   * https://ristretto.group/formulas/elligator.html
   * @param hex 64-byte output of a hash function
   */
  static hashToCurve(hex11) {
    hex11 = ensureBytes("ristrettoHash", hex11, 64);
    const r1 = bytes255ToNumberLE(hex11.slice(0, 32));
    const R1 = calcElligatorRistrettoMap(r1);
    const r2 = bytes255ToNumberLE(hex11.slice(32, 64));
    const R2 = calcElligatorRistrettoMap(r2);
    return new RistPoint(R1.add(R2));
  }
  /**
   * Converts ristretto-encoded string to ristretto point.
   * https://ristretto.group/formulas/decoding.html
   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
   */
  static fromHex(hex11) {
    hex11 = ensureBytes("ristrettoHex", hex11, 32);
    const { a, d } = ed25519.CURVE;
    const P = ed25519.CURVE.Fp.ORDER;
    const mod5 = ed25519.CURVE.Fp.create;
    const emsg = "RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint";
    const s = bytes255ToNumberLE(hex11);
    if (!equalBytes(numberToBytesLE(s, 32), hex11) || isNegativeLE(s, P))
      throw new Error(emsg);
    const s2 = mod5(s * s);
    const u1 = mod5(_1n13 + a * s2);
    const u2 = mod5(_1n13 - a * s2);
    const u1_2 = mod5(u1 * u1);
    const u2_2 = mod5(u2 * u2);
    const v = mod5(a * d * u1_2 - u2_2);
    const { isValid, value: I } = invertSqrt(mod5(v * u2_2));
    const Dx = mod5(I * u2);
    const Dy = mod5(I * Dx * v);
    let x = mod5((s + s) * Dx);
    if (isNegativeLE(x, P))
      x = mod5(-x);
    const y = mod5(u1 * Dy);
    const t = mod5(x * y);
    if (!isValid || isNegativeLE(t, P) || y === _0n13)
      throw new Error(emsg);
    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n13, t));
  }
  /**
   * Encodes ristretto point to Uint8Array.
   * https://ristretto.group/formulas/encoding.html
   */
  toRawBytes() {
    let { ex: x, ey: y, ez: z, et: t } = this.ep;
    const P = ed25519.CURVE.Fp.ORDER;
    const mod5 = ed25519.CURVE.Fp.create;
    const u1 = mod5(mod5(z + y) * mod5(z - y));
    const u2 = mod5(x * y);
    const u2sq = mod5(u2 * u2);
    const { value: invsqrt } = invertSqrt(mod5(u1 * u2sq));
    const D1 = mod5(invsqrt * u1);
    const D2 = mod5(invsqrt * u2);
    const zInv = mod5(D1 * D2 * t);
    let D;
    if (isNegativeLE(t * zInv, P)) {
      let _x = mod5(y * SQRT_M1);
      let _y = mod5(x * SQRT_M1);
      x = _x;
      y = _y;
      D = mod5(D1 * INVSQRT_A_MINUS_D);
    } else {
      D = D2;
    }
    if (isNegativeLE(x * zInv, P))
      y = mod5(-y);
    let s = mod5((z - y) * D);
    if (isNegativeLE(s, P))
      s = mod5(-s);
    return numberToBytesLE(s, 32);
  }
  toHex() {
    return bytesToHex(this.toRawBytes());
  }
  toString() {
    return this.toHex();
  }
  // Compare one point to another.
  equals(other) {
    assertRstPoint(other);
    const { ex: X1, ey: Y1 } = this.ep;
    const { ex: X2, ey: Y2 } = other.ep;
    const mod5 = ed25519.CURVE.Fp.create;
    const one = mod5(X1 * Y2) === mod5(Y1 * X2);
    const two = mod5(Y1 * Y2) === mod5(X1 * X2);
    return one || two;
  }
  add(other) {
    assertRstPoint(other);
    return new RistPoint(this.ep.add(other.ep));
  }
  subtract(other) {
    assertRstPoint(other);
    return new RistPoint(this.ep.subtract(other.ep));
  }
  multiply(scalar) {
    return new RistPoint(this.ep.multiply(scalar));
  }
  multiplyUnsafe(scalar) {
    return new RistPoint(this.ep.multiplyUnsafe(scalar));
  }
};
var RistrettoPoint = (() => {
  if (!RistPoint.BASE)
    RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);
  if (!RistPoint.ZERO)
    RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);
  return RistPoint;
})();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ed25519/pair/fromSeed.js
function ed25519PairFromSeed(seed, onlyJs) {
  if (!hasBigInt5 || !onlyJs && isReady()) {
    const full = ed25519KeypairFromSeed(seed);
    return {
      publicKey: full.slice(32),
      secretKey: full.slice(0, 64)
    };
  }
  const publicKey2 = ed25519.getPublicKey(seed);
  return {
    publicKey: publicKey2,
    secretKey: u8aConcatStrict5([seed, publicKey2])
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ed25519/pair/fromSecret.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ed25519/pair/fromString.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ed25519/sign.js
init_shim();
function ed25519Sign2(message, { publicKey: publicKey2, secretKey }, onlyJs) {
  if (!secretKey) {
    throw new Error("Expected a valid secretKey");
  } else if (!publicKey2) {
    throw new Error("Expected a valid publicKey");
  }
  const messageU8a = u8aToU8a5(message);
  const privateU8a = secretKey.subarray(0, 32);
  return !hasBigInt5 || !onlyJs && isReady() ? ed25519Sign(publicKey2, privateU8a, messageU8a) : ed25519.sign(messageU8a, privateU8a);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ed25519/verify.js
init_shim();
function ed25519Verify2(message, signature, publicKey2, onlyJs) {
  const messageU8a = u8aToU8a5(message);
  const publicKeyU8a = u8aToU8a5(publicKey2);
  const signatureU8a = u8aToU8a5(signature);
  if (publicKeyU8a.length !== 32) {
    throw new Error(`Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);
  } else if (signatureU8a.length !== 64) {
    throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  }
  try {
    return !hasBigInt5 || !onlyJs && isReady() ? ed25519Verify(signatureU8a, messageU8a, publicKeyU8a) : ed25519.verify(signatureU8a, messageU8a, publicKeyU8a);
  } catch {
    return false;
  }
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/hdkdEd25519.js
var keyHdkdEd25519 = createSeedDeriveFn(ed25519PairFromSeed, ed25519DeriveHard);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/hdkdSr25519.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/deriveHard.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/derive.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/pair/fromU8a.js
init_shim();
var SEC_LEN = 64;
var PUB_LEN = 32;
var TOT_LEN = SEC_LEN + PUB_LEN;
function sr25519PairFromU8a(full) {
  const fullU8a = u8aToU8a5(full);
  if (fullU8a.length !== TOT_LEN) {
    throw new Error(`Expected keypair with ${TOT_LEN} bytes, found ${fullU8a.length}`);
  }
  return {
    publicKey: fullU8a.slice(SEC_LEN, TOT_LEN),
    secretKey: fullU8a.slice(0, SEC_LEN)
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/pair/toU8a.js
init_shim();
function sr25519KeypairToU8a({ publicKey: publicKey2, secretKey }) {
  return u8aConcat5(secretKey, publicKey2).slice();
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/derive.js
function createDeriveFn(derive2) {
  return (keypair, chainCode) => {
    if (!isU8a5(chainCode) || chainCode.length !== 32) {
      throw new Error("Invalid chainCode passed to derive");
    }
    return sr25519PairFromU8a(derive2(sr25519KeypairToU8a(keypair), chainCode));
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/deriveHard.js
var sr25519DeriveHard = createDeriveFn(sr25519DeriveKeypairHard);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/deriveSoft.js
init_shim();
var sr25519DeriveSoft = createDeriveFn(sr25519DeriveKeypairSoft);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/hdkdSr25519.js
function keyHdkdSr25519(keypair, { chainCode, isSoft }) {
  return isSoft ? sr25519DeriveSoft(keypair, chainCode) : sr25519DeriveHard(keypair, chainCode);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/key/fromPath.js
var generators = {
  ecdsa: keyHdkdEcdsa,
  ed25519: keyHdkdEd25519,
  // FIXME This is Substrate-compatible, not Ethereum-compatible
  ethereum: keyHdkdEcdsa,
  sr25519: keyHdkdSr25519
};
function keyFromPath(pair, path, type) {
  const keyHdkd = generators[type];
  let result = pair;
  for (const junction of path) {
    result = keyHdkd(result, junction);
  }
  return result;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/agreement.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/derivePublic.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/pair/fromSeed.js
init_shim();
function sr25519PairFromSeed(seed) {
  const seedU8a = u8aToU8a5(seed);
  if (seedU8a.length !== 32) {
    throw new Error(`Expected a seed matching 32 bytes, found ${seedU8a.length}`);
  }
  return sr25519PairFromU8a(sr25519KeypairFromSeed(seedU8a));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/sign.js
init_shim();
function sr25519Sign2(message, { publicKey: publicKey2, secretKey }) {
  if ((publicKey2 == null ? void 0 : publicKey2.length) !== 32) {
    throw new Error("Expected a valid publicKey, 32-bytes");
  } else if ((secretKey == null ? void 0 : secretKey.length) !== 64) {
    throw new Error("Expected a valid secretKey, 64-bytes");
  }
  return sr25519Sign(publicKey2, secretKey, u8aToU8a5(message));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/verify.js
init_shim();
function sr25519Verify2(message, signature, publicKey2) {
  const publicKeyU8a = u8aToU8a5(publicKey2);
  const signatureU8a = u8aToU8a5(signature);
  if (publicKeyU8a.length !== 32) {
    throw new Error(`Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
  } else if (signatureU8a.length !== 64) {
    throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  }
  return sr25519Verify(signatureU8a, u8aToU8a5(message), publicKeyU8a);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/vrfSign.js
init_shim();
var EMPTY_U8A = new Uint8Array();
function sr25519VrfSign(message, { secretKey }, context2 = EMPTY_U8A, extra = EMPTY_U8A) {
  if ((secretKey == null ? void 0 : secretKey.length) !== 64) {
    throw new Error("Invalid secretKey, expected 64-bytes");
  }
  return vrfSign(secretKey, u8aToU8a5(context2), u8aToU8a5(message), u8aToU8a5(extra));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sr25519/vrfVerify.js
init_shim();
var EMPTY_U8A2 = new Uint8Array();
function sr25519VrfVerify(message, signOutput, publicKey2, context2 = EMPTY_U8A2, extra = EMPTY_U8A2) {
  const publicKeyU8a = u8aToU8a5(publicKey2);
  const proofU8a = u8aToU8a5(signOutput);
  if (publicKeyU8a.length !== 32) {
    throw new Error("Invalid publicKey, expected 32-bytes");
  } else if (proofU8a.length !== 96) {
    throw new Error("Invalid vrfSign output, expected 96 bytes");
  }
  return vrfVerify(publicKeyU8a, u8aToU8a5(context2), u8aToU8a5(message), u8aToU8a5(extra), proofU8a);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/encode.js
init_shim();
function encodeAddress(key, ss58Format = defaults.prefix) {
  const u8a9 = decodeAddress(key);
  if (ss58Format < 0 || ss58Format > 16383 || [46, 47].includes(ss58Format)) {
    throw new Error("Out of range ss58Format specified");
  } else if (!defaults.allowedDecodedLengths.includes(u8a9.length)) {
    throw new Error(`Expected a valid key to convert, with length ${defaults.allowedDecodedLengths.join(", ")}`);
  }
  const input = u8aConcat5(ss58Format < 64 ? [ss58Format] : [
    (ss58Format & 252) >> 2 | 64,
    ss58Format >> 8 | (ss58Format & 3) << 6
  ], u8a9);
  return base58Encode(u8aConcat5(input, sshash(input).subarray(0, [32, 33].includes(u8a9.length) ? 2 : 1)));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/encodeDerived.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/keyDerived.js
init_shim();
var PREFIX = stringToU8a5("modlpy/utilisuba");

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/encodeMulti.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/keyMulti.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/util.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/keyMulti.js
var PREFIX2 = stringToU8a5("modlpy/utilisuba");

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/eq.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/evmToAddress.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/hasher.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/blake2/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/keccak/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/keccak/asU8a.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/sha3.js
init_shim();
var [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
var _0n14 = BigInt(0);
var _1n14 = BigInt(1);
var _2n11 = BigInt(2);
var _7n5 = BigInt(7);
var _256n = BigInt(256);
var _0x71n = BigInt(113);
for (let round = 0, R = _1n14, x = 1, y = 0; round < 24; round++) {
  [x, y] = [y, (2 * x + 3 * y) % 5];
  SHA3_PI.push(2 * (5 * y + x));
  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
  let t = _0n14;
  for (let j = 0; j < 7; j++) {
    R = (R << _1n14 ^ (R >> _7n5) * _0x71n) % _256n;
    if (R & _2n11)
      t ^= _1n14 << (_1n14 << BigInt(j)) - _1n14;
  }
  _SHA3_IOTA.push(t);
}
var [SHA3_IOTA_H, SHA3_IOTA_L] = split(_SHA3_IOTA, true);
var rotlH = (h, l19, s) => s > 32 ? rotlBH(h, l19, s) : rotlSH(h, l19, s);
var rotlL = (h, l19, s) => s > 32 ? rotlBL(h, l19, s) : rotlSL(h, l19, s);
function keccakP(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x = 0; x < 10; x++)
      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
    for (let x = 0; x < 10; x += 2) {
      const idx1 = (x + 8) % 10;
      const idx0 = (x + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
      for (let y = 0; y < 50; y += 10) {
        s[x + y] ^= Th;
        s[x + y + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y = 0; y < 50; y += 10) {
      for (let x = 0; x < 10; x++)
        B[x] = s[y + x];
      for (let x = 0; x < 10; x++)
        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H[round];
    s[1] ^= SHA3_IOTA_L[round];
  }
  B.fill(0);
}
var Keccak = class extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    number(outputLen);
    if (0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200);
    this.state32 = u32(this.state);
  }
  keccak() {
    keccakP(this.state32, this.rounds);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    exists(this);
    const { blockLen, state } = this;
    data = toBytes(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take2 = Math.min(blockLen - this.pos, len - pos);
      for (let i = 0; i < take2; i++)
        state[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state, suffix, pos, blockLen } = this;
    state[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    exists(this, false);
    bytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take2 = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take2), pos);
      this.posOut += take2;
      pos += take2;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes5) {
    number(bytes5);
    return this.xofInto(new Uint8Array(bytes5));
  }
  digestInto(out) {
    output(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    this.state.fill(0);
  }
  _cloneInto(to) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to.state32.set(this.state32);
    to.pos = this.pos;
    to.posOut = this.posOut;
    to.finished = this.finished;
    to.rounds = rounds;
    to.suffix = suffix;
    to.outputLen = outputLen;
    to.enableXOF = enableXOF;
    to.destroyed = this.destroyed;
    return to;
  }
};
var gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
var sha3_224 = gen(6, 144, 224 / 8);
var sha3_256 = gen(6, 136, 256 / 8);
var sha3_384 = gen(6, 104, 384 / 8);
var sha3_512 = gen(6, 72, 512 / 8);
var keccak_224 = gen(1, 144, 224 / 8);
var keccak_256 = gen(1, 136, 256 / 8);
var keccak_384 = gen(1, 104, 384 / 8);
var keccak_512 = gen(1, 72, 512 / 8);
var genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake128 = genShake(31, 168, 128 / 8);
var shake256 = genShake(31, 136, 256 / 8);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/keccak/asU8a.js
var keccakAsU8a = createDualHasher({ 256: keccak256, 512: keccak512 }, { 256: keccak_256, 512: keccak_512 });
var keccak256AsU8a = createBitHasher(256, keccakAsU8a);
var keccak512AsU8a = createBitHasher(512, keccakAsU8a);
var keccakAsHex = createAsHex(keccakAsU8a);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/hasher.js
function hasher(hashType, data, onlyJs) {
  return hashType === "keccak" ? keccakAsU8a(data, void 0, onlyJs) : blake2AsU8a(data, void 0, void 0, onlyJs);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/is.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/validate.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/sort.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/address/setSS58Format.js
init_shim();
var l = logger2("setSS58Format");

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/base32/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/base32/bs32.js
init_shim();
var chars = "abcdefghijklmnopqrstuvwxyz234567";
var config2 = {
  chars,
  coder: utils.chain(
    // We define our own chain, the default base32 has padding
    utils.radix2(5),
    utils.alphabet(chars),
    {
      decode: (input) => input.split(""),
      encode: (input) => input.join("")
    }
  ),
  ipfs: "b",
  type: "base32"
};
var base32Validate = createValidate(config2);
var isBase32 = createIs(base32Validate);
var base32Decode = createDecode(config2, base32Validate);
var base32Encode = createEncode(config2);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/base64/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/base64/bs64.js
init_shim();
var config3 = {
  chars: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  coder: base64,
  type: "base64",
  withPadding: true
};
var base64Validate = createValidate(config3);
var isBase64 = createIs(base64Validate);
var base64Decode = createDecode(config3, base64Validate);
var base64Encode = createEncode(config3);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/base64/pad.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/base64/trim.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ethereum/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ethereum/encode.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/compress.js
init_shim();
function secp256k1Compress2(publicKey2, onlyJs) {
  if (![33, 65].includes(publicKey2.length)) {
    throw new Error(`Invalid publicKey provided, received ${publicKey2.length} bytes input`);
  }
  if (publicKey2.length === 33) {
    return publicKey2;
  }
  return !hasBigInt5 || !onlyJs && isReady() ? secp256k1Compress(publicKey2) : secp256k1.ProjectivePoint.fromHex(publicKey2).toRawBytes(true);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/expand.js
init_shim();
function secp256k1Expand2(publicKey2, onlyJs) {
  if (![33, 65].includes(publicKey2.length)) {
    throw new Error(`Invalid publicKey provided, received ${publicKey2.length} bytes input`);
  }
  if (publicKey2.length === 65) {
    return publicKey2.subarray(1);
  }
  if (!hasBigInt5 || !onlyJs && isReady()) {
    return secp256k1Expand(publicKey2).subarray(1);
  }
  const { px, py } = secp256k1.ProjectivePoint.fromHex(publicKey2);
  return u8aConcat5(bnToU8a5(px, BN_BE_256_OPTS), bnToU8a5(py, BN_BE_256_OPTS));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/recover.js
init_shim();
function secp256k1Recover2(msgHash, signature, recovery, hashType = "blake2", onlyJs) {
  const sig2 = u8aToU8a5(signature).subarray(0, 64);
  const msg = u8aToU8a5(msgHash);
  const publicKey2 = !hasBigInt5 || !onlyJs && isReady() ? secp256k1Recover(msg, sig2, recovery) : secp256k1.Signature.fromCompact(sig2).addRecoveryBit(recovery).recoverPublicKey(msg).toRawBytes();
  if (!publicKey2) {
    throw new Error("Unable to recover publicKey from signature");
  }
  return hashType === "keccak" ? secp256k1Expand2(publicKey2, onlyJs) : secp256k1Compress2(publicKey2, onlyJs);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/sign.js
init_shim();
function secp256k1Sign2(message, { secretKey }, hashType = "blake2", onlyJs) {
  if ((secretKey == null ? void 0 : secretKey.length) !== 32) {
    throw new Error("Expected valid secp256k1 secretKey, 32-bytes");
  }
  const data = hasher(hashType, message, onlyJs);
  if (!hasBigInt5 || !onlyJs && isReady()) {
    return secp256k1Sign(data, secretKey);
  }
  const signature = secp256k1.sign(data, secretKey, { lowS: true });
  return u8aConcat5(bnToU8a5(signature.r, BN_BE_256_OPTS), bnToU8a5(signature.s, BN_BE_256_OPTS), new Uint8Array([signature.recovery || 0]));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/tweakAdd.js
init_shim();
var N = "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141".replace(/ /g, "");
var N_BI = BigInt2(`0x${N}`);
var N_BN = new import_bn41.default(N, "hex");
function addBi(seckey, tweak) {
  let res = u8aToBigInt5(tweak, BN_BE_OPTS);
  if (res >= N_BI) {
    throw new Error("Tweak parameter is out of range");
  }
  res += u8aToBigInt5(seckey, BN_BE_OPTS);
  if (res >= N_BI) {
    res -= N_BI;
  }
  if (res === _0n5) {
    throw new Error("Invalid resulting private key");
  }
  return nToU8a4(res, BN_BE_256_OPTS);
}
function addBn(seckey, tweak) {
  const res = new import_bn41.default(tweak);
  if (res.cmp(N_BN) >= 0) {
    throw new Error("Tweak parameter is out of range");
  }
  res.iadd(new import_bn41.default(seckey));
  if (res.cmp(N_BN) >= 0) {
    res.isub(N_BN);
  }
  if (res.isZero()) {
    throw new Error("Invalid resulting private key");
  }
  return bnToU8a5(res, BN_BE_256_OPTS);
}
function secp256k1PrivateKeyTweakAdd(seckey, tweak, onlyBn) {
  if (!isU8a5(seckey) || seckey.length !== 32) {
    throw new Error("Expected seckey to be an Uint8Array with length 32");
  } else if (!isU8a5(tweak) || tweak.length !== 32) {
    throw new Error("Expected tweak to be an Uint8Array with length 32");
  }
  return !hasBigInt5 || onlyBn ? addBn(seckey, tweak) : addBi(seckey, tweak);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/verify.js
init_shim();
function secp256k1Verify(msgHash, signature, address, hashType = "blake2", onlyJs) {
  const sig2 = u8aToU8a5(signature);
  if (sig2.length !== 65) {
    throw new Error(`Expected signature with 65 bytes, ${sig2.length} found instead`);
  }
  const publicKey2 = secp256k1Recover2(hasher(hashType, msgHash), sig2, sig2[64], hashType, onlyJs);
  const signerAddr = hasher(hashType, publicKey2, onlyJs);
  const inputAddr = u8aToU8a5(address);
  return u8aEq5(publicKey2, inputAddr) || (hashType === "keccak" ? u8aEq5(signerAddr.slice(-20), inputAddr.slice(-20)) : u8aEq5(signerAddr, inputAddr));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ethereum/encode.js
function getH160(u8a9) {
  if ([33, 65].includes(u8a9.length)) {
    u8a9 = keccakAsU8a(secp256k1Expand2(u8a9));
  }
  return u8a9.slice(-20);
}
function ethereumEncode(addressOrPublic) {
  if (!addressOrPublic) {
    return "0x";
  }
  const u8aAddress = u8aToU8a5(addressOrPublic);
  if (![20, 32, 33, 65].includes(u8aAddress.length)) {
    throw new Error(`Invalid address or publicKey provided, received ${u8aAddress.length} bytes input`);
  }
  const address = u8aToHex5(getH160(u8aAddress), -1, false);
  const hash5 = u8aToHex5(keccakAsU8a(address), -1, false);
  let result = "";
  for (let i = 0; i < 40; i++) {
    result = `${result}${parseInt(hash5[i], 16) > 7 ? address[i].toUpperCase() : address[i]}`;
  }
  return `0x${result}`;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ethereum/isAddress.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/ethereum/isChecksum.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/hd/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/hd/ethereum/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/hmac/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/hmac/shaAsU8a.js
init_shim();
var JS_HASH = {
  256: sha2562,
  512: sha5122
};
var WA_MHAC = {
  256: hmacSha256,
  512: hmacSha512
};
function createSha(bitLength) {
  return (key, data, onlyJs) => hmacShaAsU8a(key, data, bitLength, onlyJs);
}
function hmacShaAsU8a(key, data, bitLength = 256, onlyJs) {
  const u8aKey = u8aToU8a5(key);
  return !hasBigInt5 || !onlyJs && isReady() ? WA_MHAC[bitLength](u8aKey, data) : hmac(JS_HASH[bitLength], u8aKey, data);
}
var hmacSha256AsU8a = createSha(256);
var hmacSha512AsU8a = createSha(512);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/hd/validatePath.js
init_shim();
var HARDENED = 2147483648;
function hdValidatePath(path) {
  if (!path.startsWith("m/")) {
    return false;
  }
  const parts = path.split("/").slice(1);
  for (const p of parts) {
    const n = /^\d+'?$/.test(p) ? parseInt(p.replace(/'$/, ""), 10) : Number.NaN;
    if (isNaN(n) || n >= HARDENED || n < 0) {
      return false;
    }
  }
  return true;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/hd/ethereum/index.js
var MASTER_SECRET = stringToU8a5("Bitcoin seed");
function createCoded(secretKey, chainCode) {
  return {
    chainCode,
    publicKey: secp256k1PairFromSeed(secretKey).publicKey,
    secretKey
  };
}
function deriveChild(hd, index) {
  const indexBuffer = bnToU8a5(index, BN_BE_32_OPTS);
  const data = index >= HARDENED ? u8aConcat5(new Uint8Array(1), hd.secretKey, indexBuffer) : u8aConcat5(hd.publicKey, indexBuffer);
  try {
    const I = hmacShaAsU8a(hd.chainCode, data, 512);
    return createCoded(secp256k1PrivateKeyTweakAdd(hd.secretKey, I.slice(0, 32)), I.slice(32));
  } catch {
    return deriveChild(hd, index + 1);
  }
}
function hdEthereum(seed, path = "") {
  const I = hmacShaAsU8a(MASTER_SECRET, seed, 512);
  let hd = createCoded(I.slice(0, 32), I.slice(32));
  if (!path || path === "m" || path === "M" || path === "m'" || path === "M'") {
    return hd;
  }
  if (!hdValidatePath(path)) {
    throw new Error("Invalid derivation path");
  }
  const parts = path.split("/").slice(1);
  for (const p of parts) {
    hd = deriveChild(hd, parseInt(p, 10) + (p.length > 1 && p.endsWith("'") ? HARDENED : 0));
  }
  return hd;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/hd/ledger/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/mnemonic/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/mnemonic/generate.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/mnemonic/bip39.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/pbkdf2/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/pbkdf2/encode.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/pbkdf2.js
init_shim();
function pbkdf2Init(hash5, _password, _salt, _opts) {
  hash(hash5);
  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
  const { c, dkLen, asyncTick } = opts;
  number(c);
  number(dkLen);
  number(asyncTick);
  if (c < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const password = toBytes(_password);
  const salt = toBytes(_salt);
  const DK = new Uint8Array(dkLen);
  const PRF = hmac.create(hash5, password);
  const PRFSalt = PRF._cloneInto().update(salt);
  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
  PRF.destroy();
  PRFSalt.destroy();
  if (prfW)
    prfW.destroy();
  u.fill(0);
  return DK;
}
function pbkdf22(hash5, password, salt, opts) {
  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash5, password, salt, opts);
  let prfW;
  const arr = new Uint8Array(4);
  const view = createView(arr);
  const u = new Uint8Array(PRF.outputLen);
  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
    const Ti = DK.subarray(pos, pos + PRF.outputLen);
    view.setInt32(0, ti, false);
    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
    Ti.set(u.subarray(0, Ti.length));
    for (let ui = 1; ui < c; ui++) {
      PRF._cloneInto(prfW).update(u).digestInto(u);
      for (let i = 0; i < Ti.length; i++)
        Ti[i] ^= u[i];
    }
  }
  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/pbkdf2/encode.js
function pbkdf2Encode(passphrase, salt = randomAsU8a(), rounds = 2048, onlyJs) {
  const u8aPass = u8aToU8a5(passphrase);
  const u8aSalt = u8aToU8a5(salt);
  return {
    password: !hasBigInt5 || !onlyJs && isReady() ? pbkdf2(u8aPass, u8aSalt, rounds) : pbkdf22(sha5122, u8aPass, u8aSalt, { c: rounds, dkLen: 64 }),
    rounds,
    salt
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sha/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/sha/asU8a.js
init_shim();
var shaAsU8a = createDualHasher({ 256: sha256, 512: sha512 }, { 256: sha2562, 512: sha5122 });
var sha256AsU8a = createBitHasher(256, shaAsU8a);
var sha512AsU8a = createBitHasher(512, shaAsU8a);

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/mnemonic/wordlists/en.js
init_shim();
var en_default = "abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo".split("|");

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/mnemonic/bip39.js
var INVALID_MNEMONIC = "Invalid mnemonic";
var INVALID_ENTROPY = "Invalid entropy";
var INVALID_CHECKSUM = "Invalid mnemonic checksum";
function normalize2(str) {
  return (str || "").normalize("NFKD");
}
function binaryToByte(bin) {
  return parseInt(bin, 2);
}
function bytesToBinary(bytes5) {
  return bytes5.map((x) => x.toString(2).padStart(8, "0")).join("");
}
function deriveChecksumBits(entropyBuffer) {
  return bytesToBinary(Array.from(sha256AsU8a(entropyBuffer))).slice(0, entropyBuffer.length * 8 / 32);
}
function mnemonicToSeedSync(mnemonic, password) {
  return pbkdf2Encode(stringToU8a5(normalize2(mnemonic)), stringToU8a5(`mnemonic${normalize2(password)}`)).password;
}
function mnemonicToEntropy(mnemonic, wordlist = en_default) {
  const words = normalize2(mnemonic).split(" ");
  if (words.length % 3 !== 0) {
    throw new Error(INVALID_MNEMONIC);
  }
  const bits = words.map((word) => {
    const index = wordlist.indexOf(word);
    if (index === -1) {
      throw new Error(INVALID_MNEMONIC);
    }
    return index.toString(2).padStart(11, "0");
  }).join("");
  const dividerIndex = Math.floor(bits.length / 33) * 32;
  const entropyBits = bits.slice(0, dividerIndex);
  const checksumBits = bits.slice(dividerIndex);
  const matched = entropyBits.match(/(.{1,8})/g);
  const entropyBytes = matched == null ? void 0 : matched.map(binaryToByte);
  if (!entropyBytes || entropyBytes.length % 4 !== 0 || entropyBytes.length < 16 || entropyBytes.length > 32) {
    throw new Error(INVALID_ENTROPY);
  }
  const entropy = u8aToU8a5(entropyBytes);
  if (deriveChecksumBits(entropy) !== checksumBits) {
    throw new Error(INVALID_CHECKSUM);
  }
  return entropy;
}
function validateMnemonic(mnemonic, wordlist) {
  try {
    mnemonicToEntropy(mnemonic, wordlist);
  } catch {
    return false;
  }
  return true;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/mnemonic/toEntropy.js
init_shim();
function mnemonicToEntropy2(mnemonic, wordlist, onlyJs) {
  return !hasBigInt5 || !wordlist && !onlyJs && isReady() ? bip39ToEntropy(mnemonic) : mnemonicToEntropy(mnemonic, wordlist);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/mnemonic/toLegacySeed.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/mnemonic/validate.js
init_shim();
function mnemonicValidate(mnemonic, wordlist, onlyJs) {
  return !hasBigInt5 || !wordlist && !onlyJs && isReady() ? bip39Validate(mnemonic) : validateMnemonic(mnemonic, wordlist);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/mnemonic/toLegacySeed.js
function mnemonicToLegacySeed(mnemonic, password = "", onlyJs, byteLength = 32) {
  if (!mnemonicValidate(mnemonic)) {
    throw new Error("Invalid bip39 mnemonic specified");
  } else if (![32, 64].includes(byteLength)) {
    throw new Error(`Invalid seed length ${byteLength}, expected 32 or 64`);
  }
  return byteLength === 32 ? !hasBigInt5 || !onlyJs && isReady() ? bip39ToSeed(mnemonic, password) : mnemonicToSeedSync(mnemonic, password).subarray(0, 32) : mnemonicToSeedSync(mnemonic, password);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/mnemonic/toMiniSecret.js
init_shim();
function mnemonicToMiniSecret(mnemonic, password = "", wordlist, onlyJs) {
  if (!mnemonicValidate(mnemonic, wordlist, onlyJs)) {
    throw new Error("Invalid bip39 mnemonic specified");
  } else if (!wordlist && !onlyJs && isReady()) {
    return bip39ToMiniSecret(mnemonic, password);
  }
  const entropy = mnemonicToEntropy2(mnemonic, wordlist);
  const salt = stringToU8a5(`mnemonic${password}`);
  return pbkdf2Encode(entropy, salt).password.slice(0, 32);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/hd/ledger/derivePrivate.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/hd/ledger/master.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/json/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/json/decrypt.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/json/decryptData.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/nacl/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/nacl/decrypt.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/nacl/tweetnacl.js
init_shim();
function L32(x, c) {
  return x << c | x >>> 32 - c;
}
function ld32(x, i) {
  let u = x[i + 3] & 255;
  u = u << 8 | x[i + 2] & 255;
  u = u << 8 | x[i + 1] & 255;
  return u << 8 | x[i + 0] & 255;
}
function st32(x, j, u) {
  for (let i = 0; i < 4; i++) {
    x[j + i] = u & 255;
    u >>>= 8;
  }
}
function vn(x, xi, y, yi, n) {
  let d = 0;
  for (let i = 0; i < n; i++)
    d |= x[xi + i] ^ y[yi + i];
  return (1 & d - 1 >>> 8) - 1;
}
function core(out, inp, k, c, h) {
  const w = new Uint32Array(16), x = new Uint32Array(16), y = new Uint32Array(16), t = new Uint32Array(4);
  let i, j, m;
  for (i = 0; i < 4; i++) {
    x[5 * i] = ld32(c, 4 * i);
    x[1 + i] = ld32(k, 4 * i);
    x[6 + i] = ld32(inp, 4 * i);
    x[11 + i] = ld32(k, 16 + 4 * i);
  }
  for (i = 0; i < 16; i++)
    y[i] = x[i];
  for (i = 0; i < 20; i++) {
    for (j = 0; j < 4; j++) {
      for (m = 0; m < 4; m++)
        t[m] = x[(5 * j + 4 * m) % 16];
      t[1] ^= L32(t[0] + t[3] | 0, 7);
      t[2] ^= L32(t[1] + t[0] | 0, 9);
      t[3] ^= L32(t[2] + t[1] | 0, 13);
      t[0] ^= L32(t[3] + t[2] | 0, 18);
      for (m = 0; m < 4; m++)
        w[4 * j + (j + m) % 4] = t[m];
    }
    for (m = 0; m < 16; m++)
      x[m] = w[m];
  }
  if (h) {
    for (i = 0; i < 16; i++)
      x[i] = x[i] + y[i] | 0;
    for (i = 0; i < 4; i++) {
      x[5 * i] = x[5 * i] - ld32(c, 4 * i) | 0;
      x[6 + i] = x[6 + i] - ld32(inp, 4 * i) | 0;
    }
    for (i = 0; i < 4; i++) {
      st32(out, 4 * i, x[5 * i]);
      st32(out, 16 + 4 * i, x[6 + i]);
    }
  } else {
    for (i = 0; i < 16; i++)
      st32(out, 4 * i, x[i] + y[i] | 0);
  }
}
var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
  const z = new Uint8Array(16), x = new Uint8Array(64);
  let u, i;
  if (!b)
    return 0;
  for (i = 0; i < 16; i++)
    z[i] = 0;
  for (i = 0; i < 8; i++)
    z[i] = n[i];
  while (b >= 64) {
    core(x, z, k, sigma, false);
    for (i = 0; i < 64; i++)
      c[cpos + i] = (m ? m[mpos + i] : 0) ^ x[i];
    u = 1;
    for (i = 8; i < 16; i++) {
      u = u + (z[i] & 255) | 0;
      z[i] = u & 255;
      u >>>= 8;
    }
    b -= 64;
    cpos += 64;
    if (m)
      mpos += 64;
  }
  if (b > 0) {
    core(x, z, k, sigma, false);
    for (i = 0; i < b; i++)
      c[cpos + i] = (m ? m[mpos + i] : 0) ^ x[i];
  }
  return 0;
}
function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
  const s = new Uint8Array(32);
  core(s, n, k, sigma, true);
  return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, n.subarray(16), s);
}
function add1305(h, c) {
  let u = 0;
  for (let j = 0; j < 17; j++) {
    u = u + (h[j] + c[j] | 0) | 0;
    h[j] = u & 255;
    u >>>= 8;
  }
}
var minusp = new Uint32Array([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252]);
function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
  let i, j, u;
  const x = new Uint32Array(17), r = new Uint32Array(17), h = new Uint32Array(17), c = new Uint32Array(17), g = new Uint32Array(17);
  for (j = 0; j < 17; j++)
    r[j] = h[j] = 0;
  for (j = 0; j < 16; j++)
    r[j] = k[j];
  r[3] &= 15;
  r[4] &= 252;
  r[7] &= 15;
  r[8] &= 252;
  r[11] &= 15;
  r[12] &= 252;
  r[15] &= 15;
  while (n > 0) {
    for (j = 0; j < 17; j++)
      c[j] = 0;
    for (j = 0; j < 16 && j < n; ++j)
      c[j] = m[mpos + j];
    c[j] = 1;
    mpos += j;
    n -= j;
    add1305(h, c);
    for (i = 0; i < 17; i++) {
      x[i] = 0;
      for (j = 0; j < 17; j++)
        x[i] = x[i] + h[j] * (j <= i ? r[i - j] : 320 * r[i + 17 - j] | 0) | 0 | 0;
    }
    for (i = 0; i < 17; i++)
      h[i] = x[i];
    u = 0;
    for (j = 0; j < 16; j++) {
      u = u + h[j] | 0;
      h[j] = u & 255;
      u >>>= 8;
    }
    u = u + h[16] | 0;
    h[16] = u & 3;
    u = 5 * (u >>> 2) | 0;
    for (j = 0; j < 16; j++) {
      u = u + h[j] | 0;
      h[j] = u & 255;
      u >>>= 8;
    }
    u = u + h[16] | 0;
    h[16] = u;
  }
  for (j = 0; j < 17; j++)
    g[j] = h[j];
  add1305(h, minusp);
  const s = -(h[16] >>> 7) | 0;
  for (j = 0; j < 17; j++)
    h[j] ^= s & (g[j] ^ h[j]);
  for (j = 0; j < 16; j++)
    c[j] = k[j + 16];
  c[16] = 0;
  add1305(h, c);
  for (j = 0; j < 16; j++)
    out[outpos + j] = h[j];
  return 0;
}
function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
  const x = new Uint8Array(16);
  crypto_onetimeauth(x, 0, m, mpos, n, k);
  return vn(h, hpos, x, 0, 16);
}
function crypto_secretbox(c, m, d, n, k) {
  if (d < 32)
    return -1;
  crypto_stream_xor(c, 0, m, 0, d, n, k);
  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
  for (let i = 0; i < 16; i++)
    c[i] = 0;
  return 0;
}
function crypto_secretbox_open(m, c, d, n, k) {
  const x = new Uint8Array(32);
  if (d < 32)
    return -1;
  crypto_stream_xor(x, 0, null, 0, 32, n, k);
  if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0)
    return -1;
  crypto_stream_xor(m, 0, c, 0, d, n, k);
  for (let i = 0; i < 32; i++)
    m[i] = 0;
  return 0;
}
var crypto_secretbox_KEYBYTES = 32;
var crypto_secretbox_NONCEBYTES = 24;
var crypto_secretbox_ZEROBYTES = 32;
var crypto_secretbox_BOXZEROBYTES = 16;
function checkLengths(k, n) {
  if (k.length !== crypto_secretbox_KEYBYTES)
    throw new Error("bad key size");
  if (n.length !== crypto_secretbox_NONCEBYTES)
    throw new Error("bad nonce size");
}
function checkArrayTypes(...args) {
  for (let i = 0, count2 = args.length; i < count2; i++) {
    if (!(args[i] instanceof Uint8Array))
      throw new TypeError("unexpected type, use Uint8Array");
  }
}
function naclSecretbox(msg, nonce, key) {
  checkArrayTypes(msg, nonce, key);
  checkLengths(key, nonce);
  const m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
  const c = new Uint8Array(m.length);
  for (let i = 0; i < msg.length; i++)
    m[i + crypto_secretbox_ZEROBYTES] = msg[i];
  crypto_secretbox(c, m, m.length, nonce, key);
  return c.subarray(crypto_secretbox_BOXZEROBYTES);
}
function naclSecretboxOpen(box, nonce, key) {
  checkArrayTypes(box, nonce, key);
  checkLengths(key, nonce);
  const c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
  const m = new Uint8Array(c.length);
  for (let i = 0; i < box.length; i++)
    c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
  if (c.length < 32)
    return null;
  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0)
    return null;
  return m.subarray(crypto_secretbox_ZEROBYTES);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/nacl/decrypt.js
function naclDecrypt(encrypted, nonce, secret) {
  return naclSecretboxOpen(encrypted, nonce, secret);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/nacl/encrypt.js
init_shim();
function naclEncrypt(message, secret, nonce = randomAsU8a(24)) {
  return {
    encrypted: naclSecretbox(message, nonce, secret),
    nonce
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/scrypt/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/scrypt/encode.js
init_shim();

// node_modules/@polkadot/api/node_modules/@noble/hashes/esm/scrypt.js
init_shim();
var rotl = (a, b) => a << b | a >>> 32 - b;
function XorAndSalsa(prev, pi, input, ii, out, oi) {
  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
  let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
  for (let i = 0; i < 8; i += 2) {
    x04 ^= rotl(x00 + x12 | 0, 7);
    x08 ^= rotl(x04 + x00 | 0, 9);
    x12 ^= rotl(x08 + x04 | 0, 13);
    x00 ^= rotl(x12 + x08 | 0, 18);
    x09 ^= rotl(x05 + x01 | 0, 7);
    x13 ^= rotl(x09 + x05 | 0, 9);
    x01 ^= rotl(x13 + x09 | 0, 13);
    x05 ^= rotl(x01 + x13 | 0, 18);
    x14 ^= rotl(x10 + x06 | 0, 7);
    x02 ^= rotl(x14 + x10 | 0, 9);
    x06 ^= rotl(x02 + x14 | 0, 13);
    x10 ^= rotl(x06 + x02 | 0, 18);
    x03 ^= rotl(x15 + x11 | 0, 7);
    x07 ^= rotl(x03 + x15 | 0, 9);
    x11 ^= rotl(x07 + x03 | 0, 13);
    x15 ^= rotl(x11 + x07 | 0, 18);
    x01 ^= rotl(x00 + x03 | 0, 7);
    x02 ^= rotl(x01 + x00 | 0, 9);
    x03 ^= rotl(x02 + x01 | 0, 13);
    x00 ^= rotl(x03 + x02 | 0, 18);
    x06 ^= rotl(x05 + x04 | 0, 7);
    x07 ^= rotl(x06 + x05 | 0, 9);
    x04 ^= rotl(x07 + x06 | 0, 13);
    x05 ^= rotl(x04 + x07 | 0, 18);
    x11 ^= rotl(x10 + x09 | 0, 7);
    x08 ^= rotl(x11 + x10 | 0, 9);
    x09 ^= rotl(x08 + x11 | 0, 13);
    x10 ^= rotl(x09 + x08 | 0, 18);
    x12 ^= rotl(x15 + x14 | 0, 7);
    x13 ^= rotl(x12 + x15 | 0, 9);
    x14 ^= rotl(x13 + x12 | 0, 13);
    x15 ^= rotl(x14 + x13 | 0, 18);
  }
  out[oi++] = y00 + x00 | 0;
  out[oi++] = y01 + x01 | 0;
  out[oi++] = y02 + x02 | 0;
  out[oi++] = y03 + x03 | 0;
  out[oi++] = y04 + x04 | 0;
  out[oi++] = y05 + x05 | 0;
  out[oi++] = y06 + x06 | 0;
  out[oi++] = y07 + x07 | 0;
  out[oi++] = y08 + x08 | 0;
  out[oi++] = y09 + x09 | 0;
  out[oi++] = y10 + x10 | 0;
  out[oi++] = y11 + x11 | 0;
  out[oi++] = y12 + x12 | 0;
  out[oi++] = y13 + x13 | 0;
  out[oi++] = y14 + x14 | 0;
  out[oi++] = y15 + x15 | 0;
}
function BlockMix(input, ii, out, oi, r) {
  let head = oi + 0;
  let tail = oi + 16 * r;
  for (let i = 0; i < 16; i++)
    out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
  for (let i = 0; i < r; i++, head += 16, ii += 16) {
    XorAndSalsa(out, tail, input, ii, out, head);
    if (i > 0)
      tail += 16;
    XorAndSalsa(out, head, input, ii += 16, out, tail);
  }
}
function scryptInit(password, salt, _opts) {
  const opts = checkOpts({
    dkLen: 32,
    asyncTick: 10,
    maxmem: 1024 ** 3 + 1024
  }, _opts);
  const { N: N5, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
  number(N5);
  number(r);
  number(p);
  number(dkLen);
  number(asyncTick);
  number(maxmem);
  if (onProgress !== void 0 && typeof onProgress !== "function")
    throw new Error("progressCb should be function");
  const blockSize = 128 * r;
  const blockSize32 = blockSize / 4;
  if (N5 <= 1 || (N5 & N5 - 1) !== 0 || N5 >= 2 ** (blockSize / 8) || N5 > 2 ** 32) {
    throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
  }
  if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
    throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
  }
  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
    throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
  }
  const memUsed = blockSize * (N5 + p);
  if (memUsed > maxmem) {
    throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
  }
  const B = pbkdf22(sha2562, password, salt, { c: 1, dkLen: blockSize * p });
  const B32 = u32(B);
  const V = u32(new Uint8Array(blockSize * N5));
  const tmp = u32(new Uint8Array(blockSize));
  let blockMixCb = () => {
  };
  if (onProgress) {
    const totalBlockMix = 2 * N5 * p;
    const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
    let blockMixCnt = 0;
    blockMixCb = () => {
      blockMixCnt++;
      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
        onProgress(blockMixCnt / totalBlockMix);
    };
  }
  return { N: N5, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
}
function scryptOutput(password, dkLen, B, V, tmp) {
  const res = pbkdf22(sha2562, password, B, { c: 1, dkLen });
  B.fill(0);
  V.fill(0);
  tmp.fill(0);
  return res;
}
function scrypt2(password, salt, opts) {
  const { N: N5, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
  for (let pi = 0; pi < p; pi++) {
    const Pi = blockSize32 * pi;
    for (let i = 0; i < blockSize32; i++)
      V[i] = B32[Pi + i];
    for (let i = 0, pos = 0; i < N5 - 1; i++) {
      BlockMix(V, pos, V, pos += blockSize32, r);
      blockMixCb();
    }
    BlockMix(V, (N5 - 1) * blockSize32, B32, Pi, r);
    blockMixCb();
    for (let i = 0; i < N5; i++) {
      const j = B32[Pi + blockSize32 - 16] % N5;
      for (let k = 0; k < blockSize32; k++)
        tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
      BlockMix(tmp, 0, B32, Pi, r);
      blockMixCb();
    }
  }
  return scryptOutput(password, dkLen, B, V, tmp);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/scrypt/defaults.js
init_shim();
var DEFAULT_PARAMS = {
  N: 1 << 15,
  p: 1,
  r: 8
};

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/scrypt/encode.js
function scryptEncode(passphrase, salt = randomAsU8a(), params = DEFAULT_PARAMS, onlyJs) {
  const u8a9 = u8aToU8a5(passphrase);
  return {
    params,
    password: !hasBigInt5 || !onlyJs && isReady() ? scrypt(u8a9, salt, Math.log2(params.N), params.r, params.p) : scrypt2(u8a9, salt, objectSpread4({ dkLen: 64 }, params)),
    salt
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/scrypt/fromU8a.js
init_shim();
function scryptFromU8a(data) {
  const salt = data.subarray(0, 32);
  const N5 = u8aToBn4(data.subarray(32 + 0, 32 + 4), BN_LE_OPTS).toNumber();
  const p = u8aToBn4(data.subarray(32 + 4, 32 + 8), BN_LE_OPTS).toNumber();
  const r = u8aToBn4(data.subarray(32 + 8, 32 + 12), BN_LE_OPTS).toNumber();
  if (N5 !== DEFAULT_PARAMS.N || p !== DEFAULT_PARAMS.p || r !== DEFAULT_PARAMS.r) {
    throw new Error("Invalid injected scrypt params found");
  }
  return { params: { N: N5, p, r }, salt };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/scrypt/toU8a.js
init_shim();
function scryptToU8a(salt, { N: N5, p, r }) {
  return u8aConcat5(salt, bnToU8a5(N5, BN_LE_32_OPTS), bnToU8a5(p, BN_LE_32_OPTS), bnToU8a5(r, BN_LE_32_OPTS));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/json/constants.js
init_shim();
var ENCODING = ["scrypt", "xsalsa20-poly1305"];
var ENCODING_NONE = ["none"];
var ENCODING_VERSION = "3";
var NONCE_LENGTH = 24;
var SCRYPT_LENGTH = 32 + 3 * 4;

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/json/decryptData.js
function jsonDecryptData(encrypted, passphrase, encType = ENCODING) {
  if (!encrypted) {
    throw new Error("No encrypted data available to decode");
  } else if (encType.includes("xsalsa20-poly1305") && !passphrase) {
    throw new Error("Password required to decode encrypted data");
  }
  let encoded = encrypted;
  if (passphrase) {
    let password;
    if (encType.includes("scrypt")) {
      const { params, salt } = scryptFromU8a(encrypted);
      password = scryptEncode(passphrase, salt, params).password;
      encrypted = encrypted.subarray(SCRYPT_LENGTH);
    } else {
      password = stringToU8a5(passphrase);
    }
    encoded = naclDecrypt(encrypted.subarray(NONCE_LENGTH), encrypted.subarray(0, NONCE_LENGTH), u8aFixLength4(password, 256, true));
  }
  if (!encoded) {
    throw new Error("Unable to decode using the supplied passphrase");
  }
  return encoded;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/json/encrypt.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/json/encryptFormat.js
init_shim();
function jsonEncryptFormat(encoded, contentType, isEncrypted) {
  return {
    encoded: base64Encode(encoded),
    encoding: {
      content: contentType,
      type: isEncrypted ? ENCODING : ENCODING_NONE,
      version: ENCODING_VERSION
    }
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/signature/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/signature/verify.js
init_shim();
var secp256k1VerifyHasher = (hashType) => (message, signature, publicKey2) => secp256k1Verify(message, signature, publicKey2, hashType);
var VERIFIERS_ECDSA = [
  ["ecdsa", secp256k1VerifyHasher("blake2")],
  ["ethereum", secp256k1VerifyHasher("keccak")]
];
var VERIFIERS = [
  ["ed25519", ed25519Verify2],
  ["sr25519", sr25519Verify2],
  ...VERIFIERS_ECDSA
];
var CRYPTO_TYPES = ["ed25519", "sr25519", "ecdsa"];
function verifyDetect(result, { message, publicKey: publicKey2, signature }, verifiers = VERIFIERS) {
  result.isValid = verifiers.some(([crypto6, verify]) => {
    try {
      if (verify(message, signature, publicKey2)) {
        result.crypto = crypto6;
        return true;
      }
    } catch {
    }
    return false;
  });
  return result;
}
function verifyMultisig(result, { message, publicKey: publicKey2, signature }) {
  if (![0, 1, 2].includes(signature[0])) {
    throw new Error(`Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);
  }
  const type = CRYPTO_TYPES[signature[0]] || "none";
  result.crypto = type;
  try {
    result.isValid = {
      ecdsa: () => verifyDetect(result, { message, publicKey: publicKey2, signature: signature.subarray(1) }, VERIFIERS_ECDSA).isValid,
      ed25519: () => ed25519Verify2(message, signature.subarray(1), publicKey2),
      none: () => {
        throw Error("no verify for `none` crypto type");
      },
      sr25519: () => sr25519Verify2(message, signature.subarray(1), publicKey2)
    }[type]();
  } catch {
  }
  return result;
}
function getVerifyFn(signature) {
  return [0, 1, 2].includes(signature[0]) && [65, 66].includes(signature.length) ? verifyMultisig : verifyDetect;
}
function signatureVerify(message, signature, addressOrPublicKey) {
  const signatureU8a = u8aToU8a5(signature);
  if (![64, 65, 66].includes(signatureU8a.length)) {
    throw new Error(`Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);
  }
  const publicKey2 = decodeAddress(addressOrPublicKey);
  const input = { message: u8aToU8a5(message), publicKey: publicKey2, signature: signatureU8a };
  const result = { crypto: "none", isValid: false, isWrapped: u8aIsWrapped5(input.message, true), publicKey: publicKey2 };
  const isWrappedBytes = u8aIsWrapped5(input.message, false);
  const verifyFn = getVerifyFn(signatureU8a);
  verifyFn(result, input);
  if (result.crypto !== "none" || result.isWrapped && !isWrappedBytes) {
    return result;
  }
  input.message = isWrappedBytes ? u8aUnwrapBytes5(input.message) : u8aWrapBytes5(input.message);
  return verifyFn(result, input);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/xxhash/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/xxhash/asU8a.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/xxhash/xxhash64.js
init_shim();
var P64_1 = BigInt2("11400714785074694791");
var P64_2 = BigInt2("14029467366897019727");
var P64_3 = BigInt2("1609587929392839161");
var P64_4 = BigInt2("9650029242287828579");
var P64_5 = BigInt2("2870177450012600261");
var U64 = BigInt2("0xffffffffffffffff");
var _7n6 = BigInt2(7);
var _11n = BigInt2(11);
var _12n = BigInt2(12);
var _16n2 = BigInt2(16);
var _18n = BigInt2(18);
var _23n = BigInt2(23);
var _27n = BigInt2(27);
var _29n = BigInt2(29);
var _31n = BigInt2(31);
var _32n2 = BigInt2(32);
var _33n = BigInt2(33);
var _64n = BigInt2(64);
var _256n2 = BigInt2(256);
function rotl2(a, b) {
  const c = a & U64;
  return (c << b | c >> _64n - b) & U64;
}
function fromU8a(u8a9, p, count2) {
  const bigints = new Array(count2);
  let offset = 0;
  for (let i = 0; i < count2; i++, offset += 2) {
    bigints[i] = BigInt2(u8a9[p + offset] | u8a9[p + 1 + offset] << 8);
  }
  let result = _0n5;
  for (let i = count2 - 1; i >= 0; i--) {
    result = (result << _16n2) + bigints[i];
  }
  return result;
}
function init(seed, input) {
  const state = {
    seed,
    u8a: new Uint8Array(32),
    u8asize: 0,
    v1: seed + P64_1 + P64_2,
    v2: seed + P64_2,
    v3: seed,
    v4: seed - P64_1
  };
  if (input.length < 32) {
    state.u8a.set(input);
    state.u8asize = input.length;
    return state;
  }
  const limit = input.length - 32;
  let p = 0;
  if (limit >= 0) {
    const adjustV = (v) => P64_1 * rotl2(v + P64_2 * fromU8a(input, p, 4), _31n);
    do {
      state.v1 = adjustV(state.v1);
      p += 8;
      state.v2 = adjustV(state.v2);
      p += 8;
      state.v3 = adjustV(state.v3);
      p += 8;
      state.v4 = adjustV(state.v4);
      p += 8;
    } while (p <= limit);
  }
  if (p < input.length) {
    state.u8a.set(input.subarray(p, input.length));
    state.u8asize = input.length - p;
  }
  return state;
}
function xxhash64(input, initSeed) {
  const { seed, u8a: u8a9, u8asize, v1: v17, v2: v22, v3, v4: v411 } = init(BigInt2(initSeed), input);
  let p = 0;
  let h64 = U64 & BigInt2(input.length) + (input.length >= 32 ? ((((rotl2(v17, _1n5) + rotl2(v22, _7n6) + rotl2(v3, _12n) + rotl2(v411, _18n) ^ P64_1 * rotl2(v17 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl2(v22 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl2(v3 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl2(v411 * P64_2, _31n)) * P64_1 + P64_4 : seed + P64_5);
  while (p <= u8asize - 8) {
    h64 = U64 & P64_4 + P64_1 * rotl2(h64 ^ P64_1 * rotl2(P64_2 * fromU8a(u8a9, p, 4), _31n), _27n);
    p += 8;
  }
  if (p + 4 <= u8asize) {
    h64 = U64 & P64_3 + P64_2 * rotl2(h64 ^ P64_1 * fromU8a(u8a9, p, 2), _23n);
    p += 4;
  }
  while (p < u8asize) {
    h64 = U64 & P64_1 * rotl2(h64 ^ P64_5 * BigInt2(u8a9[p++]), _11n);
  }
  h64 = U64 & P64_2 * (h64 ^ h64 >> _33n);
  h64 = U64 & P64_3 * (h64 ^ h64 >> _29n);
  h64 = U64 & (h64 ^ h64 >> _32n2);
  const result = new Uint8Array(8);
  for (let i = 7; i >= 0; i--) {
    result[i] = Number(h64 % _256n2);
    h64 = h64 / _256n2;
  }
  return result;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/xxhash/asU8a.js
function xxhashAsU8a(data, bitLength = 64, onlyJs) {
  const rounds = Math.ceil(bitLength / 64);
  const u8a9 = u8aToU8a5(data);
  if (!hasBigInt5 || !onlyJs && isReady()) {
    return twox(u8a9, rounds);
  }
  const result = new Uint8Array(rounds * 8);
  for (let seed = 0; seed < rounds; seed++) {
    result.set(xxhash64(u8a9, seed).reverse(), seed * 8);
  }
  return result;
}
var xxhashAsHex = createAsHex(xxhashAsU8a);

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/keyring.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/pair/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/pair/decode.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/pair/defaults.js
init_shim();
var PKCS8_DIVIDER = new Uint8Array([161, 35, 3, 33, 0]);
var PKCS8_HEADER = new Uint8Array([48, 83, 2, 1, 1, 48, 5, 6, 3, 43, 101, 112, 4, 34, 4, 32]);
var PUB_LENGTH = 32;
var SEC_LENGTH = 64;
var SEED_LENGTH = 32;

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/pair/decode.js
var SEED_OFFSET = PKCS8_HEADER.length;
function decodePair(passphrase, encrypted, _encType) {
  const encType = Array.isArray(_encType) || _encType === void 0 ? _encType : [_encType];
  const decrypted = jsonDecryptData(encrypted, passphrase, encType);
  const header = decrypted.subarray(0, PKCS8_HEADER.length);
  if (!u8aEq5(header, PKCS8_HEADER)) {
    throw new Error("Invalid Pkcs8 header found in body");
  }
  let secretKey = decrypted.subarray(SEED_OFFSET, SEED_OFFSET + SEC_LENGTH);
  let divOffset = SEED_OFFSET + SEC_LENGTH;
  let divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length);
  if (!u8aEq5(divider, PKCS8_DIVIDER)) {
    divOffset = SEED_OFFSET + SEED_LENGTH;
    secretKey = decrypted.subarray(SEED_OFFSET, divOffset);
    divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length);
    if (!u8aEq5(divider, PKCS8_DIVIDER)) {
      throw new Error("Invalid Pkcs8 divider found in body");
    }
  }
  const pubOffset = divOffset + PKCS8_DIVIDER.length;
  const publicKey2 = decrypted.subarray(pubOffset, pubOffset + PUB_LENGTH);
  return {
    publicKey: publicKey2,
    secretKey
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/pair/encode.js
init_shim();
function encodePair({ publicKey: publicKey2, secretKey }, passphrase) {
  if (!secretKey) {
    throw new Error("Expected a valid secretKey to be passed to encode");
  }
  const encoded = u8aConcat5(PKCS8_HEADER, secretKey, PKCS8_DIVIDER, publicKey2);
  if (!passphrase) {
    return encoded;
  }
  const { params, password, salt } = scryptEncode(passphrase);
  const { encrypted, nonce } = naclEncrypt(encoded, password.subarray(0, 32));
  return u8aConcat5(scryptToU8a(salt, params), nonce, encrypted);
}

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/pair/toJson.js
init_shim();
function pairToJson(type, { address, meta }, encoded, isEncrypted) {
  return objectSpread4(jsonEncryptFormat(encoded, ["pkcs8", type], isEncrypted), {
    address,
    meta
  });
}

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/pair/index.js
var SIG_TYPE_NONE = new Uint8Array();
var TYPE_FROM_SEED = {
  ecdsa: secp256k1PairFromSeed,
  ed25519: ed25519PairFromSeed,
  ethereum: secp256k1PairFromSeed,
  sr25519: sr25519PairFromSeed
};
var TYPE_PREFIX = {
  ecdsa: new Uint8Array([2]),
  ed25519: new Uint8Array([0]),
  ethereum: new Uint8Array([2]),
  sr25519: new Uint8Array([1])
};
var TYPE_SIGNATURE = {
  ecdsa: (m, p) => secp256k1Sign2(m, p, "blake2"),
  ed25519: ed25519Sign2,
  ethereum: (m, p) => secp256k1Sign2(m, p, "keccak"),
  sr25519: sr25519Sign2
};
var TYPE_ADDRESS = {
  ecdsa: (p) => p.length > 32 ? blake2AsU8a(p) : p,
  ed25519: (p) => p,
  ethereum: (p) => p.length === 20 ? p : keccakAsU8a(secp256k1Expand2(p)),
  sr25519: (p) => p
};
function isLocked(secretKey) {
  return !secretKey || u8aEmpty5(secretKey);
}
function vrfHash(proof, context2, extra) {
  return blake2AsU8a(u8aConcat5(context2 || "", extra || "", proof));
}
function createPair({ toSS58, type }, { publicKey: publicKey2, secretKey }, meta = {}, encoded = null, encTypes) {
  const decodePkcs8 = (passphrase, userEncoded) => {
    const decoded = decodePair(passphrase, userEncoded || encoded, encTypes);
    if (decoded.secretKey.length === 64) {
      publicKey2 = decoded.publicKey;
      secretKey = decoded.secretKey;
    } else {
      const pair = TYPE_FROM_SEED[type](decoded.secretKey);
      publicKey2 = pair.publicKey;
      secretKey = pair.secretKey;
    }
  };
  const recode = (passphrase) => {
    isLocked(secretKey) && encoded && decodePkcs8(passphrase, encoded);
    encoded = encodePair({ publicKey: publicKey2, secretKey }, passphrase);
    encTypes = void 0;
    return encoded;
  };
  const encodeAddress6 = () => {
    const raw = TYPE_ADDRESS[type](publicKey2);
    return type === "ethereum" ? ethereumEncode(raw) : toSS58(raw);
  };
  return {
    get address() {
      return encodeAddress6();
    },
    get addressRaw() {
      const raw = TYPE_ADDRESS[type](publicKey2);
      return type === "ethereum" ? raw.slice(-20) : raw;
    },
    get isLocked() {
      return isLocked(secretKey);
    },
    get meta() {
      return meta;
    },
    get publicKey() {
      return publicKey2;
    },
    get type() {
      return type;
    },
    // eslint-disable-next-line sort-keys
    decodePkcs8,
    derive: (suri, meta2) => {
      if (type === "ethereum") {
        throw new Error("Unable to derive on this keypair");
      } else if (isLocked(secretKey)) {
        throw new Error("Cannot derive on a locked keypair");
      }
      const { path } = keyExtractPath(suri);
      const derived = keyFromPath({ publicKey: publicKey2, secretKey }, path, type);
      return createPair({ toSS58, type }, derived, meta2, null);
    },
    encodePkcs8: (passphrase) => {
      return recode(passphrase);
    },
    lock: () => {
      secretKey = new Uint8Array();
    },
    setMeta: (additional) => {
      meta = objectSpread4({}, meta, additional);
    },
    sign: (message, options = {}) => {
      if (isLocked(secretKey)) {
        throw new Error("Cannot sign with a locked key pair");
      }
      return u8aConcat5(options.withType ? TYPE_PREFIX[type] : SIG_TYPE_NONE, TYPE_SIGNATURE[type](u8aToU8a5(message), { publicKey: publicKey2, secretKey }));
    },
    toJson: (passphrase) => {
      const address = ["ecdsa", "ethereum"].includes(type) ? publicKey2.length === 20 ? u8aToHex5(publicKey2) : u8aToHex5(secp256k1Compress2(publicKey2)) : encodeAddress6();
      return pairToJson(type, { address, meta }, recode(passphrase), !!passphrase);
    },
    unlock: (passphrase) => {
      return decodePkcs8(passphrase);
    },
    verify: (message, signature, signerPublic) => {
      return signatureVerify(message, signature, TYPE_ADDRESS[type](u8aToU8a5(signerPublic))).isValid;
    },
    vrfSign: (message, context2, extra) => {
      if (isLocked(secretKey)) {
        throw new Error("Cannot sign with a locked key pair");
      }
      if (type === "sr25519") {
        return sr25519VrfSign(message, { secretKey }, context2, extra);
      }
      const proof = TYPE_SIGNATURE[type](u8aToU8a5(message), { publicKey: publicKey2, secretKey });
      return u8aConcat5(vrfHash(proof, context2, extra), proof);
    },
    vrfVerify: (message, vrfResult, signerPublic, context2, extra) => {
      if (type === "sr25519") {
        return sr25519VrfVerify(message, vrfResult, publicKey2, context2, extra);
      }
      const result = signatureVerify(message, u8aConcat5(TYPE_PREFIX[type], vrfResult.subarray(32)), TYPE_ADDRESS[type](u8aToU8a5(signerPublic)));
      return result.isValid && u8aEq5(vrfResult.subarray(0, 32), vrfHash(vrfResult.subarray(32), context2, extra));
    }
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/defaults.js
init_shim();
var DEV_PHRASE = "bottom drive obey lake curtain smoke basket hold race lonely fit walk";

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/pairs.js
init_shim();
var Pairs = class {
  constructor() {
    __publicField(this, "__internal__map", {});
  }
  add(pair) {
    this.__internal__map[decodeAddress(pair.address).toString()] = pair;
    return pair;
  }
  all() {
    return Object.values(this.__internal__map);
  }
  get(address) {
    const pair = this.__internal__map[decodeAddress(address).toString()];
    if (!pair) {
      throw new Error(`Unable to retrieve keypair '${isU8a5(address) || isHex5(address) ? u8aToHex5(u8aToU8a5(address)) : address}'`);
    }
    return pair;
  }
  remove(address) {
    delete this.__internal__map[decodeAddress(address).toString()];
  }
};

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/keyring.js
var PairFromSeed = {
  ecdsa: (seed) => secp256k1PairFromSeed(seed),
  ed25519: (seed) => ed25519PairFromSeed(seed),
  ethereum: (seed) => secp256k1PairFromSeed(seed),
  sr25519: (seed) => sr25519PairFromSeed(seed)
};
function pairToPublic({ publicKey: publicKey2 }) {
  return publicKey2;
}
var Keyring = class {
  constructor(options = {}) {
    __publicField(this, "__internal__pairs");
    __publicField(this, "__internal__type");
    __publicField(this, "__internal__ss58");
    __publicField(this, "decodeAddress", decodeAddress);
    /**
     * @name encodeAddress
     * @description Encodes the input into an ss58 representation
     */
    __publicField(this, "encodeAddress", (address, ss58Format) => {
      return this.type === "ethereum" ? ethereumEncode(address) : encodeAddress(address, ss58Format ?? this.__internal__ss58);
    });
    options.type = options.type || "ed25519";
    if (!["ecdsa", "ethereum", "ed25519", "sr25519"].includes(options.type || "undefined")) {
      throw new Error(`Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '${options.type || "unknown"}`);
    }
    this.__internal__pairs = new Pairs();
    this.__internal__ss58 = options.ss58Format;
    this.__internal__type = options.type;
  }
  /**
   * @description retrieve the pairs (alias for getPairs)
   */
  get pairs() {
    return this.getPairs();
  }
  /**
   * @description retrieve the publicKeys (alias for getPublicKeys)
   */
  get publicKeys() {
    return this.getPublicKeys();
  }
  /**
   * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa
   */
  get type() {
    return this.__internal__type;
  }
  /**
   * @name addPair
   * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   */
  addPair(pair) {
    return this.__internal__pairs.add(pair);
  }
  /**
   * @name addFromAddress
   * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Allows user to explicitly provide separate inputs including account address or public key, and optionally
   * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file
   * of an account backup), and then generates a keyring pair from them that it passes to
   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */
  addFromAddress(address, meta = {}, encoded = null, type = this.type, ignoreChecksum, encType) {
    const publicKey2 = this.decodeAddress(address, ignoreChecksum);
    return this.addPair(createPair({ toSS58: this.encodeAddress, type }, { publicKey: publicKey2, secretKey: new Uint8Array() }, meta, encoded, encType));
  }
  /**
   * @name addFromJson
   * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file
   * of an account backup), and then generates a keyring pair from it that it passes to
   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */
  addFromJson(json, ignoreChecksum) {
    return this.addPair(this.createFromJson(json, ignoreChecksum));
  }
  /**
   * @name addFromMnemonic
   * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)
   * argument and a metadata argument that contains account information (that may be obtained from the json file
   * of an account backup), and then generates a keyring pair from it that it passes to
   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */
  addFromMnemonic(mnemonic, meta = {}, type = this.type) {
    return this.addFromUri(mnemonic, meta, type);
  }
  /**
   * @name addFromPair
   * @summary Stores an account created from an explicit publicKey/secreteKey combination
   */
  addFromPair(pair, meta = {}, type = this.type) {
    return this.addPair(this.createFromPair(pair, meta, type));
  }
  /**
   * @name addFromSeed
   * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.
   * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to
   * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */
  addFromSeed(seed, meta = {}, type = this.type) {
    return this.addPair(createPair({ toSS58: this.encodeAddress, type }, PairFromSeed[type](seed), meta, null));
  }
  /**
   * @name addFromUri
   * @summary Creates an account via an suri
   * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)
   */
  addFromUri(suri, meta = {}, type = this.type) {
    return this.addPair(this.createFromUri(suri, meta, type));
  }
  /**
   * @name createFromJson
   * @description Creates a pair from a JSON keyfile
   */
  createFromJson({ address, encoded, encoding: { content, type, version }, meta }, ignoreChecksum) {
    if (version === "3" && content[0] !== "pkcs8") {
      throw new Error(`Unable to decode non-pkcs8 type, [${content.join(",")}] found}`);
    }
    const cryptoType = version === "0" || !Array.isArray(content) ? this.type : content[1];
    const encType = !Array.isArray(type) ? [type] : type;
    if (!["ed25519", "sr25519", "ecdsa", "ethereum"].includes(cryptoType)) {
      throw new Error(`Unknown crypto type ${cryptoType}`);
    }
    const publicKey2 = isHex5(address) ? hexToU8a5(address) : this.decodeAddress(address, ignoreChecksum);
    const decoded = isHex5(encoded) ? hexToU8a5(encoded) : base64Decode(encoded);
    return createPair({ toSS58: this.encodeAddress, type: cryptoType }, { publicKey: publicKey2, secretKey: new Uint8Array() }, meta, decoded, encType);
  }
  /**
   * @name createFromPair
   * @summary Creates a pair from an explicit publicKey/secreteKey combination
   */
  createFromPair(pair, meta = {}, type = this.type) {
    return createPair({ toSS58: this.encodeAddress, type }, pair, meta, null);
  }
  /**
   * @name createFromUri
   * @summary Creates a Keypair from an suri
   * @description This creates a pair from the suri, but does not add it to the keyring
   */
  createFromUri(_suri, meta = {}, type = this.type) {
    const suri = _suri.startsWith("//") ? `${DEV_PHRASE}${_suri}` : _suri;
    const { derivePath, password, path, phrase } = keyExtractSuri(suri);
    let seed;
    const isPhraseHex = isHex5(phrase, 256);
    if (isPhraseHex) {
      seed = hexToU8a5(phrase);
    } else {
      const parts = phrase.split(" ");
      if ([12, 15, 18, 21, 24].includes(parts.length)) {
        seed = type === "ethereum" ? mnemonicToLegacySeed(phrase, "", false, 64) : mnemonicToMiniSecret(phrase, password);
      } else {
        if (phrase.length > 32) {
          throw new Error("specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes");
        }
        seed = stringToU8a5(phrase.padEnd(32));
      }
    }
    const derived = type === "ethereum" ? isPhraseHex ? PairFromSeed[type](seed) : hdEthereum(seed, derivePath.substring(1)) : keyFromPath(PairFromSeed[type](seed), path, type);
    return createPair({ toSS58: this.encodeAddress, type }, derived, meta, null);
  }
  /**
   * @name getPair
   * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address
   * @description Returns a keyring pair value from the keyring pair dictionary by performing
   * a key lookup using the provided account address or public key (after decoding it).
   */
  getPair(address) {
    return this.__internal__pairs.get(address);
  }
  /**
   * @name getPairs
   * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary
   * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.
   */
  getPairs() {
    return this.__internal__pairs.all();
  }
  /**
   * @name getPublicKeys
   * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary
   * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.
   */
  getPublicKeys() {
    return this.__internal__pairs.all().map(pairToPublic);
  }
  /**
   * @name removePair
   * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.
   */
  removePair(address) {
    this.__internal__pairs.remove(address);
  }
  /**
   * @name setSS58Format;
   * @description Sets the ss58 format for the keyring
   */
  setSS58Format(ss58) {
    this.__internal__ss58 = ss58;
  }
  /**
   * @name toJson
   * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account
   * @description Returns a JSON object containing the metadata associated with an account
   * when valid address or public key and when the account passphrase is provided if the account secret
   * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user
   * may backup their account to a JSON file that contains this information.
   */
  toJson(address, passphrase) {
    return this.__internal__pairs.get(address).toJson(passphrase);
  }
};

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/testing.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/testingPairs.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/keyring/pair/nobody.js
init_shim();
var publicKey = new Uint8Array(32);

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/detectPackage.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/detectOther.js
init_shim();
var detectOther_default11 = [packageInfo7];

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/detectPackage.js
detectPackage5(packageInfo23, null, detectOther_default11);

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/bundle.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/http/index.js
init_shim();

// node_modules/@polkadot/x-fetch/browser.js
init_shim();

// node_modules/@polkadot/x-fetch/packageInfo.js
init_shim();
var packageInfo29 = { name: "@polkadot/x-fetch", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/x-fetch/browser.js
var fetch = xglobal.fetch;

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/coder/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/coder/error.js
init_shim();
var UNKNOWN = -99999;
function extend(that, name, value) {
  Object.defineProperty(that, name, {
    configurable: true,
    enumerable: false,
    value
  });
}
var RpcError = class extends Error {
  constructor(message = "", code = UNKNOWN, data) {
    super();
    extend(this, "message", String(message));
    extend(this, "name", this.constructor.name);
    extend(this, "data", data);
    extend(this, "code", code);
    if (isFunction5(Error.captureStackTrace)) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      const { stack } = new Error(message);
      stack && extend(this, "stack", stack);
    }
  }
};
RpcError.CODES = {
  ASSERT: -90009,
  INVALID_JSONRPC: -99998,
  METHOD_NOT_FOUND: -32601,
  UNKNOWN
};
var error_default = RpcError;

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/coder/index.js
function formatErrorData(data) {
  if (isUndefined4(data)) {
    return "";
  }
  const formatted = `: ${isString5(data) ? data.replace(/Error\("/g, "").replace(/\("/g, "(").replace(/"\)/g, ")").replace(/\(/g, ", ").replace(/\)/g, "") : stringify4(data)}`;
  return formatted.length <= 256 ? formatted : `${formatted.substring(0, 255)}…`;
}
function checkError(error) {
  if (error) {
    const { code, data, message } = error;
    throw new error_default(`${code}: ${message}${formatErrorData(data)}`, code, data);
  }
}
var RpcCoder = class {
  constructor() {
    this.__internal__id = 0;
  }
  decodeResponse(response) {
    if (!response || response.jsonrpc !== "2.0") {
      throw new Error("Invalid jsonrpc field in decoded object");
    }
    const isSubscription2 = !isUndefined4(response.params) && !isUndefined4(response.method);
    if (!isNumber5(response.id) && (!isSubscription2 || !isNumber5(response.params.subscription) && !isString5(response.params.subscription))) {
      throw new Error("Invalid id field in decoded object");
    }
    checkError(response.error);
    if (response.result === void 0 && !isSubscription2) {
      throw new Error("No result found in jsonrpc response");
    }
    if (isSubscription2) {
      checkError(response.params.error);
      return response.params.result;
    }
    return response.result;
  }
  encodeJson(method, params) {
    const [id, data] = this.encodeObject(method, params);
    return [id, stringify4(data)];
  }
  encodeObject(method, params) {
    const id = ++this.__internal__id;
    return [id, {
      id,
      jsonrpc: "2.0",
      method,
      params
    }];
  }
};

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/defaults.js
init_shim();
var HTTP_URL = "http://127.0.0.1:9933";
var WS_URL = "ws://127.0.0.1:9944";
var defaults_default = {
  HTTP_URL,
  WS_URL
};

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/lru.js
init_shim();
var DEFAULT_CAPACITY = 128;
var LRUNode = class {
  constructor(key) {
    this.key = key;
    this.next = this.prev = this;
  }
};
var LRUCache = class {
  constructor(capacity = DEFAULT_CAPACITY) {
    this.__internal__data = /* @__PURE__ */ new Map();
    this.__internal__refs = /* @__PURE__ */ new Map();
    this.__internal__length = 0;
    this.capacity = capacity;
    this.__internal__head = this.__internal__tail = new LRUNode("<empty>");
  }
  get length() {
    return this.__internal__length;
  }
  get lengthData() {
    return this.__internal__data.size;
  }
  get lengthRefs() {
    return this.__internal__refs.size;
  }
  entries() {
    const keys2 = this.keys();
    const count2 = keys2.length;
    const entries = new Array(count2);
    for (let i = 0; i < count2; i++) {
      const key = keys2[i];
      entries[i] = [key, this.__internal__data.get(key)];
    }
    return entries;
  }
  keys() {
    const keys2 = [];
    if (this.__internal__length) {
      let curr = this.__internal__head;
      while (curr !== this.__internal__tail) {
        keys2.push(curr.key);
        curr = curr.next;
      }
      keys2.push(curr.key);
    }
    return keys2;
  }
  get(key) {
    const data = this.__internal__data.get(key);
    if (data) {
      this.__internal__toHead(key);
      return data;
    }
    return null;
  }
  set(key, value) {
    if (this.__internal__data.has(key)) {
      this.__internal__toHead(key);
    } else {
      const node = new LRUNode(key);
      this.__internal__refs.set(node.key, node);
      if (this.length === 0) {
        this.__internal__head = this.__internal__tail = node;
      } else {
        this.__internal__head.prev = node;
        node.next = this.__internal__head;
        this.__internal__head = node;
      }
      if (this.__internal__length === this.capacity) {
        this.__internal__data.delete(this.__internal__tail.key);
        this.__internal__refs.delete(this.__internal__tail.key);
        this.__internal__tail = this.__internal__tail.prev;
        this.__internal__tail.next = this.__internal__head;
      } else {
        this.__internal__length += 1;
      }
    }
    this.__internal__data.set(key, value);
  }
  __internal__toHead(key) {
    const ref = this.__internal__refs.get(key);
    if (ref && ref !== this.__internal__head) {
      ref.prev.next = ref.next;
      ref.next.prev = ref.prev;
      ref.next = this.__internal__head;
      this.__internal__head.prev = ref;
      this.__internal__head = ref;
    }
  }
};

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/http/index.js
var l2 = logger2("api-http");

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/substrate-connect/index.js
init_shim();

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/substrate-connect/Health.js
init_shim();
function healthChecker() {
  let checker = null;
  let sendJsonRpc = null;
  return {
    responsePassThrough: (jsonRpcResponse) => {
      if (checker === null) {
        return jsonRpcResponse;
      }
      return checker.responsePassThrough(jsonRpcResponse);
    },
    sendJsonRpc: (request) => {
      if (!sendJsonRpc) {
        throw new Error("setSendJsonRpc must be called before sending requests");
      }
      if (checker === null) {
        sendJsonRpc(request);
      } else {
        checker.sendJsonRpc(request);
      }
    },
    setSendJsonRpc: (cb) => {
      sendJsonRpc = cb;
    },
    start: (healthCallback) => {
      if (checker !== null) {
        throw new Error("Can't start the health checker multiple times in parallel");
      } else if (!sendJsonRpc) {
        throw new Error("setSendJsonRpc must be called before starting the health checks");
      }
      checker = new InnerChecker(healthCallback, sendJsonRpc);
      checker.update(true);
    },
    stop: () => {
      if (checker === null) {
        return;
      }
      checker.destroy();
      checker = null;
    }
  };
}
var InnerChecker = class {
  constructor(healthCallback, requestToSmoldot) {
    this.__internal__currentHealthCheckId = null;
    this.__internal__currentHealthTimeout = null;
    this.__internal__currentSubunsubRequestId = null;
    this.__internal__currentSubscriptionId = null;
    this.__internal__isSyncing = false;
    this.__internal__nextRequestId = 0;
    this.sendJsonRpc = (request) => {
      let parsedRequest;
      try {
        parsedRequest = JSON.parse(request);
      } catch {
        return;
      }
      if (parsedRequest.id) {
        const newId = "extern:" + stringify4(parsedRequest.id);
        parsedRequest.id = newId;
      }
      this.__internal__requestToSmoldot(parsedRequest);
    };
    this.responsePassThrough = (jsonRpcResponse) => {
      let parsedResponse;
      try {
        parsedResponse = JSON.parse(jsonRpcResponse);
      } catch {
        return jsonRpcResponse;
      }
      if (parsedResponse.id && this.__internal__currentHealthCheckId === parsedResponse.id) {
        this.__internal__currentHealthCheckId = null;
        if (!parsedResponse.result) {
          this.update(false);
          return null;
        }
        this.__internal__healthCallback(parsedResponse.result);
        this.__internal__isSyncing = parsedResponse.result.isSyncing;
        this.update(false);
        return null;
      }
      if (parsedResponse.id && this.__internal__currentSubunsubRequestId === parsedResponse.id) {
        this.__internal__currentSubunsubRequestId = null;
        if (!parsedResponse.result) {
          this.update(false);
          return null;
        }
        if (this.__internal__currentSubscriptionId) {
          this.__internal__currentSubscriptionId = null;
        } else {
          this.__internal__currentSubscriptionId = parsedResponse.result;
        }
        this.update(false);
        return null;
      }
      if (parsedResponse.params && this.__internal__currentSubscriptionId && parsedResponse.params.subscription === this.__internal__currentSubscriptionId) {
        this.update(true);
        return null;
      }
      if (parsedResponse.id) {
        const id = parsedResponse.id;
        if (!id.startsWith("extern:")) {
          throw new Error("State inconsistency in health checker");
        }
        const newId = JSON.parse(id.slice("extern:".length));
        parsedResponse.id = newId;
      }
      return stringify4(parsedResponse);
    };
    this.update = (startNow) => {
      if (startNow && this.__internal__currentHealthTimeout) {
        clearTimeout(this.__internal__currentHealthTimeout);
        this.__internal__currentHealthTimeout = null;
      }
      if (!this.__internal__currentHealthTimeout) {
        const startHealthRequest = () => {
          this.__internal__currentHealthTimeout = null;
          if (this.__internal__currentHealthCheckId) {
            return;
          }
          this.__internal__currentHealthCheckId = `health-checker:${this.__internal__nextRequestId}`;
          this.__internal__nextRequestId += 1;
          this.__internal__requestToSmoldot({
            id: this.__internal__currentHealthCheckId,
            jsonrpc: "2.0",
            method: "system_health",
            params: []
          });
        };
        if (startNow) {
          startHealthRequest();
        } else {
          this.__internal__currentHealthTimeout = setTimeout(startHealthRequest, 1e3);
        }
      }
      if (this.__internal__isSyncing && !this.__internal__currentSubscriptionId && !this.__internal__currentSubunsubRequestId) {
        this.startSubscription();
      }
      if (!this.__internal__isSyncing && this.__internal__currentSubscriptionId && !this.__internal__currentSubunsubRequestId) {
        this.endSubscription();
      }
    };
    this.startSubscription = () => {
      if (this.__internal__currentSubunsubRequestId || this.__internal__currentSubscriptionId) {
        throw new Error("Internal error in health checker");
      }
      this.__internal__currentSubunsubRequestId = `health-checker:${this.__internal__nextRequestId}`;
      this.__internal__nextRequestId += 1;
      this.__internal__requestToSmoldot({
        id: this.__internal__currentSubunsubRequestId,
        jsonrpc: "2.0",
        method: "chain_subscribeNewHeads",
        params: []
      });
    };
    this.endSubscription = () => {
      if (this.__internal__currentSubunsubRequestId || !this.__internal__currentSubscriptionId) {
        throw new Error("Internal error in health checker");
      }
      this.__internal__currentSubunsubRequestId = `health-checker:${this.__internal__nextRequestId}`;
      this.__internal__nextRequestId += 1;
      this.__internal__requestToSmoldot({
        id: this.__internal__currentSubunsubRequestId,
        jsonrpc: "2.0",
        method: "chain_unsubscribeNewHeads",
        params: [this.__internal__currentSubscriptionId]
      });
    };
    this.destroy = () => {
      if (this.__internal__currentHealthTimeout) {
        clearTimeout(this.__internal__currentHealthTimeout);
        this.__internal__currentHealthTimeout = null;
      }
    };
    this.__internal__healthCallback = healthCallback;
    this.__internal__requestToSmoldot = (request) => requestToSmoldot(stringify4(request));
  }
};

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/substrate-connect/index.js
var l3 = logger2("api-substrate-connect");
var subscriptionUnsubscriptionMethods = /* @__PURE__ */ new Map([
  ["author_submitAndWatchExtrinsic", "author_unwatchExtrinsic"],
  ["chain_subscribeAllHeads", "chain_unsubscribeAllHeads"],
  ["chain_subscribeFinalizedHeads", "chain_unsubscribeFinalizedHeads"],
  ["chain_subscribeFinalisedHeads", "chain_subscribeFinalisedHeads"],
  ["chain_subscribeNewHeads", "chain_unsubscribeNewHeads"],
  ["chain_subscribeNewHead", "chain_unsubscribeNewHead"],
  ["chain_subscribeRuntimeVersion", "chain_unsubscribeRuntimeVersion"],
  ["subscribe_newHead", "unsubscribe_newHead"],
  ["state_subscribeRuntimeVersion", "state_unsubscribeRuntimeVersion"],
  ["state_subscribeStorage", "state_unsubscribeStorage"]
]);
var scClients = /* @__PURE__ */ new WeakMap();
var ScProvider = class {
  constructor(Sc, spec2, sharedSandbox) {
    this.__internal__coder = new RpcCoder();
    this.__internal__subscriptions = /* @__PURE__ */ new Map();
    this.__internal__resubscribeMethods = /* @__PURE__ */ new Map();
    this.__internal__requests = /* @__PURE__ */ new Map();
    this.__internal__eventemitter = new import_index.default();
    this.__internal__chain = null;
    this.__internal__isChainReady = false;
    this.__internal__resubscribe = () => {
      const promises = [];
      this.__internal__resubscribeMethods.forEach((subDetails) => {
        if (subDetails.type.startsWith("author_")) {
          return;
        }
        try {
          const promise = new Promise((resolve) => {
            this.subscribe(subDetails.type, subDetails.method, subDetails.params, subDetails.callback).catch((error) => console.log(error));
            resolve();
          });
          promises.push(promise);
        } catch (error) {
          l3.error(error);
        }
      });
      Promise.all(promises).catch((err) => l3.log(err));
    };
    if (!isObject4(Sc) || !isObject4(Sc.WellKnownChain) || !isFunction5(Sc.createScClient)) {
      throw new Error("Expected an @substrate/connect interface as first parameter to ScProvider");
    }
    this.__internal__Sc = Sc;
    this.__internal__spec = spec2;
    this.__internal__sharedSandbox = sharedSandbox;
    this.__internal__wellKnownChains = new Set(Object.values(Sc.WellKnownChain));
  }
  get hasSubscriptions() {
    return true;
  }
  get isClonable() {
    return false;
  }
  get isConnected() {
    return !!this.__internal__chain && this.__internal__isChainReady;
  }
  clone() {
    throw new Error("clone() is not supported.");
  }
  // Config details can be found in @substrate/connect repo following the link:
  // https://github.com/paritytech/substrate-connect/blob/main/packages/connect/src/connector/index.ts
  async connect(config14, checkerFactory = healthChecker) {
    if (this.isConnected) {
      throw new Error("Already connected!");
    }
    if (this.__internal__chain) {
      await this.__internal__chain;
      return;
    }
    if (this.__internal__sharedSandbox && !this.__internal__sharedSandbox.isConnected) {
      await this.__internal__sharedSandbox.connect();
    }
    const client = this.__internal__sharedSandbox ? scClients.get(this.__internal__sharedSandbox) : this.__internal__Sc.createScClient(config14);
    if (!client) {
      throw new Error("Unkown ScProvider!");
    }
    scClients.set(this, client);
    const hc = checkerFactory();
    const onResponse = (res) => {
      var _a, _b, _c;
      const hcRes = hc.responsePassThrough(res);
      if (!hcRes) {
        return;
      }
      const response = JSON.parse(hcRes);
      let decodedResponse;
      try {
        decodedResponse = this.__internal__coder.decodeResponse(response);
      } catch (e) {
        decodedResponse = e;
      }
      if (((_a = response.params) == null ? void 0 : _a.subscription) === void 0 || !response.method) {
        return (_b = this.__internal__requests.get(response.id)) == null ? void 0 : _b(decodedResponse);
      }
      const subscriptionId = `${response.method}::${response.params.subscription}`;
      const callback = (_c = this.__internal__subscriptions.get(subscriptionId)) == null ? void 0 : _c[0];
      callback == null ? void 0 : callback(decodedResponse);
    };
    const addChain = this.__internal__wellKnownChains.has(this.__internal__spec) ? client.addWellKnownChain : client.addChain;
    this.__internal__chain = addChain(this.__internal__spec, onResponse).then((chain5) => {
      hc.setSendJsonRpc(chain5.sendJsonRpc);
      this.__internal__isChainReady = false;
      const cleanup = () => {
        const disconnectionError = new Error("Disconnected");
        this.__internal__requests.forEach((cb) => cb(disconnectionError));
        this.__internal__subscriptions.forEach(([cb]) => cb(disconnectionError));
        this.__internal__subscriptions.clear();
      };
      const staleSubscriptions = [];
      const killStaleSubscriptions = () => {
        if (staleSubscriptions.length === 0) {
          return;
        }
        const stale = staleSubscriptions.pop();
        if (!stale) {
          throw new Error("Unable to get stale subscription");
        }
        const { id, unsubscribeMethod } = stale;
        Promise.race([
          this.send(unsubscribeMethod, [id]).catch(noop4),
          new Promise((resolve) => setTimeout(resolve, 500))
        ]).then(killStaleSubscriptions).catch(noop4);
      };
      hc.start((health) => {
        const isReady2 = !health.isSyncing && (health.peers > 0 || !health.shouldHavePeers);
        if (this.__internal__isChainReady === isReady2) {
          return;
        }
        this.__internal__isChainReady = isReady2;
        if (!isReady2) {
          [...this.__internal__subscriptions.values()].forEach((s) => {
            staleSubscriptions.push(s[1]);
          });
          cleanup();
          this.__internal__eventemitter.emit("disconnected");
        } else {
          killStaleSubscriptions();
          this.__internal__eventemitter.emit("connected");
          if (this.__internal__resubscribeMethods.size) {
            this.__internal__resubscribe();
          }
        }
      });
      return objectSpread4({}, chain5, {
        remove: () => {
          hc.stop();
          chain5.remove();
          cleanup();
        },
        sendJsonRpc: hc.sendJsonRpc.bind(hc)
      });
    });
    try {
      await this.__internal__chain;
    } catch (e) {
      this.__internal__chain = null;
      this.__internal__eventemitter.emit("error", e);
      throw e;
    }
  }
  async disconnect() {
    if (!this.__internal__chain) {
      return;
    }
    const chain5 = await this.__internal__chain;
    this.__internal__chain = null;
    this.__internal__isChainReady = false;
    try {
      chain5.remove();
    } catch (_) {
    }
    this.__internal__eventemitter.emit("disconnected");
  }
  on(type, sub) {
    if (type === "connected" && this.isConnected) {
      sub();
    }
    this.__internal__eventemitter.on(type, sub);
    return () => {
      this.__internal__eventemitter.removeListener(type, sub);
    };
  }
  async send(method, params) {
    if (!this.isConnected || !this.__internal__chain) {
      throw new Error("Provider is not connected");
    }
    const chain5 = await this.__internal__chain;
    const [id, json] = this.__internal__coder.encodeJson(method, params);
    const result = new Promise((resolve, reject) => {
      this.__internal__requests.set(id, (response) => {
        (isError4(response) ? reject : resolve)(response);
      });
      try {
        chain5.sendJsonRpc(json);
      } catch (e) {
        this.__internal__chain = null;
        try {
          chain5.remove();
        } catch (_) {
        }
        this.__internal__eventemitter.emit("error", e);
      }
    });
    try {
      return await result;
    } finally {
      this.__internal__requests.delete(id);
    }
  }
  async subscribe(type, method, params, callback) {
    if (!subscriptionUnsubscriptionMethods.has(method)) {
      throw new Error(`Unsupported subscribe method: ${method}`);
    }
    const id = await this.send(method, params);
    const subscriptionId = `${type}::${id}`;
    const cb = (response) => {
      if (response instanceof Error) {
        callback(response, void 0);
      } else {
        callback(null, response);
      }
    };
    const unsubscribeMethod = subscriptionUnsubscriptionMethods.get(method);
    if (!unsubscribeMethod) {
      throw new Error("Invalid unsubscribe method found");
    }
    this.__internal__resubscribeMethods.set(subscriptionId, { callback, method, params, type });
    this.__internal__subscriptions.set(subscriptionId, [cb, { id, unsubscribeMethod }]);
    return id;
  }
  unsubscribe(type, method, id) {
    if (!this.isConnected) {
      throw new Error("Provider is not connected");
    }
    const subscriptionId = `${type}::${id}`;
    if (!this.__internal__subscriptions.has(subscriptionId)) {
      return Promise.reject(new Error(`Unable to find active subscription=${subscriptionId}`));
    }
    this.__internal__resubscribeMethods.delete(subscriptionId);
    this.__internal__subscriptions.delete(subscriptionId);
    return this.send(method, [id]);
  }
};

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/ws/index.js
init_shim();

// node_modules/@polkadot/x-ws/browser.js
init_shim();

// node_modules/@polkadot/x-ws/packageInfo.js
init_shim();
var packageInfo30 = { name: "@polkadot/x-ws", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/x-ws/browser.js
var WebSocket = xglobal.WebSocket;

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/ws/errors.js
init_shim();
var known = {
  1e3: "Normal Closure",
  1001: "Going Away",
  1002: "Protocol Error",
  1003: "Unsupported Data",
  1004: "(For future)",
  1005: "No Status Received",
  1006: "Abnormal Closure",
  1007: "Invalid frame payload data",
  1008: "Policy Violation",
  1009: "Message too big",
  1010: "Missing Extension",
  1011: "Internal Error",
  1012: "Service Restart",
  1013: "Try Again Later",
  1014: "Bad Gateway",
  1015: "TLS Handshake"
};
function getWSErrorString(code) {
  if (code >= 0 && code <= 999) {
    return "(Unused)";
  } else if (code >= 1016) {
    if (code <= 1999) {
      return "(For WebSocket standard)";
    } else if (code <= 2999) {
      return "(For WebSocket extensions)";
    } else if (code <= 3999) {
      return "(For libraries and frameworks)";
    } else if (code <= 4999) {
      return "(For applications)";
    }
  }
  return known[code] || "(Unknown)";
}

// node_modules/@polkadot/api/node_modules/@polkadot/rpc-provider/ws/index.js
var ALIASES = {
  chain_finalisedHead: "chain_finalizedHead",
  chain_subscribeFinalisedHeads: "chain_subscribeFinalizedHeads",
  chain_unsubscribeFinalisedHeads: "chain_unsubscribeFinalizedHeads"
};
var RETRY_DELAY = 2500;
var DEFAULT_TIMEOUT_MS = 60 * 1e3;
var TIMEOUT_INTERVAL = 5e3;
var l4 = logger2("api-ws");
function eraseRecord(record, cb) {
  Object.keys(record).forEach((key) => {
    if (cb) {
      cb(record[key]);
    }
    delete record[key];
  });
}
function defaultEndpointStats() {
  return { bytesRecv: 0, bytesSent: 0, cached: 0, errors: 0, requests: 0, subscriptions: 0, timeout: 0 };
}
var WsProvider = class {
  /**
   * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
   * @param {number | false} autoConnectMs Whether to connect automatically or not (default). Provided value is used as a delay between retries.
   * @param {Record<string, string>} headers The headers provided to the underlying WebSocket
   * @param {number} [timeout] Custom timeout value used per request . Defaults to `DEFAULT_TIMEOUT_MS`
   */
  constructor(endpoint = defaults_default.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}, timeout2) {
    this.__internal__callCache = new LRUCache();
    this.__internal__handlers = {};
    this.__internal__waitingForId = {};
    this.__internal__isConnected = false;
    this.__internal__subscriptions = {};
    this.__internal__timeoutId = null;
    this.__internal__emit = (type, ...args) => {
      this.__internal__eventemitter.emit(type, ...args);
    };
    this.__internal__onSocketClose = (event) => {
      const error = new Error(`disconnected from ${this.endpoint}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);
      if (this.__internal__autoConnectMs > 0) {
        l4.error(error.message);
      }
      this.__internal__isConnected = false;
      if (this.__internal__websocket) {
        this.__internal__websocket.onclose = null;
        this.__internal__websocket.onerror = null;
        this.__internal__websocket.onmessage = null;
        this.__internal__websocket.onopen = null;
        this.__internal__websocket = null;
      }
      if (this.__internal__timeoutId) {
        clearInterval(this.__internal__timeoutId);
        this.__internal__timeoutId = null;
      }
      eraseRecord(this.__internal__handlers, (h) => {
        try {
          h.callback(error, void 0);
        } catch (err) {
          l4.error(err);
        }
      });
      eraseRecord(this.__internal__waitingForId);
      this.__internal__endpointStats = defaultEndpointStats();
      this.__internal__emit("disconnected");
      if (this.__internal__autoConnectMs > 0) {
        setTimeout(() => {
          this.connectWithRetry().catch(noop4);
        }, this.__internal__autoConnectMs);
      }
    };
    this.__internal__onSocketError = (error) => {
      l4.debug(() => ["socket error", error]);
      this.__internal__emit("error", error);
    };
    this.__internal__onSocketMessage = (message) => {
      l4.debug(() => ["received", message.data]);
      const bytesRecv = message.data.length;
      this.__internal__endpointStats.bytesRecv += bytesRecv;
      this.__internal__stats.total.bytesRecv += bytesRecv;
      const response = JSON.parse(message.data);
      return isUndefined4(response.method) ? this.__internal__onSocketMessageResult(response) : this.__internal__onSocketMessageSubscribe(response);
    };
    this.__internal__onSocketMessageResult = (response) => {
      const handler = this.__internal__handlers[response.id];
      if (!handler) {
        l4.debug(() => `Unable to find handler for id=${response.id}`);
        return;
      }
      try {
        const { method, params, subscription } = handler;
        const result = this.__internal__coder.decodeResponse(response);
        handler.callback(null, result);
        if (subscription) {
          const subId = `${subscription.type}::${result}`;
          this.__internal__subscriptions[subId] = objectSpread4({}, subscription, {
            method,
            params
          });
          if (this.__internal__waitingForId[subId]) {
            this.__internal__onSocketMessageSubscribe(this.__internal__waitingForId[subId]);
          }
        }
      } catch (error) {
        this.__internal__endpointStats.errors++;
        this.__internal__stats.total.errors++;
        handler.callback(error, void 0);
      }
      delete this.__internal__handlers[response.id];
    };
    this.__internal__onSocketMessageSubscribe = (response) => {
      if (!response.method) {
        throw new Error("No method found in JSONRPC response");
      }
      const method = ALIASES[response.method] || response.method;
      const subId = `${method}::${response.params.subscription}`;
      const handler = this.__internal__subscriptions[subId];
      if (!handler) {
        this.__internal__waitingForId[subId] = response;
        l4.debug(() => `Unable to find handler for subscription=${subId}`);
        return;
      }
      delete this.__internal__waitingForId[subId];
      try {
        const result = this.__internal__coder.decodeResponse(response);
        handler.callback(null, result);
      } catch (error) {
        this.__internal__endpointStats.errors++;
        this.__internal__stats.total.errors++;
        handler.callback(error, void 0);
      }
    };
    this.__internal__onSocketOpen = () => {
      if (this.__internal__websocket === null) {
        throw new Error("WebSocket cannot be null in onOpen");
      }
      l4.debug(() => ["connected to", this.endpoint]);
      this.__internal__isConnected = true;
      this.__internal__resubscribe();
      this.__internal__emit("connected");
      return true;
    };
    this.__internal__resubscribe = () => {
      const subscriptions = this.__internal__subscriptions;
      this.__internal__subscriptions = {};
      Promise.all(Object.keys(subscriptions).map(async (id) => {
        const { callback, method, params, type } = subscriptions[id];
        if (type.startsWith("author_")) {
          return;
        }
        try {
          await this.subscribe(type, method, params, callback);
        } catch (error) {
          l4.error(error);
        }
      })).catch(l4.error);
    };
    this.__internal__timeoutHandlers = () => {
      const now = Date.now();
      const ids = Object.keys(this.__internal__handlers);
      for (let i = 0, count2 = ids.length; i < count2; i++) {
        const handler = this.__internal__handlers[ids[i]];
        if (now - handler.start > this.__internal__timeout) {
          try {
            handler.callback(new Error(`No response received from RPC endpoint in ${this.__internal__timeout / 1e3}s`), void 0);
          } catch {
          }
          this.__internal__endpointStats.timeout++;
          this.__internal__stats.total.timeout++;
          delete this.__internal__handlers[ids[i]];
        }
      }
    };
    const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];
    if (endpoints.length === 0) {
      throw new Error("WsProvider requires at least one Endpoint");
    }
    endpoints.forEach((endpoint2) => {
      if (!/^(wss|ws):\/\//.test(endpoint2)) {
        throw new Error(`Endpoint should start with 'ws://', received '${endpoint2}'`);
      }
    });
    this.__internal__eventemitter = new import_index.default();
    this.__internal__autoConnectMs = autoConnectMs || 0;
    this.__internal__coder = new RpcCoder();
    this.__internal__endpointIndex = -1;
    this.__internal__endpoints = endpoints;
    this.__internal__headers = headers;
    this.__internal__websocket = null;
    this.__internal__stats = {
      active: { requests: 0, subscriptions: 0 },
      total: defaultEndpointStats()
    };
    this.__internal__endpointStats = defaultEndpointStats();
    this.__internal__timeout = timeout2 || DEFAULT_TIMEOUT_MS;
    if (autoConnectMs && autoConnectMs > 0) {
      this.connectWithRetry().catch(noop4);
    }
    this.__internal__isReadyPromise = new Promise((resolve) => {
      this.__internal__eventemitter.once("connected", () => {
        resolve(this);
      });
    });
  }
  /**
   * @summary `true` when this provider supports subscriptions
   */
  get hasSubscriptions() {
    return true;
  }
  /**
   * @summary `true` when this provider supports clone()
   */
  get isClonable() {
    return true;
  }
  /**
   * @summary Whether the node is connected or not.
   * @return {boolean} true if connected
   */
  get isConnected() {
    return this.__internal__isConnected;
  }
  /**
   * @description Promise that resolves the first time we are connected and loaded
   */
  get isReady() {
    return this.__internal__isReadyPromise;
  }
  get endpoint() {
    return this.__internal__endpoints[this.__internal__endpointIndex];
  }
  /**
   * @description Returns a clone of the object
   */
  clone() {
    return new WsProvider(this.__internal__endpoints);
  }
  selectEndpointIndex(endpoints) {
    return (this.__internal__endpointIndex + 1) % endpoints.length;
  }
  /**
   * @summary Manually connect
   * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
   * connect manually using this method.
   */
  // eslint-disable-next-line @typescript-eslint/require-await
  async connect() {
    if (this.__internal__websocket) {
      throw new Error("WebSocket is already connected");
    }
    try {
      this.__internal__endpointIndex = this.selectEndpointIndex(this.__internal__endpoints);
      this.__internal__websocket = typeof xglobal.WebSocket !== "undefined" && isChildClass4(xglobal.WebSocket, WebSocket) ? new WebSocket(this.endpoint) : new WebSocket(this.endpoint, void 0, {
        headers: this.__internal__headers
      });
      if (this.__internal__websocket) {
        this.__internal__websocket.onclose = this.__internal__onSocketClose;
        this.__internal__websocket.onerror = this.__internal__onSocketError;
        this.__internal__websocket.onmessage = this.__internal__onSocketMessage;
        this.__internal__websocket.onopen = this.__internal__onSocketOpen;
      }
      this.__internal__timeoutId = setInterval(() => this.__internal__timeoutHandlers(), TIMEOUT_INTERVAL);
    } catch (error) {
      l4.error(error);
      this.__internal__emit("error", error);
      throw error;
    }
  }
  /**
   * @description Connect, never throwing an error, but rather forcing a retry
   */
  async connectWithRetry() {
    if (this.__internal__autoConnectMs > 0) {
      try {
        await this.connect();
      } catch {
        setTimeout(() => {
          this.connectWithRetry().catch(noop4);
        }, this.__internal__autoConnectMs);
      }
    }
  }
  /**
   * @description Manually disconnect from the connection, clearing auto-connect logic
   */
  // eslint-disable-next-line @typescript-eslint/require-await
  async disconnect() {
    this.__internal__autoConnectMs = 0;
    try {
      if (this.__internal__websocket) {
        this.__internal__websocket.close(1e3);
      }
    } catch (error) {
      l4.error(error);
      this.__internal__emit("error", error);
      throw error;
    }
  }
  /**
   * @description Returns the connection stats
   */
  get stats() {
    return {
      active: {
        requests: Object.keys(this.__internal__handlers).length,
        subscriptions: Object.keys(this.__internal__subscriptions).length
      },
      total: this.__internal__stats.total
    };
  }
  get endpointStats() {
    return this.__internal__endpointStats;
  }
  /**
   * @summary Listens on events after having subscribed using the [[subscribe]] function.
   * @param  {ProviderInterfaceEmitted} type Event
   * @param  {ProviderInterfaceEmitCb}  sub  Callback
   * @return unsubscribe function
   */
  on(type, sub) {
    this.__internal__eventemitter.on(type, sub);
    return () => {
      this.__internal__eventemitter.removeListener(type, sub);
    };
  }
  /**
   * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
   * @param method The RPC methods to execute
   * @param params Encoded parameters as applicable for the method
   * @param subscription Subscription details (internally used)
   */
  send(method, params, isCacheable, subscription) {
    this.__internal__endpointStats.requests++;
    this.__internal__stats.total.requests++;
    const [id, body] = this.__internal__coder.encodeJson(method, params);
    let resultPromise = isCacheable ? this.__internal__callCache.get(body) : null;
    if (!resultPromise) {
      resultPromise = this.__internal__send(id, body, method, params, subscription);
      if (isCacheable) {
        this.__internal__callCache.set(body, resultPromise);
      }
    } else {
      this.__internal__endpointStats.cached++;
      this.__internal__stats.total.cached++;
    }
    return resultPromise;
  }
  async __internal__send(id, body, method, params, subscription) {
    return new Promise((resolve, reject) => {
      try {
        if (!this.isConnected || this.__internal__websocket === null) {
          throw new Error("WebSocket is not connected");
        }
        const callback = (error, result) => {
          error ? reject(error) : resolve(result);
        };
        l4.debug(() => ["calling", method, body]);
        this.__internal__handlers[id] = {
          callback,
          method,
          params,
          start: Date.now(),
          subscription
        };
        const bytesSent = body.length;
        this.__internal__endpointStats.bytesSent += bytesSent;
        this.__internal__stats.total.bytesSent += bytesSent;
        this.__internal__websocket.send(body);
      } catch (error) {
        this.__internal__endpointStats.errors++;
        this.__internal__stats.total.errors++;
        reject(error);
      }
    });
  }
  /**
   * @name subscribe
   * @summary Allows subscribing to a specific event.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const provider = new WsProvider('ws://127.0.0.1:9944');
   * const rpc = new Rpc(provider);
   *
   * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
   *   console.log(values)
   * }).then((subscriptionId) => {
   *   console.log('balance changes subscription id: ', subscriptionId)
   * })
   * ```
   */
  subscribe(type, method, params, callback) {
    this.__internal__endpointStats.subscriptions++;
    this.__internal__stats.total.subscriptions++;
    return this.send(method, params, false, { callback, type });
  }
  /**
   * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
   */
  async unsubscribe(type, method, id) {
    const subscription = `${type}::${id}`;
    if (isUndefined4(this.__internal__subscriptions[subscription])) {
      l4.debug(() => `Unable to find active subscription=${subscription}`);
      return false;
    }
    delete this.__internal__subscriptions[subscription];
    try {
      return this.isConnected && !isNull4(this.__internal__websocket) ? this.send(method, [id]) : true;
    } catch {
      return false;
    }
  }
};

// node_modules/@polkadot/api/submittable/index.js
init_shim();

// node_modules/@polkadot/api/submittable/createSubmittable.js
init_shim();

// node_modules/@polkadot/api/submittable/createClass.js
init_shim();

// node_modules/rxjs/dist/esm5/index.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/Observable.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/Subscriber.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/isFunction.js
init_shim();
function isFunction6(value) {
  return typeof value === "function";
}

// node_modules/rxjs/dist/esm5/internal/Subscription.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
init_shim();
function createErrorClass(createImpl) {
  var _super = function(instance) {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}

// node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass(function(_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
      return i + 1 + ") " + err.toString();
    }).join("\n  ") : "";
    this.name = "UnsubscriptionError";
    this.errors = errors;
  };
});

// node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
init_shim();
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

// node_modules/rxjs/dist/esm5/internal/Subscription.js
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  Subscription2.prototype.unsubscribe = function() {
    var e_1, _a, e_2, _b;
    var errors;
    if (!this.closed) {
      this.closed = true;
      var _parentage = this._parentage;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return))
                _a.call(_parentage_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        } else {
          _parentage.remove(this);
        }
      }
      var initialFinalizer = this.initialTeardown;
      if (isFunction6(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              errors = errors !== null && errors !== void 0 ? errors : [];
              if (err instanceof UnsubscriptionError) {
                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
              } else {
                errors.push(err);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
              _b.call(_finalizers_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  };
  Subscription2.prototype.add = function(teardown) {
    var _a;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
      }
    }
  };
  Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  };
  Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  };
  Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  };
  Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof Subscription2) {
      teardown._removeParent(this);
    }
  };
  Subscription2.EMPTY = function() {
    var empty3 = new Subscription2();
    empty3.closed = true;
    return empty3;
  }();
  return Subscription2;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction6(value.remove) && isFunction6(value.add) && isFunction6(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction6(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}

// node_modules/rxjs/dist/esm5/internal/config.js
init_shim();
var config4 = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};

// node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
init_shim();
var timeoutProvider = {
  setTimeout: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = timeoutProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
    }
    return setTimeout.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearTimeout: function(handle) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    var onUnhandledError = config4.onUnhandledError;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}

// node_modules/rxjs/dist/esm5/internal/util/noop.js
init_shim();
function noop5() {
}

// node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
init_shim();
var COMPLETE_NOTIFICATION = function() {
  return createNotification("C", void 0, void 0);
}();
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}

// node_modules/rxjs/dist/esm5/internal/util/errorContext.js
init_shim();
var context = null;
function errorContext(cb) {
  if (config4.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot) {
      context = { errorThrown: false, error: null };
    }
    cb();
    if (isRoot) {
      var _a = context, errorThrown = _a.errorThrown, error = _a.error;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (config4.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}

// node_modules/rxjs/dist/esm5/internal/Subscriber.js
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    _this.isStopped = false;
    if (destination) {
      _this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(_this);
      }
    } else {
      _this.destination = EMPTY_OBSERVER;
    }
    return _this;
  }
  Subscriber2.create = function(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  };
  Subscriber2.prototype.next = function(value) {
    if (this.isStopped) {
      handleStoppedNotification(nextNotification(value), this);
    } else {
      this._next(value);
    }
  };
  Subscriber2.prototype.error = function(err) {
    if (this.isStopped) {
      handleStoppedNotification(errorNotification(err), this);
    } else {
      this.isStopped = true;
      this._error(err);
    }
  };
  Subscriber2.prototype.complete = function() {
    if (this.isStopped) {
      handleStoppedNotification(COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber2.prototype.unsubscribe = function() {
    if (!this.closed) {
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
      this.destination = null;
    }
  };
  Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  };
  Subscriber2.prototype._error = function(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  };
  Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  };
  return Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  ConsumerObserver2.prototype.error = function(err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    } else {
      handleUnhandledError(err);
    }
  };
  ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  return ConsumerObserver2;
}();
var SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error, complete) {
    var _this = _super.call(this) || this;
    var partialObserver;
    if (isFunction6(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error !== null && error !== void 0 ? error : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      var context_1;
      if (_this && config4.useDeprecatedNextContext) {
        context_1 = Object.create(observerOrNext);
        context_1.unsubscribe = function() {
          return _this.unsubscribe();
        };
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context_1),
          error: observerOrNext.error && bind(observerOrNext.error, context_1),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    _this.destination = new ConsumerObserver(partialObserver);
    return _this;
  }
  return SafeSubscriber2;
}(Subscriber);
function handleUnhandledError(error) {
  if (config4.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config4.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function() {
    return onStoppedNotification(notification, subscriber);
  });
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop5,
  error: defaultErrorHandler,
  complete: noop5
};

// node_modules/rxjs/dist/esm5/internal/symbol/observable.js
init_shim();
var observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();

// node_modules/rxjs/dist/esm5/internal/util/pipe.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/identity.js
init_shim();
function identity2(x) {
  return x;
}

// node_modules/rxjs/dist/esm5/internal/util/pipe.js
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity2;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function(prev, fn) {
      return fn(prev);
    }, input);
  };
}

// node_modules/rxjs/dist/esm5/internal/Observable.js
var Observable = function() {
  function Observable2(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  Observable2.prototype.lift = function(operator) {
    var observable2 = new Observable2();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  };
  Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
    var _this = this;
    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    errorContext(function() {
      var _a = _this, operator = _a.operator, source = _a.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    });
    return subscriber;
  };
  Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  };
  Observable2.prototype.forEach = function(next, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  };
  Observable2.prototype._subscribe = function(subscriber) {
    var _a;
    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
  };
  Observable2.prototype[observable] = function() {
    return this;
  };
  Observable2.prototype.pipe = function() {
    var operations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }
    return pipeFromArray(operations)(this);
  };
  Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x) {
        return value = x;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  };
  Observable2.create = function(subscribe) {
    return new Observable2(subscribe);
  };
  return Observable2;
}();
function getPromiseCtor(promiseCtor) {
  var _a;
  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config4.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
  return value && isFunction6(value.next) && isFunction6(value.error) && isFunction6(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}

// node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/refCount.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/lift.js
init_shim();
function hasLift(source) {
  return isFunction6(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init5) {
  return function(source) {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init5(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
init_shim();
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    _this.onFinalize = onFinalize;
    _this.shouldUnsubscribe = shouldUnsubscribe;
    _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next;
    _this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error;
    _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete;
    return _this;
  }
  OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this);
      !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
    }
  };
  return OperatorSubscriber2;
}(Subscriber);

// node_modules/rxjs/dist/esm5/internal/operators/refCount.js
function refCount() {
  return operate(function(source, subscriber) {
    var connection = null;
    source._refCount++;
    var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      var sharedConnection = source._connection;
      var conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}

// node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
var ConnectableObservable = function(_super) {
  __extends(ConnectableObservable2, _super);
  function ConnectableObservable2(source, subjectFactory) {
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._subject = null;
    _this._refCount = 0;
    _this._connection = null;
    if (hasLift(source)) {
      _this.lift = source.lift;
    }
    return _this;
  }
  ConnectableObservable2.prototype._subscribe = function(subscriber) {
    return this.getSubject().subscribe(subscriber);
  };
  ConnectableObservable2.prototype.getSubject = function() {
    var subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  };
  ConnectableObservable2.prototype._teardown = function() {
    this._refCount = 0;
    var _connection = this._connection;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  };
  ConnectableObservable2.prototype.connect = function() {
    var _this = this;
    var connection = this._connection;
    if (!connection) {
      connection = this._connection = new Subscription();
      var subject_1 = this.getSubject();
      connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
        _this._teardown();
        subject_1.complete();
      }, function(err) {
        _this._teardown();
        subject_1.error(err);
      }, function() {
        return _this._teardown();
      })));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription.EMPTY;
      }
    }
    return connection;
  };
  ConnectableObservable2.prototype.refCount = function() {
    return refCount()(this);
  };
  return ConnectableObservable2;
}(Observable);

// node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/scheduler/performanceTimestampProvider.js
init_shim();
var performanceTimestampProvider = {
  now: function() {
    return (performanceTimestampProvider.delegate || performance).now();
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/scheduler/animationFrameProvider.js
init_shim();
var animationFrameProvider = {
  schedule: function(callback) {
    var request = requestAnimationFrame;
    var cancel = cancelAnimationFrame;
    var delegate = animationFrameProvider.delegate;
    if (delegate) {
      request = delegate.requestAnimationFrame;
      cancel = delegate.cancelAnimationFrame;
    }
    var handle = request(function(timestamp2) {
      cancel = void 0;
      callback(timestamp2);
    });
    return new Subscription(function() {
      return cancel === null || cancel === void 0 ? void 0 : cancel(handle);
    });
  },
  requestAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
  },
  cancelAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js
function animationFramesFactory(timestampProvider) {
  return new Observable(function(subscriber) {
    var provider = timestampProvider || performanceTimestampProvider;
    var start = provider.now();
    var id = 0;
    var run = function() {
      if (!subscriber.closed) {
        id = animationFrameProvider.requestAnimationFrame(function(timestamp2) {
          id = 0;
          var now = provider.now();
          subscriber.next({
            timestamp: timestampProvider ? now : timestamp2,
            elapsed: now - start
          });
          run();
        });
      }
    };
    run();
    return function() {
      if (id) {
        animationFrameProvider.cancelAnimationFrame(id);
      }
    };
  });
}
var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();

// node_modules/rxjs/dist/esm5/internal/Subject.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
init_shim();
var ObjectUnsubscribedError = createErrorClass(function(_super) {
  return function ObjectUnsubscribedErrorImpl() {
    _super(this);
    this.name = "ObjectUnsubscribedError";
    this.message = "object unsubscribed";
  };
});

// node_modules/rxjs/dist/esm5/internal/Subject.js
var Subject = function(_super) {
  __extends(Subject2, _super);
  function Subject2() {
    var _this = _super.call(this) || this;
    _this.closed = false;
    _this.currentObservers = null;
    _this.observers = [];
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }
  Subject2.prototype.lift = function(operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject2.prototype._throwIfClosed = function() {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  };
  Subject2.prototype.next = function(value) {
    var _this = this;
    errorContext(function() {
      var e_1, _a;
      _this._throwIfClosed();
      if (!_this.isStopped) {
        if (!_this.currentObservers) {
          _this.currentObservers = Array.from(_this.observers);
        }
        try {
          for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
            var observer = _c.value;
            observer.next(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
    });
  };
  Subject2.prototype.error = function(err) {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.hasError = _this.isStopped = true;
        _this.thrownError = err;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  };
  Subject2.prototype.complete = function() {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.isStopped = true;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  };
  Subject2.prototype.unsubscribe = function() {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  };
  Object.defineProperty(Subject2.prototype, "observed", {
    get: function() {
      var _a;
      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
    },
    enumerable: false,
    configurable: true
  });
  Subject2.prototype._trySubscribe = function(subscriber) {
    this._throwIfClosed();
    return _super.prototype._trySubscribe.call(this, subscriber);
  };
  Subject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  };
  Subject2.prototype._innerSubscribe = function(subscriber) {
    var _this = this;
    var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(function() {
      _this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  };
  Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  };
  Subject2.prototype.asObservable = function() {
    var observable2 = new Observable();
    observable2.source = this;
    return observable2;
  };
  Subject2.create = function(destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject2;
}(Observable);
var AnonymousSubject = function(_super) {
  __extends(AnonymousSubject2, _super);
  function AnonymousSubject2(destination, source) {
    var _this = _super.call(this) || this;
    _this.destination = destination;
    _this.source = source;
    return _this;
  }
  AnonymousSubject2.prototype.next = function(value) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
  };
  AnonymousSubject2.prototype.error = function(err) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
  };
  AnonymousSubject2.prototype.complete = function() {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
  };
  AnonymousSubject2.prototype._subscribe = function(subscriber) {
    var _a, _b;
    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
  };
  return AnonymousSubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js
init_shim();
var BehaviorSubject = function(_super) {
  __extends(BehaviorSubject2, _super);
  function BehaviorSubject2(_value) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    return _this;
  }
  Object.defineProperty(BehaviorSubject2.prototype, "value", {
    get: function() {
      return this.getValue();
    },
    enumerable: false,
    configurable: true
  });
  BehaviorSubject2.prototype._subscribe = function(subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);
    !subscription.closed && subscriber.next(this._value);
    return subscription;
  };
  BehaviorSubject2.prototype.getValue = function() {
    var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
    if (hasError) {
      throw thrownError;
    }
    this._throwIfClosed();
    return _value;
  };
  BehaviorSubject2.prototype.next = function(value) {
    _super.prototype.next.call(this, this._value = value);
  };
  return BehaviorSubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
init_shim();
var dateTimestampProvider = {
  now: function() {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
var ReplaySubject = function(_super) {
  __extends(ReplaySubject2, _super);
  function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
    if (_bufferSize === void 0) {
      _bufferSize = Infinity;
    }
    if (_windowTime === void 0) {
      _windowTime = Infinity;
    }
    if (_timestampProvider === void 0) {
      _timestampProvider = dateTimestampProvider;
    }
    var _this = _super.call(this) || this;
    _this._bufferSize = _bufferSize;
    _this._windowTime = _windowTime;
    _this._timestampProvider = _timestampProvider;
    _this._buffer = [];
    _this._infiniteTimeWindow = true;
    _this._infiniteTimeWindow = _windowTime === Infinity;
    _this._bufferSize = Math.max(1, _bufferSize);
    _this._windowTime = Math.max(1, _windowTime);
    return _this;
  }
  ReplaySubject2.prototype.next = function(value) {
    var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
    if (!isStopped) {
      _buffer.push(value);
      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }
    this._trimBuffer();
    _super.prototype.next.call(this, value);
  };
  ReplaySubject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._trimBuffer();
    var subscription = this._innerSubscribe(subscriber);
    var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
    var copy = _buffer.slice();
    for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy[i]);
    }
    this._checkFinalizedStatuses(subscriber);
    return subscription;
  };
  ReplaySubject2.prototype._trimBuffer = function() {
    var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
    var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
    if (!_infiniteTimeWindow) {
      var now = _timestampProvider.now();
      var last3 = 0;
      for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
        last3 = i;
      }
      last3 && _buffer.splice(0, last3 + 1);
    }
  };
  return ReplaySubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/AsyncSubject.js
init_shim();
var AsyncSubject = function(_super) {
  __extends(AsyncSubject2, _super);
  function AsyncSubject2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._value = null;
    _this._hasValue = false;
    _this._isComplete = false;
    return _this;
  }
  AsyncSubject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped || _isComplete) {
      _hasValue && subscriber.next(_value);
      subscriber.complete();
    }
  };
  AsyncSubject2.prototype.next = function(value) {
    if (!this.isStopped) {
      this._value = value;
      this._hasValue = true;
    }
  };
  AsyncSubject2.prototype.complete = function() {
    var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
    if (!_isComplete) {
      this._isComplete = true;
      _hasValue && _super.prototype.next.call(this, _value);
      _super.prototype.complete.call(this);
    }
  };
  return AsyncSubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/scheduler/Action.js
init_shim();
var Action = function(_super) {
  __extends(Action2, _super);
  function Action2(scheduler, work) {
    return _super.call(this) || this;
  }
  Action2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return this;
  };
  return Action2;
}(Subscription);

// node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js
init_shim();
var intervalProvider = {
  setInterval: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = intervalProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
    }
    return setInterval.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearInterval: function(handle) {
    var delegate = intervalProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
var AsyncAction = function(_super) {
  __extends(AsyncAction2, _super);
  function AsyncAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.pending = false;
    return _this;
  }
  AsyncAction2.prototype.schedule = function(state, delay2) {
    var _a;
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (this.closed) {
      return this;
    }
    this.state = state;
    var id = this.id;
    var scheduler = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay2);
    }
    this.pending = true;
    this.delay = delay2;
    this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay2);
    return this;
  };
  AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay2);
  };
  AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && this.delay === delay2 && this.pending === false) {
      return id;
    }
    if (id != null) {
      intervalProvider.clearInterval(id);
    }
    return void 0;
  };
  AsyncAction2.prototype.execute = function(state, delay2) {
    if (this.closed) {
      return new Error("executing a cancelled action");
    }
    this.pending = false;
    var error = this._execute(state, delay2);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };
  AsyncAction2.prototype._execute = function(state, _delay) {
    var errored = false;
    var errorValue;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error("Scheduled action threw falsy error");
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };
  AsyncAction2.prototype.unsubscribe = function() {
    if (!this.closed) {
      var _a = this, id = _a.id, scheduler = _a.scheduler;
      var actions = scheduler.actions;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      arrRemove(actions, this);
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }
      this.delay = null;
      _super.prototype.unsubscribe.call(this);
    }
  };
  return AsyncAction2;
}(Action);

// node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/Immediate.js
init_shim();
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var Immediate = {
  setImmediate: function(cb) {
    var handle = nextHandle++;
    activeHandles[handle] = true;
    if (!resolved) {
      resolved = Promise.resolve();
    }
    resolved.then(function() {
      return findAndClearHandle(handle) && cb();
    });
    return handle;
  },
  clearImmediate: function(handle) {
    findAndClearHandle(handle);
  }
};

// node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
var setImmediate = Immediate.setImmediate;
var clearImmediate = Immediate.clearImmediate;
var immediateProvider = {
  setImmediate: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
  },
  clearImmediate: function(handle) {
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
var AsapAction = function(_super) {
  __extends(AsapAction2, _super);
  function AsapAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AsapAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
  };
  AsapAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    var _a;
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null ? delay2 > 0 : this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
    }
    var actions = scheduler.actions;
    if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
      immediateProvider.clearImmediate(id);
      if (scheduler._scheduled === id) {
        scheduler._scheduled = void 0;
      }
    }
    return void 0;
  };
  return AsapAction2;
}(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/Scheduler.js
init_shim();
var Scheduler = function() {
  function Scheduler2(schedulerActionCtor, now) {
    if (now === void 0) {
      now = Scheduler2.now;
    }
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now;
  }
  Scheduler2.prototype.schedule = function(work, delay2, state) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return new this.schedulerActionCtor(this, work).schedule(state, delay2);
  };
  Scheduler2.now = dateTimestampProvider.now;
  return Scheduler2;
}();

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
var AsyncScheduler = function(_super) {
  __extends(AsyncScheduler2, _super);
  function AsyncScheduler2(SchedulerAction, now) {
    if (now === void 0) {
      now = Scheduler.now;
    }
    var _this = _super.call(this, SchedulerAction, now) || this;
    _this.actions = [];
    _this._active = false;
    return _this;
  }
  AsyncScheduler2.prototype.flush = function(action) {
    var actions = this.actions;
    if (this._active) {
      actions.push(action);
      return;
    }
    var error;
    this._active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this._active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsyncScheduler2;
}(Scheduler);

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
var AsapScheduler = function(_super) {
  __extends(AsapScheduler2, _super);
  function AsapScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AsapScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsapScheduler2;
}(AsyncScheduler);

// node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
var asapScheduler = new AsapScheduler(AsapAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/async.js
init_shim();
var asyncScheduler = new AsyncScheduler(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/queue.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/scheduler/QueueAction.js
init_shim();
var QueueAction = function(_super) {
  __extends(QueueAction2, _super);
  function QueueAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  QueueAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 > 0) {
      return _super.prototype.schedule.call(this, state, delay2);
    }
    this.delay = delay2;
    this.state = state;
    this.scheduler.flush(this);
    return this;
  };
  QueueAction2.prototype.execute = function(state, delay2) {
    return delay2 > 0 || this.closed ? _super.prototype.execute.call(this, state, delay2) : this._execute(state, delay2);
  };
  QueueAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.flush(this);
    return 0;
  };
  return QueueAction2;
}(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/QueueScheduler.js
init_shim();
var QueueScheduler = function(_super) {
  __extends(QueueScheduler2, _super);
  function QueueScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return QueueScheduler2;
}(AsyncScheduler);

// node_modules/rxjs/dist/esm5/internal/scheduler/queue.js
var queueScheduler = new QueueScheduler(QueueAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameAction.js
init_shim();
var AnimationFrameAction = function(_super) {
  __extends(AnimationFrameAction2, _super);
  function AnimationFrameAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AnimationFrameAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function() {
      return scheduler.flush(void 0);
    }));
  };
  AnimationFrameAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    var _a;
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null ? delay2 > 0 : this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
    }
    var actions = scheduler.actions;
    if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
      animationFrameProvider.cancelAnimationFrame(id);
      scheduler._scheduled = void 0;
    }
    return void 0;
  };
  return AnimationFrameAction2;
}(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameScheduler.js
init_shim();
var AnimationFrameScheduler = function(_super) {
  __extends(AnimationFrameScheduler2, _super);
  function AnimationFrameScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AnimationFrameScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AnimationFrameScheduler2;
}(AsyncScheduler);

// node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js
var animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/VirtualTimeScheduler.js
init_shim();
var VirtualTimeScheduler = function(_super) {
  __extends(VirtualTimeScheduler2, _super);
  function VirtualTimeScheduler2(schedulerActionCtor, maxFrames) {
    if (schedulerActionCtor === void 0) {
      schedulerActionCtor = VirtualAction;
    }
    if (maxFrames === void 0) {
      maxFrames = Infinity;
    }
    var _this = _super.call(this, schedulerActionCtor, function() {
      return _this.frame;
    }) || this;
    _this.maxFrames = maxFrames;
    _this.frame = 0;
    _this.index = -1;
    return _this;
  }
  VirtualTimeScheduler2.prototype.flush = function() {
    var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
    var error;
    var action;
    while ((action = actions[0]) && action.delay <= maxFrames) {
      actions.shift();
      this.frame = action.delay;
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    }
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  VirtualTimeScheduler2.frameTimeFactor = 10;
  return VirtualTimeScheduler2;
}(AsyncScheduler);
var VirtualAction = function(_super) {
  __extends(VirtualAction2, _super);
  function VirtualAction2(scheduler, work, index) {
    if (index === void 0) {
      index = scheduler.index += 1;
    }
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.index = index;
    _this.active = true;
    _this.index = scheduler.index = index;
    return _this;
  }
  VirtualAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (Number.isFinite(delay2)) {
      if (!this.id) {
        return _super.prototype.schedule.call(this, state, delay2);
      }
      this.active = false;
      var action = new VirtualAction2(this.scheduler, this.work);
      this.add(action);
      return action.schedule(state, delay2);
    } else {
      return Subscription.EMPTY;
    }
  };
  VirtualAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    this.delay = scheduler.frame + delay2;
    var actions = scheduler.actions;
    actions.push(this);
    actions.sort(VirtualAction2.sortActions);
    return 1;
  };
  VirtualAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return void 0;
  };
  VirtualAction2.prototype._execute = function(state, delay2) {
    if (this.active === true) {
      return _super.prototype._execute.call(this, state, delay2);
    }
  };
  VirtualAction2.sortActions = function(a, b) {
    if (a.delay === b.delay) {
      if (a.index === b.index) {
        return 0;
      } else if (a.index > b.index) {
        return 1;
      } else {
        return -1;
      }
    } else if (a.delay > b.delay) {
      return 1;
    } else {
      return -1;
    }
  };
  return VirtualAction2;
}(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/Notification.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/empty.js
init_shim();
var EMPTY = new Observable(function(subscriber) {
  return subscriber.complete();
});

// node_modules/rxjs/dist/esm5/internal/observable/of.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/args.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
init_shim();
function isScheduler(value) {
  return value && isFunction6(value.schedule);
}

// node_modules/rxjs/dist/esm5/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popResultSelector(args) {
  return isFunction6(last(args)) ? args.pop() : void 0;
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}

// node_modules/rxjs/dist/esm5/internal/observable/from.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
init_shim();
var isArrayLike = function(x) {
  return x && typeof x.length === "number" && typeof x !== "function";
};

// node_modules/rxjs/dist/esm5/internal/util/isPromise.js
init_shim();
function isPromise5(value) {
  return isFunction6(value === null || value === void 0 ? void 0 : value.then);
}

// node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
init_shim();
function isInteropObservable(input) {
  return isFunction6(input[observable]);
}

// node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
init_shim();
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction6(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

// node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
init_shim();
function createInvalidObservableTypeError(input) {
  return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}

// node_modules/rxjs/dist/esm5/internal/util/isIterable.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
init_shim();
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator = getSymbolIterator();

// node_modules/rxjs/dist/esm5/internal/util/isIterable.js
function isIterable(input) {
  return isFunction6(input === null || input === void 0 ? void 0 : input[iterator]);
}

// node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
init_shim();
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a, value, done;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          reader = readableStream.getReader();
          _b.label = 1;
        case 1:
          _b.trys.push([1, , 9, 10]);
          _b.label = 2;
        case 2:
          if (false)
            return [3, 8];
          return [4, __await(reader.read())];
        case 3:
          _a = _b.sent(), value = _a.value, done = _a.done;
          if (!done)
            return [3, 5];
          return [4, __await(void 0)];
        case 4:
          return [2, _b.sent()];
        case 5:
          return [4, __await(value)];
        case 6:
          return [4, _b.sent()];
        case 7:
          _b.sent();
          return [3, 2];
        case 8:
          return [3, 10];
        case 9:
          reader.releaseLock();
          return [7];
        case 10:
          return [2];
      }
    });
  });
}
function isReadableStreamLike(obj) {
  return isFunction6(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

// node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
function innerFrom(input) {
  if (input instanceof Observable) {
    return input;
  }
  if (input != null) {
    if (isInteropObservable(input)) {
      return fromInteropObservable(input);
    }
    if (isArrayLike(input)) {
      return fromArrayLike(input);
    }
    if (isPromise5(input)) {
      return fromPromise(input);
    }
    if (isAsyncIterable(input)) {
      return fromAsyncIterable(input);
    }
    if (isIterable(input)) {
      return fromIterable(input);
    }
    if (isReadableStreamLike(input)) {
      return fromReadableStreamLike(input);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
  return new Observable(function(subscriber) {
    var obs = obj[observable]();
    if (isFunction6(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable(function(subscriber) {
    for (var i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable(function(subscriber) {
    promise.then(function(value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function(err) {
      return subscriber.error(err);
    }).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable(function(subscriber) {
    var e_1, _a;
    try {
      for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))
          _a.call(iterable_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable(function(subscriber) {
    process(asyncIterable, subscriber).catch(function(err) {
      return subscriber.error(err);
    });
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_2, _a;
  return __awaiter(this, void 0, void 0, function() {
    var value, e_2_1;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);
          asyncIterable_1 = __asyncValues(asyncIterable);
          _b.label = 1;
        case 1:
          return [4, asyncIterable_1.next()];
        case 2:
          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done))
            return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return [2];
          }
          _b.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_2_1 = _b.sent();
          e_2 = { error: e_2_1 };
          return [3, 11];
        case 6:
          _b.trys.push([6, , 9, 10]);
          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return)))
            return [3, 8];
          return [4, _a.call(asyncIterable_1)];
        case 7:
          _b.sent();
          _b.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_2)
            throw e_2.error;
          return [7];
        case 10:
          return [7];
        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
init_shim();
function executeSchedule(parentSubscription, scheduler, work, delay2, repeat2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  if (repeat2 === void 0) {
    repeat2 = false;
  }
  var scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat2) {
      parentSubscription.add(this.schedule(null, delay2));
    } else {
      this.unsubscribe();
    }
  }, delay2);
  parentSubscription.add(scheduleSubscription);
  if (!repeat2) {
    return scheduleSubscription;
  }
}

// node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
function observeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.next(value);
      }, delay2);
    }, function() {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.complete();
      }, delay2);
    }, function(err) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.error(err);
      }, delay2);
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
init_shim();
function subscribeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    subscriber.add(scheduler.schedule(function() {
      return source.subscribe(subscriber);
    }, delay2));
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
function scheduleObservable(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
init_shim();
function schedulePromise(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
init_shim();
function scheduleArray(input, scheduler) {
  return new Observable(function(subscriber) {
    var i = 0;
    return scheduler.schedule(function() {
      if (i === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
init_shim();
function scheduleIterable(input, scheduler) {
  return new Observable(function(subscriber) {
    var iterator2;
    executeSchedule(subscriber, scheduler, function() {
      iterator2 = input[iterator]();
      executeSchedule(subscriber, scheduler, function() {
        var _a;
        var value;
        var done;
        try {
          _a = iterator2.next(), value = _a.value, done = _a.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function() {
      return isFunction6(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
    };
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
init_shim();
function scheduleAsyncIterable(input, scheduler) {
  if (!input) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable(function(subscriber) {
    executeSchedule(subscriber, scheduler, function() {
      var iterator2 = input[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, function() {
        iterator2.next().then(function(result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
init_shim();
function scheduleReadableStreamLike(input, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
function scheduled(input, scheduler) {
  if (input != null) {
    if (isInteropObservable(input)) {
      return scheduleObservable(input, scheduler);
    }
    if (isArrayLike(input)) {
      return scheduleArray(input, scheduler);
    }
    if (isPromise5(input)) {
      return schedulePromise(input, scheduler);
    }
    if (isAsyncIterable(input)) {
      return scheduleAsyncIterable(input, scheduler);
    }
    if (isIterable(input)) {
      return scheduleIterable(input, scheduler);
    }
    if (isReadableStreamLike(input)) {
      return scheduleReadableStreamLike(input, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input);
}

// node_modules/rxjs/dist/esm5/internal/observable/from.js
function from(input, scheduler) {
  return scheduler ? scheduled(input, scheduler) : innerFrom(input);
}

// node_modules/rxjs/dist/esm5/internal/observable/of.js
function of() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  return from(args, scheduler);
}

// node_modules/rxjs/dist/esm5/internal/observable/throwError.js
init_shim();
function throwError(errorOrErrorFactory, scheduler) {
  var errorFactory = isFunction6(errorOrErrorFactory) ? errorOrErrorFactory : function() {
    return errorOrErrorFactory;
  };
  var init5 = function(subscriber) {
    return subscriber.error(errorFactory());
  };
  return new Observable(scheduler ? function(subscriber) {
    return scheduler.schedule(init5, 0, subscriber);
  } : init5);
}

// node_modules/rxjs/dist/esm5/internal/Notification.js
var NotificationKind;
(function(NotificationKind2) {
  NotificationKind2["NEXT"] = "N";
  NotificationKind2["ERROR"] = "E";
  NotificationKind2["COMPLETE"] = "C";
})(NotificationKind || (NotificationKind = {}));
var Notification = function() {
  function Notification2(kind, value, error) {
    this.kind = kind;
    this.value = value;
    this.error = error;
    this.hasValue = kind === "N";
  }
  Notification2.prototype.observe = function(observer) {
    return observeNotification(this, observer);
  };
  Notification2.prototype.do = function(nextHandler, errorHandler, completeHandler) {
    var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
    return kind === "N" ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === "E" ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
  };
  Notification2.prototype.accept = function(nextOrObserver, error, complete) {
    var _a;
    return isFunction6((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);
  };
  Notification2.prototype.toObservable = function() {
    var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
    var result = kind === "N" ? of(value) : kind === "E" ? throwError(function() {
      return error;
    }) : kind === "C" ? EMPTY : 0;
    if (!result) {
      throw new TypeError("Unexpected notification kind " + kind);
    }
    return result;
  };
  Notification2.createNext = function(value) {
    return new Notification2("N", value);
  };
  Notification2.createError = function(err) {
    return new Notification2("E", void 0, err);
  };
  Notification2.createComplete = function() {
    return Notification2.completeNotification;
  };
  Notification2.completeNotification = new Notification2("C");
  return Notification2;
}();
function observeNotification(notification, observer) {
  var _a, _b, _c;
  var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
  if (typeof kind !== "string") {
    throw new TypeError('Invalid notification, missing "kind"');
  }
  kind === "N" ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === "E" ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
}

// node_modules/rxjs/dist/esm5/internal/util/isObservable.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/lastValueFrom.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
init_shim();
var EmptyError = createErrorClass(function(_super) {
  return function EmptyErrorImpl() {
    _super(this);
    this.name = "EmptyError";
    this.message = "no elements in sequence";
  };
});

// node_modules/rxjs/dist/esm5/internal/firstValueFrom.js
init_shim();
function firstValueFrom(source, config14) {
  var hasConfig = typeof config14 === "object";
  return new Promise(function(resolve, reject) {
    var subscriber = new SafeSubscriber({
      next: function(value) {
        resolve(value);
        subscriber.unsubscribe();
      },
      error: reject,
      complete: function() {
        if (hasConfig) {
          resolve(config14.defaultValue);
        } else {
          reject(new EmptyError());
        }
      }
    });
    source.subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm5/internal/util/ArgumentOutOfRangeError.js
init_shim();
var ArgumentOutOfRangeError = createErrorClass(function(_super) {
  return function ArgumentOutOfRangeErrorImpl() {
    _super(this);
    this.name = "ArgumentOutOfRangeError";
    this.message = "argument out of range";
  };
});

// node_modules/rxjs/dist/esm5/internal/util/NotFoundError.js
init_shim();
var NotFoundError = createErrorClass(function(_super) {
  return function NotFoundErrorImpl(message) {
    _super(this);
    this.name = "NotFoundError";
    this.message = message;
  };
});

// node_modules/rxjs/dist/esm5/internal/util/SequenceError.js
init_shim();
var SequenceError = createErrorClass(function(_super) {
  return function SequenceErrorImpl(message) {
    _super(this);
    this.name = "SequenceError";
    this.message = message;
  };
});

// node_modules/rxjs/dist/esm5/internal/operators/timeout.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/isDate.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/timeout.js
var TimeoutError = createErrorClass(function(_super) {
  return function TimeoutErrorImpl(info6) {
    if (info6 === void 0) {
      info6 = null;
    }
    _super(this);
    this.message = "Timeout has occurred";
    this.name = "TimeoutError";
    this.info = info6;
  };
});

// node_modules/rxjs/dist/esm5/internal/observable/bindCallback.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/bindCallbackInternals.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/map.js
init_shim();
function map(project, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
var isArray5 = Array.isArray;
function callOrApply(fn, args) {
  return isArray5(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
}
function mapOneOrManyArgs(fn) {
  return map(function(args) {
    return callOrApply(fn, args);
  });
}

// node_modules/rxjs/dist/esm5/internal/observable/bindNodeCallback.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
init_shim();
var isArray6 = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf;
var objectProto = Object.prototype;
var getKeys = Object.keys;
function argsArgArrayOrObject(args) {
  if (args.length === 1) {
    var first_1 = args[0];
    if (isArray6(first_1)) {
      return { args: first_1, keys: null };
    }
    if (isPOJO(first_1)) {
      var keys2 = getKeys(first_1);
      return {
        args: keys2.map(function(key) {
          return first_1[key];
        }),
        keys: keys2
      };
    }
  }
  return { args, keys: null };
}
function isPOJO(obj) {
  return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
}

// node_modules/rxjs/dist/esm5/internal/util/createObject.js
init_shim();
function createObject(keys2, values) {
  return keys2.reduce(function(result, key, i) {
    return result[key] = values[i], result;
  }, {});
}

// node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js
function combineLatest() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  var resultSelector = popResultSelector(args);
  var _a = argsArgArrayOrObject(args), observables = _a.args, keys2 = _a.keys;
  if (observables.length === 0) {
    return from([], scheduler);
  }
  var result = new Observable(combineLatestInit(observables, scheduler, keys2 ? function(values) {
    return createObject(keys2, values);
  } : identity2));
  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform) {
  if (valueTransform === void 0) {
    valueTransform = identity2;
  }
  return function(subscriber) {
    maybeSchedule(scheduler, function() {
      var length = observables.length;
      var values = new Array(length);
      var active = length;
      var remainingFirstValues = length;
      var _loop_1 = function(i2) {
        maybeSchedule(scheduler, function() {
          var source = from(observables[i2], scheduler);
          var hasFirstValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, function(value) {
            values[i2] = value;
            if (!hasFirstValue) {
              hasFirstValue = true;
              remainingFirstValues--;
            }
            if (!remainingFirstValues) {
              subscriber.next(valueTransform(values.slice()));
            }
          }, function() {
            if (!--active) {
              subscriber.complete();
            }
          }));
        }, subscriber);
      };
      for (var i = 0; i < length; i++) {
        _loop_1(i);
      }
    }, subscriber);
  };
}
function maybeSchedule(scheduler, execute, subscription) {
  if (scheduler) {
    executeSchedule(subscription, scheduler, execute);
  } else {
    execute();
  }
}

// node_modules/rxjs/dist/esm5/internal/observable/concat.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/concatAll.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js
init_shim();
function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand3, innerSubScheduler, additionalFinalizer) {
  var buffer2 = [];
  var active = 0;
  var index = 0;
  var isComplete = false;
  var checkComplete = function() {
    if (isComplete && !buffer2.length && !active) {
      subscriber.complete();
    }
  };
  var outerNext = function(value) {
    return active < concurrent ? doInnerSub(value) : buffer2.push(value);
  };
  var doInnerSub = function(value) {
    expand3 && subscriber.next(value);
    active++;
    var innerComplete = false;
    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function(innerValue) {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
      if (expand3) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, function() {
      innerComplete = true;
    }, void 0, function() {
      if (innerComplete) {
        try {
          active--;
          var _loop_1 = function() {
            var bufferedValue = buffer2.shift();
            if (innerSubScheduler) {
              executeSchedule(subscriber, innerSubScheduler, function() {
                return doInnerSub(bufferedValue);
              });
            } else {
              doInnerSub(bufferedValue);
            }
          };
          while (buffer2.length && active < concurrent) {
            _loop_1();
          }
          checkComplete();
        } catch (err) {
          subscriber.error(err);
        }
      }
    }));
  };
  source.subscribe(createOperatorSubscriber(subscriber, outerNext, function() {
    isComplete = true;
    checkComplete();
  }));
  return function() {
    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  if (isFunction6(resultSelector)) {
    return mergeMap(function(a, i) {
      return map(function(b, ii) {
        return resultSelector(a, b, i, ii);
      })(innerFrom(project(a, i)));
    }, concurrent);
  } else if (typeof resultSelector === "number") {
    concurrent = resultSelector;
  }
  return operate(function(source, subscriber) {
    return mergeInternals(source, subscriber, project, concurrent);
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
function mergeAll(concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  return mergeMap(identity2, concurrent);
}

// node_modules/rxjs/dist/esm5/internal/operators/concatAll.js
function concatAll() {
  return mergeAll(1);
}

// node_modules/rxjs/dist/esm5/internal/observable/concat.js
function concat() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return concatAll()(from(args, popScheduler(args)));
}

// node_modules/rxjs/dist/esm5/internal/observable/connectable.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/defer.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/generate.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/iif.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/interval.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/timer.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/merge.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/never.js
init_shim();
var NEVER = new Observable(noop5);

// node_modules/rxjs/dist/esm5/internal/observable/onErrorResumeNext.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
init_shim();
var isArray7 = Array.isArray;

// node_modules/rxjs/dist/esm5/internal/observable/pairs.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/partition.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/util/not.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/filter.js
init_shim();
function filter(predicate, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return predicate.call(thisArg, value, index++) && subscriber.next(value);
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/observable/race.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/range.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/using.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/zip.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/types.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/audit.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/auditTime.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/buffer.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/bufferCount.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/bufferTime.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/bufferToggle.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/bufferWhen.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/catchError.js
init_shim();
function catchError(selector) {
  return operate(function(source, subscriber) {
    var innerSub = null;
    var syncUnsub = false;
    var handledResult;
    innerSub = source.subscribe(createOperatorSubscriber(subscriber, void 0, void 0, function(err) {
      handledResult = innerFrom(selector(err, catchError(selector)(source)));
      if (innerSub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      } else {
        syncUnsub = true;
      }
    }));
    if (syncUnsub) {
      innerSub.unsubscribe();
      innerSub = null;
      handledResult.subscribe(subscriber);
    }
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/combineAll.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/combineLatestAll.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/joinAllInternals.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/toArray.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/reduce.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js
init_shim();
function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
  return function(source, subscriber) {
    var hasState = hasSeed;
    var state = seed;
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var i = index++;
      state = hasState ? accumulator(state, value, i) : (hasState = true, value);
      emitOnNext && subscriber.next(state);
    }, emitBeforeComplete && function() {
      hasState && subscriber.next(state);
      subscriber.complete();
    }));
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/reduce.js
function reduce(accumulator, seed) {
  return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
}

// node_modules/rxjs/dist/esm5/internal/operators/toArray.js
var arrReducer = function(arr, value) {
  return arr.push(value), arr;
};
function toArray() {
  return operate(function(source, subscriber) {
    reduce(arrReducer, [])(source).subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/combineLatest.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/concatMap.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/concatMapTo.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/concatWith.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/concat.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/connect.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/observable/fromSubscribable.js
init_shim();
function fromSubscribable(subscribable) {
  return new Observable(function(subscriber) {
    return subscribable.subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/connect.js
var DEFAULT_CONFIG = {
  connector: function() {
    return new Subject();
  }
};
function connect(selector, config14) {
  if (config14 === void 0) {
    config14 = DEFAULT_CONFIG;
  }
  var connector = config14.connector;
  return operate(function(source, subscriber) {
    var subject = connector();
    innerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);
    subscriber.add(source.subscribe(subject));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/count.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/debounce.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js
init_shim();
function defaultIfEmpty(defaultValue) {
  return operate(function(source, subscriber) {
    var hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      hasValue = true;
      subscriber.next(value);
    }, function() {
      if (!hasValue) {
        subscriber.next(defaultValue);
      }
      subscriber.complete();
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/delay.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/delayWhen.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/take.js
init_shim();
function take(count2) {
  return count2 <= 0 ? function() {
    return EMPTY;
  } : operate(function(source, subscriber) {
    var seen = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      if (++seen <= count2) {
        subscriber.next(value);
        if (count2 <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/ignoreElements.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/mapTo.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/dematerialize.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/distinct.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js
init_shim();
function distinctUntilChanged(comparator, keySelector) {
  if (keySelector === void 0) {
    keySelector = identity2;
  }
  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
  return operate(function(source, subscriber) {
    var previousKey;
    var first2 = true;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var currentKey = keySelector(value);
      if (first2 || !comparator(previousKey, currentKey)) {
        first2 = false;
        previousKey = currentKey;
        subscriber.next(value);
      }
    }));
  });
}
function defaultCompare(a, b) {
  return a === b;
}

// node_modules/rxjs/dist/esm5/internal/operators/distinctUntilKeyChanged.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/elementAt.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js
init_shim();
function throwIfEmpty(errorFactory) {
  if (errorFactory === void 0) {
    errorFactory = defaultErrorFactory;
  }
  return operate(function(source, subscriber) {
    var hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      hasValue = true;
      subscriber.next(value);
    }, function() {
      return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
    }));
  });
}
function defaultErrorFactory() {
  return new EmptyError();
}

// node_modules/rxjs/dist/esm5/internal/operators/endWith.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/every.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/exhaust.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/exhaustAll.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/expand.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/finalize.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/find.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/findIndex.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/first.js
init_shim();
function first(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function(source) {
    return source.pipe(predicate ? filter(function(v, i) {
      return predicate(v, i, source);
    }) : identity2, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function() {
      return new EmptyError();
    }));
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/groupBy.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/isEmpty.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/last.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/takeLast.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/materialize.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/max.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/flatMap.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/mergeMapTo.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/mergeScan.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/mergeWith.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/merge.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/min.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/multicast.js
init_shim();
function multicast(subjectOrSubjectFactory, selector) {
  var subjectFactory = isFunction6(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function() {
    return subjectOrSubjectFactory;
  };
  if (isFunction6(selector)) {
    return connect(selector, {
      connector: subjectFactory
    });
  }
  return function(source) {
    return new ConnectableObservable(source, subjectFactory);
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/onErrorResumeNextWith.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/pairwise.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/pluck.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/publish.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/publishBehavior.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/publishLast.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/publishReplay.js
init_shim();
function publishReplay(bufferSize, windowTime2, selectorOrScheduler, timestampProvider) {
  if (selectorOrScheduler && !isFunction6(selectorOrScheduler)) {
    timestampProvider = selectorOrScheduler;
  }
  var selector = isFunction6(selectorOrScheduler) ? selectorOrScheduler : void 0;
  return function(source) {
    return multicast(new ReplaySubject(bufferSize, windowTime2, timestampProvider), selector)(source);
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/raceWith.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/repeat.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/repeatWhen.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/retry.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/retryWhen.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/sample.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/sampleTime.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/scan.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/sequenceEqual.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/share.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/single.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/skip.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/skipLast.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/skipWhile.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/startWith.js
init_shim();
function startWith() {
  var values = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }
  var scheduler = popScheduler(values);
  return operate(function(source, subscriber) {
    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/switchAll.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/switchMap.js
init_shim();
function switchMap(project, resultSelector) {
  return operate(function(source, subscriber) {
    var innerSubscriber = null;
    var index = 0;
    var isComplete = false;
    var checkComplete = function() {
      return isComplete && !innerSubscriber && subscriber.complete();
    };
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
      var innerIndex = 0;
      var outerIndex = index++;
      innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, function(innerValue) {
        return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
      }, function() {
        innerSubscriber = null;
        checkComplete();
      }));
    }, function() {
      isComplete = true;
      checkComplete();
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/switchMapTo.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/switchScan.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/tap.js
init_shim();
function tap(observerOrNext, error, complete) {
  var tapObserver = isFunction6(observerOrNext) || error || complete ? { next: observerOrNext, error, complete } : observerOrNext;
  return tapObserver ? operate(function(source, subscriber) {
    var _a;
    (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
    var isUnsub = true;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var _a2;
      (_a2 = tapObserver.next) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, value);
      subscriber.next(value);
    }, function() {
      var _a2;
      isUnsub = false;
      (_a2 = tapObserver.complete) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      subscriber.complete();
    }, function(err) {
      var _a2;
      isUnsub = false;
      (_a2 = tapObserver.error) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, err);
      subscriber.error(err);
    }, function() {
      var _a2, _b;
      if (isUnsub) {
        (_a2 = tapObserver.unsubscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      }
      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
    }));
  }) : identity2;
}

// node_modules/rxjs/dist/esm5/internal/operators/throttle.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/throttleTime.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/timeInterval.js
init_shim();
var TimeInterval = function() {
  function TimeInterval2(value, interval2) {
    this.value = value;
    this.interval = interval2;
  }
  return TimeInterval2;
}();

// node_modules/rxjs/dist/esm5/internal/operators/timeoutWith.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/timestamp.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/window.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/windowCount.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/windowTime.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/windowToggle.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/windowWhen.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/zipAll.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/zipWith.js
init_shim();

// node_modules/rxjs/dist/esm5/internal/operators/zip.js
init_shim();

// node_modules/@polkadot/api/util/index.js
init_shim();

// node_modules/@polkadot/api/util/filterEvents.js
init_shim();

// node_modules/@polkadot/api/util/logging.js
init_shim();
var l5 = logger2("api/util");

// node_modules/@polkadot/api/util/filterEvents.js
function filterEvents(txHash, { block: { extrinsics, header } }, allEvents, status) {
  for (const [txIndex, x] of extrinsics.entries()) {
    if (x.hash.eq(txHash)) {
      return {
        blockNumber: isCompact4(header.number) ? header.number.unwrap() : header.number,
        events: allEvents.filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(txIndex)),
        txIndex
      };
    }
  }
  if (status.isInBlock) {
    const allHashes = extrinsics.map((x) => x.hash.toHex());
    l5.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(", ")}`);
  }
  return {};
}

// node_modules/@polkadot/api/util/isKeyringPair.js
init_shim();
function isKeyringPair(account3) {
  return isFunction5(account3.sign);
}

// node_modules/@polkadot/api/util/decorate.js
init_shim();

// node_modules/@polkadot/api-derive/index.js
init_shim();

// node_modules/@polkadot/api-derive/detectPackage.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/detectPackage.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/detectOther.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/x-textdecoder/browser.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/x-textdecoder/fallback.js
init_shim();
var TextDecoder10 = class {
  constructor(encoding) {
    __publicField(this, "__encoding");
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count2 = value.length; i < count2; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/api-derive/node_modules/@polkadot/x-textdecoder/packageInfo.js
init_shim();
var packageInfo31 = { name: "@polkadot/x-textdecoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/api-derive/node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder11 = extractGlobal("TextDecoder", TextDecoder10);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/x-textencoder/browser.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/x-textencoder/fallback.js
init_shim();
var TextEncoder10 = class {
  encode(value) {
    const count2 = value.length;
    const u8a9 = new Uint8Array(count2);
    for (let i = 0; i < count2; i++) {
      u8a9[i] = value.charCodeAt(i);
    }
    return u8a9;
  }
};

// node_modules/@polkadot/api-derive/node_modules/@polkadot/x-textencoder/packageInfo.js
init_shim();
var packageInfo32 = { name: "@polkadot/x-textencoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/api-derive/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder11 = extractGlobal("TextEncoder", TextEncoder10);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/detectOther.js
var detectOther_default12 = [packageInfo31, packageInfo32];

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/packageInfo.js
init_shim();
var packageInfo33 = { name: "@polkadot/util", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/versionDetect.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/function.js
init_shim();
function isFunction7(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/versionDetect.js
var DEDUPE5 = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
var POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG5 = "POLKADOTJS_DISABLE_ESM_CJS_WARNING";
function getEntry5(name) {
  const _global = xglobal;
  if (!_global.__polkadotjs) {
    _global.__polkadotjs = {};
  }
  if (!_global.__polkadotjs[name]) {
    _global.__polkadotjs[name] = [];
  }
  return _global.__polkadotjs[name];
}
function formatDisplay5(all3, fmt) {
  let max2 = 0;
  for (let i = 0, count2 = all3.length; i < count2; i++) {
    max2 = Math.max(max2, all3[i].version.length);
  }
  return all3.map((d) => `	${fmt(d.version.padEnd(max2), d).join("	")}`).join("\n");
}
function formatInfo5(version, { name }) {
  return [
    version,
    name
  ];
}
function formatVersion5(version, { path, type }) {
  let extracted;
  if (path && path.length >= 5) {
    const nmIndex = path.indexOf("node_modules");
    extracted = nmIndex === -1 ? path : path.substring(nmIndex);
  } else {
    extracted = "<unknown>";
  }
  return [
    `${`${type || ""}`.padStart(3)} ${version}`,
    extracted
  ];
}
function getPath5(infoPath, pathOrFn) {
  if (infoPath) {
    return infoPath;
  } else if (isFunction7(pathOrFn)) {
    try {
      return pathOrFn() || "";
    } catch {
      return "";
    }
  }
  return pathOrFn || "";
}
function warn5(pre, all3, fmt) {
  console.warn(`${pre}
${DEDUPE5}
${formatDisplay5(all3, fmt)}`);
}
function detectPackage6({ name, path, type, version }, pathOrFn, deps = []) {
  var _a, _b;
  if (!name.startsWith("@polkadot")) {
    throw new Error(`Invalid package descriptor ${name}`);
  }
  const entry = getEntry5(name);
  entry.push({ path: getPath5(path, pathOrFn), type, version });
  const entriesSameVersion = entry.every((e) => e.version === version);
  const esmCjsWarningDisabled = ((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG5]) === "1";
  const multipleEntries = entry.length !== 1;
  const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;
  if (multipleEntries && !disableWarnings) {
    warn5(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion5);
  } else {
    const mismatches = deps.filter((d) => d && d.version !== version);
    if (mismatches.length) {
      warn5(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo5);
    }
  }
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/detectPackage.js
detectPackage6(packageInfo33, null, detectOther_default12);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bundle.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/array/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/array/chunk.js
init_shim();
function arrayChunk5(array, chunkSize) {
  const outputSize = Math.ceil(array.length / chunkSize);
  if (outputSize === 1) {
    return [array];
  }
  const output5 = Array(outputSize);
  for (let i = 0; i < outputSize; i++) {
    const offset = i * chunkSize;
    output5[i] = array.slice(offset, offset + chunkSize);
  }
  return output5;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/array/filter.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/array/flatten.js
init_shim();
function arrayFlatten5(arrays) {
  const num = arrays.length;
  if (num === 0) {
    return [];
  } else if (num === 1) {
    return arrays[0];
  }
  let size = 0;
  for (let i2 = 0; i2 < num; i2++) {
    size += arrays[i2].length;
  }
  const output5 = new Array(size);
  let i = -1;
  for (let j = 0; j < num; j++) {
    const a = arrays[j];
    for (let e = 0, count2 = a.length; e < count2; e++) {
      output5[++i] = a[e];
    }
  }
  return output5;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/array/range.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/array/shuffle.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/array/unzip.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/array/zip.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/assert.js
init_shim();
function assert2(condition, message) {
  if (!condition) {
    throw new Error(isFunction7(message) ? message() : message);
  }
}
function assertReturn2(value, message) {
  assert2(value !== void 0 && value !== null, message);
  return value;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bi/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bi/min.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bi/helpers.js
init_shim();
function createCmp5(cmp) {
  return (...items) => {
    const count2 = items.length;
    if (count2 === 0) {
      throw new Error("Must provide one or more arguments");
    }
    let result = items[0];
    for (let i = 1; i < count2; i++) {
      if (cmp(items[i], result)) {
        result = items[i];
      }
    }
    return result;
  };
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bi/min.js
var nMax5 = createCmp5((a, b) => a > b);
var nMin5 = createCmp5((a, b) => a < b);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bi/sqrt.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bi/consts.js
init_shim();
var _0n15 = BigInt2(0);
var _1n15 = BigInt2(1);
var _2n12 = BigInt2(2);
var _3n7 = BigInt2(3);
var _4n7 = BigInt2(4);
var _5n7 = BigInt2(5);
var _6n5 = BigInt2(6);
var _7n7 = BigInt2(7);
var _8n7 = BigInt2(8);
var _9n6 = BigInt2(9);
var _10n6 = BigInt2(10);
var _100n5 = BigInt2(100);
var _1000n5 = BigInt2(1e3);
var _1Mn5 = BigInt2(1e6);
var _1Bn5 = BigInt2(1e9);
var _1Qn5 = _1Bn5 * _1Bn5;
var _2pow53n5 = BigInt2(Number.MAX_SAFE_INTEGER);
var _sqrt2pow53n5 = BigInt2(94906265);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bi/toBigInt.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/toBigInt.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/toBigInt.js
init_shim();
var U8_MAX5 = BigInt2(256);
var U16_MAX5 = BigInt2(256 * 256);
var U64_MAX5 = BigInt2("0x10000000000000000");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/toU8a.js
init_shim();
var CHR5 = "0123456789abcdef";
var U89 = new Uint8Array(256);
var U169 = new Uint8Array(256 * 256);
for (let i = 0, count2 = CHR5.length; i < count2; i++) {
  U89[CHR5[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U89[CHR5[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U169[s | j] = U89[i] << 4 | U89[j];
  }
}
function hexToU8a6(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U169[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/bn.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/bn.js
init_shim();
var import_bn64 = __toESM(require_bn5(), 1);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/bn.js
function isBn5(value) {
  return import_bn64.default.isBN(value);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/hex.js
init_shim();
var REGEX_HEX_PREFIXED5 = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX5 = /^[\da-fA-F]+$/;
function isHex6(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED5.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/toBigInt.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/helpers.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/object.js
init_shim();
function isObject5(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/helpers.js
function isOn5(...fns) {
  return (value) => (isObject5(value) || isFunction7(value)) && fns.every((f) => isFunction7(value[f]));
}
function isOnFunction5(...fns) {
  return (value) => isFunction7(value) && fns.every((f) => isFunction7(value[f]));
}
function isOnObject5(...fns) {
  return (value) => isObject5(value) && fns.every((f) => isFunction7(value[f]));
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt5 = isOn5("toBigInt");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/toBn.js
init_shim();
var isToBn5 = isOn5("toBn");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bi/toHex.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/cmp.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/toU8a.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/buffer.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/has.js
init_shim();
var hasBigInt6 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer5 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess5 = typeof xglobal.process === "object";

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/buffer.js
function isBuffer5(value) {
  return hasBuffer5 && !!value && isFunction7(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/u8a.js
init_shim();
function isU8a6(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/string/toU8a.js
init_shim();
var encoder5 = new TextEncoder11();
function stringToU8a6(value) {
  return value ? encoder5.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a6(value) {
  return isU8a6(value) ? isBuffer5(value) ? new Uint8Array(value) : value : isHex6(value) ? hexToU8a6(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a6(value);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/concat.js
init_shim();
function u8aConcat6(...list) {
  const count2 = list.length;
  const u8as = new Array(count2);
  let length = 0;
  for (let i = 0; i < count2; i++) {
    u8as[i] = u8aToU8a6(list[i]);
    length += u8as[i].length;
  }
  return u8aConcatStrict6(u8as, length);
}
function u8aConcatStrict6(u8as, length = 0) {
  const count2 = u8as.length;
  let offset = 0;
  if (!length) {
    for (let i = 0; i < count2; i++) {
      length += u8as[i].length;
    }
  }
  const result = new Uint8Array(length);
  for (let i = 0; i < count2; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }
  return result;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/empty.js
init_shim();
function u8aEmpty6(value) {
  const len = value.length | 0;
  for (let i = 0; i < len; i++) {
    if (value[i] | 0) {
      return false;
    }
  }
  return true;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/eq.js
init_shim();
function u8aEq6(a, b) {
  const u8aa = u8aToU8a6(a);
  const u8ab = u8aToU8a6(b);
  if (u8aa.length === u8ab.length) {
    const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
    const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
    const mod5 = u8aa.length % 4 | 0;
    const length = u8aa.length - mod5 | 0;
    for (let i = 0; i < length; i += 4) {
      if (dvA.getUint32(i) !== dvB.getUint32(i)) {
        return false;
      }
    }
    for (let i = length, count2 = u8aa.length; i < count2; i++) {
      if (u8aa[i] !== u8ab[i]) {
        return false;
      }
    }
    return true;
  }
  return false;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/fixLength.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/sorted.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/toBn.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/toBuffer.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/toFloat.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/toHex.js
init_shim();
var U810 = new Array(256);
var U1610 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U810[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1610[s | j] = U810[i] + U810[j];
  }
}
function hex3(value, result) {
  const mod5 = value.length % 2 | 0;
  const length = value.length - mod5 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U1610[value[i] << 8 | value[i + 1]];
  }
  if (mod5) {
    result += U810[value[length] | 0];
  }
  return result;
}
function u8aToHex6(value, bitLength = -1, isPrefixed = true) {
  const empty3 = isPrefixed ? "0x" : "";
  if (!(value == null ? void 0 : value.length)) {
    return empty3;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex3(value.subarray(0, length / 2), empty3)}…${hex3(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex3(value, empty3);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/toNumber.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/toString.js
init_shim();
var decoder5 = new TextDecoder11("utf-8");
function u8aToString6(value) {
  return value ? decoder5.decode(value) : "";
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/wrap.js
init_shim();
var U8A_WRAP_ETHEREUM5 = u8aToU8a6("Ethereum Signed Message:\n");
var U8A_WRAP_PREFIX5 = u8aToU8a6("<Bytes>");
var U8A_WRAP_POSTFIX5 = u8aToU8a6("</Bytes>");
var WRAP_LEN5 = U8A_WRAP_PREFIX5.length + U8A_WRAP_POSTFIX5.length;

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bi/toU8a.js
init_shim();
var DIV5 = BigInt2(256);
var NEG_MASK5 = BigInt2(255);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/fromHex.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/toBn.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/stripPrefix.js
init_shim();
function hexStripPrefix5(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED5.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX5.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/toBn.js
function hexToBn5(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn64.default(0);
  }
  const stripped = hexStripPrefix5(value);
  const bn = new import_bn64.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/min.js
init_shim();
var bnMax5 = createCmp5((a, b) => a.gt(b));
var bnMin5 = createCmp5((a, b) => a.lt(b));

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/sqrt.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/consts.js
init_shim();
var BN_ZERO5 = new import_bn64.default(0);
var BN_ONE5 = new import_bn64.default(1);
var BN_TWO5 = new import_bn64.default(2);
var BN_THREE5 = new import_bn64.default(3);
var BN_FOUR5 = new import_bn64.default(4);
var BN_FIVE5 = new import_bn64.default(5);
var BN_SIX5 = new import_bn64.default(6);
var BN_SEVEN5 = new import_bn64.default(7);
var BN_EIGHT5 = new import_bn64.default(8);
var BN_NINE5 = new import_bn64.default(9);
var BN_TEN5 = new import_bn64.default(10);
var BN_HUNDRED5 = new import_bn64.default(100);
var BN_THOUSAND5 = new import_bn64.default(1e3);
var BN_MILLION5 = new import_bn64.default(1e6);
var BN_BILLION5 = new import_bn64.default(1e9);
var BN_QUINTILL5 = BN_BILLION5.mul(BN_BILLION5);
var BN_MAX_INTEGER5 = new import_bn64.default(Number.MAX_SAFE_INTEGER);
var BN_SQRT_MAX_INTEGER5 = new import_bn64.default(94906265);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/toBn.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/bigInt.js
init_shim();
function isBigInt5(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/toBn.js
function bnToBn5(value) {
  return value ? import_bn64.default.isBN(value) ? value : isHex6(value) ? hexToBn5(value.toString()) : isBigInt5(value) ? new import_bn64.default(value.toString()) : isToBn5(value) ? value.toBn() : isToBigInt5(value) ? new import_bn64.default(value.toBigInt().toString()) : new import_bn64.default(value) : new import_bn64.default(0);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/sqrt.js
function bnSqrt5(value) {
  const n = bnToBn5(value);
  if (n.isNeg()) {
    throw new Error("square root of negative numbers is not supported");
  }
  if (n.lte(BN_MAX_INTEGER5)) {
    return new import_bn64.default(~~Math.sqrt(n.toNumber()));
  }
  let x0 = BN_SQRT_MAX_INTEGER5.clone();
  while (true) {
    const x1 = n.div(x0).iadd(x0).ishrn(1);
    if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE5))) {
      return x0;
    }
    x0 = x1;
  }
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/toHex.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/toU8a.js
init_shim();
var DEFAULT_OPTS2 = { bitLength: -1, isLe: true, isNegative: false };
function bnToU8a6(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS2) {
  const valueBn = bnToBn5(value);
  const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);
  if (!value) {
    return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(byteLength);
  }
  const output5 = new Uint8Array(byteLength);
  const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
  output5.set(bn.toArray(isLe ? "le" : "be", byteLength), 0);
  return output5;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/buffer/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/buffer/toU8a.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/compact/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/compact/addLength.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/compact/toU8a.js
init_shim();
var MAX_U85 = BN_TWO5.pow(new import_bn64.default(8 - 2)).isub(BN_ONE5);
var MAX_U165 = BN_TWO5.pow(new import_bn64.default(16 - 2)).isub(BN_ONE5);
var MAX_U325 = BN_TWO5.pow(new import_bn64.default(32 - 2)).isub(BN_ONE5);
var BL_162 = { bitLength: 16 };
var BL_322 = { bitLength: 32 };
function compactToU8a5(value) {
  const bn = bnToBn5(value);
  if (bn.lte(MAX_U85)) {
    return new Uint8Array([bn.toNumber() << 2]);
  } else if (bn.lte(MAX_U165)) {
    return bnToU8a6(bn.shln(2).iadd(BN_ONE5), BL_162);
  } else if (bn.lte(MAX_U325)) {
    return bnToU8a6(bn.shln(2).iadd(BN_TWO5), BL_322);
  }
  const u8a9 = bnToU8a6(bn);
  let length = u8a9.length;
  while (u8a9[length - 1] === 0) {
    length--;
  }
  if (length < 4) {
    throw new Error("Invalid length, previous checks match anything less than 2^30");
  }
  return u8aConcatStrict6([
    // subtract 4 as minimum (also catered for in decoding)
    new Uint8Array([(length - 4 << 2) + 3]),
    u8a9.subarray(0, length)
  ]);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/compact/addLength.js
function compactAddLength6(input) {
  return u8aConcatStrict6([
    compactToU8a5(input.length),
    input
  ]);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/compact/fromU8a.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/compact/stripLength.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/extractTime.js
init_shim();
var MIN_MS5 = 60 * 1e3;
var HR_MS5 = MIN_MS5 * 60;
var DAY_MS5 = HR_MS5 * 24;

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/float/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/float/toU8a.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/format/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/format/formatBalance.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/boolean.js
init_shim();
function isBoolean5(value) {
  return typeof value === "boolean";
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/format/formatDecimal.js
init_shim();
var NUMBER_REGEX5 = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal5(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX5) : value.match(NUMBER_REGEX5);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/format/getSeparator.js
init_shim();
function getSeparator5(locale) {
  return {
    decimal: 0.1.toLocaleString(locale).substring(1, 2),
    thousand: 1e3.toLocaleString(locale).substring(1, 2)
  };
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/format/si.js
init_shim();
var SI_MID5 = 8;
var SI5 = [
  { power: -24, text: "yocto", value: "y" },
  { power: -21, text: "zepto", value: "z" },
  { power: -18, text: "atto", value: "a" },
  { power: -15, text: "femto", value: "f" },
  { power: -12, text: "pico", value: "p" },
  { power: -9, text: "nano", value: "n" },
  { power: -6, text: "micro", value: "µ" },
  { power: -3, text: "milli", value: "m" },
  { power: 0, text: "Unit", value: "-" },
  { power: 3, text: "Kilo", value: "k" },
  { power: 6, text: "Mill", value: "M" },
  { power: 9, text: "Bill", value: "B" },
  { power: 12, text: "Tril", value: "T" },
  { power: 15, text: "Peta", value: "P" },
  { power: 18, text: "Exa", value: "E" },
  { power: 21, text: "Zeta", value: "Z" },
  { power: 24, text: "Yotta", value: "Y" }
];
function findSi5(type) {
  for (let i = 0, count2 = SI5.length; i < count2; i++) {
    if (SI5[i].value === type) {
      return SI5[i];
    }
  }
  return SI5[SI_MID5];
}
function calcSi5(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi5(forceUnit);
  }
  const siDefIndex = SI_MID5 - 1 + Math.ceil((text.length - decimals) / 3);
  return SI5[siDefIndex] || SI5[siDefIndex < 0 ? 0 : SI5.length - 1];
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/format/formatBalance.js
var DEFAULT_DECIMALS5 = 0;
var DEFAULT_UNIT5 = SI5[SI_MID5].text;
var defaultDecimals5 = DEFAULT_DECIMALS5;
var defaultUnit5 = DEFAULT_UNIT5;
function _formatBalance5(input, { decimals = defaultDecimals5, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text = bnToBn5(input).toString();
  if (text.length === 0 || text === "0") {
    return "0";
  }
  let sign2 = "";
  if (text[0].startsWith("-")) {
    sign2 = "-";
    text = text.substring(1);
  }
  const si = calcSi5(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text.substring(0, mid);
  let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean5(withUnit) ? SI5[SI_MID5].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator5(locale);
  return `${sign2}${formatDecimal5(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
var formatBalance5 = _formatBalance5;
formatBalance5.calcSi = (text, decimals = defaultDecimals5) => calcSi5(text, decimals);
formatBalance5.findSi = findSi5;
formatBalance5.getDefaults = () => {
  return {
    decimals: defaultDecimals5,
    unit: defaultUnit5
  };
};
formatBalance5.getOptions = (decimals = defaultDecimals5) => {
  return SI5.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
};
formatBalance5.setDefaults = ({ decimals, unit }) => {
  defaultDecimals5 = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals5;
  defaultUnit5 = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit5;
  SI5[SI_MID5].text = defaultUnit5;
};

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/format/formatDate.js
init_shim();
function zeroPad2(value) {
  return value.toString().padStart(2, "0");
}
function formatDate5(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad2(date.getMonth() + 1);
  const day = zeroPad2(date.getDate());
  const hour = zeroPad2(date.getHours());
  const minute = zeroPad2(date.getMinutes());
  const second = zeroPad2(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/format/formatElapsed.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/format/formatNumber.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/addPrefix.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/hasPrefix.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/fixLength.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/toNumber.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/toString.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/array.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/ascii.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/string.js
init_shim();
function isString6(value) {
  return typeof value === "string" || value instanceof String;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/childClass.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/class.js
init_shim();
var isClass5 = isOnFunction5("isPrototypeOf", "hasOwnProperty");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/codec.js
init_shim();
var checkCodec5 = isOnObject5("toHex", "toHuman", "toU8a");
var checkRegistry5 = isOnObject5("get");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/compact.js
init_shim();
var isCompact5 = isOnObject5("toBigInt", "toBn", "toNumber", "unwrap");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/error.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/instanceOf.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/ip.js
init_shim();
var v45 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
var v6s5 = "[a-fA-F\\d]{1,4}";
var v65 = `
(?:
(?:${v6s5}:){7}(?:${v6s5}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6s5}:){6}(?:${v45}|:${v6s5}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6s5}:){5}(?::${v45}|(?::${v6s5}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6s5}:){4}(?:(?::${v6s5}){0,1}:${v45}|(?::${v6s5}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6s5}:){3}(?:(?::${v6s5}){0,2}:${v45}|(?::${v6s5}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6s5}:){2}(?:(?::${v6s5}){0,3}:${v45}|(?::${v6s5}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6s5}:){1}(?:(?::${v6s5}){0,4}:${v45}|(?::${v6s5}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6s5}){0,5}:${v45}|(?::${v6s5}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
var v46Exact5 = new RegExp(`(?:^${v45}$)|(?:^${v65}$)`);
var v4exact5 = new RegExp(`^${v45}$`);
var v6exact5 = new RegExp(`^${v65}$`);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/jsonObject.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/stringify.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/null.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/number.js
init_shim();
function isNumber6(value) {
  return typeof value === "number";
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/observable.js
init_shim();
var isObservable6 = isOn5("next");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/promise.js
init_shim();
var isPromise6 = isOnObject5("catch", "then");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/riscv.js
init_shim();
var ELF_MAGIC5 = new Uint8Array([127, 69, 76, 70]);
var PVM_MAGIC5 = new Uint8Array([80, 86, 77, 0]);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/testChain.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/undefined.js
init_shim();
function isUndefined5(value) {
  return value === void 0;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/utf8.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/wasm.js
init_shim();
var WASM_MAGIC5 = new Uint8Array([0, 97, 115, 109]);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/lazy.js
init_shim();
function lazyMethod2(result, item, creator, getName, index = 0) {
  const name = getName ? getName(item, index) : item.toString();
  let value;
  Object.defineProperty(result, name, {
    // This allows for re-configuration with the embedded defineProperty below
    // and ensures that on tested browsers and Node, it _will_ be redefined
    // and thus short-circuited for future access
    configurable: true,
    enumerable: true,
    // Use a function here, we don't want to capture the outer this, i.e.
    // don't use arrow functions in this context since we have a this inside
    get: function() {
      if (value === void 0) {
        value = creator(item, index, this);
        try {
          Object.defineProperty(this, name, { value });
        } catch {
        }
      }
      return value;
    }
  });
}
function lazyMethods2(result, items, creator, getName) {
  for (let i = 0, count2 = items.length; i < count2; i++) {
    lazyMethod2(result, items[i], creator, getName, i);
  }
  return result;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/logger.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/noop.js
init_shim();
function noop6() {
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/logger.js
var logTo2 = {
  debug: "log",
  error: "error",
  log: "log",
  warn: "warn"
};
function formatOther2(value) {
  if (value && isObject5(value) && value.constructor === Object) {
    const result = {};
    for (const [k, v] of Object.entries(value)) {
      result[k] = loggerFormat2(v);
    }
    return result;
  }
  return value;
}
function loggerFormat2(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat2);
  } else if (isBn5(value)) {
    return value.toString();
  } else if (isU8a6(value) || isBuffer5(value)) {
    return u8aToHex6(u8aToU8a6(value));
  }
  return formatOther2(value);
}
function formatWithLength2(maxLength) {
  return (v) => {
    if (maxLength <= 0) {
      return v;
    }
    const r = `${v}`;
    return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
  };
}
function apply2(log, type, values, maxSize = -1) {
  if (values.length === 1 && isFunction7(values[0])) {
    const fnResult = values[0]();
    return apply2(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }
  console[logTo2[log]](formatDate5(/* @__PURE__ */ new Date()), type, ...values.map(loggerFormat2).map(formatWithLength2(maxSize)));
}
function isDebugOn2(e, type) {
  return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff2(e, type) {
  return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
}
function getDebugFlag2(env, type) {
  let flag = false;
  for (const e of env) {
    if (isDebugOn2(e, type)) {
      flag = true;
    } else if (isDebugOff2(e, type)) {
      flag = false;
    }
  }
  return flag;
}
function parseEnv2(type) {
  var _a, _b, _c, _d;
  const maxSize = parseInt(((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b["DEBUG_MAX"]) || "-1", 10);
  return [
    getDebugFlag2((((_d = (_c = xglobal.process) == null ? void 0 : _c.env) == null ? void 0 : _d["DEBUG"]) || "").toLowerCase().split(","), type),
    isNaN(maxSize) ? -1 : maxSize
  ];
}
function logger3(origin) {
  const type = `${origin.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv2(origin.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply2("debug", type, values, maxSize) : noop6,
    error: (...values) => apply2("error", type, values),
    log: (...values) => apply2("log", type, values),
    noop: noop6,
    warn: (...values) => apply2("warn", type, values)
  };
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/memoize.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/nextTick.js
init_shim();
function nextTick2(onExec, onError) {
  setTimeout(() => {
    Promise.resolve().then(() => {
      onExec();
    }).catch((error) => {
      if (onError) {
        onError(error);
      } else {
        console.error(error);
      }
    });
  }, 0);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/number/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/number/toHex.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/number/toU8a.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/object/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/object/clear.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/object/copy.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/object/spread.js
init_shim();
function objectSpread5(dest, ...sources) {
  for (let i = 0, count2 = sources.length; i < count2; i++) {
    const src = sources[i];
    if (src) {
      if (typeof src.entries === "function") {
        for (const [key, value] of src.entries()) {
          dest[key] = value;
        }
      } else {
        Object.assign(dest, src);
      }
    }
  }
  return dest;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/object/entries.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/object/keys.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/object/property.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/object/values.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/promisify.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/string/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/string/camelCase.js
init_shim();
var CC_TO_UP5 = new Array(256);
var CC_TO_LO5 = new Array(256);
for (let i = 0, count2 = CC_TO_UP5.length; i < count2; i++) {
  CC_TO_LO5[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP5[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps5(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP5[w.charCodeAt(w.length - 1)];
}
function converter9(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count2 = parts.length; i < count2; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps5), i);
    }
    return result;
  };
}
var stringCamelCase6 = converter9((w, i) => (i ? CC_TO_UP5[w.charCodeAt(0)] : CC_TO_LO5[w.charCodeAt(0)]) + w.slice(1));
var stringPascalCase5 = converter9((w) => CC_TO_UP5[w.charCodeAt(0)] + w.slice(1));

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/string/lowerFirst.js
init_shim();
function converter10(map2) {
  return (value) => value ? map2[value.charCodeAt(0)] + value.slice(1) : "";
}
var stringLowerFirst5 = converter10(CC_TO_LO5);
var stringUpperFirst5 = converter10(CC_TO_UP5);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/string/shorten.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/string/toHex.js
init_shim();
function stringToHex5(value) {
  return u8aToHex6(stringToU8a6(value));
}

// node_modules/@polkadot/api-derive/detectOther.js
init_shim();
var detectOther_default13 = [];

// node_modules/@polkadot/api-derive/detectPackage.js
detectPackage6(packageInfo22, null, detectOther_default13);

// node_modules/@polkadot/api-derive/bundle.js
init_shim();

// node_modules/@polkadot/api-derive/util/index.js
init_shim();

// node_modules/@polkadot/rpc-core/index.js
init_shim();

// node_modules/@polkadot/rpc-core/detectPackage.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/detectPackage.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/detectOther.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/x-textdecoder/browser.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/x-textdecoder/fallback.js
init_shim();
var TextDecoder12 = class {
  constructor(encoding) {
    __publicField(this, "__encoding");
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count2 = value.length; i < count2; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/x-textdecoder/packageInfo.js
init_shim();
var packageInfo34 = { name: "@polkadot/x-textdecoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder13 = extractGlobal("TextDecoder", TextDecoder12);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/x-textencoder/browser.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/x-textencoder/fallback.js
init_shim();
var TextEncoder12 = class {
  encode(value) {
    const count2 = value.length;
    const u8a9 = new Uint8Array(count2);
    for (let i = 0; i < count2; i++) {
      u8a9[i] = value.charCodeAt(i);
    }
    return u8a9;
  }
};

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/x-textencoder/packageInfo.js
init_shim();
var packageInfo35 = { name: "@polkadot/x-textencoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder13 = extractGlobal("TextEncoder", TextEncoder12);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/detectOther.js
var detectOther_default14 = [packageInfo34, packageInfo35];

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/packageInfo.js
init_shim();
var packageInfo36 = { name: "@polkadot/util", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/versionDetect.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/function.js
init_shim();
function isFunction8(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/versionDetect.js
var DEDUPE6 = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
var POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG6 = "POLKADOTJS_DISABLE_ESM_CJS_WARNING";
function getEntry6(name) {
  const _global = xglobal;
  if (!_global.__polkadotjs) {
    _global.__polkadotjs = {};
  }
  if (!_global.__polkadotjs[name]) {
    _global.__polkadotjs[name] = [];
  }
  return _global.__polkadotjs[name];
}
function formatDisplay6(all3, fmt) {
  let max2 = 0;
  for (let i = 0, count2 = all3.length; i < count2; i++) {
    max2 = Math.max(max2, all3[i].version.length);
  }
  return all3.map((d) => `	${fmt(d.version.padEnd(max2), d).join("	")}`).join("\n");
}
function formatInfo6(version, { name }) {
  return [
    version,
    name
  ];
}
function formatVersion6(version, { path, type }) {
  let extracted;
  if (path && path.length >= 5) {
    const nmIndex = path.indexOf("node_modules");
    extracted = nmIndex === -1 ? path : path.substring(nmIndex);
  } else {
    extracted = "<unknown>";
  }
  return [
    `${`${type || ""}`.padStart(3)} ${version}`,
    extracted
  ];
}
function getPath6(infoPath, pathOrFn) {
  if (infoPath) {
    return infoPath;
  } else if (isFunction8(pathOrFn)) {
    try {
      return pathOrFn() || "";
    } catch {
      return "";
    }
  }
  return pathOrFn || "";
}
function warn6(pre, all3, fmt) {
  console.warn(`${pre}
${DEDUPE6}
${formatDisplay6(all3, fmt)}`);
}
function detectPackage7({ name, path, type, version }, pathOrFn, deps = []) {
  var _a, _b;
  if (!name.startsWith("@polkadot")) {
    throw new Error(`Invalid package descriptor ${name}`);
  }
  const entry = getEntry6(name);
  entry.push({ path: getPath6(path, pathOrFn), type, version });
  const entriesSameVersion = entry.every((e) => e.version === version);
  const esmCjsWarningDisabled = ((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG6]) === "1";
  const multipleEntries = entry.length !== 1;
  const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;
  if (multipleEntries && !disableWarnings) {
    warn6(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion6);
  } else {
    const mismatches = deps.filter((d) => d && d.version !== version);
    if (mismatches.length) {
      warn6(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo6);
    }
  }
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/detectPackage.js
detectPackage7(packageInfo36, null, detectOther_default14);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bundle.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/array/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/array/chunk.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/array/filter.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/array/flatten.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/array/range.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/array/shuffle.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/array/unzip.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/array/zip.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/assert.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bi/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bi/min.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bi/helpers.js
init_shim();
function createCmp6(cmp) {
  return (...items) => {
    const count2 = items.length;
    if (count2 === 0) {
      throw new Error("Must provide one or more arguments");
    }
    let result = items[0];
    for (let i = 1; i < count2; i++) {
      if (cmp(items[i], result)) {
        result = items[i];
      }
    }
    return result;
  };
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bi/min.js
var nMax6 = createCmp6((a, b) => a > b);
var nMin6 = createCmp6((a, b) => a < b);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bi/sqrt.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bi/consts.js
init_shim();
var _0n16 = BigInt2(0);
var _1n16 = BigInt2(1);
var _2n13 = BigInt2(2);
var _3n8 = BigInt2(3);
var _4n8 = BigInt2(4);
var _5n8 = BigInt2(5);
var _6n6 = BigInt2(6);
var _7n8 = BigInt2(7);
var _8n8 = BigInt2(8);
var _9n7 = BigInt2(9);
var _10n7 = BigInt2(10);
var _100n6 = BigInt2(100);
var _1000n6 = BigInt2(1e3);
var _1Mn6 = BigInt2(1e6);
var _1Bn6 = BigInt2(1e9);
var _1Qn6 = _1Bn6 * _1Bn6;
var _2pow53n6 = BigInt2(Number.MAX_SAFE_INTEGER);
var _sqrt2pow53n6 = BigInt2(94906265);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bi/toBigInt.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/hex/toBigInt.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/toBigInt.js
init_shim();
var U8_MAX6 = BigInt2(256);
var U16_MAX6 = BigInt2(256 * 256);
var U64_MAX6 = BigInt2("0x10000000000000000");

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/hex/toU8a.js
init_shim();
var CHR6 = "0123456789abcdef";
var U811 = new Uint8Array(256);
var U1611 = new Uint8Array(256 * 256);
for (let i = 0, count2 = CHR6.length; i < count2; i++) {
  U811[CHR6[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U811[CHR6[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1611[s | j] = U811[i] << 4 | U811[j];
  }
}
function hexToU8a7(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U1611[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/bn.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bn/bn.js
init_shim();
var import_bn77 = __toESM(require_bn6(), 1);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/bn.js
function isBn6(value) {
  return import_bn77.default.isBN(value);
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/hex.js
init_shim();
var REGEX_HEX_PREFIXED6 = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX6 = /^[\da-fA-F]+$/;
function isHex7(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED6.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/toBigInt.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/helpers.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/object.js
init_shim();
function isObject6(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/helpers.js
function isOn6(...fns) {
  return (value) => (isObject6(value) || isFunction8(value)) && fns.every((f) => isFunction8(value[f]));
}
function isOnFunction6(...fns) {
  return (value) => isFunction8(value) && fns.every((f) => isFunction8(value[f]));
}
function isOnObject6(...fns) {
  return (value) => isObject6(value) && fns.every((f) => isFunction8(value[f]));
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt6 = isOn6("toBigInt");

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/toBn.js
init_shim();
var isToBn6 = isOn6("toBn");

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bi/toHex.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/cmp.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/toU8a.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/buffer.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/has.js
init_shim();
var hasBigInt7 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer6 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess6 = typeof xglobal.process === "object";

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/buffer.js
function isBuffer6(value) {
  return hasBuffer6 && !!value && isFunction8(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/u8a.js
init_shim();
function isU8a7(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/string/toU8a.js
init_shim();
var encoder6 = new TextEncoder13();
function stringToU8a7(value) {
  return value ? encoder6.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a7(value) {
  return isU8a7(value) ? isBuffer6(value) ? new Uint8Array(value) : value : isHex7(value) ? hexToU8a7(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a7(value);
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/concat.js
init_shim();
function u8aConcat7(...list) {
  const count2 = list.length;
  const u8as = new Array(count2);
  let length = 0;
  for (let i = 0; i < count2; i++) {
    u8as[i] = u8aToU8a7(list[i]);
    length += u8as[i].length;
  }
  return u8aConcatStrict7(u8as, length);
}
function u8aConcatStrict7(u8as, length = 0) {
  const count2 = u8as.length;
  let offset = 0;
  if (!length) {
    for (let i = 0; i < count2; i++) {
      length += u8as[i].length;
    }
  }
  const result = new Uint8Array(length);
  for (let i = 0; i < count2; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }
  return result;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/empty.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/eq.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/fixLength.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/sorted.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/toBn.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/toBuffer.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/toFloat.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/toHex.js
init_shim();
var U812 = new Array(256);
var U1612 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U812[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1612[s | j] = U812[i] + U812[j];
  }
}
function hex4(value, result) {
  const mod5 = value.length % 2 | 0;
  const length = value.length - mod5 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U1612[value[i] << 8 | value[i + 1]];
  }
  if (mod5) {
    result += U812[value[length] | 0];
  }
  return result;
}
function u8aToHex7(value, bitLength = -1, isPrefixed = true) {
  const empty3 = isPrefixed ? "0x" : "";
  if (!(value == null ? void 0 : value.length)) {
    return empty3;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex4(value.subarray(0, length / 2), empty3)}…${hex4(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex4(value, empty3);
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/toNumber.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/toString.js
init_shim();
var decoder6 = new TextDecoder13("utf-8");

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/wrap.js
init_shim();
var U8A_WRAP_ETHEREUM6 = u8aToU8a7("Ethereum Signed Message:\n");
var U8A_WRAP_PREFIX6 = u8aToU8a7("<Bytes>");
var U8A_WRAP_POSTFIX6 = u8aToU8a7("</Bytes>");
var WRAP_LEN6 = U8A_WRAP_PREFIX6.length + U8A_WRAP_POSTFIX6.length;

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bi/toU8a.js
init_shim();
var DIV6 = BigInt2(256);
var NEG_MASK6 = BigInt2(255);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bn/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bn/fromHex.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/hex/toBn.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/hex/stripPrefix.js
init_shim();
function hexStripPrefix6(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED6.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX6.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/hex/toBn.js
function hexToBn6(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn77.default(0);
  }
  const stripped = hexStripPrefix6(value);
  const bn = new import_bn77.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bn/min.js
init_shim();
var bnMax6 = createCmp6((a, b) => a.gt(b));
var bnMin6 = createCmp6((a, b) => a.lt(b));

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bn/sqrt.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bn/consts.js
init_shim();
var BN_ZERO6 = new import_bn77.default(0);
var BN_ONE6 = new import_bn77.default(1);
var BN_TWO6 = new import_bn77.default(2);
var BN_THREE6 = new import_bn77.default(3);
var BN_FOUR6 = new import_bn77.default(4);
var BN_FIVE6 = new import_bn77.default(5);
var BN_SIX6 = new import_bn77.default(6);
var BN_SEVEN6 = new import_bn77.default(7);
var BN_EIGHT6 = new import_bn77.default(8);
var BN_NINE6 = new import_bn77.default(9);
var BN_TEN6 = new import_bn77.default(10);
var BN_HUNDRED6 = new import_bn77.default(100);
var BN_THOUSAND6 = new import_bn77.default(1e3);
var BN_MILLION6 = new import_bn77.default(1e6);
var BN_BILLION6 = new import_bn77.default(1e9);
var BN_QUINTILL6 = BN_BILLION6.mul(BN_BILLION6);
var BN_MAX_INTEGER6 = new import_bn77.default(Number.MAX_SAFE_INTEGER);
var BN_SQRT_MAX_INTEGER6 = new import_bn77.default(94906265);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bn/toBn.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/bigInt.js
init_shim();
function isBigInt6(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bn/toBn.js
function bnToBn6(value) {
  return value ? import_bn77.default.isBN(value) ? value : isHex7(value) ? hexToBn6(value.toString()) : isBigInt6(value) ? new import_bn77.default(value.toString()) : isToBn6(value) ? value.toBn() : isToBigInt6(value) ? new import_bn77.default(value.toBigInt().toString()) : new import_bn77.default(value) : new import_bn77.default(0);
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bn/toHex.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bn/toU8a.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/buffer/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/buffer/toU8a.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/compact/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/compact/addLength.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/compact/toU8a.js
init_shim();
var MAX_U86 = BN_TWO6.pow(new import_bn77.default(8 - 2)).isub(BN_ONE6);
var MAX_U166 = BN_TWO6.pow(new import_bn77.default(16 - 2)).isub(BN_ONE6);
var MAX_U326 = BN_TWO6.pow(new import_bn77.default(32 - 2)).isub(BN_ONE6);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/compact/fromU8a.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/compact/stripLength.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/extractTime.js
init_shim();
var MIN_MS6 = 60 * 1e3;
var HR_MS6 = MIN_MS6 * 60;
var DAY_MS6 = HR_MS6 * 24;

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/float/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/float/toU8a.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/format/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/format/formatBalance.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/boolean.js
init_shim();
function isBoolean6(value) {
  return typeof value === "boolean";
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/format/formatDecimal.js
init_shim();
var NUMBER_REGEX6 = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal6(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX6) : value.match(NUMBER_REGEX6);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/format/getSeparator.js
init_shim();
function getSeparator6(locale) {
  return {
    decimal: 0.1.toLocaleString(locale).substring(1, 2),
    thousand: 1e3.toLocaleString(locale).substring(1, 2)
  };
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/format/si.js
init_shim();
var SI_MID6 = 8;
var SI6 = [
  { power: -24, text: "yocto", value: "y" },
  { power: -21, text: "zepto", value: "z" },
  { power: -18, text: "atto", value: "a" },
  { power: -15, text: "femto", value: "f" },
  { power: -12, text: "pico", value: "p" },
  { power: -9, text: "nano", value: "n" },
  { power: -6, text: "micro", value: "µ" },
  { power: -3, text: "milli", value: "m" },
  { power: 0, text: "Unit", value: "-" },
  { power: 3, text: "Kilo", value: "k" },
  { power: 6, text: "Mill", value: "M" },
  { power: 9, text: "Bill", value: "B" },
  { power: 12, text: "Tril", value: "T" },
  { power: 15, text: "Peta", value: "P" },
  { power: 18, text: "Exa", value: "E" },
  { power: 21, text: "Zeta", value: "Z" },
  { power: 24, text: "Yotta", value: "Y" }
];
function findSi6(type) {
  for (let i = 0, count2 = SI6.length; i < count2; i++) {
    if (SI6[i].value === type) {
      return SI6[i];
    }
  }
  return SI6[SI_MID6];
}
function calcSi6(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi6(forceUnit);
  }
  const siDefIndex = SI_MID6 - 1 + Math.ceil((text.length - decimals) / 3);
  return SI6[siDefIndex] || SI6[siDefIndex < 0 ? 0 : SI6.length - 1];
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/format/formatBalance.js
var DEFAULT_DECIMALS6 = 0;
var DEFAULT_UNIT6 = SI6[SI_MID6].text;
var defaultDecimals6 = DEFAULT_DECIMALS6;
var defaultUnit6 = DEFAULT_UNIT6;
function _formatBalance6(input, { decimals = defaultDecimals6, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text = bnToBn6(input).toString();
  if (text.length === 0 || text === "0") {
    return "0";
  }
  let sign2 = "";
  if (text[0].startsWith("-")) {
    sign2 = "-";
    text = text.substring(1);
  }
  const si = calcSi6(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text.substring(0, mid);
  let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean6(withUnit) ? SI6[SI_MID6].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator6(locale);
  return `${sign2}${formatDecimal6(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
var formatBalance6 = _formatBalance6;
formatBalance6.calcSi = (text, decimals = defaultDecimals6) => calcSi6(text, decimals);
formatBalance6.findSi = findSi6;
formatBalance6.getDefaults = () => {
  return {
    decimals: defaultDecimals6,
    unit: defaultUnit6
  };
};
formatBalance6.getOptions = (decimals = defaultDecimals6) => {
  return SI6.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
};
formatBalance6.setDefaults = ({ decimals, unit }) => {
  defaultDecimals6 = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals6;
  defaultUnit6 = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit6;
  SI6[SI_MID6].text = defaultUnit6;
};

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/format/formatDate.js
init_shim();
function zeroPad3(value) {
  return value.toString().padStart(2, "0");
}
function formatDate6(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad3(date.getMonth() + 1);
  const day = zeroPad3(date.getDate());
  const hour = zeroPad3(date.getHours());
  const minute = zeroPad3(date.getMinutes());
  const second = zeroPad3(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/format/formatElapsed.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/format/formatNumber.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/hex/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/hex/addPrefix.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/hex/hasPrefix.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/hex/fixLength.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/hex/toNumber.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/hex/toString.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/array.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/ascii.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/string.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/childClass.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/class.js
init_shim();
var isClass6 = isOnFunction6("isPrototypeOf", "hasOwnProperty");

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/codec.js
init_shim();
var checkCodec6 = isOnObject6("toHex", "toHuman", "toU8a");
var checkRegistry6 = isOnObject6("get");

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/compact.js
init_shim();
var isCompact6 = isOnObject6("toBigInt", "toBn", "toNumber", "unwrap");

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/error.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/instanceOf.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/ip.js
init_shim();
var v46 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
var v6s6 = "[a-fA-F\\d]{1,4}";
var v66 = `
(?:
(?:${v6s6}:){7}(?:${v6s6}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6s6}:){6}(?:${v46}|:${v6s6}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6s6}:){5}(?::${v46}|(?::${v6s6}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6s6}:){4}(?:(?::${v6s6}){0,1}:${v46}|(?::${v6s6}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6s6}:){3}(?:(?::${v6s6}){0,2}:${v46}|(?::${v6s6}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6s6}:){2}(?:(?::${v6s6}){0,3}:${v46}|(?::${v6s6}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6s6}:){1}(?:(?::${v6s6}){0,4}:${v46}|(?::${v6s6}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6s6}){0,5}:${v46}|(?::${v6s6}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
var v46Exact6 = new RegExp(`(?:^${v46}$)|(?:^${v66}$)`);
var v4exact6 = new RegExp(`^${v46}$`);
var v6exact6 = new RegExp(`^${v66}$`);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/jsonObject.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/stringify.js
init_shim();
function replacer2(_, v) {
  return isBigInt6(v) ? v.toString() : v;
}
function stringify6(value, space) {
  return JSON.stringify(value, replacer2, space);
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/null.js
init_shim();
function isNull6(value) {
  return value === null;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/number.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/observable.js
init_shim();
var isObservable7 = isOn6("next");

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/promise.js
init_shim();
var isPromise7 = isOnObject6("catch", "then");

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/riscv.js
init_shim();
var ELF_MAGIC6 = new Uint8Array([127, 69, 76, 70]);
var PVM_MAGIC6 = new Uint8Array([80, 86, 77, 0]);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/testChain.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/undefined.js
init_shim();
function isUndefined6(value) {
  return value === void 0;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/utf8.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/wasm.js
init_shim();
var WASM_MAGIC6 = new Uint8Array([0, 97, 115, 109]);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/lazy.js
init_shim();
function lazyMethod3(result, item, creator, getName, index = 0) {
  const name = getName ? getName(item, index) : item.toString();
  let value;
  Object.defineProperty(result, name, {
    // This allows for re-configuration with the embedded defineProperty below
    // and ensures that on tested browsers and Node, it _will_ be redefined
    // and thus short-circuited for future access
    configurable: true,
    enumerable: true,
    // Use a function here, we don't want to capture the outer this, i.e.
    // don't use arrow functions in this context since we have a this inside
    get: function() {
      if (value === void 0) {
        value = creator(item, index, this);
        try {
          Object.defineProperty(this, name, { value });
        } catch {
        }
      }
      return value;
    }
  });
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/logger.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/noop.js
init_shim();
function noop7() {
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/logger.js
var logTo3 = {
  debug: "log",
  error: "error",
  log: "log",
  warn: "warn"
};
function formatOther3(value) {
  if (value && isObject6(value) && value.constructor === Object) {
    const result = {};
    for (const [k, v] of Object.entries(value)) {
      result[k] = loggerFormat3(v);
    }
    return result;
  }
  return value;
}
function loggerFormat3(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat3);
  } else if (isBn6(value)) {
    return value.toString();
  } else if (isU8a7(value) || isBuffer6(value)) {
    return u8aToHex7(u8aToU8a7(value));
  }
  return formatOther3(value);
}
function formatWithLength3(maxLength) {
  return (v) => {
    if (maxLength <= 0) {
      return v;
    }
    const r = `${v}`;
    return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
  };
}
function apply3(log, type, values, maxSize = -1) {
  if (values.length === 1 && isFunction8(values[0])) {
    const fnResult = values[0]();
    return apply3(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }
  console[logTo3[log]](formatDate6(/* @__PURE__ */ new Date()), type, ...values.map(loggerFormat3).map(formatWithLength3(maxSize)));
}
function isDebugOn3(e, type) {
  return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff3(e, type) {
  return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
}
function getDebugFlag3(env, type) {
  let flag = false;
  for (const e of env) {
    if (isDebugOn3(e, type)) {
      flag = true;
    } else if (isDebugOff3(e, type)) {
      flag = false;
    }
  }
  return flag;
}
function parseEnv3(type) {
  var _a, _b, _c, _d;
  const maxSize = parseInt(((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b["DEBUG_MAX"]) || "-1", 10);
  return [
    getDebugFlag3((((_d = (_c = xglobal.process) == null ? void 0 : _c.env) == null ? void 0 : _d["DEBUG"]) || "").toLowerCase().split(","), type),
    isNaN(maxSize) ? -1 : maxSize
  ];
}
function logger4(origin) {
  const type = `${origin.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv3(origin.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply3("debug", type, values, maxSize) : noop7,
    error: (...values) => apply3("error", type, values),
    log: (...values) => apply3("log", type, values),
    noop: noop7,
    warn: (...values) => apply3("warn", type, values)
  };
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/memoize.js
init_shim();
function defaultGetId() {
  return "none";
}
function memoize(fn, { getInstanceId = defaultGetId } = {}) {
  const cache = {};
  const memoized = (...args) => {
    const stringParams = stringify6(args);
    const instanceId = getInstanceId();
    if (!cache[instanceId]) {
      cache[instanceId] = {};
    }
    if (cache[instanceId][stringParams] === void 0) {
      cache[instanceId][stringParams] = fn(...args);
    }
    return cache[instanceId][stringParams];
  };
  memoized.unmemoize = (...args) => {
    var _a;
    const stringParams = stringify6(args);
    const instanceId = getInstanceId();
    if (((_a = cache[instanceId]) == null ? void 0 : _a[stringParams]) !== void 0) {
      delete cache[instanceId][stringParams];
    }
  };
  return memoized;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/nextTick.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/number/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/number/toHex.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/number/toU8a.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/object/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/object/clear.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/object/copy.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/object/spread.js
init_shim();
function objectSpread6(dest, ...sources) {
  for (let i = 0, count2 = sources.length; i < count2; i++) {
    const src = sources[i];
    if (src) {
      if (typeof src.entries === "function") {
        for (const [key, value] of src.entries()) {
          dest[key] = value;
        }
      } else {
        Object.assign(dest, src);
      }
    }
  }
  return dest;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/object/entries.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/object/keys.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/object/property.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/object/values.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/promisify.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/string/index.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/string/camelCase.js
init_shim();
var CC_TO_UP6 = new Array(256);
var CC_TO_LO6 = new Array(256);
for (let i = 0, count2 = CC_TO_UP6.length; i < count2; i++) {
  CC_TO_LO6[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP6[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps6(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP6[w.charCodeAt(w.length - 1)];
}
function converter11(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count2 = parts.length; i < count2; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps6), i);
    }
    return result;
  };
}
var stringCamelCase7 = converter11((w, i) => (i ? CC_TO_UP6[w.charCodeAt(0)] : CC_TO_LO6[w.charCodeAt(0)]) + w.slice(1));
var stringPascalCase6 = converter11((w) => CC_TO_UP6[w.charCodeAt(0)] + w.slice(1));

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/string/lowerFirst.js
init_shim();
function converter12(map2) {
  return (value) => value ? map2[value.charCodeAt(0)] + value.slice(1) : "";
}
var stringLowerFirst6 = converter12(CC_TO_LO6);
var stringUpperFirst6 = converter12(CC_TO_UP6);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/string/shorten.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/string/toHex.js
init_shim();

// node_modules/@polkadot/rpc-core/detectOther.js
init_shim();

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/rpc-provider/packageInfo.js
init_shim();
var packageInfo37 = { name: "@polkadot/rpc-provider", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.10.1" };

// node_modules/@polkadot/rpc-core/detectOther.js
var detectOther_default15 = [packageInfo37, packageInfo7];

// node_modules/@polkadot/rpc-core/detectPackage.js
detectPackage7(packageInfo13, null, detectOther_default15);

// node_modules/@polkadot/rpc-core/bundle.js
init_shim();

// node_modules/@polkadot/types/index.js
init_shim();

// node_modules/@polkadot/types/detectPackage.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/detectPackage.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/detectOther.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/x-textdecoder/browser.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/x-textdecoder/fallback.js
init_shim();
var TextDecoder14 = class {
  constructor(encoding) {
    __publicField(this, "__encoding");
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count2 = value.length; i < count2; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/types/node_modules/@polkadot/x-textdecoder/packageInfo.js
init_shim();
var packageInfo38 = { name: "@polkadot/x-textdecoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types/node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder15 = extractGlobal("TextDecoder", TextDecoder14);

// node_modules/@polkadot/types/node_modules/@polkadot/x-textencoder/browser.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/x-textencoder/fallback.js
init_shim();
var TextEncoder14 = class {
  encode(value) {
    const count2 = value.length;
    const u8a9 = new Uint8Array(count2);
    for (let i = 0; i < count2; i++) {
      u8a9[i] = value.charCodeAt(i);
    }
    return u8a9;
  }
};

// node_modules/@polkadot/types/node_modules/@polkadot/x-textencoder/packageInfo.js
init_shim();
var packageInfo39 = { name: "@polkadot/x-textencoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder15 = extractGlobal("TextEncoder", TextEncoder14);

// node_modules/@polkadot/types/node_modules/@polkadot/util/detectOther.js
var detectOther_default16 = [packageInfo38, packageInfo39];

// node_modules/@polkadot/types/node_modules/@polkadot/util/packageInfo.js
init_shim();
var packageInfo40 = { name: "@polkadot/util", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types/node_modules/@polkadot/util/versionDetect.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/function.js
init_shim();
function isFunction9(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/versionDetect.js
var DEDUPE7 = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
var POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG7 = "POLKADOTJS_DISABLE_ESM_CJS_WARNING";
function getEntry7(name) {
  const _global = xglobal;
  if (!_global.__polkadotjs) {
    _global.__polkadotjs = {};
  }
  if (!_global.__polkadotjs[name]) {
    _global.__polkadotjs[name] = [];
  }
  return _global.__polkadotjs[name];
}
function formatDisplay7(all3, fmt) {
  let max2 = 0;
  for (let i = 0, count2 = all3.length; i < count2; i++) {
    max2 = Math.max(max2, all3[i].version.length);
  }
  return all3.map((d) => `	${fmt(d.version.padEnd(max2), d).join("	")}`).join("\n");
}
function formatInfo7(version, { name }) {
  return [
    version,
    name
  ];
}
function formatVersion7(version, { path, type }) {
  let extracted;
  if (path && path.length >= 5) {
    const nmIndex = path.indexOf("node_modules");
    extracted = nmIndex === -1 ? path : path.substring(nmIndex);
  } else {
    extracted = "<unknown>";
  }
  return [
    `${`${type || ""}`.padStart(3)} ${version}`,
    extracted
  ];
}
function getPath7(infoPath, pathOrFn) {
  if (infoPath) {
    return infoPath;
  } else if (isFunction9(pathOrFn)) {
    try {
      return pathOrFn() || "";
    } catch {
      return "";
    }
  }
  return pathOrFn || "";
}
function warn7(pre, all3, fmt) {
  console.warn(`${pre}
${DEDUPE7}
${formatDisplay7(all3, fmt)}`);
}
function detectPackage8({ name, path, type, version }, pathOrFn, deps = []) {
  var _a, _b;
  if (!name.startsWith("@polkadot")) {
    throw new Error(`Invalid package descriptor ${name}`);
  }
  const entry = getEntry7(name);
  entry.push({ path: getPath7(path, pathOrFn), type, version });
  const entriesSameVersion = entry.every((e) => e.version === version);
  const esmCjsWarningDisabled = ((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG7]) === "1";
  const multipleEntries = entry.length !== 1;
  const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;
  if (multipleEntries && !disableWarnings) {
    warn7(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion7);
  } else {
    const mismatches = deps.filter((d) => d && d.version !== version);
    if (mismatches.length) {
      warn7(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo7);
    }
  }
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/detectPackage.js
detectPackage8(packageInfo40, null, detectOther_default16);

// node_modules/@polkadot/types/node_modules/@polkadot/util/bundle.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/array/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/array/chunk.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/array/filter.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/array/flatten.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/array/range.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/array/shuffle.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/array/unzip.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/array/zip.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/assert.js
init_shim();
function assert3(condition, message) {
  if (!condition) {
    throw new Error(isFunction9(message) ? message() : message);
  }
}
function assertReturn3(value, message) {
  assert3(value !== void 0 && value !== null, message);
  return value;
}
function assertUnreachable(x) {
  throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/bi/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/bi/min.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/bi/helpers.js
init_shim();
function createCmp7(cmp) {
  return (...items) => {
    const count2 = items.length;
    if (count2 === 0) {
      throw new Error("Must provide one or more arguments");
    }
    let result = items[0];
    for (let i = 1; i < count2; i++) {
      if (cmp(items[i], result)) {
        result = items[i];
      }
    }
    return result;
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/bi/min.js
var nMax7 = createCmp7((a, b) => a > b);
var nMin7 = createCmp7((a, b) => a < b);

// node_modules/@polkadot/types/node_modules/@polkadot/util/bi/sqrt.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/bi/consts.js
init_shim();
var _0n17 = BigInt2(0);
var _1n17 = BigInt2(1);
var _2n14 = BigInt2(2);
var _3n9 = BigInt2(3);
var _4n9 = BigInt2(4);
var _5n9 = BigInt2(5);
var _6n7 = BigInt2(6);
var _7n9 = BigInt2(7);
var _8n9 = BigInt2(8);
var _9n8 = BigInt2(9);
var _10n8 = BigInt2(10);
var _100n7 = BigInt2(100);
var _1000n7 = BigInt2(1e3);
var _1Mn7 = BigInt2(1e6);
var _1Bn7 = BigInt2(1e9);
var _1Qn7 = _1Bn7 * _1Bn7;
var _2pow53n7 = BigInt2(Number.MAX_SAFE_INTEGER);
var _sqrt2pow53n7 = BigInt2(94906265);

// node_modules/@polkadot/types/node_modules/@polkadot/util/bi/toBigInt.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/toBigInt.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/toBigInt.js
init_shim();
var U8_MAX7 = BigInt2(256);
var U16_MAX7 = BigInt2(256 * 256);
var U64_MAX7 = BigInt2("0x10000000000000000");

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/toU8a.js
init_shim();
var CHR7 = "0123456789abcdef";
var U813 = new Uint8Array(256);
var U1613 = new Uint8Array(256 * 256);
for (let i = 0, count2 = CHR7.length; i < count2; i++) {
  U813[CHR7[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U813[CHR7[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1613[s | j] = U813[i] << 4 | U813[j];
  }
}
function hexToU8a8(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U1613[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/bn.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/bn.js
init_shim();
var import_bn90 = __toESM(require_bn7(), 1);

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/bn.js
function isBn7(value) {
  return import_bn90.default.isBN(value);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/hex.js
init_shim();
var REGEX_HEX_PREFIXED7 = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX7 = /^[\da-fA-F]+$/;
function isHex8(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED7.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/toBigInt.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/helpers.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/object.js
init_shim();
function isObject7(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/helpers.js
function isOn7(...fns) {
  return (value) => (isObject7(value) || isFunction9(value)) && fns.every((f) => isFunction9(value[f]));
}
function isOnFunction7(...fns) {
  return (value) => isFunction9(value) && fns.every((f) => isFunction9(value[f]));
}
function isOnObject7(...fns) {
  return (value) => isObject7(value) && fns.every((f) => isFunction9(value[f]));
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt7 = isOn7("toBigInt");

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/toBn.js
init_shim();
var isToBn7 = isOn7("toBn");

// node_modules/@polkadot/types/node_modules/@polkadot/util/bi/toHex.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/cmp.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/toU8a.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/buffer.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/has.js
init_shim();
var hasBigInt8 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer7 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess7 = typeof xglobal.process === "object";

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/buffer.js
function isBuffer7(value) {
  return hasBuffer7 && !!value && isFunction9(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/u8a.js
init_shim();
function isU8a8(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/string/toU8a.js
init_shim();
var encoder7 = new TextEncoder15();
function stringToU8a8(value) {
  return value ? encoder7.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a8(value) {
  return isU8a8(value) ? isBuffer7(value) ? new Uint8Array(value) : value : isHex8(value) ? hexToU8a8(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a8(value);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/concat.js
init_shim();
function u8aConcat8(...list) {
  const count2 = list.length;
  const u8as = new Array(count2);
  let length = 0;
  for (let i = 0; i < count2; i++) {
    u8as[i] = u8aToU8a8(list[i]);
    length += u8as[i].length;
  }
  return u8aConcatStrict8(u8as, length);
}
function u8aConcatStrict8(u8as, length = 0) {
  const count2 = u8as.length;
  let offset = 0;
  if (!length) {
    for (let i = 0; i < count2; i++) {
      length += u8as[i].length;
    }
  }
  const result = new Uint8Array(length);
  for (let i = 0; i < count2; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }
  return result;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/empty.js
init_shim();
function u8aEmpty8(value) {
  const len = value.length | 0;
  for (let i = 0; i < len; i++) {
    if (value[i] | 0) {
      return false;
    }
  }
  return true;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/eq.js
init_shim();
function u8aEq8(a, b) {
  const u8aa = u8aToU8a8(a);
  const u8ab = u8aToU8a8(b);
  if (u8aa.length === u8ab.length) {
    const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
    const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
    const mod5 = u8aa.length % 4 | 0;
    const length = u8aa.length - mod5 | 0;
    for (let i = 0; i < length; i += 4) {
      if (dvA.getUint32(i) !== dvB.getUint32(i)) {
        return false;
      }
    }
    for (let i = length, count2 = u8aa.length; i < count2; i++) {
      if (u8aa[i] !== u8ab[i]) {
        return false;
      }
    }
    return true;
  }
  return false;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/fixLength.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/sorted.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/toBn.js
init_shim();
function u8aToBn7(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count2 = value.length;
  if (isNegative && count2 && value[count2 - 1] & 128) {
    switch (count2) {
      case 0:
        return new import_bn90.default(0);
      case 1:
        return new import_bn90.default((value[0] ^ 255) * -1 - 1);
      case 2:
        return new import_bn90.default((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
      case 3:
        return new import_bn90.default((value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1);
      case 4:
        return new import_bn90.default((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
      case 5:
        return new import_bn90.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1);
      case 6:
        return new import_bn90.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1);
      default:
        return new import_bn90.default(value, "le").fromTwos(count2 * 8);
    }
  }
  switch (count2) {
    case 0:
      return new import_bn90.default(0);
    case 1:
      return new import_bn90.default(value[0]);
    case 2:
      return new import_bn90.default(value[0] + (value[1] << 8));
    case 3:
      return new import_bn90.default(value[0] + (value[1] << 8) + (value[2] << 16));
    case 4:
      return new import_bn90.default(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
    case 5:
      return new import_bn90.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216);
    case 6:
      return new import_bn90.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
    default:
      return new import_bn90.default(value, "le");
  }
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/toBuffer.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/toFloat.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/toHex.js
init_shim();
var U814 = new Array(256);
var U1614 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U814[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1614[s | j] = U814[i] + U814[j];
  }
}
function hex5(value, result) {
  const mod5 = value.length % 2 | 0;
  const length = value.length - mod5 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U1614[value[i] << 8 | value[i + 1]];
  }
  if (mod5) {
    result += U814[value[length] | 0];
  }
  return result;
}
function u8aToHex8(value, bitLength = -1, isPrefixed = true) {
  const empty3 = isPrefixed ? "0x" : "";
  if (!(value == null ? void 0 : value.length)) {
    return empty3;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex5(value.subarray(0, length / 2), empty3)}…${hex5(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex5(value, empty3);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/toNumber.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/toString.js
init_shim();
var decoder7 = new TextDecoder15("utf-8");
function u8aToString8(value) {
  return value ? decoder7.decode(value) : "";
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/wrap.js
init_shim();
var U8A_WRAP_ETHEREUM7 = u8aToU8a8("Ethereum Signed Message:\n");
var U8A_WRAP_PREFIX7 = u8aToU8a8("<Bytes>");
var U8A_WRAP_POSTFIX7 = u8aToU8a8("</Bytes>");
var WRAP_LEN7 = U8A_WRAP_PREFIX7.length + U8A_WRAP_POSTFIX7.length;

// node_modules/@polkadot/types/node_modules/@polkadot/util/bi/toU8a.js
init_shim();
var DIV7 = BigInt2(256);
var NEG_MASK7 = BigInt2(255);

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/fromHex.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/toBn.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/stripPrefix.js
init_shim();
function hexStripPrefix7(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED7.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX7.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/toBn.js
function hexToBn7(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn90.default(0);
  }
  const stripped = hexStripPrefix7(value);
  const bn = new import_bn90.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/min.js
init_shim();
var bnMax7 = createCmp7((a, b) => a.gt(b));
var bnMin7 = createCmp7((a, b) => a.lt(b));

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/sqrt.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/consts.js
init_shim();
var BN_ZERO7 = new import_bn90.default(0);
var BN_ONE7 = new import_bn90.default(1);
var BN_TWO7 = new import_bn90.default(2);
var BN_THREE7 = new import_bn90.default(3);
var BN_FOUR7 = new import_bn90.default(4);
var BN_FIVE7 = new import_bn90.default(5);
var BN_SIX7 = new import_bn90.default(6);
var BN_SEVEN7 = new import_bn90.default(7);
var BN_EIGHT7 = new import_bn90.default(8);
var BN_NINE7 = new import_bn90.default(9);
var BN_TEN7 = new import_bn90.default(10);
var BN_HUNDRED7 = new import_bn90.default(100);
var BN_THOUSAND7 = new import_bn90.default(1e3);
var BN_MILLION7 = new import_bn90.default(1e6);
var BN_BILLION7 = new import_bn90.default(1e9);
var BN_QUINTILL7 = BN_BILLION7.mul(BN_BILLION7);
var BN_MAX_INTEGER7 = new import_bn90.default(Number.MAX_SAFE_INTEGER);
var BN_SQRT_MAX_INTEGER7 = new import_bn90.default(94906265);

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/toBn.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/bigInt.js
init_shim();
function isBigInt7(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/toBn.js
function bnToBn7(value) {
  return value ? import_bn90.default.isBN(value) ? value : isHex8(value) ? hexToBn7(value.toString()) : isBigInt7(value) ? new import_bn90.default(value.toString()) : isToBn7(value) ? value.toBn() : isToBigInt7(value) ? new import_bn90.default(value.toBigInt().toString()) : new import_bn90.default(value) : new import_bn90.default(0);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/toHex.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/toU8a.js
init_shim();
var DEFAULT_OPTS3 = { bitLength: -1, isLe: true, isNegative: false };
function bnToU8a8(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS3) {
  const valueBn = bnToBn7(value);
  const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);
  if (!value) {
    return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(byteLength);
  }
  const output5 = new Uint8Array(byteLength);
  const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
  output5.set(bn.toArray(isLe ? "le" : "be", byteLength), 0);
  return output5;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/buffer/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/buffer/toU8a.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/compact/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/compact/addLength.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/compact/toU8a.js
init_shim();
var MAX_U87 = BN_TWO7.pow(new import_bn90.default(8 - 2)).isub(BN_ONE7);
var MAX_U167 = BN_TWO7.pow(new import_bn90.default(16 - 2)).isub(BN_ONE7);
var MAX_U327 = BN_TWO7.pow(new import_bn90.default(32 - 2)).isub(BN_ONE7);
var BL_163 = { bitLength: 16 };
var BL_323 = { bitLength: 32 };
function compactToU8a7(value) {
  const bn = bnToBn7(value);
  if (bn.lte(MAX_U87)) {
    return new Uint8Array([bn.toNumber() << 2]);
  } else if (bn.lte(MAX_U167)) {
    return bnToU8a8(bn.shln(2).iadd(BN_ONE7), BL_163);
  } else if (bn.lte(MAX_U327)) {
    return bnToU8a8(bn.shln(2).iadd(BN_TWO7), BL_323);
  }
  const u8a9 = bnToU8a8(bn);
  let length = u8a9.length;
  while (u8a9[length - 1] === 0) {
    length--;
  }
  if (length < 4) {
    throw new Error("Invalid length, previous checks match anything less than 2^30");
  }
  return u8aConcatStrict8([
    // subtract 4 as minimum (also catered for in decoding)
    new Uint8Array([(length - 4 << 2) + 3]),
    u8a9.subarray(0, length)
  ]);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/compact/addLength.js
function compactAddLength8(input) {
  return u8aConcatStrict8([
    compactToU8a7(input.length),
    input
  ]);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/compact/fromU8a.js
init_shim();
function compactFromU8a7(input) {
  const u8a9 = u8aToU8a8(input);
  switch (u8a9[0] & 3) {
    case 0:
      return [1, new import_bn90.default(u8a9[0] >>> 2)];
    case 1:
      return [2, new import_bn90.default(u8a9[0] + (u8a9[1] << 8) >>> 2)];
    case 2:
      return [4, new import_bn90.default(u8a9[0] + (u8a9[1] << 8) + (u8a9[2] << 16) + u8a9[3] * 16777216 >>> 2)];
    default: {
      const offset = (u8a9[0] >>> 2) + 5;
      switch (offset) {
        case 5:
          return [5, new import_bn90.default(u8a9[1] + (u8a9[2] << 8) + (u8a9[3] << 16) + u8a9[4] * 16777216)];
        case 6:
          return [6, new import_bn90.default(u8a9[1] + (u8a9[2] << 8) + (u8a9[3] << 16) + (u8a9[4] + (u8a9[5] << 8)) * 16777216)];
        case 7:
          return [7, new import_bn90.default(u8a9[1] + (u8a9[2] << 8) + (u8a9[3] << 16) + (u8a9[4] + (u8a9[5] << 8) + (u8a9[6] << 16)) * 16777216)];
        default:
          return [offset, u8aToBn7(u8a9.subarray(1, offset))];
      }
    }
  }
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/compact/stripLength.js
init_shim();
function compactStripLength7(input) {
  const [offset, length] = compactFromU8a7(input);
  const total = offset + length.toNumber();
  return [
    total,
    input.subarray(offset, total)
  ];
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/extractTime.js
init_shim();
var MIN_MS7 = 60 * 1e3;
var HR_MS7 = MIN_MS7 * 60;
var DAY_MS7 = HR_MS7 * 24;

// node_modules/@polkadot/types/node_modules/@polkadot/util/float/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/float/toU8a.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/formatBalance.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/boolean.js
init_shim();
function isBoolean7(value) {
  return typeof value === "boolean";
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/formatDecimal.js
init_shim();
var NUMBER_REGEX7 = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal7(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX7) : value.match(NUMBER_REGEX7);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/getSeparator.js
init_shim();
function getSeparator7(locale) {
  return {
    decimal: 0.1.toLocaleString(locale).substring(1, 2),
    thousand: 1e3.toLocaleString(locale).substring(1, 2)
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/si.js
init_shim();
var SI_MID7 = 8;
var SI7 = [
  { power: -24, text: "yocto", value: "y" },
  { power: -21, text: "zepto", value: "z" },
  { power: -18, text: "atto", value: "a" },
  { power: -15, text: "femto", value: "f" },
  { power: -12, text: "pico", value: "p" },
  { power: -9, text: "nano", value: "n" },
  { power: -6, text: "micro", value: "µ" },
  { power: -3, text: "milli", value: "m" },
  { power: 0, text: "Unit", value: "-" },
  { power: 3, text: "Kilo", value: "k" },
  { power: 6, text: "Mill", value: "M" },
  { power: 9, text: "Bill", value: "B" },
  { power: 12, text: "Tril", value: "T" },
  { power: 15, text: "Peta", value: "P" },
  { power: 18, text: "Exa", value: "E" },
  { power: 21, text: "Zeta", value: "Z" },
  { power: 24, text: "Yotta", value: "Y" }
];
function findSi7(type) {
  for (let i = 0, count2 = SI7.length; i < count2; i++) {
    if (SI7[i].value === type) {
      return SI7[i];
    }
  }
  return SI7[SI_MID7];
}
function calcSi7(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi7(forceUnit);
  }
  const siDefIndex = SI_MID7 - 1 + Math.ceil((text.length - decimals) / 3);
  return SI7[siDefIndex] || SI7[siDefIndex < 0 ? 0 : SI7.length - 1];
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/formatBalance.js
var DEFAULT_DECIMALS7 = 0;
var DEFAULT_UNIT7 = SI7[SI_MID7].text;
var defaultDecimals7 = DEFAULT_DECIMALS7;
var defaultUnit7 = DEFAULT_UNIT7;
function _formatBalance7(input, { decimals = defaultDecimals7, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text = bnToBn7(input).toString();
  if (text.length === 0 || text === "0") {
    return "0";
  }
  let sign2 = "";
  if (text[0].startsWith("-")) {
    sign2 = "-";
    text = text.substring(1);
  }
  const si = calcSi7(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text.substring(0, mid);
  let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean7(withUnit) ? SI7[SI_MID7].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator7(locale);
  return `${sign2}${formatDecimal7(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
var formatBalance7 = _formatBalance7;
formatBalance7.calcSi = (text, decimals = defaultDecimals7) => calcSi7(text, decimals);
formatBalance7.findSi = findSi7;
formatBalance7.getDefaults = () => {
  return {
    decimals: defaultDecimals7,
    unit: defaultUnit7
  };
};
formatBalance7.getOptions = (decimals = defaultDecimals7) => {
  return SI7.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
};
formatBalance7.setDefaults = ({ decimals, unit }) => {
  defaultDecimals7 = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals7;
  defaultUnit7 = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit7;
  SI7[SI_MID7].text = defaultUnit7;
};

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/formatDate.js
init_shim();
function zeroPad4(value) {
  return value.toString().padStart(2, "0");
}
function formatDate7(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad4(date.getMonth() + 1);
  const day = zeroPad4(date.getDate());
  const hour = zeroPad4(date.getHours());
  const minute = zeroPad4(date.getMinutes());
  const second = zeroPad4(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/formatElapsed.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/formatNumber.js
init_shim();
function formatNumber7(value, { locale = "en" } = {}) {
  const { thousand } = getSeparator7(locale);
  return formatDecimal7(bnToBn7(value).toString(), thousand);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/addPrefix.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/hasPrefix.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/fixLength.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/toNumber.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/toString.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/array.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/ascii.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/string.js
init_shim();
function isString8(value) {
  return typeof value === "string" || value instanceof String;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/childClass.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/class.js
init_shim();
var isClass7 = isOnFunction7("isPrototypeOf", "hasOwnProperty");

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/codec.js
init_shim();
var checkCodec7 = isOnObject7("toHex", "toHuman", "toU8a");
var checkRegistry7 = isOnObject7("get");
function isCodec7(value) {
  return checkCodec7(value) && checkRegistry7(value.registry);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/compact.js
init_shim();
var isCompact7 = isOnObject7("toBigInt", "toBn", "toNumber", "unwrap");

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/error.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/instanceOf.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/ip.js
init_shim();
var v47 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
var v6s7 = "[a-fA-F\\d]{1,4}";
var v67 = `
(?:
(?:${v6s7}:){7}(?:${v6s7}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6s7}:){6}(?:${v47}|:${v6s7}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6s7}:){5}(?::${v47}|(?::${v6s7}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6s7}:){4}(?:(?::${v6s7}){0,1}:${v47}|(?::${v6s7}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6s7}:){3}(?:(?::${v6s7}){0,2}:${v47}|(?::${v6s7}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6s7}:){2}(?:(?::${v6s7}){0,3}:${v47}|(?::${v6s7}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6s7}:){1}(?:(?::${v6s7}){0,4}:${v47}|(?::${v6s7}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6s7}){0,5}:${v47}|(?::${v6s7}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
var v46Exact7 = new RegExp(`(?:^${v47}$)|(?:^${v67}$)`);
var v4exact7 = new RegExp(`^${v47}$`);
var v6exact7 = new RegExp(`^${v67}$`);

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/jsonObject.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/stringify.js
init_shim();
function replacer3(_, v) {
  return isBigInt7(v) ? v.toString() : v;
}
function stringify7(value, space) {
  return JSON.stringify(value, replacer3, space);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/null.js
init_shim();
function isNull7(value) {
  return value === null;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/number.js
init_shim();
function isNumber8(value) {
  return typeof value === "number";
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/observable.js
init_shim();
var isObservable8 = isOn7("next");

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/promise.js
init_shim();
var isPromise8 = isOnObject7("catch", "then");

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/riscv.js
init_shim();
var ELF_MAGIC7 = new Uint8Array([127, 69, 76, 70]);
var PVM_MAGIC7 = new Uint8Array([80, 86, 77, 0]);

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/testChain.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/undefined.js
init_shim();
function isUndefined7(value) {
  return value === void 0;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/utf8.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/wasm.js
init_shim();
var WASM_MAGIC7 = new Uint8Array([0, 97, 115, 109]);

// node_modules/@polkadot/types/node_modules/@polkadot/util/lazy.js
init_shim();
function lazyMethod4(result, item, creator, getName, index = 0) {
  const name = getName ? getName(item, index) : item.toString();
  let value;
  Object.defineProperty(result, name, {
    // This allows for re-configuration with the embedded defineProperty below
    // and ensures that on tested browsers and Node, it _will_ be redefined
    // and thus short-circuited for future access
    configurable: true,
    enumerable: true,
    // Use a function here, we don't want to capture the outer this, i.e.
    // don't use arrow functions in this context since we have a this inside
    get: function() {
      if (value === void 0) {
        value = creator(item, index, this);
        try {
          Object.defineProperty(this, name, { value });
        } catch {
        }
      }
      return value;
    }
  });
}
function lazyMethods3(result, items, creator, getName) {
  for (let i = 0, count2 = items.length; i < count2; i++) {
    lazyMethod4(result, items[i], creator, getName, i);
  }
  return result;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/logger.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/noop.js
init_shim();
function noop8() {
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/logger.js
var logTo4 = {
  debug: "log",
  error: "error",
  log: "log",
  warn: "warn"
};
function formatOther4(value) {
  if (value && isObject7(value) && value.constructor === Object) {
    const result = {};
    for (const [k, v] of Object.entries(value)) {
      result[k] = loggerFormat4(v);
    }
    return result;
  }
  return value;
}
function loggerFormat4(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat4);
  } else if (isBn7(value)) {
    return value.toString();
  } else if (isU8a8(value) || isBuffer7(value)) {
    return u8aToHex8(u8aToU8a8(value));
  }
  return formatOther4(value);
}
function formatWithLength4(maxLength) {
  return (v) => {
    if (maxLength <= 0) {
      return v;
    }
    const r = `${v}`;
    return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
  };
}
function apply4(log, type, values, maxSize = -1) {
  if (values.length === 1 && isFunction9(values[0])) {
    const fnResult = values[0]();
    return apply4(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }
  console[logTo4[log]](formatDate7(/* @__PURE__ */ new Date()), type, ...values.map(loggerFormat4).map(formatWithLength4(maxSize)));
}
function isDebugOn4(e, type) {
  return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff4(e, type) {
  return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
}
function getDebugFlag4(env, type) {
  let flag = false;
  for (const e of env) {
    if (isDebugOn4(e, type)) {
      flag = true;
    } else if (isDebugOff4(e, type)) {
      flag = false;
    }
  }
  return flag;
}
function parseEnv4(type) {
  var _a, _b, _c, _d;
  const maxSize = parseInt(((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b["DEBUG_MAX"]) || "-1", 10);
  return [
    getDebugFlag4((((_d = (_c = xglobal.process) == null ? void 0 : _c.env) == null ? void 0 : _d["DEBUG"]) || "").toLowerCase().split(","), type),
    isNaN(maxSize) ? -1 : maxSize
  ];
}
function logger5(origin) {
  const type = `${origin.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv4(origin.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply4("debug", type, values, maxSize) : noop8,
    error: (...values) => apply4("error", type, values),
    log: (...values) => apply4("log", type, values),
    noop: noop8,
    warn: (...values) => apply4("warn", type, values)
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/memoize.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/nextTick.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/number/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/number/toHex.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/number/toU8a.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/object/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/object/clear.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/object/copy.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/object/spread.js
init_shim();
function objectSpread7(dest, ...sources) {
  for (let i = 0, count2 = sources.length; i < count2; i++) {
    const src = sources[i];
    if (src) {
      if (typeof src.entries === "function") {
        for (const [key, value] of src.entries()) {
          dest[key] = value;
        }
      } else {
        Object.assign(dest, src);
      }
    }
  }
  return dest;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/object/entries.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/object/keys.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/object/property.js
init_shim();
function objectProperty7(that, key, getter, getName, index = 0) {
  const name = getName ? getName(key, index) : key;
  if (!(name in that)) {
    Object.defineProperty(that, name, {
      enumerable: true,
      // Unlike in lazy, we always call into the upper function, i.e. this method
      // does not cache old values (it is expected to be used for dynamic values)
      get: function() {
        return getter(key, index, this);
      }
    });
  }
}
function objectProperties7(that, keys2, getter, getName) {
  for (let i = 0, count2 = keys2.length; i < count2; i++) {
    objectProperty7(that, keys2[i], getter, getName, i);
  }
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/object/values.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/promisify.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/string/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/string/camelCase.js
init_shim();
var CC_TO_UP7 = new Array(256);
var CC_TO_LO7 = new Array(256);
for (let i = 0, count2 = CC_TO_UP7.length; i < count2; i++) {
  CC_TO_LO7[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP7[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps7(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP7[w.charCodeAt(w.length - 1)];
}
function converter13(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count2 = parts.length; i < count2; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps7), i);
    }
    return result;
  };
}
var stringCamelCase8 = converter13((w, i) => (i ? CC_TO_UP7[w.charCodeAt(0)] : CC_TO_LO7[w.charCodeAt(0)]) + w.slice(1));
var stringPascalCase7 = converter13((w) => CC_TO_UP7[w.charCodeAt(0)] + w.slice(1));

// node_modules/@polkadot/types/node_modules/@polkadot/util/string/lowerFirst.js
init_shim();
function converter14(map2) {
  return (value) => value ? map2[value.charCodeAt(0)] + value.slice(1) : "";
}
var stringLowerFirst7 = converter14(CC_TO_LO7);
var stringUpperFirst7 = converter14(CC_TO_UP7);

// node_modules/@polkadot/types/node_modules/@polkadot/util/string/shorten.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util/string/toHex.js
init_shim();

// node_modules/@polkadot/types/detectOther.js
init_shim();

// node_modules/@polkadot/types-create/packageInfo.js
init_shim();
var packageInfo41 = { name: "@polkadot/types-create", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.10.1" };

// node_modules/@polkadot/types/detectOther.js
var detectOther_default17 = [packageInfo8, packageInfo41];

// node_modules/@polkadot/types/detectPackage.js
detectPackage8(packageInfo7, null, detectOther_default17);

// node_modules/@polkadot/types/bundle.js
init_shim();

// node_modules/@polkadot/types/interfaces/definitions.js
var definitions_exports = {};
__export(definitions_exports, {
  assetConversion: () => definitions_default4,
  assets: () => definitions_default5,
  attestations: () => definitions_default50,
  aura: () => definitions_default6,
  author: () => definitions_default66,
  authorship: () => definitions_default7,
  babe: () => definitions_default8,
  balances: () => definitions_default9,
  beefy: () => definitions_default10,
  benchmark: () => definitions_default11,
  blockbuilder: () => definitions_default12,
  bridges: () => definitions_default51,
  chain: () => definitions_default67,
  childstate: () => definitions_default68,
  claims: () => definitions_default52,
  collective: () => definitions_default13,
  consensus: () => definitions_default14,
  contracts: () => definitions_default15,
  contractsAbi: () => definitions_default60,
  crowdloan: () => definitions_default53,
  cumulus: () => definitions_default54,
  democracy: () => definitions_default16,
  dev: () => definitions_default17,
  discovery: () => definitions_default18,
  elections: () => definitions_default19,
  engine: () => definitions_default20,
  eth: () => definitions_default61,
  evm: () => definitions_default21,
  extrinsics: () => definitions_default22,
  finality: () => definitions_default55,
  fungibles: () => definitions_default23,
  genericAsset: () => definitions_default24,
  gilt: () => definitions_default25,
  grandpa: () => definitions_default26,
  identity: () => definitions_default27,
  imOnline: () => definitions_default28,
  lottery: () => definitions_default29,
  metadata: () => definitions_default,
  mmr: () => definitions_default30,
  nfts: () => definitions_default31,
  nimbus: () => definitions_default62,
  nompools: () => definitions_default32,
  offchain: () => definitions_default69,
  offences: () => definitions_default33,
  ormlOracle: () => definitions_default63,
  ormlTokens: () => definitions_default64,
  parachains: () => definitions_default56,
  payment: () => definitions_default70,
  poll: () => definitions_default57,
  pow: () => definitions_default34,
  proxy: () => definitions_default35,
  purchase: () => definitions_default58,
  recovery: () => definitions_default36,
  rpc: () => definitions_default65,
  runtime: () => definitions_default2,
  scaleInfo: () => definitions_default3,
  scheduler: () => definitions_default37,
  session: () => definitions_default38,
  society: () => definitions_default39,
  staking: () => definitions_default40,
  state: () => definitions_default71,
  support: () => definitions_default41,
  syncstate: () => definitions_default42,
  system: () => definitions_default43,
  treasury: () => definitions_default44,
  txpayment: () => definitions_default45,
  txqueue: () => definitions_default46,
  uniques: () => definitions_default47,
  utility: () => definitions_default48,
  vesting: () => definitions_default49,
  xcm: () => definitions_default59
});
init_shim();

// node_modules/@polkadot/types/interfaces/essentials.js
init_shim();

// node_modules/@polkadot/types/interfaces/metadata/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/metadata/hashers.js
init_shim();
var AllHashers = {
  Blake2_128: null,
  Blake2_256: null,
  Blake2_128Concat: null,
  Twox128: null,
  Twox256: null,
  Twox64Concat: null,
  // new in v11
  Identity: null
};

// node_modules/@polkadot/types/interfaces/metadata/runtime.js
init_shim();
var META_V1_TO_V2 = {
  metadata: {
    description: "Returns the metadata of a runtime",
    params: [],
    type: "OpaqueMetadata"
  }
};
var runtime = {
  Metadata: [
    {
      methods: {
        metadata_at_version: {
          description: "Returns the metadata at a given version.",
          params: [
            {
              name: "version",
              type: "u32"
            }
          ],
          type: "Option<OpaqueMetadata>"
        },
        metadata_versions: {
          description: "Returns the supported metadata versions.",
          params: [],
          type: "Vec<u32>"
        },
        ...META_V1_TO_V2
      },
      version: 2
    },
    {
      methods: {
        ...META_V1_TO_V2
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/metadata/v9.js
init_shim();
var v9 = {
  // v9
  ErrorMetadataV9: {
    name: "Text",
    docs: "Vec<Text>"
  },
  EventMetadataV9: {
    name: "Text",
    args: "Vec<Type>",
    docs: "Vec<Text>"
  },
  FunctionArgumentMetadataV9: {
    name: "Text",
    type: "Type"
  },
  FunctionMetadataV9: {
    name: "Text",
    args: "Vec<FunctionArgumentMetadataV9>",
    docs: "Vec<Text>"
  },
  MetadataV9: {
    modules: "Vec<ModuleMetadataV9>"
  },
  ModuleConstantMetadataV9: {
    name: "Text",
    type: "Type",
    value: "Bytes",
    docs: "Vec<Text>"
  },
  ModuleMetadataV9: {
    name: "Text",
    storage: "Option<StorageMetadataV9>",
    calls: "Option<Vec<FunctionMetadataV9>>",
    events: "Option<Vec<EventMetadataV9>>",
    constants: "Vec<ModuleConstantMetadataV9>",
    errors: "Vec<ErrorMetadataV9>"
  },
  StorageEntryMetadataV9: {
    name: "Text",
    modifier: "StorageEntryModifierV9",
    type: "StorageEntryTypeV9",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryModifierV9: {
    _enum: ["Optional", "Default", "Required"]
  },
  StorageEntryTypeV9: {
    _enum: {
      Plain: "Type",
      Map: {
        hasher: "StorageHasherV9",
        key: "Type",
        value: "Type",
        linked: "bool"
      },
      DoubleMap: {
        hasher: "StorageHasherV9",
        key1: "Type",
        key2: "Type",
        value: "Type",
        key2Hasher: "StorageHasherV9"
      }
    }
  },
  StorageHasherV9: {
    _enum: {
      Blake2_128: null,
      Blake2_256: null,
      Twox128: null,
      Twox256: null,
      Twox64Concat: null
    }
  },
  StorageMetadataV9: {
    prefix: "Text",
    items: "Vec<StorageEntryMetadataV9>"
  }
};

// node_modules/@polkadot/types/interfaces/metadata/v10.js
init_shim();
var v10 = {
  // v10
  ErrorMetadataV10: "ErrorMetadataV9",
  EventMetadataV10: "EventMetadataV9",
  FunctionArgumentMetadataV10: "FunctionArgumentMetadataV9",
  FunctionMetadataV10: "FunctionMetadataV9",
  MetadataV10: {
    modules: "Vec<ModuleMetadataV10>"
  },
  ModuleConstantMetadataV10: "ModuleConstantMetadataV9",
  ModuleMetadataV10: {
    name: "Text",
    storage: "Option<StorageMetadataV10>",
    calls: "Option<Vec<FunctionMetadataV10>>",
    events: "Option<Vec<EventMetadataV10>>",
    constants: "Vec<ModuleConstantMetadataV10>",
    errors: "Vec<ErrorMetadataV10>"
  },
  StorageEntryModifierV10: "StorageEntryModifierV9",
  StorageEntryMetadataV10: {
    name: "Text",
    modifier: "StorageEntryModifierV10",
    type: "StorageEntryTypeV10",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryTypeV10: {
    _enum: {
      Plain: "Type",
      Map: {
        hasher: "StorageHasherV10",
        key: "Type",
        value: "Type",
        linked: "bool"
      },
      DoubleMap: {
        hasher: "StorageHasherV10",
        key1: "Type",
        key2: "Type",
        value: "Type",
        key2Hasher: "StorageHasherV10"
      }
    }
  },
  StorageMetadataV10: {
    prefix: "Text",
    items: "Vec<StorageEntryMetadataV10>"
  },
  StorageHasherV10: {
    _enum: {
      Blake2_128: null,
      Blake2_256: null,
      Blake2_128Concat: null,
      Twox128: null,
      Twox256: null,
      Twox64Concat: null
    }
  }
};

// node_modules/@polkadot/types/interfaces/metadata/v11.js
init_shim();
var v11 = {
  // v11
  ErrorMetadataV11: "ErrorMetadataV10",
  EventMetadataV11: "EventMetadataV10",
  ExtrinsicMetadataV11: {
    version: "u8",
    signedExtensions: "Vec<Text>"
  },
  FunctionArgumentMetadataV11: "FunctionArgumentMetadataV10",
  FunctionMetadataV11: "FunctionMetadataV10",
  MetadataV11: {
    modules: "Vec<ModuleMetadataV11>",
    extrinsic: "ExtrinsicMetadataV11"
  },
  ModuleConstantMetadataV11: "ModuleConstantMetadataV10",
  ModuleMetadataV11: {
    name: "Text",
    storage: "Option<StorageMetadataV11>",
    calls: "Option<Vec<FunctionMetadataV11>>",
    events: "Option<Vec<EventMetadataV11>>",
    constants: "Vec<ModuleConstantMetadataV11>",
    errors: "Vec<ErrorMetadataV11>"
  },
  StorageEntryModifierV11: "StorageEntryModifierV10",
  StorageEntryMetadataV11: {
    name: "Text",
    modifier: "StorageEntryModifierV11",
    type: "StorageEntryTypeV11",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryTypeV11: {
    _enum: {
      Plain: "Type",
      Map: {
        hasher: "StorageHasherV11",
        key: "Type",
        value: "Type",
        linked: "bool"
      },
      DoubleMap: {
        hasher: "StorageHasherV11",
        key1: "Type",
        key2: "Type",
        value: "Type",
        key2Hasher: "StorageHasherV11"
      }
    }
  },
  StorageMetadataV11: {
    prefix: "Text",
    items: "Vec<StorageEntryMetadataV11>"
  },
  StorageHasherV11: {
    _enum: AllHashers
  }
};

// node_modules/@polkadot/types/interfaces/metadata/v12.js
init_shim();
var v12 = {
  // v12
  ErrorMetadataV12: "ErrorMetadataV11",
  EventMetadataV12: "EventMetadataV11",
  ExtrinsicMetadataV12: "ExtrinsicMetadataV11",
  FunctionArgumentMetadataV12: "FunctionArgumentMetadataV11",
  FunctionMetadataV12: "FunctionMetadataV11",
  MetadataV12: {
    modules: "Vec<ModuleMetadataV12>",
    extrinsic: "ExtrinsicMetadataV12"
  },
  ModuleConstantMetadataV12: "ModuleConstantMetadataV11",
  ModuleMetadataV12: {
    name: "Text",
    storage: "Option<StorageMetadataV12>",
    calls: "Option<Vec<FunctionMetadataV12>>",
    events: "Option<Vec<EventMetadataV12>>",
    constants: "Vec<ModuleConstantMetadataV12>",
    errors: "Vec<ErrorMetadataV12>",
    index: "u8"
  },
  StorageEntryModifierV12: "StorageEntryModifierV11",
  StorageEntryMetadataV12: "StorageEntryMetadataV11",
  StorageEntryTypeV12: "StorageEntryTypeV11",
  StorageMetadataV12: "StorageMetadataV11",
  StorageHasherV12: "StorageHasherV11"
};

// node_modules/@polkadot/types/interfaces/metadata/v13.js
init_shim();
var v13 = {
  // v13
  ErrorMetadataV13: "ErrorMetadataV12",
  EventMetadataV13: "EventMetadataV12",
  ExtrinsicMetadataV13: "ExtrinsicMetadataV12",
  FunctionArgumentMetadataV13: "FunctionArgumentMetadataV12",
  FunctionMetadataV13: "FunctionMetadataV12",
  MetadataV13: {
    modules: "Vec<ModuleMetadataV13>",
    extrinsic: "ExtrinsicMetadataV13"
  },
  ModuleConstantMetadataV13: "ModuleConstantMetadataV12",
  ModuleMetadataV13: {
    name: "Text",
    storage: "Option<StorageMetadataV13>",
    calls: "Option<Vec<FunctionMetadataV13>>",
    events: "Option<Vec<EventMetadataV13>>",
    constants: "Vec<ModuleConstantMetadataV13>",
    errors: "Vec<ErrorMetadataV13>",
    index: "u8"
  },
  StorageEntryModifierV13: "StorageEntryModifierV12",
  StorageEntryMetadataV13: {
    name: "Text",
    modifier: "StorageEntryModifierV13",
    type: "StorageEntryTypeV13",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryTypeV13: {
    _enum: {
      Plain: "Type",
      Map: {
        hasher: "StorageHasherV13",
        key: "Type",
        value: "Type",
        linked: "bool"
      },
      DoubleMap: {
        hasher: "StorageHasherV13",
        key1: "Type",
        key2: "Type",
        value: "Type",
        key2Hasher: "StorageHasherV13"
      },
      NMap: {
        keyVec: "Vec<Type>",
        hashers: "Vec<StorageHasherV13>",
        value: "Type"
      }
    }
  },
  StorageMetadataV13: {
    prefix: "Text",
    items: "Vec<StorageEntryMetadataV13>"
  },
  StorageHasherV13: "StorageHasherV12"
};

// node_modules/@polkadot/types/interfaces/metadata/v14.js
init_shim();

// node_modules/@polkadot/types/interfaces/scaleInfo/v1.js
init_shim();
var Si1Variant = {
  name: "Text",
  fields: "Vec<Si1Field>",
  index: "u8",
  docs: "Vec<Text>"
};
var v1 = {
  Si1Field: {
    name: "Option<Text>",
    type: "Si1LookupTypeId",
    typeName: "Option<Text>",
    docs: "Vec<Text>"
  },
  Si1LookupTypeId: "Compact<u32>",
  Si1Path: "Si0Path",
  Si1Type: {
    path: "Si1Path",
    params: "Vec<Si1TypeParameter>",
    def: "Si1TypeDef",
    docs: "Vec<Text>"
  },
  Si1TypeDef: {
    _enum: {
      Composite: "Si1TypeDefComposite",
      Variant: "Si1TypeDefVariant",
      Sequence: "Si1TypeDefSequence",
      Array: "Si1TypeDefArray",
      Tuple: "Si1TypeDefTuple",
      Primitive: "Si1TypeDefPrimitive",
      Compact: "Si1TypeDefCompact",
      BitSequence: "Si1TypeDefBitSequence",
      // NOTE: This is specific to the implementation for pre-v14 metadata
      // compatibility (always keep this as the last entry in the enum)
      HistoricMetaCompat: "Type"
    }
  },
  Si1TypeDefArray: {
    len: "u32",
    type: "Si1LookupTypeId"
  },
  Si1TypeDefBitSequence: {
    bitStoreType: "Si1LookupTypeId",
    bitOrderType: "Si1LookupTypeId"
  },
  Si1TypeDefCompact: {
    type: "Si1LookupTypeId"
  },
  Si1TypeDefComposite: {
    fields: "Vec<Si1Field>"
  },
  Si1TypeDefPrimitive: "Si0TypeDefPrimitive",
  Si1TypeDefSequence: {
    type: "Si1LookupTypeId"
  },
  Si1TypeDefTuple: "Vec<Si1LookupTypeId>",
  Si1TypeParameter: {
    name: "Text",
    type: "Option<Si1LookupTypeId>"
  },
  Si1TypeDefVariant: {
    variants: "Vec<Si1Variant>"
  },
  Si1Variant
};

// node_modules/@polkadot/types/interfaces/metadata/v14.js
var v14 = {
  // registry
  PortableTypeV14: {
    id: "Si1LookupTypeId",
    type: "Si1Type"
  },
  // compatibility with earlier layouts, i.e. don't break previous users
  ErrorMetadataV14: {
    ...Si1Variant,
    args: "Vec<Type>"
  },
  EventMetadataV14: {
    ...Si1Variant,
    args: "Vec<Type>"
  },
  FunctionArgumentMetadataV14: {
    name: "Text",
    type: "Type",
    typeName: "Option<Type>"
  },
  FunctionMetadataV14: {
    ...Si1Variant,
    args: "Vec<FunctionArgumentMetadataV14>"
  },
  // V14
  ExtrinsicMetadataV14: {
    type: "SiLookupTypeId",
    version: "u8",
    signedExtensions: "Vec<SignedExtensionMetadataV14>"
  },
  MetadataV14: {
    lookup: "PortableRegistry",
    pallets: "Vec<PalletMetadataV14>",
    extrinsic: "ExtrinsicMetadataV14",
    type: "SiLookupTypeId"
  },
  PalletCallMetadataV14: {
    type: "SiLookupTypeId"
  },
  PalletConstantMetadataV14: {
    name: "Text",
    type: "SiLookupTypeId",
    value: "Bytes",
    docs: "Vec<Text>"
  },
  PalletErrorMetadataV14: {
    type: "SiLookupTypeId"
  },
  PalletEventMetadataV14: {
    type: "SiLookupTypeId"
  },
  PalletMetadataV14: {
    name: "Text",
    storage: "Option<PalletStorageMetadataV14>",
    calls: "Option<PalletCallMetadataV14>",
    events: "Option<PalletEventMetadataV14>",
    constants: "Vec<PalletConstantMetadataV14>",
    errors: "Option<PalletErrorMetadataV14>",
    index: "u8"
  },
  PalletStorageMetadataV14: {
    prefix: "Text",
    // NOTE: Renamed from entries
    items: "Vec<StorageEntryMetadataV14>"
  },
  SignedExtensionMetadataV14: {
    identifier: "Text",
    type: "SiLookupTypeId",
    additionalSigned: "SiLookupTypeId"
  },
  StorageEntryMetadataV14: {
    name: "Text",
    modifier: "StorageEntryModifierV14",
    type: "StorageEntryTypeV14",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryModifierV14: "StorageEntryModifierV13",
  StorageEntryTypeV14: {
    _enum: {
      Plain: "SiLookupTypeId",
      Map: {
        hashers: "Vec<StorageHasherV14>",
        key: "SiLookupTypeId",
        value: "SiLookupTypeId"
      }
    }
  },
  StorageHasherV14: "StorageHasherV13"
};

// node_modules/@polkadot/types/interfaces/metadata/v15.js
init_shim();
var v15 = {
  // new/adjusted in v15
  CustomMetadata15: {
    map: "BTreeMap<Text, CustomValueMetadata15>"
  },
  CustomValueMetadata15: {
    type: "SiLookupTypeId",
    value: "Bytes"
  },
  ExtrinsicMetadataV15: {
    version: "u8",
    addressType: "SiLookupTypeId",
    callType: "SiLookupTypeId",
    signatureType: "SiLookupTypeId",
    extraType: "SiLookupTypeId",
    signedExtensions: "Vec<SignedExtensionMetadataV14>"
  },
  OuterEnums15: {
    callType: "SiLookupTypeId",
    eventType: "SiLookupTypeId",
    errorType: "SiLookupTypeId"
  },
  PalletMetadataV15: {
    name: "Text",
    storage: "Option<PalletStorageMetadataV14>",
    calls: "Option<PalletCallMetadataV14>",
    events: "Option<PalletEventMetadataV14>",
    constants: "Vec<PalletConstantMetadataV14>",
    errors: "Option<PalletErrorMetadataV14>",
    index: "u8",
    docs: "Vec<Text>"
  },
  RuntimeApiMetadataV15: {
    name: "Text",
    methods: "Vec<RuntimeApiMethodMetadataV15>",
    docs: "Vec<Text>"
  },
  RuntimeApiMethodMetadataV15: {
    name: "Text",
    inputs: "Vec<RuntimeApiMethodParamMetadataV15>",
    output: "SiLookupTypeId",
    docs: "Vec<Text>"
  },
  RuntimeApiMethodParamMetadataV15: {
    name: "Text",
    type: "SiLookupTypeId"
  },
  // actual v15 definition
  MetadataV15: {
    lookup: "PortableRegistry",
    pallets: "Vec<PalletMetadataV15>",
    extrinsic: "ExtrinsicMetadataV15",
    type: "SiLookupTypeId",
    apis: "Vec<RuntimeApiMetadataV15>",
    outerEnums: "OuterEnums15",
    custom: "CustomMetadata15"
  }
};

// node_modules/@polkadot/types/interfaces/metadata/definitions.js
var definitions_default = {
  rpc: {},
  runtime,
  types: {
    // all known
    ...v9,
    ...v10,
    ...v11,
    ...v12,
    ...v13,
    ...v14,
    ...v15,
    // latest mappings
    // NOTE: For v15, we only added the runtime defintions,
    // hence latest for most pointing to the previous V14
    ErrorMetadataLatest: "ErrorMetadataV14",
    EventMetadataLatest: "EventMetadataV14",
    ExtrinsicMetadataLatest: "ExtrinsicMetadataV15",
    FunctionArgumentMetadataLatest: "FunctionArgumentMetadataV14",
    FunctionMetadataLatest: "FunctionMetadataV14",
    MetadataLatest: "MetadataV15",
    PalletCallMetadataLatest: "PalletCallMetadataV14",
    PalletConstantMetadataLatest: "PalletConstantMetadataV14",
    PalletErrorMetadataLatest: "PalletErrorMetadataV14",
    PalletEventMetadataLatest: "PalletEventMetadataV14",
    PalletMetadataLatest: "PalletMetadataV15",
    PalletStorageMetadataLatest: "PalletStorageMetadataV14",
    PortableType: "PortableTypeV14",
    RuntimeApiMetadataLatest: "RuntimeApiMetadataV15",
    SignedExtensionMetadataLatest: "SignedExtensionMetadataV14",
    StorageEntryMetadataLatest: "StorageEntryMetadataV14",
    StorageEntryModifierLatest: "StorageEntryModifierV14",
    StorageEntryTypeLatest: "StorageEntryTypeV14",
    StorageHasher: "StorageHasherV14",
    // additional types
    OpaqueMetadata: "Opaque<Bytes>",
    // the enum containing all the mappings
    MetadataAll: {
      _enum: {
        V0: "DoNotConstruct<MetadataV0>",
        V1: "DoNotConstruct<MetadataV1>",
        V2: "DoNotConstruct<MetadataV2>",
        V3: "DoNotConstruct<MetadataV3>",
        V4: "DoNotConstruct<MetadataV4>",
        V5: "DoNotConstruct<MetadataV5>",
        V6: "DoNotConstruct<MetadataV6>",
        V7: "DoNotConstruct<MetadataV7>",
        V8: "DoNotConstruct<MetadataV8>",
        // First version on Kusama in V9, dropping will be problematic
        V9: "MetadataV9",
        V10: "MetadataV10",
        V11: "MetadataV11",
        V12: "MetadataV12",
        V13: "MetadataV13",
        V14: "MetadataV14",
        V15: "MetadataV15"
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/runtime/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/runtime/runtime.js
init_shim();
var CORE_V1_TO_V4 = {
  execute_block: {
    description: "Execute the given block.",
    params: [
      {
        name: "block",
        type: "Block"
      }
    ],
    type: "Null"
  }
};
var CORE_V1_TO_V2 = {
  version: {
    description: "Returns the version of the runtime.",
    params: [],
    type: "RuntimeVersionPre3"
  }
};
var CORE_V2_TO_V4 = {
  initialize_block: {
    description: "Initialize a block with the given header.",
    params: [
      {
        name: "header",
        type: "Header"
      }
    ],
    type: "Null"
  }
};
var runtime2 = {
  Core: [
    {
      methods: {
        version: {
          description: "Returns the version of the runtime.",
          params: [],
          type: "RuntimeVersion"
        },
        ...CORE_V1_TO_V4,
        ...CORE_V2_TO_V4
      },
      version: 4
    },
    {
      methods: {
        version: {
          description: "Returns the version of the runtime.",
          params: [],
          type: "RuntimeVersionPre4"
        },
        ...CORE_V1_TO_V4,
        ...CORE_V2_TO_V4
      },
      version: 3
    },
    {
      methods: {
        ...CORE_V1_TO_V2,
        ...CORE_V1_TO_V4,
        ...CORE_V2_TO_V4
      },
      version: 2
    },
    {
      methods: {
        initialise_block: {
          description: "Initialize a block with the given header.",
          params: [
            {
              name: "header",
              type: "Header"
            }
          ],
          type: "Null"
        },
        ...CORE_V1_TO_V2,
        ...CORE_V1_TO_V4
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/runtime/definitions.js
var numberTypes = {
  Fixed64: "Int<64, Fixed64>",
  FixedI64: "Int<64, FixedI64>",
  FixedU64: "UInt<64, FixedU64>",
  Fixed128: "Int<128, Fixed128>",
  FixedI128: "Int<128, FixedI128>",
  FixedU128: "UInt<128, FixedU128>",
  I32F32: "Int<64, I32F32>",
  U32F32: "UInt<64, U32F32>",
  PerU16: "UInt<16, PerU16>",
  Perbill: "UInt<32, Perbill>",
  Percent: "UInt<8, Percent>",
  Permill: "UInt<32, Permill>",
  Perquintill: "UInt<64, Perquintill>"
};
var knownOrigins = {
  //
  // (1) Defaults from Substrate
  //
  Council: "CollectiveOrigin",
  System: "SystemOrigin",
  TechnicalCommittee: "CollectiveOrigin",
  //
  // (2) Defaults from Polkadot
  //
  Xcm: "XcmOrigin",
  XcmPallet: "XcmOrigin",
  //
  // (3) Defaults from Acala
  //
  Authority: "AuthorityOrigin",
  GeneralCouncil: "CollectiveOrigin"
};
var definitions_default2 = {
  rpc: {},
  runtime: runtime2,
  types: {
    ...numberTypes,
    AccountId: "AccountId32",
    AccountId20: "GenericEthereumAccountId",
    AccountId32: "GenericAccountId32",
    AccountId33: "GenericAccountId33",
    AccountIdOf: "AccountId",
    AccountIndex: "GenericAccountIndex",
    Address: "MultiAddress",
    AssetId: "u32",
    Balance: "UInt<128, Balance>",
    BalanceOf: "Balance",
    Block: "GenericBlock",
    BlockNumber: "u32",
    BlockNumberFor: "BlockNumber",
    BlockNumberOf: "BlockNumber",
    Call: "GenericCall",
    CallHash: "Hash",
    CallHashOf: "CallHash",
    ChangesTrieConfiguration: {
      digestInterval: "u32",
      digestLevels: "u32"
    },
    ChangesTrieSignal: {
      _enum: {
        NewConfiguration: "Option<ChangesTrieConfiguration>"
      }
    },
    ConsensusEngineId: "GenericConsensusEngineId",
    CodecHash: "Hash",
    CrateVersion: {
      major: "u16",
      minor: "u8",
      patch: "u8"
    },
    Digest: {
      logs: "Vec<DigestItem>"
    },
    DigestItem: {
      _enum: {
        Other: "Bytes",
        AuthoritiesChange: "Vec<AuthorityId>",
        ChangesTrieRoot: "Hash",
        SealV0: "SealV0",
        Consensus: "Consensus",
        Seal: "Seal",
        PreRuntime: "PreRuntime",
        ChangesTrieSignal: "ChangesTrieSignal",
        RuntimeEnvironmentUpdated: "Null"
        // 8
      }
    },
    ExtrinsicsWeight: {
      normal: "Weight",
      operational: "Weight"
    },
    H32: "[u8; 4; H32]",
    H64: "[u8; 8; H64]",
    H128: "[u8; 16; H128]",
    H160: "[u8; 20; H160]",
    H256: "[u8; 32; H256]",
    H512: "[u8; 64; H512]",
    H1024: "[u8; 128; H1024]",
    H2048: "[u8; 256; H2048]",
    Hash: "H256",
    Header: {
      parentHash: "Hash",
      number: "Compact<BlockNumber>",
      stateRoot: "Hash",
      extrinsicsRoot: "Hash",
      digest: "Digest"
    },
    HeaderPartial: {
      parentHash: "Hash",
      // since we only parse JSON with this, having non-compact works
      number: "BlockNumber"
    },
    IndicesLookupSource: "GenericLookupSource",
    Index: "u32",
    Justification: "(ConsensusEngineId, EncodedJustification)",
    EncodedJustification: "Bytes",
    Justifications: "Vec<Justification>",
    KeyValue: "(StorageKey, StorageData)",
    KeyTypeId: "u32",
    LockIdentifier: "[u8; 8]",
    LookupSource: "MultiAddress",
    LookupTarget: "AccountId",
    ModuleId: "LockIdentifier",
    MultiAddress: "GenericMultiAddress",
    MultiSigner: {
      _enum: {
        Ed25519: "[u8; 32]",
        Sr25519: "[u8; 32]",
        Ecdsa: "[u8; 33]"
      }
    },
    Moment: "UInt<64, Moment>",
    OpaqueCall: "Bytes",
    Origin: "DoNotConstruct<Origin>",
    OriginCaller: {
      _enum: {
        // this should be dynamically built from the actual modules, based on index
        System: "SystemOrigin"
      }
    },
    PalletId: "LockIdentifier",
    PalletsOrigin: "OriginCaller",
    PalletVersion: {
      major: "u16",
      minor: "u8",
      patch: "u8"
    },
    Pays: {
      _enum: ["Yes", "No"]
    },
    Phantom: "Null",
    PhantomData: "Null",
    Releases: {
      _enum: ["V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10"]
    },
    RuntimeCall: "Call",
    RuntimeEvent: "Event",
    RuntimeDbWeight: {
      read: "Weight",
      write: "Weight"
    },
    SignedBlock: "SignedBlockWithJustifications",
    SignedBlockWithJustification: {
      block: "Block",
      justification: "Option<EncodedJustification>"
    },
    SignedBlockWithJustifications: {
      block: "Block",
      justifications: "Option<Justifications>"
    },
    Slot: "u64",
    SlotDuration: "u64",
    StorageData: "Bytes",
    StorageInfo: {
      palletName: "Bytes",
      storage_name: "Bytes",
      prefix: "Bytes",
      maxValues: "Option<u32>",
      maxSize: "Option<u32>"
    },
    StorageProof: {
      trieNodes: "Vec<Bytes>"
    },
    TransactionPriority: "u64",
    TransactionLongevity: "u64",
    TransactionTag: "Bytes",
    TransactionInfo: {
      _alias: {
        dataSize: "size"
      },
      chunkRoot: "H256",
      contentHash: "H256",
      dataSize: "u32",
      blockChunks: "u32"
    },
    TransactionStorageProof: {
      chunk: "Vec<u8>",
      proof: "Vec<Vec<u8>>"
    },
    ValidatorId: "AccountId",
    ValidatorIdOf: "ValidatorId",
    WeightV0: "u32",
    WeightV1: "u64",
    WeightV2: {
      refTime: "Compact<u64>",
      proofSize: "Compact<u64>"
    },
    Weight: "WeightV2",
    WeightMultiplier: "Fixed64",
    // digest
    PreRuntime: "(ConsensusEngineId, Bytes)",
    SealV0: "(u64, Signature)",
    Seal: "(ConsensusEngineId, Bytes)",
    Consensus: "(ConsensusEngineId, Bytes)"
  }
};

// node_modules/@polkadot/types/interfaces/scaleInfo/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/scaleInfo/v0.js
init_shim();
var v0 = {
  Si0Field: {
    name: "Option<Text>",
    type: "Si0LookupTypeId",
    typeName: "Option<Text>",
    docs: "Vec<Text>"
  },
  Si0LookupTypeId: "u32",
  Si0Path: "Vec<Text>",
  Si0Type: {
    path: "Si0Path",
    params: "Vec<Si0LookupTypeId>",
    def: "Si0TypeDef"
  },
  Si0TypeDef: {
    _enum: {
      Composite: "Si0TypeDefComposite",
      Variant: "Si0TypeDefVariant",
      Sequence: "Si0TypeDefSequence",
      Array: "Si0TypeDefArray",
      Tuple: "Si0TypeDefTuple",
      Primitive: "Si0TypeDefPrimitive",
      Compact: "Si0TypeDefCompact",
      Phantom: "Si0TypeDefPhantom",
      BitSequence: "Si0TypeDefBitSequence"
    }
  },
  Si0TypeDefArray: {
    len: "u32",
    type: "Si0LookupTypeId"
  },
  Si0TypeDefBitSequence: {
    bitStoreType: "Si0LookupTypeId",
    bitOrderType: "Si0LookupTypeId"
  },
  Si0TypeDefCompact: {
    type: "Si0LookupTypeId"
  },
  Si0TypeDefComposite: {
    fields: "Vec<Si0Field>"
  },
  Si0TypeDefPhantom: "Null",
  Si0TypeDefVariant: {
    variants: "Vec<Si0Variant>"
  },
  Si0TypeDefPrimitive: {
    _enum: ["Bool", "Char", "Str", "U8", "U16", "U32", "U64", "U128", "U256", "I8", "I16", "I32", "I64", "I128", "I256"]
  },
  Si0TypeDefSequence: {
    type: "Si0LookupTypeId"
  },
  Si0TypeDefTuple: "Vec<Si0LookupTypeId>",
  Si0TypeParameter: {
    name: "Text",
    type: "Option<Si0LookupTypeId>"
  },
  Si0Variant: {
    name: "Text",
    fields: "Vec<Si0Field>",
    index: "Option<u8>",
    discriminant: "Option<u64>",
    docs: "Vec<Text>"
  }
};

// node_modules/@polkadot/types/interfaces/scaleInfo/definitions.js
var definitions_default3 = {
  rpc: {},
  types: {
    ...v0,
    ...v1,
    // latest mappings
    SiField: "Si1Field",
    SiLookupTypeId: "Si1LookupTypeId",
    SiPath: "Si1Path",
    SiType: "Si1Type",
    SiTypeDef: "Si1TypeDef",
    SiTypeDefArray: "Si1TypeDefArray",
    SiTypeDefBitSequence: "Si1TypeDefBitSequence",
    SiTypeDefCompact: "Si1TypeDefCompact",
    SiTypeDefComposite: "Si1TypeDefComposite",
    SiTypeDefPrimitive: "Si1TypeDefPrimitive",
    SiTypeDefSequence: "Si1TypeDefSequence",
    SiTypeDefTuple: "Si1TypeDefTuple",
    SiTypeParameter: "Si1TypeParameter",
    SiTypeDefVariant: "Si1TypeDefVariant",
    SiVariant: "Si1Variant"
  }
};

// node_modules/@polkadot/types/interfaces/assetConversion/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/assetConversion/runtime.js
init_shim();
var runtime3 = {
  AssetConversionApi: [
    {
      methods: {
        get_reserves: {
          description: "Get pool reserves",
          params: [
            {
              name: "asset1",
              type: "XcmV3MultiLocation"
            },
            {
              name: "asset2",
              type: "XcmV3MultiLocation"
            }
          ],
          type: "Option<(Balance,Balance)>"
        },
        quote_price_exact_tokens_for_tokens: {
          description: "Quote price: exact tokens for tokens",
          params: [
            {
              name: "asset1",
              type: "XcmV3MultiLocation"
            },
            {
              name: "asset2",
              type: "XcmV3MultiLocation"
            },
            {
              name: "amount",
              type: "u128"
            },
            {
              name: "include_fee",
              type: "bool"
            }
          ],
          type: "Option<(Balance)>"
        },
        quote_price_tokens_for_exact_tokens: {
          description: "Quote price: tokens for exact tokens",
          params: [
            {
              name: "asset1",
              type: "XcmV3MultiLocation"
            },
            {
              name: "asset2",
              type: "XcmV3MultiLocation"
            },
            {
              name: "amount",
              type: "u128"
            },
            {
              name: "include_fee",
              type: "bool"
            }
          ],
          type: "Option<(Balance)>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/assetConversion/definitions.js
var definitions_default4 = {
  rpc: {},
  runtime: runtime3,
  types: {}
};

// node_modules/@polkadot/types/interfaces/assets/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/assets/runtime.js
init_shim();
var runtime4 = {
  AssetsApi: [
    {
      methods: {
        account_balances: {
          description: "Return the current set of authorities.",
          params: [
            {
              name: "account",
              type: "AccountId"
            }
          ],
          type: "Vec<(u32, TAssetBalance)>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/assets/definitions.js
var definitions_default5 = {
  rpc: {},
  runtime: runtime4,
  types: {
    AssetApprovalKey: {
      owner: "AccountId",
      delegate: "AccountId"
    },
    AssetApproval: {
      amount: "TAssetBalance",
      deposit: "TAssetDepositBalance"
    },
    AssetBalance: {
      balance: "TAssetBalance",
      isFrozen: "bool",
      isSufficient: "bool"
    },
    AssetDestroyWitness: {
      accounts: "Compact<u32>",
      sufficients: "Compact<u32>",
      approvals: "Compact<u32>"
    },
    AssetDetails: {
      owner: "AccountId",
      issuer: "AccountId",
      admin: "AccountId",
      freezer: "AccountId",
      supply: "TAssetBalance",
      deposit: "TAssetDepositBalance",
      minBalance: "TAssetBalance",
      isSufficient: "bool",
      accounts: "u32",
      sufficients: "u32",
      approvals: "u32",
      isFrozen: "bool"
    },
    AssetMetadata: {
      deposit: "TAssetDepositBalance",
      name: "Vec<u8>",
      symbol: "Vec<u8>",
      decimals: "u8",
      isFrozen: "bool"
    },
    TAssetBalance: "u64",
    TAssetDepositBalance: "BalanceOf"
  }
};

// node_modules/@polkadot/types/interfaces/aura/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/aura/runtime.js
init_shim();
var runtime5 = {
  AuraApi: [
    {
      methods: {
        authorities: {
          description: "Return the current set of authorities.",
          params: [],
          type: "Vec<AuthorityId>"
        },
        slot_duration: {
          description: "Returns the slot duration for Aura.",
          params: [],
          type: "SlotDuration"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/aura/definitions.js
var definitions_default6 = {
  rpc: {},
  runtime: runtime5,
  types: {
    RawAuraPreDigest: {
      slotNumber: "u64"
    }
  }
};

// node_modules/@polkadot/types/interfaces/authorship/definitions.js
init_shim();
var definitions_default7 = {
  rpc: {},
  types: {
    UncleEntryItem: {
      _enum: {
        InclusionHeight: "BlockNumber",
        Uncle: "(Hash, Option<AccountId>)"
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/babe/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/babe/rpc.js
init_shim();
var rpc = {
  epochAuthorship: {
    description: "Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore",
    isUnsafe: true,
    params: [],
    type: "HashMap<AuthorityId, EpochAuthorship>"
  }
};

// node_modules/@polkadot/types/interfaces/babe/runtime.js
init_shim();
var V1_V2_SHARED = {
  current_epoch: {
    description: "Returns information regarding the current epoch.",
    params: [],
    type: "Epoch"
  },
  current_epoch_start: {
    description: "Returns the slot that started the current epoch.",
    params: [],
    type: "Slot"
  },
  generate_key_ownership_proof: {
    description: "Generates a proof of key ownership for the given authority in the current epoch.",
    params: [
      {
        name: "slot",
        type: "Slot"
      },
      {
        name: "authorityId",
        type: "AuthorityId"
      }
    ],
    type: "Option<OpaqueKeyOwnershipProof>"
  },
  next_epoch: {
    description: "Returns information regarding the next epoch (which was already previously announced).",
    params: [],
    type: "Epoch"
  },
  submit_report_equivocation_unsigned_extrinsic: {
    description: "Submits an unsigned extrinsic to report an equivocation.",
    params: [
      {
        name: "equivocationProof",
        type: "BabeEquivocationProof"
      },
      {
        name: "keyOwnerProof",
        type: "OpaqueKeyOwnershipProof"
      }
    ],
    type: "Option<Null>"
  }
};
var runtime6 = {
  BabeApi: [
    {
      methods: {
        configuration: {
          description: "Return the genesis configuration for BABE. The configuration is only read on genesis.",
          params: [],
          type: "BabeGenesisConfiguration"
        },
        ...V1_V2_SHARED
      },
      version: 2
    },
    {
      methods: {
        configuration: {
          description: "Return the configuration for BABE. Version 1.",
          params: [],
          type: "BabeGenesisConfigurationV1"
        },
        ...V1_V2_SHARED
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/babe/definitions.js
var definitions_default8 = {
  rpc,
  runtime: runtime6,
  types: {
    AllowedSlots: {
      _enum: ["PrimarySlots", "PrimaryAndSecondaryPlainSlots", "PrimaryAndSecondaryVRFSlots"]
    },
    BabeAuthorityWeight: "u64",
    BabeEpochConfiguration: {
      c: "(u64, u64)",
      allowedSlots: "AllowedSlots"
    },
    BabeBlockWeight: "u32",
    BabeEquivocationProof: {
      offender: "AuthorityId",
      slotNumber: "SlotNumber",
      firstHeader: "Header",
      secondHeader: "Header"
    },
    BabeGenesisConfiguration: {
      slotDuration: "u64",
      epochLength: "u64",
      c: "(u64, u64)",
      genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
      randomness: "Randomness",
      allowedSlots: "AllowedSlots"
    },
    BabeGenesisConfigurationV1: {
      slotDuration: "u64",
      epochLength: "u64",
      c: "(u64, u64)",
      genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
      randomness: "Randomness",
      secondarySlots: "bool"
    },
    BabeWeight: "u64",
    MaybeRandomness: "Option<Randomness>",
    MaybeVrf: "Option<VrfData>",
    Epoch: {
      epochIndex: "u64",
      startSlot: "Slot",
      duration: "u64",
      authorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
      randomness: "Hash",
      config: "BabeEpochConfiguration"
    },
    EpochAuthorship: {
      primary: "Vec<u64>",
      secondary: "Vec<u64>",
      secondary_vrf: "Vec<u64>"
    },
    NextConfigDescriptor: {
      _enum: {
        V0: "Null",
        V1: "NextConfigDescriptorV1"
      }
    },
    NextConfigDescriptorV1: {
      c: "(u64, u64)",
      allowedSlots: "AllowedSlots"
    },
    OpaqueKeyOwnershipProof: "Bytes",
    Randomness: "Hash",
    RawBabePreDigest: {
      _enum: {
        Phantom: "Null",
        Primary: "RawBabePreDigestPrimary",
        SecondaryPlain: "RawBabePreDigestSecondaryPlain",
        SecondaryVRF: "RawBabePreDigestSecondaryVRF"
      }
    },
    RawBabePreDigestPrimary: {
      authorityIndex: "u32",
      slotNumber: "SlotNumber",
      vrfOutput: "VrfOutput",
      vrfProof: "VrfProof"
    },
    RawBabePreDigestSecondaryPlain: {
      authorityIndex: "u32",
      slotNumber: "SlotNumber"
    },
    RawBabePreDigestSecondaryVRF: {
      authorityIndex: "u32",
      slotNumber: "SlotNumber",
      vrfOutput: "VrfOutput",
      vrfProof: "VrfProof"
    },
    RawBabePreDigestTo159: {
      _enum: {
        Primary: "RawBabePreDigestPrimaryTo159",
        Secondary: "RawBabePreDigestSecondaryTo159"
      }
    },
    RawBabePreDigestPrimaryTo159: {
      authorityIndex: "u32",
      slotNumber: "SlotNumber",
      weight: "BabeBlockWeight",
      vrfOutput: "VrfOutput",
      vrfProof: "VrfProof"
    },
    RawBabePreDigestSecondaryTo159: {
      authorityIndex: "u32",
      slotNumber: "SlotNumber",
      weight: "BabeBlockWeight"
    },
    // a cross old/new compatible version of the digest, that is _only_ useful
    // for partial parsing and extraction of the author. This assumes that all
    // entries has the authorityIndex in the first position - and that it is all
    // we are interested in
    RawBabePreDigestCompat: {
      _enum: {
        Zero: "u32",
        One: "u32",
        Two: "u32",
        Three: "u32"
      }
    },
    SlotNumber: "u64",
    VrfData: "[u8; 32]",
    VrfOutput: "[u8; 32]",
    VrfProof: "[u8; 64]"
  }
};

// node_modules/@polkadot/types/interfaces/balances/definitions.js
init_shim();
var definitions_default9 = {
  rpc: {},
  types: {
    AccountData: {
      free: "Balance",
      reserved: "Balance",
      miscFrozen: "Balance",
      feeFrozen: "Balance"
    },
    BalanceLockTo212: {
      id: "LockIdentifier",
      amount: "Balance",
      until: "BlockNumber",
      reasons: "WithdrawReasons"
    },
    BalanceLock: {
      id: "LockIdentifier",
      amount: "Balance",
      reasons: "Reasons"
    },
    BalanceStatus: {
      _enum: ["Free", "Reserved"]
    },
    Reasons: {
      _enum: ["Fee", "Misc", "All"]
    },
    ReserveData: {
      id: "ReserveIdentifier",
      amount: "Balance"
    },
    ReserveIdentifier: "[u8; 8]",
    VestingSchedule: {
      offset: "Balance",
      perBlock: "Balance",
      startingBlock: "BlockNumber"
    },
    WithdrawReasons: {
      _set: {
        TransactionPayment: 1,
        Transfer: 2,
        Reserve: 4,
        Fee: 8,
        Tip: 16
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/beefy/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/beefy/rpc.js
init_shim();
var rpc2 = {
  getFinalizedHead: {
    description: "Returns hash of the latest BEEFY finalized block as seen by this client.",
    params: [],
    type: "H256"
  },
  subscribeJustifications: {
    description: "Returns the block most recently finalized by BEEFY, alongside side its justification.",
    params: [],
    pubsub: [
      "justifications",
      "subscribeJustifications",
      "unsubscribeJustifications"
    ],
    type: "BeefySignedCommitment"
  }
};

// node_modules/@polkadot/types/interfaces/beefy/runtime.js
init_shim();
var BEEFY_V1_V3 = {
  beefy_genesis: {
    description: "Return the block number where BEEFY consensus is enabled/started",
    params: [],
    type: "Option<BlockNumber>"
  },
  generate_key_ownership_proof: {
    description: "Generates a proof of key ownership for the given authority in the given set.",
    params: [
      {
        name: "setId",
        type: "ValidatorSetId"
      },
      {
        name: "authorityId",
        type: "AuthorityId"
      }
    ],
    type: "Option<OpaqueKeyOwnershipProof>"
  },
  submit_report_equivocation_unsigned_extrinsic: {
    description: "Submits an unsigned extrinsic to report an equivocation.",
    params: [
      {
        name: "equivocationProof",
        type: "BeefyEquivocationProof"
      },
      {
        name: "keyOwnerProof",
        type: "OpaqueKeyOwnershipProof"
      }
    ],
    type: "Option<Null>"
  },
  validator_set: {
    description: "Return the current active BEEFY validator set",
    params: [],
    type: "Option<ValidatorSet>"
  }
};
var BEEFY_MMR_V1 = {
  authority_set_proof: {
    description: "Return the currently active BEEFY authority set proof.",
    params: [],
    type: "BeefyAuthoritySet"
  },
  next_authority_set_proof: {
    description: "Return the next/queued BEEFY authority set proof.",
    params: [],
    type: "BeefyNextAuthoritySet"
  }
};
var runtime7 = {
  BeefyApi: [
    {
      methods: BEEFY_V1_V3,
      version: 3
    },
    {
      methods: BEEFY_V1_V3,
      version: 2
    },
    {
      methods: BEEFY_V1_V3,
      version: 1
    }
  ],
  BeefyMmrApi: [
    {
      methods: BEEFY_MMR_V1,
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/beefy/definitions.js
var definitions_default10 = {
  rpc: rpc2,
  runtime: runtime7,
  types: {
    BeefyAuthoritySet: {
      id: "u64",
      len: "u32",
      root: "H256"
    },
    BeefyCommitment: {
      payload: "BeefyPayload",
      blockNumber: "BlockNumber",
      validatorSetId: "ValidatorSetId"
    },
    BeefyId: "[u8; 33]",
    BeefyEquivocationProof: {
      first: "BeefyVoteMessage",
      second: "BeefyVoteMessage"
    },
    BeefySignedCommitment: {
      commitment: "BeefyCommitment",
      signatures: "Vec<Option<EcdsaSignature>>"
    },
    BeefyNextAuthoritySet: {
      id: "u64",
      len: "u32",
      root: "H256"
    },
    BeefyPayload: "Vec<(BeefyPayloadId, Bytes)>",
    BeefyPayloadId: "[u8;2]",
    BeefyVoteMessage: {
      commitment: "BeefyCommitment",
      id: "AuthorityId",
      signature: "Signature"
    },
    MmrRootHash: "H256",
    ValidatorSetId: "u64",
    ValidatorSet: {
      validators: "Vec<AuthorityId>",
      id: "ValidatorSetId"
    }
  }
};

// node_modules/@polkadot/types/interfaces/benchmark/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/benchmark/runtime.js
init_shim();
var runtime8 = {
  Benchmark: [
    {
      methods: {
        benchmark_metadata: {
          description: "Get the benchmark metadata available for this runtime.",
          params: [
            {
              name: "extra",
              type: "bool"
            }
          ],
          type: "(Vec<BenchmarkList>, Vec<StorageInfo>)"
        },
        dispatch_benchmark: {
          description: "Dispatch the given benchmark.",
          params: [
            {
              name: "config",
              type: "BenchmarkConfig"
            }
          ],
          type: "Result<Vec<BenchmarkBatch>, Text>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/benchmark/definitions.js
var definitions_default11 = {
  rpc: {},
  runtime: runtime8,
  types: {
    BenchmarkBatch: {
      pallet: "Text",
      instance: "Text",
      benchmark: "Text",
      results: "Vec<BenchmarkResult>"
    },
    BenchmarkConfig: {
      pallet: "Bytes",
      benchmark: "Bytes",
      selectedComponents: "Vec<(BenchmarkParameter, u32)>",
      verify: "bool",
      internalRepeats: "u32"
    },
    BenchmarkList: {
      pallet: "Bytes",
      instance: "Bytes",
      benchmarks: "Vec<BenchmarkMetadata>"
    },
    BenchmarkMetadata: {
      name: "Bytes",
      components: "Vec<(BenchmarkParameter, u32, u32)>"
    },
    BenchmarkParameter: {
      _enum: ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
    },
    BenchmarkResult: {
      components: "Vec<(BenchmarkParameter, u32)>",
      extrinsicTime: "u128",
      storageRootTime: "u128",
      reads: "u32",
      repeatReads: "u32",
      writes: "u32",
      repeatWrites: "u32",
      proofSize: "u32",
      benchKeys: "Vec<(Vec<u8>, u32, u32, bool)>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/blockbuilder/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/blockbuilder/runtime.js
init_shim();
var BB_V2_TO_V4 = {
  // this was removed after V4
  random_seed: {
    description: "Generate a random seed.",
    params: [],
    type: "Hash"
  }
};
var BB_V2_TO_V5 = {
  apply_extrinsic: {
    description: "Apply the given extrinsic.",
    params: [
      {
        name: "extrinsic",
        type: "Extrinsic"
      }
    ],
    type: "ApplyExtrinsicResultPre6"
  }
};
var BB_V2_TO_V6 = {
  check_inherents: {
    description: "Check that the inherents are valid.",
    params: [
      {
        name: "block",
        type: "Block"
      },
      {
        name: "data",
        type: "InherentData"
      }
    ],
    type: "CheckInherentsResult"
  },
  inherent_extrinsics: {
    description: "Generate inherent extrinsics.",
    params: [
      {
        name: "inherent",
        type: "InherentData"
      }
    ],
    type: "Vec<Extrinsic>"
  }
};
var BB_V3_TO_V6 = {
  // renamed in v3 from finalize_block
  finalize_block: {
    description: "Finish the current block.",
    params: [],
    type: "Header"
  }
};
var runtime9 = {
  BlockBuilder: [
    {
      methods: {
        apply_extrinsic: {
          description: "Apply the given extrinsic.",
          params: [
            {
              name: "extrinsic",
              type: "Extrinsic"
            }
          ],
          type: "ApplyExtrinsicResult"
        },
        ...BB_V2_TO_V6,
        ...BB_V3_TO_V6
      },
      version: 6
    },
    {
      methods: {
        // apply_extrinsic result changed in 6
        ...BB_V2_TO_V5,
        ...BB_V2_TO_V6,
        ...BB_V3_TO_V6
      },
      version: 5
    },
    {
      methods: {
        // random_seed removed
        ...BB_V2_TO_V4,
        ...BB_V2_TO_V5,
        ...BB_V2_TO_V6,
        ...BB_V3_TO_V6
      },
      version: 4
    },
    {
      methods: {
        // finalize_block renamed
        ...BB_V2_TO_V4,
        ...BB_V2_TO_V6,
        ...BB_V3_TO_V6
      },
      version: 3
    },
    {
      methods: {
        finalise_block: {
          description: "Finish the current block.",
          params: [],
          type: "Header"
        },
        ...BB_V2_TO_V4,
        ...BB_V2_TO_V6
      },
      version: 2
    }
  ]
};

// node_modules/@polkadot/types/interfaces/blockbuilder/definitions.js
var definitions_default12 = {
  rpc: {},
  runtime: runtime9,
  types: {
    CheckInherentsResult: {
      okay: "bool",
      fatalError: "bool",
      errors: "InherentData"
    },
    InherentData: {
      data: "BTreeMap<InherentIdentifier, Bytes>"
    },
    InherentIdentifier: "[u8; 8]"
  }
};

// node_modules/@polkadot/types/interfaces/collective/definitions.js
init_shim();
var definitions_default13 = {
  rpc: {},
  types: {
    CollectiveOrigin: {
      _enum: {
        Members: "(MemberCount, MemberCount)",
        Member: "AccountId"
      }
    },
    MemberCount: "u32",
    ProposalIndex: "u32",
    VotesTo230: {
      index: "ProposalIndex",
      threshold: "MemberCount",
      ayes: "Vec<AccountId>",
      nays: "Vec<AccountId>"
    },
    Votes: {
      index: "ProposalIndex",
      threshold: "MemberCount",
      ayes: "Vec<AccountId>",
      nays: "Vec<AccountId>",
      end: "BlockNumber"
    }
  }
};

// node_modules/@polkadot/types/interfaces/consensus/definitions.js
init_shim();
var definitions_default14 = {
  rpc: {},
  types: {
    AuthorityId: "AccountId",
    RawVRFOutput: "[u8; 32]"
  }
};

// node_modules/@polkadot/types/interfaces/contracts/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/contracts/rpc.js
init_shim();
var rpc3 = {
  call: {
    deprecated: "Use the runtime interface `api.call.contractsApi.call` instead",
    description: "Executes a call to a contract",
    params: [
      {
        name: "callRequest",
        type: "ContractCallRequest"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ContractExecResult"
  },
  getStorage: {
    deprecated: "Use the runtime interface `api.call.contractsApi.getStorage` instead",
    description: "Returns the value under a specified storage key in a contract",
    params: [
      {
        name: "address",
        type: "AccountId"
      },
      {
        name: "key",
        type: "H256"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Option<Bytes>"
  },
  instantiate: {
    deprecated: "Use the runtime interface `api.call.contractsApi.instantiate` instead",
    description: "Instantiate a new contract",
    params: [
      {
        name: "request",
        type: "InstantiateRequestV1"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ContractInstantiateResult"
  },
  rentProjection: {
    deprecated: "Not available in newer versions of the contracts interfaces",
    description: "Returns the projected time a given contract will be able to sustain paying its rent",
    params: [
      {
        name: "address",
        type: "AccountId"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Option<BlockNumber>"
  },
  uploadCode: {
    deprecated: "Use the runtime interface `api.call.contractsApi.uploadCode` instead",
    description: "Upload new code without instantiating a contract from it",
    // The RPC here is terribly misnamed - somebody forgot how the RPCs
    // are actually done, ie. <module>_<camelCasedMethod>
    endpoint: "contracts_upload_code",
    params: [
      {
        name: "uploadRequest",
        type: "CodeUploadRequest"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "CodeUploadResult"
  }
};

// node_modules/@polkadot/types/interfaces/contracts/runtime.js
init_shim();
var SHARED_V1_V2 = {
  get_storage: {
    description: "Query a given storage key in a given contract.",
    params: [
      {
        name: "address",
        type: "AccountId"
      },
      {
        name: "key",
        type: "Bytes"
      }
    ],
    type: "Option<Bytes>"
  },
  upload_code: {
    description: "Upload new code without instantiating a contract from it.",
    params: [
      {
        name: "origin",
        type: "AccountId"
      },
      {
        name: "code",
        type: "Bytes"
      },
      {
        name: "storageDepositLimit",
        type: "Option<Balance>"
      }
    ],
    type: "CodeUploadResult"
  }
};
var runtime10 = {
  ContractsApi: [
    {
      methods: {
        call: {
          description: "Perform a call from a specified account to a given contract.",
          params: [
            {
              name: "origin",
              type: "AccountId"
            },
            {
              name: "dest",
              type: "AccountId"
            },
            {
              name: "value",
              type: "Balance"
            },
            {
              name: "gasLimit",
              type: "Option<WeightV2>"
            },
            {
              name: "storageDepositLimit",
              type: "Option<Balance>"
            },
            {
              name: "inputData",
              type: "Vec<u8>"
            }
          ],
          type: "ContractExecResult"
        },
        instantiate: {
          description: "Instantiate a new contract.",
          params: [
            {
              name: "origin",
              type: "AccountId"
            },
            {
              name: "value",
              type: "Balance"
            },
            {
              name: "gasLimit",
              type: "Option<WeightV2>"
            },
            {
              name: "storageDepositLimit",
              type: "Option<Balance>"
            },
            {
              name: "code",
              type: "CodeSource"
            },
            {
              name: "data",
              type: "Bytes"
            },
            {
              name: "salt",
              type: "Bytes"
            }
          ],
          type: "ContractInstantiateResult"
        },
        ...SHARED_V1_V2
      },
      version: 2
    },
    {
      methods: {
        call: {
          description: "Perform a call from a specified account to a given contract.",
          params: [
            {
              name: "origin",
              type: "AccountId"
            },
            {
              name: "dest",
              type: "AccountId"
            },
            {
              name: "value",
              type: "Balance"
            },
            {
              name: "gasLimit",
              type: "u64"
            },
            {
              name: "storageDepositLimit",
              type: "Option<Balance>"
            },
            {
              name: "inputData",
              type: "Vec<u8>"
            }
          ],
          type: "ContractExecResultU64"
        },
        instantiate: {
          description: "Instantiate a new contract.",
          params: [
            {
              name: "origin",
              type: "AccountId"
            },
            {
              name: "value",
              type: "Balance"
            },
            {
              name: "gasLimit",
              type: "u64"
            },
            {
              name: "storageDepositLimit",
              type: "Option<Balance>"
            },
            {
              name: "code",
              type: "CodeSource"
            },
            {
              name: "data",
              type: "Bytes"
            },
            {
              name: "salt",
              type: "Bytes"
            }
          ],
          type: "ContractInstantiateResultU64"
        },
        ...SHARED_V1_V2
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/contracts/definitions.js
var definitions_default15 = {
  rpc: rpc3,
  runtime: runtime10,
  types: {
    AliveContractInfo: {
      trieId: "TrieId",
      storageSize: "u32",
      pairCount: "u32",
      codeHash: "CodeHash",
      rentAllowance: "Balance",
      rentPaid: "Balance",
      deductBlock: "BlockNumber",
      lastWrite: "Option<BlockNumber>",
      _reserved: "Option<Null>"
    },
    CodeHash: "Hash",
    CodeSource: {
      _enum: {
        Upload: "Bytes",
        Existing: "Hash"
      }
    },
    CodeUploadRequest: {
      origin: "AccountId",
      code: "Bytes",
      storageDepositLimit: "Option<Balance>"
    },
    CodeUploadResult: "Result<CodeUploadResultValue, DispatchError>",
    CodeUploadResultValue: {
      codeHash: "CodeHash",
      deposit: "Balance"
    },
    ContractCallRequest: {
      origin: "AccountId",
      dest: "AccountId",
      value: "Balance",
      gasLimit: "u64",
      storageDepositLimit: "Option<Balance>",
      inputData: "Bytes"
    },
    ContractExecResultSuccessTo255: {
      status: "u8",
      data: "Raw"
    },
    ContractExecResultTo255: {
      _enum: {
        Success: "ContractExecResultSuccessTo255",
        Error: "Null"
      }
    },
    ContractExecResultSuccessTo260: {
      flags: "ContractReturnFlags",
      data: "Bytes",
      gasConsumed: "u64"
    },
    ContractExecResultTo260: {
      _enum: {
        Success: "ContractExecResultSuccessTo260",
        Error: "Null"
      }
    },
    ContractExecResultOk: {
      flags: "ContractReturnFlags",
      data: "Bytes"
    },
    ContractExecResultResult: "Result<ContractExecResultOk, DispatchError>",
    ContractExecResultTo267: {
      gasConsumed: "u64",
      debugMessage: "Text",
      result: "ContractExecResultResult"
    },
    ContractExecResult: {
      gasConsumed: "Weight",
      gasRequired: "Weight",
      storageDeposit: "StorageDeposit",
      debugMessage: "Text",
      result: "ContractExecResultResult"
    },
    ContractExecResultU64: {
      gasConsumed: "u64",
      gasRequired: "u64",
      storageDeposit: "StorageDeposit",
      debugMessage: "Text",
      result: "ContractExecResultResult"
    },
    ContractInfo: {
      _enum: {
        Alive: "AliveContractInfo",
        Tombstone: "TombstoneContractInfo"
      }
    },
    ContractCallFlags: {
      _set: {
        _bitLength: 32,
        ForwardInput: 1,
        CloneInput: 2,
        TailCall: 4,
        AllowReentry: 8
      }
    },
    ContractReturnFlags: {
      _set: {
        _bitLength: 32,
        Revert: 1
      }
    },
    ContractStorageKey: "[u8; 32]",
    DeletedContract: {
      pairCount: "u32",
      trieId: "TrieId"
    },
    ExecReturnValue: {
      flags: "ContractReturnFlags",
      data: "Bytes"
    },
    Gas: "u64",
    HostFnWeightsTo264: {
      caller: "Weight",
      address: "Weight",
      gasLeft: "Weight",
      balance: "Weight",
      valueTransferred: "Weight",
      minimumBalance: "Weight",
      tombstoneDeposit: "Weight",
      rentAllowance: "Weight",
      blockNumber: "Weight",
      now: "Weight",
      weightToFee: "Weight",
      gas: "Weight",
      input: "Weight",
      inputPerByte: "Weight",
      return: "Weight",
      returnPerByte: "Weight",
      terminate: "Weight",
      restoreTo: "Weight",
      restoreToPerDelta: "Weight",
      random: "Weight",
      depositEvent: "Weight",
      depositEventPerTopic: "Weight",
      depositEventPerByte: "Weight",
      setRentAllowance: "Weight",
      setStorage: "Weight",
      setStoragePerByte: "Weight",
      clearStorage: "Weight",
      getStorage: "Weight",
      getStoragePerByte: "Weight",
      transfer: "Weight",
      call: "Weight",
      callTransferSurcharge: "Weight",
      callPerInputByte: "Weight",
      callPerOutputByte: "Weight",
      instantiate: "Weight",
      instantiatePerInputByte: "Weight",
      instantiatePerOutputByte: "Weight",
      hashSha2256: "Weight",
      hashSha2256PerByte: "Weight",
      hashKeccak256: "Weight",
      hashKeccak256PerByte: "Weight",
      hashBlake2256: "Weight",
      hashBlake2256PerByte: "Weight",
      hashBlake2128: "Weight",
      hashBlake2128PerByte: "Weight"
    },
    HostFnWeights: {
      caller: "Weight",
      address: "Weight",
      gasLeft: "Weight",
      balance: "Weight",
      valueTransferred: "Weight",
      minimumBalance: "Weight",
      tombstoneDeposit: "Weight",
      rentAllowance: "Weight",
      blockNumber: "Weight",
      now: "Weight",
      weightToFee: "Weight",
      gas: "Weight",
      input: "Weight",
      inputPerByte: "Weight",
      return: "Weight",
      returnPerByte: "Weight",
      terminate: "Weight",
      terminatePerCodeByte: "Weight",
      restoreTo: "Weight",
      restoreToPerCallerCodeByte: "Weight",
      restoreToPerTombstoneCodeByte: "Weight",
      restoreToPerDelta: "Weight",
      random: "Weight",
      depositEvent: "Weight",
      depositEventPerTopic: "Weight",
      depositEventPerByte: "Weight",
      setRentAllowance: "Weight",
      setStorage: "Weight",
      setStoragePerByte: "Weight",
      clearStorage: "Weight",
      getStorage: "Weight",
      getStoragePerByte: "Weight",
      transfer: "Weight",
      call: "Weight",
      callPerCodeByte: "Weight",
      callTransferSurcharge: "Weight",
      callPerInputByte: "Weight",
      callPerOutputByte: "Weight",
      instantiate: "Weight",
      instantiatePerCodeByte: "Weight",
      instantiatePerInputByte: "Weight",
      instantiatePerOutputByte: "Weight",
      instantiatePerSaltByte: "Weight",
      hashSha2256: "Weight",
      hashSha2256PerByte: "Weight",
      hashKeccak256: "Weight",
      hashKeccak256PerByte: "Weight",
      hashBlake2256: "Weight",
      hashBlake2256PerByte: "Weight",
      hashBlake2128: "Weight",
      hashBlake2128PerByte: "Weight",
      rentParams: "Weight"
    },
    InstantiateRequestV1: {
      origin: "AccountId",
      value: "Balance",
      gasLimit: "Gas",
      code: "Bytes",
      data: "Bytes",
      salt: "Bytes"
    },
    InstantiateRequestV2: {
      _fallback: "InstantiateRequestV1",
      origin: "AccountId",
      value: "Balance",
      gasLimit: "Gas",
      storageDepositLimit: "Option<Balance>",
      code: "Bytes",
      data: "Bytes",
      salt: "Bytes"
    },
    InstantiateRequest: {
      _fallback: "InstantiateRequestV2",
      origin: "AccountId",
      value: "Balance",
      gasLimit: "Gas",
      storageDepositLimit: "Option<Balance>",
      code: "CodeSource",
      data: "Bytes",
      salt: "Bytes"
    },
    ContractInstantiateResultTo267: "Result<InstantiateReturnValueTo267, Null>",
    ContractInstantiateResultTo299: "Result<InstantiateReturnValueOk, Null>",
    ContractInstantiateResult: {
      gasConsumed: "WeightV2",
      gasRequired: "WeightV2",
      storageDeposit: "StorageDeposit",
      debugMessage: "Text",
      result: "InstantiateReturnValue"
    },
    ContractInstantiateResultU64: {
      // only this one can fail, the current version (above) _should_ be correctly
      // versioned now, aka no more deprecated RPCs involved, only runtime calls
      _fallback: "ContractInstantiateResultTo299",
      gasConsumed: "u64",
      gasRequired: "u64",
      storageDeposit: "StorageDeposit",
      debugMessage: "Text",
      result: "InstantiateReturnValue"
    },
    InstantiateReturnValueTo267: {
      result: "ExecReturnValue",
      accountId: "AccountId",
      rentProjection: "Option<RentProjection>"
    },
    InstantiateReturnValueOk: {
      result: "ExecReturnValue",
      accountId: "AccountId"
    },
    InstantiateReturnValue: "Result<InstantiateReturnValueOk, DispatchError>",
    InstructionWeights: {
      i64const: "u32",
      i64load: "u32",
      i64store: "u32",
      select: "u32",
      rIf: "u32",
      br: "u32",
      brIf: "u32",
      brIable: "u32",
      brIablePerEntry: "u32",
      call: "u32",
      callIndirect: "u32",
      callIndirectPerParam: "u32",
      localGet: "u32",
      localSet: "u32",
      local_tee: "u32",
      globalGet: "u32",
      globalSet: "u32",
      memoryCurrent: "u32",
      memoryGrow: "u32",
      i64clz: "u32",
      i64ctz: "u32",
      i64popcnt: "u32",
      i64eqz: "u32",
      i64extendsi32: "u32",
      i64extendui32: "u32",
      i32wrapi64: "u32",
      i64eq: "u32",
      i64ne: "u32",
      i64lts: "u32",
      i64ltu: "u32",
      i64gts: "u32",
      i64gtu: "u32",
      i64les: "u32",
      i64leu: "u32",
      i64ges: "u32",
      i64geu: "u32",
      i64add: "u32",
      i64sub: "u32",
      i64mul: "u32",
      i64divs: "u32",
      i64divu: "u32",
      i64rems: "u32",
      i64remu: "u32",
      i64and: "u32",
      i64or: "u32",
      i64xor: "u32",
      i64shl: "u32",
      i64shrs: "u32",
      i64shru: "u32",
      i64rotl: "u32",
      i64rotr: "u32"
    },
    LimitsTo264: {
      eventTopics: "u32",
      stackHeight: "u32",
      globals: "u32",
      parameters: "u32",
      memoryPages: "u32",
      tableSize: "u32",
      brTableSize: "u32",
      subjectLen: "u32",
      codeSize: "u32"
    },
    Limits: {
      eventTopics: "u32",
      stackHeight: "u32",
      globals: "u32",
      parameters: "u32",
      memoryPages: "u32",
      tableSize: "u32",
      brTableSize: "u32",
      subjectLen: "u32"
    },
    PrefabWasmModule: {
      scheduleVersion: "Compact<u32>",
      initial: "Compact<u32>",
      maximum: "Compact<u32>",
      refcount: "Compact<u64>",
      _reserved: "Option<Null>",
      code: "Bytes",
      originalCodeLen: "u32"
    },
    RentProjection: {
      _enum: {
        EvictionAt: "BlockNumber",
        NoEviction: "Null"
      }
    },
    ScheduleTo212: {
      version: "u32",
      putCodePerByteCost: "Gas",
      growMemCost: "Gas",
      regularOpCost: "Gas",
      returnDataPerByteCost: "Gas",
      eventDataPerByteCost: "Gas",
      eventPerTopicCost: "Gas",
      eventBaseCost: "Gas",
      sandboxDataReadCost: "Gas",
      sandboxDataWriteCost: "Gas",
      maxEventTopics: "u32",
      maxStackHeight: "u32",
      maxMemoryPages: "u32",
      enablePrintln: "bool",
      maxSubjectLen: "u32"
    },
    ScheduleTo258: {
      version: "u32",
      putCodePerByteCost: "Gas",
      growMemCost: "Gas",
      regularOpCost: "Gas",
      returnDataPerByteCost: "Gas",
      eventDataPerByteCost: "Gas",
      eventPerTopicCost: "Gas",
      eventBaseCost: "Gas",
      sandboxDataReadCost: "Gas",
      sandboxDataWriteCost: "Gas",
      transferCost: "Gas",
      maxEventTopics: "u32",
      maxStackHeight: "u32",
      maxMemoryPages: "u32",
      enablePrintln: "bool",
      maxSubjectLen: "u32"
    },
    ScheduleTo264: {
      version: "u32",
      enablePrintln: "bool",
      limits: "LimitsTo264",
      instructionWeights: "InstructionWeights",
      hostFnWeights: "HostFnWeightsTo264"
    },
    Schedule: {
      version: "u32",
      enablePrintln: "bool",
      limits: "Limits",
      instructionWeights: "InstructionWeights",
      hostFnWeights: "HostFnWeights"
    },
    SeedOf: "Hash",
    StorageDeposit: {
      _enum: {
        Refund: "Balance",
        Charge: "Balance"
      }
    },
    TombstoneContractInfo: "Hash",
    TrieId: "Bytes"
  }
};

// node_modules/@polkadot/types/interfaces/democracy/definitions.js
init_shim();
var AllConvictions = [
  // 0.1x votes, unlocked.
  "None",
  // 1x votes, locked for an enactment period following a successful vote.
  "Locked1x",
  // 2x votes, locked for 2x enactment periods following a successful vote.
  "Locked2x",
  // 3x votes, locked for 4x...
  "Locked3x",
  // 4x votes, locked for 8x...
  "Locked4x",
  // 5x votes, locked for 16x...
  "Locked5x",
  // 6x votes, locked for 32x...
  "Locked6x"
];
var definitions_default16 = {
  rpc: {},
  types: {
    AccountVote: {
      _enum: {
        Standard: "AccountVoteStandard",
        Split: "AccountVoteSplit"
      }
    },
    AccountVoteSplit: {
      aye: "Balance",
      nay: "Balance"
    },
    AccountVoteStandard: {
      vote: "Vote",
      balance: "Balance"
    },
    Conviction: {
      _enum: AllConvictions
    },
    Delegations: {
      votes: "Balance",
      capital: "Balance"
    },
    PreimageStatus: {
      _enum: {
        Missing: "BlockNumber",
        Available: "PreimageStatusAvailable"
      }
    },
    PreimageStatusAvailable: {
      data: "Bytes",
      provider: "AccountId",
      deposit: "Balance",
      since: "BlockNumber",
      expiry: "Option<BlockNumber>"
    },
    PriorLock: "(BlockNumber, Balance)",
    PropIndex: "u32",
    Proposal: "Call",
    ProxyState: {
      _enum: {
        Open: "AccountId",
        Active: "AccountId"
      }
    },
    ReferendumIndex: "u32",
    ReferendumInfoTo239: {
      end: "BlockNumber",
      proposalHash: "Hash",
      threshold: "VoteThreshold",
      delay: "BlockNumber"
    },
    ReferendumInfo: {
      _enum: {
        Ongoing: "ReferendumStatus",
        Finished: "ReferendumInfoFinished"
      }
    },
    ReferendumInfoFinished: {
      approved: "bool",
      end: "BlockNumber"
    },
    ReferendumStatus: {
      end: "BlockNumber",
      proposalHash: "Hash",
      threshold: "VoteThreshold",
      delay: "BlockNumber",
      tally: "Tally"
    },
    Tally: {
      ayes: "Balance",
      nays: "Balance",
      turnout: "Balance"
    },
    Voting: {
      _enum: {
        Direct: "VotingDirect",
        Delegating: "VotingDelegating"
      }
    },
    VotingDirect: {
      votes: "Vec<VotingDirectVote>",
      delegations: "Delegations",
      prior: "PriorLock"
    },
    VotingDirectVote: "(ReferendumIndex, AccountVote)",
    VotingDelegating: {
      balance: "Balance",
      target: "AccountId",
      conviction: "Conviction",
      delegations: "Delegations",
      prior: "PriorLock"
    }
  }
};

// node_modules/@polkadot/types/interfaces/dev/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/dev/rpc.js
init_shim();
var rpc4 = {
  getBlockStats: {
    description: "Reexecute the specified `block_hash` and gather statistics while doing so",
    isUnsafe: true,
    params: [
      {
        isHistoric: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Option<BlockStats>"
  }
};

// node_modules/@polkadot/types/interfaces/dev/definitions.js
var definitions_default17 = {
  rpc: rpc4,
  types: {
    BlockStats: {
      witnessLen: "u64",
      witnessCompactLen: "u64",
      blockLen: "u64",
      blockNumExtrinsics: "u64"
    }
  }
};

// node_modules/@polkadot/types/interfaces/discovery/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/discovery/runtime.js
init_shim();
var runtime11 = {
  AuthorityDiscoveryApi: [
    {
      methods: {
        authorities: {
          description: "Retrieve authority identifiers of the current and next authority set.",
          params: [],
          type: "Vec<AuthorityId>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/discovery/definitions.js
var definitions_default18 = {
  rpc: {},
  runtime: runtime11,
  types: {}
};

// node_modules/@polkadot/types/interfaces/elections/definitions.js
init_shim();
var definitions_default19 = {
  rpc: {},
  types: {
    ApprovalFlag: "u32",
    DefunctVoter: {
      who: "AccountId",
      voteCount: "Compact<u32>",
      candidateCount: "Compact<u32>"
    },
    Renouncing: {
      _enum: {
        Member: "Null",
        RunnerUp: "Null",
        Candidate: "Compact<u32>"
      }
    },
    SetIndex: "u32",
    Vote: "GenericVote",
    VoteIndex: "u32",
    VoterInfo: {
      lastActive: "VoteIndex",
      lastWin: "VoteIndex",
      pot: "Balance",
      stake: "Balance"
    },
    VoteThreshold: {
      _enum: [
        "Super Majority Approve",
        "Super Majority Against",
        "Simple Majority"
      ]
    }
  }
};

// node_modules/@polkadot/types/interfaces/engine/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/engine/rpc.js
init_shim();
var rpc5 = {
  createBlock: {
    description: "Instructs the manual-seal authorship task to create a new block",
    params: [
      {
        name: "createEmpty",
        type: "bool"
      },
      {
        name: "finalize",
        type: "bool"
      },
      {
        isOptional: true,
        name: "parentHash",
        type: "BlockHash"
      }
    ],
    type: "CreatedBlock"
  },
  finalizeBlock: {
    description: "Instructs the manual-seal authorship task to finalize a block",
    params: [
      {
        name: "hash",
        type: "BlockHash"
      },
      {
        isOptional: true,
        name: "justification",
        type: "Justification"
      }
    ],
    type: "bool"
  }
};

// node_modules/@polkadot/types/interfaces/engine/definitions.js
var definitions_default20 = {
  rpc: rpc5,
  types: {
    CreatedBlock: {
      _alias: {
        blockHash: "hash"
      },
      blockHash: "BlockHash",
      aux: "ImportedAux"
    },
    ImportedAux: {
      headerOnly: "bool",
      clearJustificationRequests: "bool",
      needsJustification: "bool",
      badJustification: "bool",
      needsFinalityProof: "bool",
      isNewBest: "bool"
    }
  }
};

// node_modules/@polkadot/types/interfaces/evm/definitions.js
init_shim();
var definitions_default21 = {
  rpc: {},
  types: {
    EvmAccount: {
      nonce: "u256",
      balance: "u256"
    },
    EvmCallInfo: {
      exitReason: "ExitReason",
      value: "Bytes",
      usedGas: "U256",
      logs: "Vec<EvmLog>"
    },
    EvmCreateInfo: {
      exitReason: "ExitReason",
      value: "H160",
      usedGas: "U256",
      logs: "Vec<EvmLog>"
    },
    EvmCallInfoV2: {
      exitReason: "ExitReason",
      value: "Bytes",
      usedGas: "U256",
      weightInfo: "Option<EvmWeightInfo>",
      logs: "Vec<EvmLog>"
    },
    EvmCreateInfoV2: {
      exitReason: "ExitReason",
      value: "H160",
      usedGas: "U256",
      weightInfo: "Option<EvmWeightInfo>",
      logs: "Vec<EvmLog>"
    },
    EvmLog: {
      address: "H160",
      topics: "Vec<H256>",
      data: "Bytes"
    },
    EvmVicinity: {
      gasPrice: "u256",
      origin: "H160"
    },
    EvmWeightInfo: {
      refTimeLimit: "Option<u64>",
      proofSizeLimit: "Option<u64>",
      refTimeUsage: "Option<u64>",
      proofSizeUsage: "Option<u64>"
    },
    ExitError: {
      _enum: {
        StackUnderflow: "Null",
        StackOverflow: "Null",
        InvalidJump: "Null",
        InvalidRange: "Null",
        DesignatedInvalid: "Null",
        CallTooDeep: "Null",
        CreateCollision: "Null",
        CreateContractLimit: "Null",
        OutOfOffset: "Null",
        OutOfGas: "Null",
        OutOfFund: "Null",
        PCUnderflow: "Null",
        CreateEmpty: "Null",
        Other: "Text"
      }
    },
    ExitFatal: {
      _enum: {
        NotSupported: "Null",
        UnhandledInterrupt: "Null",
        CallErrorAsFatal: "ExitError",
        Other: "Text"
      }
    },
    ExitReason: {
      _enum: {
        Succeed: "ExitSucceed",
        Error: "ExitError",
        Revert: "ExitRevert",
        Fatal: "ExitFatal"
      }
    },
    ExitRevert: {
      _enum: ["Reverted"]
    },
    ExitSucceed: {
      _enum: ["Stopped", "Returned", "Suicided"]
    }
  }
};

// node_modules/@polkadot/types/interfaces/extrinsics/definitions.js
init_shim();
var definitions_default22 = {
  rpc: {},
  types: {
    Extrinsic: "GenericExtrinsic",
    ExtrinsicEra: "GenericExtrinsicEra",
    ExtrinsicPayload: "GenericExtrinsicPayload",
    ExtrinsicSignature: "MultiSignature",
    ExtrinsicV4: "GenericExtrinsicV4",
    ExtrinsicPayloadV4: "GenericExtrinsicPayloadV4",
    ExtrinsicSignatureV4: "GenericExtrinsicSignatureV4",
    ExtrinsicUnknown: "GenericExtrinsicUnknown",
    ExtrinsicPayloadUnknown: "GenericExtrinsicPayloadUnknown",
    // eras
    Era: "ExtrinsicEra",
    ImmortalEra: "GenericImmortalEra",
    MortalEra: "GenericMortalEra",
    // signatures & signer
    AnySignature: "H512",
    MultiSignature: {
      _enum: {
        Ed25519: "Ed25519Signature",
        Sr25519: "Sr25519Signature",
        Ecdsa: "EcdsaSignature"
      }
    },
    Signature: "H512",
    SignerPayload: "GenericSignerPayload",
    EcdsaSignature: "[u8; 65]",
    Ed25519Signature: "H512",
    Sr25519Signature: "H512"
  }
};

// node_modules/@polkadot/types/interfaces/fungibles/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/fungibles/runtime.js
init_shim();
var runtime12 = {
  FungiblesApi: [
    {
      methods: {
        query_account_balances: {
          description: "Returns the list of all `MultiAsset` that an `AccountId` has",
          params: [
            {
              name: "account",
              type: "AccountId"
            }
          ],
          type: "Result<Vec<XcmV3MultiAsset>, FungiblesAccessError>"
        }
      },
      version: 1
    },
    {
      methods: {
        query_account_balances: {
          description: "Returns the list of all `MultiAsset` that an `AccountId` has",
          params: [
            {
              name: "account",
              type: "AccountId"
            }
          ],
          type: "Result<XcmVersionedMultiAssets, FungiblesAccessError>"
        }
      },
      version: 2
    }
  ]
};

// node_modules/@polkadot/types/interfaces/fungibles/definitions.js
var definitions_default23 = {
  rpc: {},
  runtime: runtime12,
  types: {
    FungiblesAccessError: {
      _enum: ["AssetIdConversionFailed", "AmountToBalanceConversionFailed"]
    }
  }
};

// node_modules/@polkadot/types/interfaces/genericAsset/definitions.js
init_shim();
var definitions_default24 = {
  rpc: {},
  types: {
    AssetOptions: {
      initalIssuance: "Compact<Balance>",
      permissions: "PermissionLatest"
    },
    Owner: {
      _enum: {
        None: "Null",
        Address: "AccountId"
      }
    },
    PermissionsV1: {
      update: "Owner",
      mint: "Owner",
      burn: "Owner"
    },
    PermissionVersions: {
      _enum: {
        V1: "PermissionsV1"
      }
    },
    PermissionLatest: "PermissionsV1"
  }
};

// node_modules/@polkadot/types/interfaces/gilt/definitions.js
init_shim();
var definitions_default25 = {
  rpc: {},
  types: {
    ActiveGilt: {
      proportion: "Perquintill",
      amount: "Balance",
      who: "AccountId",
      expiry: "BlockNumber"
    },
    ActiveGiltsTotal: {
      frozen: "Balance",
      proportion: "Perquintill",
      index: "ActiveIndex",
      target: "Perquintill"
    },
    ActiveIndex: "u32",
    GiltBid: {
      amount: "Balance",
      who: "AccountId"
    }
  }
};

// node_modules/@polkadot/types/interfaces/grandpa/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/grandpa/rpc.js
init_shim();
var rpc6 = {
  proveFinality: {
    description: "Prove finality for the given block number, returning the Justification for the last block in the set.",
    params: [
      {
        name: "blockNumber",
        type: "BlockNumber"
      }
    ],
    type: "Option<EncodedFinalityProofs>"
  },
  roundState: {
    description: "Returns the state of the current best round state as well as the ongoing background rounds",
    params: [],
    type: "ReportedRoundStates"
  },
  subscribeJustifications: {
    description: "Subscribes to grandpa justifications",
    params: [],
    pubsub: [
      "justifications",
      "subscribeJustifications",
      "unsubscribeJustifications"
    ],
    type: "JustificationNotification"
  }
};

// node_modules/@polkadot/types/interfaces/grandpa/runtime.js
init_shim();
var GRANDPA_V2_V3 = {
  generate_key_ownership_proof: {
    description: "Generates a proof of key ownership for the given authority in the given set.",
    params: [
      {
        name: "setId",
        type: "SetId"
      },
      {
        name: "authorityId",
        type: "AuthorityId"
      }
    ],
    type: "Option<OpaqueKeyOwnershipProof>"
  },
  grandpa_authorities: {
    description: "Get the current GRANDPA authorities and weights. This should not change except for when changes are scheduled and the corresponding delay has passed.",
    params: [],
    type: "AuthorityList"
  },
  submit_report_equivocation_unsigned_extrinsic: {
    description: "Submits an unsigned extrinsic to report an equivocation.",
    params: [
      {
        name: "equivocationProof",
        type: "GrandpaEquivocationProof"
      },
      {
        name: "keyOwnerProof",
        type: "OpaqueKeyOwnershipProof"
      }
    ],
    type: "Option<Null>"
  }
};
var runtime13 = {
  GrandpaApi: [
    {
      methods: {
        current_set_id: {
          description: "Get current GRANDPA authority set id.",
          params: [],
          type: "SetId"
        },
        ...GRANDPA_V2_V3
      },
      version: 3
    },
    {
      methods: GRANDPA_V2_V3,
      version: 2
    }
  ]
};

// node_modules/@polkadot/types/interfaces/grandpa/definitions.js
var definitions_default26 = {
  rpc: rpc6,
  runtime: runtime13,
  types: {
    AuthorityIndex: "u64",
    AuthorityList: "Vec<NextAuthority>",
    AuthoritySet: {
      currentAuthorities: "AuthorityList",
      setId: "u64",
      pendingStandardChanges: "ForkTreePendingChange",
      pendingForcedChanges: "Vec<PendingChange>",
      authoritySetChanges: "AuthoritySetChanges"
    },
    ForkTreePendingChange: {
      roots: "Vec<ForkTreePendingChangeNode>",
      bestFinalizedNumber: "Option<BlockNumber>"
    },
    ForkTreePendingChangeNode: {
      hash: "BlockHash",
      number: "BlockNumber",
      data: "PendingChange",
      children: "Vec<ForkTreePendingChangeNode>"
    },
    AuthoritySetChange: "(U64, BlockNumber)",
    AuthoritySetChanges: "Vec<AuthoritySetChange>",
    AuthorityWeight: "u64",
    DelayKind: {
      _enum: {
        Finalized: "Null",
        Best: "DelayKindBest"
      }
    },
    DelayKindBest: {
      medianLastFinalized: "BlockNumber"
    },
    EncodedFinalityProofs: "Bytes",
    GrandpaEquivocation: {
      _enum: {
        Prevote: "GrandpaEquivocationValue",
        Precommit: "GrandpaEquivocationValue"
      }
    },
    GrandpaEquivocationProof: {
      setId: "SetId",
      equivocation: "GrandpaEquivocation"
    },
    GrandpaEquivocationValue: {
      roundNumber: "u64",
      identity: "AuthorityId",
      first: "(GrandpaPrevote, AuthoritySignature)",
      second: "(GrandpaPrevote, AuthoritySignature)"
    },
    GrandpaPrevote: {
      targetHash: "Hash",
      targetNumber: "BlockNumber"
    },
    GrandpaCommit: {
      targetHash: "BlockHash",
      targetNumber: "BlockNumber",
      precommits: "Vec<GrandpaSignedPrecommit>"
    },
    GrandpaPrecommit: {
      targetHash: "BlockHash",
      targetNumber: "BlockNumber"
    },
    GrandpaSignedPrecommit: {
      precommit: "GrandpaPrecommit",
      signature: "AuthoritySignature",
      id: "AuthorityId"
    },
    GrandpaJustification: {
      round: "u64",
      commit: "GrandpaCommit",
      votesAncestries: "Vec<Header>"
    },
    JustificationNotification: "Bytes",
    KeyOwnerProof: "MembershipProof",
    NextAuthority: "(AuthorityId, AuthorityWeight)",
    PendingChange: {
      nextAuthorities: "AuthorityList",
      delay: "BlockNumber",
      canonHeight: "BlockNumber",
      canonHash: "BlockHash",
      delayKind: "DelayKind"
    },
    PendingPause: {
      scheduledAt: "BlockNumber",
      delay: "BlockNumber"
    },
    PendingResume: {
      scheduledAt: "BlockNumber",
      delay: "BlockNumber"
    },
    Precommits: {
      currentWeight: "u32",
      missing: "BTreeSet<AuthorityId>"
    },
    Prevotes: {
      currentWeight: "u32",
      missing: "BTreeSet<AuthorityId>"
    },
    ReportedRoundStates: {
      setId: "u32",
      best: "RoundState",
      background: "Vec<RoundState>"
    },
    RoundState: {
      round: "u32",
      totalWeight: "u32",
      thresholdWeight: "u32",
      prevotes: "Prevotes",
      precommits: "Precommits"
    },
    SetId: "u64",
    StoredPendingChange: {
      scheduledAt: "BlockNumber",
      delay: "BlockNumber",
      nextAuthorities: "AuthorityList"
    },
    StoredState: {
      _enum: {
        Live: "Null",
        PendingPause: "PendingPause",
        Paused: "Null",
        PendingResume: "PendingResume"
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/identity/definitions.js
init_shim();
var definitions_default27 = {
  rpc: {},
  types: {
    IdentityFields: {
      _set: {
        _bitLength: 64,
        // Mapped here to 32 bits, in Rust these are 64-bit values
        Display: 1,
        Legal: 2,
        Web: 4,
        Riot: 8,
        Email: 16,
        PgpFingerprint: 32,
        Image: 64,
        Twitter: 128
      }
    },
    IdentityInfoAdditional: "(Data, Data)",
    IdentityInfoTo198: {
      additional: "Vec<IdentityInfoAdditional>",
      display: "Data",
      legal: "Data",
      web: "Data",
      riot: "Data",
      email: "Data",
      pgpFingerprint: "Option<H160>",
      image: "Data"
    },
    IdentityInfo: {
      _fallback: "IdentityInfoTo198",
      additional: "Vec<IdentityInfoAdditional>",
      display: "Data",
      legal: "Data",
      web: "Data",
      riot: "Data",
      email: "Data",
      pgpFingerprint: "Option<H160>",
      image: "Data",
      twitter: "Data"
    },
    IdentityJudgement: {
      _enum: {
        Unknown: "Null",
        FeePaid: "Balance",
        Reasonable: "Null",
        KnownGood: "Null",
        OutOfDate: "Null",
        LowQuality: "Null",
        Erroneous: "Null"
      }
    },
    RegistrationJudgement: "(RegistrarIndex, IdentityJudgement)",
    RegistrationTo198: {
      judgements: "Vec<RegistrationJudgement>",
      deposit: "Balance",
      info: "IdentityInfoTo198"
    },
    Registration: {
      _fallback: "RegistrationTo198",
      judgements: "Vec<RegistrationJudgement>",
      deposit: "Balance",
      info: "IdentityInfo"
    },
    RegistrarIndex: "u32",
    RegistrarInfo: {
      account: "AccountId",
      fee: "Balance",
      fields: "IdentityFields"
    }
  }
};

// node_modules/@polkadot/types/interfaces/imOnline/definitions.js
init_shim();
var definitions_default28 = {
  rpc: {},
  types: {
    AuthIndex: "u32",
    AuthoritySignature: "Signature",
    Heartbeat: {
      blockNumber: "BlockNumber",
      networkState: "OpaqueNetworkState",
      sessionIndex: "SessionIndex",
      authorityIndex: "AuthIndex",
      validatorsLen: "u32"
    },
    HeartbeatTo244: {
      blockNumber: "BlockNumber",
      networkState: "OpaqueNetworkState",
      sessionIndex: "SessionIndex",
      authorityIndex: "AuthIndex"
    },
    OpaqueMultiaddr: "Opaque<Bytes>",
    OpaquePeerId: "Opaque<Bytes>",
    OpaqueNetworkState: {
      peerId: "OpaquePeerId",
      externalAddresses: "Vec<OpaqueMultiaddr>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/lottery/definitions.js
init_shim();
var definitions_default29 = {
  rpc: {},
  types: {
    CallIndex: "(u8, u8)",
    LotteryConfig: {
      price: "Balance",
      start: "BlockNumber",
      length: "BlockNumber",
      delay: "BlockNumber",
      repeat: "bool"
    }
  }
};

// node_modules/@polkadot/types/interfaces/mmr/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/mmr/rpc.js
init_shim();
var rpc7 = {
  generateProof: {
    description: "Generate MMR proof for the given block numbers.",
    params: [
      {
        name: "blockNumbers",
        type: "Vec<u64>"
      },
      {
        isOptional: true,
        name: "bestKnownBlockNumber",
        type: "u64"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "MmrLeafBatchProof"
  },
  root: {
    description: "Get the MMR root hash for the current best block.",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "MmrHash"
  },
  verifyProof: {
    description: "Verify an MMR proof",
    params: [
      {
        name: "proof",
        type: "MmrLeafBatchProof"
      }
    ],
    type: "bool"
  },
  verifyProofStateless: {
    description: "Verify an MMR proof statelessly given an mmr_root",
    params: [
      {
        name: "root",
        type: "MmrHash"
      },
      {
        name: "proof",
        type: "MmrLeafBatchProof"
      }
    ],
    type: "bool"
  }
};

// node_modules/@polkadot/types/interfaces/mmr/runtime.js
init_shim();
var MMR_V2 = {
  generate_proof: {
    description: "Generate MMR proof for the given block numbers.",
    params: [
      {
        name: "blockNumbers",
        type: "Vec<BlockNumber>"
      },
      {
        name: "bestKnownBlockNumber",
        type: "Option<BlockNumber>"
      }
    ],
    type: "Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"
  },
  root: {
    description: "Return the on-chain MMR root hash.",
    params: [],
    type: "Result<Hash, MmrError>"
  },
  verify_proof: {
    description: "Verify MMR proof against on-chain MMR.",
    params: [
      {
        name: "leaves",
        type: "Vec<MmrEncodableOpaqueLeaf>"
      },
      {
        name: "proof",
        type: "MmrBatchProof"
      }
    ],
    type: "Result<(), MmrError>"
  },
  verify_proof_stateless: {
    description: "Verify MMR proof against given root hash.",
    params: [
      {
        name: "root",
        type: "Hash"
      },
      {
        name: "leaves",
        type: "Vec<MmrEncodableOpaqueLeaf>"
      },
      {
        name: "proof",
        type: "MmrBatchProof"
      }
    ],
    type: "Result<(), MmrError>"
  }
};
var MMR_V1 = {
  generate_batch_proof: {
    description: "Generate MMR proof for a series of leaves under given indices.",
    params: [
      {
        name: "leafIndices",
        type: "Vec<MmrLeafIndex>"
      }
    ],
    type: "Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"
  },
  generate_proof: {
    description: "Generate MMR proof for a leaf under given index.",
    params: [
      {
        name: "leafIndex",
        type: "MmrLeafIndex"
      }
    ],
    type: "Result<(MmrEncodableOpaqueLeaf, MmrProof), MmrError>"
  },
  mmr_root: {
    description: "Return the on-chain MMR root hash.",
    params: [],
    type: "Result<Hash, MmrError>"
  },
  verify_batch_proof: {
    description: "Verify MMR proof against on-chain MMR for a batch of leaves.",
    params: [
      {
        name: "leaves",
        type: "Vec<MmrEncodableOpaqueLeaf>"
      },
      {
        name: "proof",
        type: "MmrBatchProof"
      }
    ],
    type: "Result<(), MmrError>"
  },
  verify_batch_proof_stateless: {
    description: "Verify MMR proof against given root hash or a batch of leaves.",
    params: [
      {
        name: "root",
        type: "Hash"
      },
      {
        name: "leaves",
        type: "Vec<MmrEncodableOpaqueLeaf>"
      },
      {
        name: "proof",
        type: "MmrBatchProof"
      }
    ],
    type: "Result<(), MmrError>"
  },
  verify_proof: {
    description: "Verify MMR proof against on-chain MMR.",
    params: [
      {
        name: "leaf",
        type: "MmrEncodableOpaqueLeaf"
      },
      {
        name: "proof",
        type: "MmrProof"
      }
    ],
    type: "Result<(), MmrError>"
  },
  verify_proof_stateless: {
    description: "Verify MMR proof against given root hash.",
    params: [
      {
        name: "root",
        type: "Hash"
      },
      {
        name: "leaf",
        type: "MmrEncodableOpaqueLeaf"
      },
      {
        name: "proof",
        type: "MmrProof"
      }
    ],
    type: "Result<(), MmrError>"
  }
};
var runtime14 = {
  MmrApi: [
    {
      methods: MMR_V2,
      version: 2
    },
    {
      methods: MMR_V1,
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/mmr/definitions.js
var definitions_default30 = {
  rpc: rpc7,
  runtime: runtime14,
  types: {
    MmrBatchProof: {
      leafIndices: "Vec<MmrLeafIndex>",
      leafCount: "MmrNodeIndex",
      items: "Vec<Hash>"
    },
    MmrEncodableOpaqueLeaf: "Bytes",
    MmrError: {
      _enum: ["Push", "GetRoot", "Commit", "GenerateProof", "Verify", "LeafNotFound", " PalletNotIncluded", "InvalidLeafIndex"]
    },
    MmrHash: "Hash",
    MmrLeafBatchProof: {
      blockHash: "BlockHash",
      leaves: "Bytes",
      proof: "Bytes"
    },
    MmrLeafIndex: "u64",
    MmrLeafProof: {
      blockHash: "BlockHash",
      leaf: "Bytes",
      proof: "Bytes"
    },
    MmrNodeIndex: "u64",
    MmrProof: {
      leafIndex: "MmrLeafIndex",
      leafCount: "MmrNodeIndex",
      items: "Vec<Hash>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/nfts/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/nfts/runtime.js
init_shim();
var runtime15 = {
  NftsApi: [
    {
      methods: {
        attribute: {
          description: "An attribute",
          params: [
            {
              name: "collection",
              type: "NftCollectionId"
            },
            {
              name: "item",
              type: "NftItemId"
            },
            {
              name: "key",
              type: "Bytes"
            }
          ],
          type: "Option<Bytes>"
        },
        collection_attribute: {
          description: "A collection attribute",
          params: [
            {
              name: "collection",
              type: "NftCollectionId"
            },
            {
              name: "key",
              type: "Bytes"
            }
          ],
          type: "Option<Bytes>"
        },
        collection_owner: {
          description: "A collection owner",
          params: [
            {
              name: "collection",
              type: "NftCollectionId"
            }
          ],
          type: "Option<AccountId>"
        },
        custom_attribute: {
          description: "A custom attribute",
          params: [
            {
              name: "account",
              type: "AccountId"
            },
            {
              name: "collection",
              type: "NftCollectionId"
            },
            {
              name: "item",
              type: "NftItemId"
            },
            {
              name: "key",
              type: "Bytes"
            }
          ],
          type: "Option<Bytes>"
        },
        owner: {
          description: "Collection owner",
          params: [
            {
              name: "collection",
              type: "NftCollectionId"
            },
            {
              name: "item",
              type: "NftItemId"
            }
          ],
          type: "Option<AccountId>"
        },
        system_attribute: {
          description: "System attribute",
          params: [
            {
              name: "collection",
              type: "NftCollectionId"
            },
            {
              name: "item",
              type: "NftItemId"
            },
            {
              name: "key",
              type: "Bytes"
            }
          ],
          type: "Option<Bytes>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/nfts/definitions.js
var definitions_default31 = {
  rpc: {},
  runtime: runtime15,
  types: {
    NftCollectionId: "u32",
    NftItemId: "u32"
  }
};

// node_modules/@polkadot/types/interfaces/nompools/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/nompools/runtime.js
init_shim();
var runtime16 = {
  NominationPoolsApi: [
    {
      methods: {
        balance_to_points: {
          description: "Returns the equivalent points of `new_funds` for a given pool.",
          params: [
            {
              name: "poolId",
              type: "NpPoolId"
            },
            {
              name: "newFunds",
              type: "Balance"
            }
          ],
          type: "Balance"
        },
        pending_rewards: {
          description: "Returns the pending rewards for the given member.",
          params: [
            {
              name: "member",
              type: "AccountId"
            }
          ],
          type: "Balance"
        },
        points_to_balance: {
          description: "Returns the equivalent balance of `points` for a given pool.",
          params: [
            {
              name: "poolId",
              type: "NpPoolId"
            },
            {
              name: "points",
              type: "Balance"
            }
          ],
          type: "Balance"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/nompools/definitions.js
var definitions_default32 = {
  rpc: {},
  runtime: runtime16,
  types: {
    NpApiError: {
      _enum: ["MemberNotFound", "OverflowInPendingRewards"]
    },
    NpPoolId: "u32"
  }
};

// node_modules/@polkadot/types/interfaces/offences/definitions.js
init_shim();
var definitions_default33 = {
  rpc: {},
  types: {
    DeferredOffenceOf: "(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)",
    Kind: "[u8; 16]",
    OffenceDetails: {
      offender: "Offender",
      reporters: "Vec<Reporter>"
    },
    Offender: "IdentificationTuple",
    OpaqueTimeSlot: "Bytes",
    ReportIdOf: "Hash",
    Reporter: "AccountId"
  }
};

// node_modules/@polkadot/types/interfaces/pow/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/pow/runtime.js
init_shim();
var runtime17 = {
  DifficultyApi: [
    {
      methods: {
        difficulty: {
          description: "Return the target difficulty of the next block.",
          params: [],
          // This is Difficulty in the original, however this is chain-specific
          type: "Raw"
        }
      },
      version: 1
    }
  ],
  TimestampApi: [
    {
      methods: {
        timestamp: {
          description: "API necessary for timestamp-based difficulty adjustment algorithms.",
          params: [],
          type: "Moment"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/pow/definitions.js
var definitions_default34 = {
  rpc: {},
  runtime: runtime17,
  types: {}
};

// node_modules/@polkadot/types/interfaces/proxy/definitions.js
init_shim();
var definitions_default35 = {
  rpc: {},
  types: {
    ProxyDefinition: {
      delegate: "AccountId",
      proxyType: "ProxyType",
      delay: "BlockNumber"
    },
    ProxyType: {
      _enum: ["Any", "NonTransfer", "Governance", "Staking"]
    },
    ProxyAnnouncement: {
      real: "AccountId",
      callHash: "Hash",
      height: "BlockNumber"
    }
  }
};

// node_modules/@polkadot/types/interfaces/recovery/definitions.js
init_shim();
var definitions_default36 = {
  rpc: {},
  types: {
    ActiveRecovery: {
      created: "BlockNumber",
      deposit: "Balance",
      friends: "Vec<AccountId>"
    },
    RecoveryConfig: {
      delayPeriod: "BlockNumber",
      deposit: "Balance",
      friends: "Vec<AccountId>",
      threshold: "u16"
    }
  }
};

// node_modules/@polkadot/types/interfaces/scheduler/definitions.js
init_shim();
var definitions_default37 = {
  rpc: {},
  types: {
    Period: "(BlockNumber, u32)",
    Priority: "u8",
    SchedulePeriod: "Period",
    SchedulePriority: "Priority",
    Scheduled: {
      maybeId: "Option<Bytes>",
      priority: "SchedulePriority",
      call: "Call",
      maybePeriodic: "Option<SchedulePeriod>",
      origin: "PalletsOrigin"
    },
    ScheduledTo254: {
      maybeId: "Option<Bytes>",
      priority: "SchedulePriority",
      call: "Call",
      maybePeriodic: "Option<SchedulePeriod>"
    },
    TaskAddress: "(BlockNumber, u32)"
  }
};

// node_modules/@polkadot/types/interfaces/session/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/session/runtime.js
init_shim();
var runtime18 = {
  SessionKeys: [
    {
      methods: {
        decode_session_keys: {
          description: "Decode the given public session keys.",
          params: [
            {
              name: "encoded",
              type: "Bytes"
            }
          ],
          type: "Option<Vec<(Bytes, KeyTypeId)>>"
        },
        generate_session_keys: {
          description: "Generate a set of session keys with optionally using the given seed.",
          params: [
            {
              name: "seed",
              type: "Option<Bytes>"
            }
          ],
          type: "Bytes"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/session/definitions.js
var keyTypes = {
  // key for beefy
  BeefyKey: "[u8; 33]",
  // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
  Keys: "SessionKeys4",
  SessionKeys1: "(AccountId)",
  SessionKeys2: "(AccountId, AccountId)",
  SessionKeys3: "(AccountId, AccountId, AccountId)",
  SessionKeys4: "(AccountId, AccountId, AccountId, AccountId)",
  SessionKeys5: "(AccountId, AccountId, AccountId, AccountId, AccountId)",
  SessionKeys6: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
  SessionKeys6B: "(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
  SessionKeys7: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
  SessionKeys7B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
  SessionKeys8: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
  SessionKeys8B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
  SessionKeys9: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
  SessionKeys9B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
  SessionKeys10: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
  SessionKeys10B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)"
};
var definitions_default38 = {
  rpc: {},
  runtime: runtime18,
  types: {
    ...keyTypes,
    FullIdentification: "Exposure",
    IdentificationTuple: "(ValidatorId, FullIdentification)",
    MembershipProof: {
      session: "SessionIndex",
      trieNodes: "Vec<Bytes>",
      validatorCount: "ValidatorCount"
    },
    SessionIndex: "u32",
    ValidatorCount: "u32"
  }
};

// node_modules/@polkadot/types/interfaces/society/definitions.js
init_shim();
var definitions_default39 = {
  rpc: {},
  types: {
    Bid: {
      who: "AccountId",
      kind: "BidKind",
      value: "Balance"
    },
    BidKind: {
      _enum: {
        Deposit: "Balance",
        Vouch: "(AccountId, Balance)"
      }
    },
    // a society-specific Judgement (not the same as identity Judgement)
    SocietyJudgement: {
      _enum: ["Rebid", "Reject", "Approve"]
    },
    // a society-specific Vote
    SocietyVote: {
      _enum: ["Skeptic", "Reject", "Approve"]
    },
    StrikeCount: "u32",
    VouchingStatus: {
      _enum: ["Vouching", "Banned"]
    }
  }
};

// node_modules/@polkadot/types/interfaces/staking/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/staking/runtime.js
init_shim();
var runtime19 = {
  StakingApi: [
    {
      methods: {
        nominations_quota: {
          description: "Returns the nominations quota for a nominator with a given balance.",
          params: [
            {
              name: "balance",
              type: "Balance"
            }
          ],
          type: "u32"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/staking/definitions.js
var deprecated = {
  Points: "u32",
  EraPoints: {
    total: "Points",
    individual: "Vec<Points>"
  }
};
var phragmen = {
  CompactAssignments: "CompactAssignmentsWith16",
  CompactAssignmentsWith16: {
    votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
    votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
    votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
    votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
    votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
    votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
    votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
    votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
    votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
    votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
    votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
    votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
    votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
    votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
    votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
    votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>"
  },
  CompactAssignmentsWith24: {
    votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
    votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
    votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
    votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
    votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
    votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
    votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
    votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
    votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
    votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
    votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
    votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
    votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
    votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
    votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
    votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>",
    votes17: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>",
    votes18: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>",
    votes19: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>",
    votes20: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>",
    votes21: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>",
    votes22: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>",
    votes23: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>",
    votes24: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>"
  },
  CompactAssignmentsTo265: "CompactAssignmentsWith16",
  CompactAssignmentsTo257: {
    votes1: "Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>",
    votes2: "Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>",
    votes3: "Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>",
    votes4: "Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>",
    votes5: "Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>",
    votes6: "Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>",
    votes7: "Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>",
    votes8: "Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>",
    votes9: "Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>",
    votes10: "Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>",
    votes11: "Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>",
    votes12: "Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>",
    votes13: "Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>",
    votes14: "Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>",
    votes15: "Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>",
    votes16: "Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>"
  },
  CompactScore: "(ValidatorIndex, OffchainAccuracy)",
  CompactScoreCompact: "(ValidatorIndexCompact, OffchainAccuracyCompact)",
  ElectionCompute: {
    // in previous versions the last entry was "AuthorityId"
    // (since no data attached, and it is via SCALE can rename)
    _enum: ["OnChain", "Signed", "Unsigned"]
  },
  ElectionPhase: {
    _enum: {
      Off: null,
      Signed: null,
      Unsigned: "(bool, BlockNumber)",
      Emergency: null
    }
  },
  ElectionResult: {
    compute: "ElectionCompute",
    slotStake: "Balance",
    electedStashes: "Vec<AccountId>",
    exposures: "Vec<(AccountId, Exposure)>"
  },
  ElectionScore: "[u128; 3]",
  ElectionSize: {
    validators: "Compact<ValidatorIndex>",
    nominators: "Compact<NominatorIndex>"
  },
  ElectionStatus: {
    _enum: {
      Close: "Null",
      Open: "BlockNumber"
    }
  },
  ExtendedBalance: "u128",
  RawSolution: "RawSolutionWith16",
  RawSolutionWith16: {
    compact: "CompactAssignmentsWith16",
    score: "ElectionScore",
    round: "u32"
  },
  RawSolutionWith24: {
    compact: "CompactAssignmentsWith24",
    score: "ElectionScore",
    round: "u32"
  },
  RawSolutionTo265: "RawSolutionWith16",
  ReadySolution: {
    supports: "SolutionSupports",
    score: "ElectionScore",
    compute: "ElectionCompute"
  },
  RoundSnapshot: {
    voters: "Vec<(AccountId, VoteWeight, Vec<AccountId>)>",
    targets: "Vec<AccountId>"
  },
  SeatHolder: {
    who: "AccountId",
    stake: "Balance",
    deposit: "Balance"
  },
  SignedSubmission: {
    _fallback: "SignedSubmissionTo276",
    who: "AccountId",
    deposit: "Balance",
    solution: "RawSolution",
    reward: "Balance"
  },
  SignedSubmissionTo276: {
    who: "AccountId",
    deposit: "Balance",
    solution: "RawSolution"
  },
  SignedSubmissionOf: "SignedSubmission",
  SolutionOrSnapshotSize: {
    voters: "Compact<u32>",
    targets: "Compact<u32>"
  },
  SolutionSupport: {
    total: "ExtendedBalance",
    voters: "Vec<(AccountId, ExtendedBalance)>"
  },
  SolutionSupports: "Vec<(AccountId, SolutionSupport)>",
  Supports: "SolutionSupports",
  SubmissionIndicesOf: "BTreeMap<ElectionScore, u32>",
  Voter: {
    votes: "Vec<AccountId>",
    stake: "Balance",
    deposit: "Balance"
  },
  VoteWeight: "u64"
};
var definitions_default40 = {
  rpc: {},
  runtime: runtime19,
  types: {
    ...deprecated,
    ...phragmen,
    ActiveEraInfo: {
      index: "EraIndex",
      start: "Option<Moment>"
    },
    EraIndex: "u32",
    EraRewardPoints: {
      total: "RewardPoint",
      individual: "BTreeMap<AccountId, RewardPoint>"
    },
    EraRewards: {
      total: "u32",
      rewards: "Vec<u32>"
    },
    Exposure: {
      total: "Compact<Balance>",
      own: "Compact<Balance>",
      others: "Vec<IndividualExposure>"
    },
    Forcing: {
      _enum: [
        "NotForcing",
        "ForceNew",
        "ForceNone",
        "ForceAlways"
      ]
    },
    IndividualExposure: {
      who: "AccountId",
      value: "Compact<Balance>"
    },
    KeyType: "AccountId",
    MomentOf: "Moment",
    Nominations: {
      targets: "Vec<AccountId>",
      submittedIn: "EraIndex",
      suppressed: "bool"
    },
    NominatorIndex: "u32",
    NominatorIndexCompact: "Compact<NominatorIndex>",
    OffchainAccuracy: "PerU16",
    OffchainAccuracyCompact: "Compact<OffchainAccuracy>",
    PhragmenScore: "[u128; 3]",
    Points: "u32",
    RewardDestination: {
      _enum: {
        Staked: "Null",
        Stash: "Null",
        Controller: "Null",
        Account: "AccountId",
        None: "Null"
      }
    },
    RewardPoint: "u32",
    SlashJournalEntry: {
      who: "AccountId",
      amount: "Balance",
      ownSlash: "Balance"
    },
    SlashingSpansTo204: {
      spanIndex: "SpanIndex",
      lastStart: "EraIndex",
      prior: "Vec<EraIndex>"
    },
    SlashingSpans: {
      spanIndex: "SpanIndex",
      lastStart: "EraIndex",
      lastNonzeroSlash: "EraIndex",
      prior: "Vec<EraIndex>"
    },
    SpanIndex: "u32",
    SpanRecord: {
      slashed: "Balance",
      paidOut: "Balance"
    },
    StakingLedgerTo223: {
      stash: "AccountId",
      total: "Compact<Balance>",
      active: "Compact<Balance>",
      unlocking: "Vec<UnlockChunk>"
    },
    StakingLedgerTo240: {
      _fallback: "StakingLedgerTo223",
      stash: "AccountId",
      total: "Compact<Balance>",
      active: "Compact<Balance>",
      unlocking: "Vec<UnlockChunk>",
      lastReward: "Option<EraIndex>"
    },
    StakingLedger: {
      stash: "AccountId",
      total: "Compact<Balance>",
      active: "Compact<Balance>",
      unlocking: "Vec<UnlockChunk>",
      claimedRewards: "Vec<EraIndex>"
    },
    UnappliedSlashOther: "(AccountId, Balance)",
    UnappliedSlash: {
      validator: "AccountId",
      own: "Balance",
      others: "Vec<UnappliedSlashOther>",
      reporters: "Vec<AccountId>",
      payout: "Balance"
    },
    UnlockChunk: {
      value: "Compact<Balance>",
      era: "Compact<BlockNumber>"
    },
    ValidatorIndex: "u16",
    ValidatorIndexCompact: "Compact<ValidatorIndex>",
    ValidatorPrefs: "ValidatorPrefsWithBlocked",
    ValidatorPrefsWithCommission: {
      commission: "Compact<Perbill>"
    },
    ValidatorPrefsWithBlocked: {
      commission: "Compact<Perbill>",
      blocked: "bool"
    },
    ValidatorPrefsTo196: {
      validatorPayment: "Compact<Balance>"
    },
    ValidatorPrefsTo145: {
      unstakeThreshold: "Compact<u32>",
      validatorPayment: "Compact<Balance>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/support/definitions.js
init_shim();
var definitions_default41 = {
  rpc: {},
  types: {
    WeightToFeeCoefficient: {
      coeffInteger: "Balance",
      coeffFrac: "Perbill",
      negative: "bool",
      degree: "u8"
    }
  }
};

// node_modules/@polkadot/types/interfaces/syncstate/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/syncstate/rpc.js
init_shim();
var rpc8 = {
  genSyncSpec: {
    description: "Returns the json-serialized chainspec running the node, with a sync state.",
    endpoint: "sync_state_genSyncSpec",
    params: [
      {
        name: "raw",
        type: "bool"
      }
    ],
    type: "Json"
  }
};

// node_modules/@polkadot/types/interfaces/syncstate/definitions.js
var definitions_default42 = {
  rpc: rpc8,
  types: {}
};

// node_modules/@polkadot/types/interfaces/system/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/system/rpc.js
init_shim();
var rpc9 = {
  accountNextIndex: {
    alias: ["account_nextIndex"],
    description: "Retrieves the next accountIndex as available on the node",
    params: [
      {
        name: "accountId",
        type: "AccountId"
      }
    ],
    type: "Index"
  },
  addLogFilter: {
    description: "Adds the supplied directives to the current log filter",
    isUnsafe: true,
    params: [
      {
        name: "directives",
        type: "Text"
      }
    ],
    type: "Null"
  },
  addReservedPeer: {
    description: "Adds a reserved peer",
    isUnsafe: true,
    params: [
      {
        name: "peer",
        type: "Text"
      }
    ],
    type: "Text"
  },
  chain: {
    description: "Retrieves the chain",
    params: [],
    type: "Text"
  },
  chainType: {
    description: "Retrieves the chain type",
    params: [],
    type: "ChainType"
  },
  dryRun: {
    alias: ["system_dryRunAt"],
    description: "Dry run an extrinsic at a given block",
    isUnsafe: true,
    params: [
      {
        name: "extrinsic",
        type: "Bytes"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ApplyExtrinsicResult"
  },
  health: {
    description: "Return health status of the node",
    noErrorLog: true,
    params: [],
    type: "Health"
  },
  localListenAddresses: {
    description: "The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example",
    params: [],
    type: "Vec<Text>"
  },
  localPeerId: {
    description: "Returns the base58-encoded PeerId of the node",
    params: [],
    type: "Text"
  },
  name: {
    description: "Retrieves the node name",
    params: [],
    type: "Text"
  },
  networkState: {
    alias: ["system_unstable_networkState"],
    description: "Returns current state of the network",
    isUnsafe: true,
    params: [],
    type: "NetworkState"
  },
  nodeRoles: {
    description: "Returns the roles the node is running as",
    params: [],
    type: "Vec<NodeRole>"
  },
  peers: {
    description: "Returns the currently connected peers",
    isUnsafe: true,
    params: [],
    type: "Vec<PeerInfo>"
  },
  properties: {
    description: "Get a custom set of properties as a JSON object, defined in the chain spec",
    params: [],
    type: "ChainProperties"
  },
  removeReservedPeer: {
    description: "Remove a reserved peer",
    isUnsafe: true,
    params: [
      {
        name: "peerId",
        type: "Text"
      }
    ],
    type: "Text"
  },
  reservedPeers: {
    description: "Returns the list of reserved peers",
    params: [],
    type: "Vec<Text>"
  },
  resetLogFilter: {
    description: "Resets the log filter to Substrate defaults",
    isUnsafe: true,
    params: [],
    type: "Null"
  },
  syncState: {
    description: "Returns the state of the syncing of the node",
    params: [],
    type: "SyncState"
  },
  version: {
    description: "Retrieves the version of the node",
    params: [],
    type: "Text"
  }
};

// node_modules/@polkadot/types/interfaces/system/runtime.js
init_shim();
var runtime20 = {
  AccountNonceApi: [
    {
      methods: {
        account_nonce: {
          description: "The API to query account nonce (aka transaction index)",
          params: [
            {
              name: "accountId",
              type: "AccountId"
            }
          ],
          type: "Index"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/system/definitions.js
var definitions_default43 = {
  rpc: rpc9,
  runtime: runtime20,
  types: {
    AccountInfo: "AccountInfoWithTripleRefCount",
    AccountInfoWithRefCountU8: {
      nonce: "Index",
      refcount: "u8",
      data: "AccountData"
    },
    AccountInfoWithRefCount: {
      _fallback: "AccountInfoWithRefCountU8",
      nonce: "Index",
      refcount: "RefCount",
      data: "AccountData"
    },
    AccountInfoWithDualRefCount: {
      _fallback: "AccountInfoWithRefCount",
      nonce: "Index",
      consumers: "RefCount",
      providers: "RefCount",
      data: "AccountData"
    },
    // original naming
    AccountInfoWithProviders: "AccountInfoWithDualRefCount",
    AccountInfoWithTripleRefCount: {
      _fallback: "AccountInfoWithDualRefCount",
      nonce: "Index",
      consumers: "RefCount",
      providers: "RefCount",
      sufficients: "RefCount",
      data: "AccountData"
    },
    ApplyExtrinsicResult: "Result<DispatchOutcome, TransactionValidityError>",
    ApplyExtrinsicResultPre6: "Result<DispatchOutcomePre6, TransactionValidityError>",
    ArithmeticError: {
      _enum: [
        "Underflow",
        "Overflow",
        "DivisionByZero"
      ]
    },
    BlockLength: {
      max: "PerDispatchClassU32"
    },
    BlockWeights: {
      baseBlock: "Weight",
      maxBlock: "Weight",
      perClass: "PerDispatchClassWeightsPerClass"
    },
    ChainProperties: "GenericChainProperties",
    ChainType: {
      _enum: {
        Development: "Null",
        Local: "Null",
        Live: "Null",
        Custom: "Text"
      }
    },
    ConsumedWeight: "PerDispatchClassWeight",
    DigestOf: "Digest",
    DispatchClass: {
      _enum: ["Normal", "Operational", "Mandatory"]
    },
    DispatchError: {
      _enum: {
        Other: "Null",
        CannotLookup: "Null",
        BadOrigin: "Null",
        Module: "DispatchErrorModule",
        ConsumerRemaining: "Null",
        NoProviders: "Null",
        TooManyConsumers: "Null",
        Token: "TokenError",
        Arithmetic: "ArithmeticError",
        Transactional: "TransactionalError",
        Exhausted: "Null",
        Corruption: "Null",
        Unavailable: "Null"
      }
    },
    DispatchErrorPre6: {
      _enum: {
        Other: "Null",
        CannotLookup: "Null",
        BadOrigin: "Null",
        Module: "DispatchErrorModulePre6",
        ConsumerRemaining: "Null",
        NoProviders: "Null",
        TooManyConsumers: "Null",
        Token: "TokenError",
        Arithmetic: "ArithmeticError",
        Transactional: "TransactionalError"
      }
    },
    DispatchErrorPre6First: {
      // The enum was modified mid-flight, affecting asset chains -
      // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
      _enum: {
        Other: "Null",
        CannotLookup: "Null",
        BadOrigin: "Null",
        Module: "DispatchErrorModulePre6",
        ConsumerRemaining: "Null",
        NoProviders: "Null",
        Token: "TokenError",
        Arithmetic: "ArithmeticError",
        Transactional: "TransactionalError"
      }
    },
    DispatchErrorModuleU8: {
      index: "u8",
      error: "u8"
    },
    DispatchErrorModuleU8a: {
      index: "u8",
      error: "[u8; 4]"
    },
    DispatchErrorModule: "DispatchErrorModuleU8a",
    DispatchErrorModulePre6: "DispatchErrorModuleU8",
    DispatchErrorTo198: {
      module: "Option<u8>",
      error: "u8"
    },
    DispatchInfo: {
      weight: "Weight",
      class: "DispatchClass",
      paysFee: "Pays"
    },
    DispatchInfoTo190: {
      weight: "Weight",
      class: "DispatchClass"
    },
    DispatchInfoTo244: {
      weight: "Weight",
      class: "DispatchClass",
      paysFee: "bool"
    },
    DispatchOutcome: "Result<(), DispatchError>",
    DispatchOutcomePre6: "Result<(), DispatchErrorPre6>",
    DispatchResult: "Result<(), DispatchError>",
    DispatchResultOf: "DispatchResult",
    DispatchResultTo198: "Result<(), Text>",
    Event: "GenericEvent",
    EventId: "[u8; 2]",
    EventIndex: "u32",
    EventRecord: {
      phase: "Phase",
      event: "Event",
      topics: "Vec<Hash>"
    },
    Health: {
      peers: "u64",
      isSyncing: "bool",
      shouldHavePeers: "bool"
    },
    InvalidTransaction: {
      _enum: {
        Call: "Null",
        Payment: "Null",
        Future: "Null",
        Stale: "Null",
        BadProof: "Null",
        AncientBirthBlock: "Null",
        ExhaustsResources: "Null",
        Custom: "u8",
        BadMandatory: "Null",
        MandatoryDispatch: "Null",
        BadSigner: "Null"
      }
    },
    Key: "Bytes",
    LastRuntimeUpgradeInfo: {
      specVersion: "Compact<u32>",
      specName: "Text"
    },
    NetworkState: {
      peerId: "Text",
      listenedAddresses: "Vec<Text>",
      externalAddresses: "Vec<Text>",
      connectedPeers: "HashMap<Text, Peer>",
      notConnectedPeers: "HashMap<Text, NotConnectedPeer>",
      averageDownloadPerSec: "u64",
      averageUploadPerSec: "u64",
      peerset: "NetworkStatePeerset"
    },
    NetworkStatePeerset: {
      messageQueue: "u64",
      nodes: "HashMap<Text, NetworkStatePeersetInfo>"
    },
    NetworkStatePeersetInfo: {
      connected: "bool",
      reputation: "i32"
    },
    NodeRole: {
      _enum: {
        Full: "Null",
        LightClient: "Null",
        Authority: "Null",
        UnknownRole: "u8"
      }
    },
    NotConnectedPeer: {
      knownAddresses: "Vec<Text>",
      latestPingTime: "Option<PeerPing>",
      versionString: "Option<Text>"
    },
    Peer: {
      enabled: "bool",
      endpoint: "PeerEndpoint",
      knownAddresses: "Vec<Text>",
      latestPingTime: "PeerPing",
      open: "bool",
      versionString: "Text"
    },
    PeerEndpoint: {
      listening: "PeerEndpointAddr"
    },
    PeerEndpointAddr: {
      _alias: {
        localAddr: "local_addr",
        sendBackAddr: "send_back_addr"
      },
      localAddr: "Text",
      sendBackAddr: "Text"
    },
    PeerPing: {
      nanos: "u64",
      secs: "u64"
    },
    PeerInfo: {
      peerId: "Text",
      roles: "Text",
      protocolVersion: "u32",
      bestHash: "Hash",
      bestNumber: "BlockNumber"
    },
    PerDispatchClassU32: {
      normal: "u32",
      operational: "u32",
      mandatory: "u32"
    },
    PerDispatchClassWeight: {
      normal: "Weight",
      operational: "Weight",
      mandatory: "Weight"
    },
    PerDispatchClassWeightsPerClass: {
      normal: "WeightPerClass",
      operational: "WeightPerClass",
      mandatory: "WeightPerClass"
    },
    Phase: {
      _enum: {
        ApplyExtrinsic: "u32",
        Finalization: "Null",
        Initialization: "Null"
      }
    },
    RawOrigin: {
      _enum: {
        Root: "Null",
        Signed: "AccountId",
        None: "Null"
      }
    },
    RefCount: "u32",
    RefCountTo259: "u8",
    SyncState: {
      startingBlock: "BlockNumber",
      currentBlock: "BlockNumber",
      highestBlock: "Option<BlockNumber>"
    },
    SystemOrigin: "RawOrigin",
    TokenError: {
      _enum: [
        "NoFunds",
        "WouldDie",
        "BelowMinimum",
        "CannotCreate",
        "UnknownAsset",
        "Frozen",
        "Unsupported",
        // these are dropped, but still in older versions
        // (if this adjusts, will need to take a re-look)
        "Underflow",
        "Overflow"
      ]
    },
    TransactionValidityError: {
      _enum: {
        Invalid: "InvalidTransaction",
        Unknown: "UnknownTransaction"
      }
    },
    TransactionalError: {
      _enum: [
        "LimitReached",
        "NoLayer"
      ]
    },
    UnknownTransaction: {
      _enum: {
        CannotLookup: "Null",
        NoUnsignedValidator: "Null",
        Custom: "u8"
      }
    },
    WeightPerClass: {
      baseExtrinsic: "Weight",
      maxExtrinsic: "Option<Weight>",
      maxTotal: "Option<Weight>",
      reserved: "Option<Weight>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/treasury/definitions.js
init_shim();
var definitions_default44 = {
  rpc: {},
  types: {
    Bounty: {
      proposer: "AccountId",
      value: "Balance",
      fee: "Balance",
      curatorDeposit: "Balance",
      bond: "Balance",
      status: "BountyStatus"
    },
    BountyIndex: "u32",
    BountyStatus: {
      _enum: {
        Proposed: "Null",
        Approved: "Null",
        Funded: "Null",
        CuratorProposed: "BountyStatusCuratorProposed",
        Active: "BountyStatusActive",
        PendingPayout: "BountyStatusPendingPayout"
      }
    },
    BountyStatusActive: {
      curator: "AccountId",
      updateDue: "BlockNumber"
    },
    BountyStatusCuratorProposed: {
      curator: "AccountId"
    },
    BountyStatusPendingPayout: {
      curator: "AccountId",
      beneficiary: "AccountId",
      unlockAt: "BlockNumber"
    },
    OpenTip: {
      reason: "Hash",
      who: "AccountId",
      finder: "AccountId",
      deposit: "Balance",
      closes: "Option<BlockNumber>",
      tips: "Vec<OpenTipTip>",
      findersFee: "bool"
    },
    OpenTipTo225: {
      reason: "Hash",
      who: "AccountId",
      finder: "Option<OpenTipFinderTo225>",
      closes: "Option<BlockNumber>",
      tips: "Vec<OpenTipTip>"
    },
    OpenTipFinderTo225: "(AccountId, Balance)",
    OpenTipTip: "(AccountId, Balance)",
    TreasuryProposal: {
      proposer: "AccountId",
      value: "Balance",
      beneficiary: "AccountId",
      bond: "Balance"
    }
  }
};

// node_modules/@polkadot/types/interfaces/txpayment/definitions.js
init_shim();
var definitions_default45 = {
  rpc: {},
  types: {
    Multiplier: "Fixed128"
  }
};

// node_modules/@polkadot/types/interfaces/txqueue/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/txqueue/runtime.js
init_shim();
var runtime21 = {
  TaggedTransactionQueue: [
    {
      methods: {
        validate_transaction: {
          description: "Validate the transaction.",
          params: [
            {
              name: "source",
              type: "TransactionSource"
            },
            {
              name: "tx",
              type: "Extrinsic"
            },
            {
              name: "blockHash",
              type: "BlockHash"
            }
          ],
          type: "TransactionValidity"
        }
      },
      version: 3
    },
    {
      methods: {
        validate_transaction: {
          description: "Validate the transaction.",
          params: [
            {
              name: "source",
              type: "TransactionSource"
            },
            {
              name: "tx",
              type: "Extrinsic"
            }
          ],
          type: "TransactionValidity"
        }
      },
      version: 2
    },
    {
      methods: {
        validate_transaction: {
          description: "Validate the transaction.",
          params: [
            {
              name: "tx",
              type: "Extrinsic"
            }
          ],
          type: "TransactionValidity"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/txqueue/definitions.js
var definitions_default46 = {
  rpc: {},
  runtime: runtime21,
  types: {
    TransactionSource: {
      _enum: ["InBlock", "Local", "External"]
    },
    TransactionValidity: "Result<ValidTransaction, TransactionValidityError>",
    ValidTransaction: {
      priority: "TransactionPriority",
      requires: "Vec<TransactionTag>",
      provides: "Vec<TransactionTag>",
      longevity: "TransactionLongevity",
      propagate: "bool"
    }
  }
};

// node_modules/@polkadot/types/interfaces/uniques/definitions.js
init_shim();
var definitions_default47 = {
  rpc: {},
  types: {
    ClassId: "u32",
    InstanceId: "u32",
    DepositBalance: "Balance",
    DepositBalanceOf: "Balance",
    ClassDetails: {
      owner: "AccountId",
      issuer: "AccountId",
      admin: "AccountId",
      freezer: "AccountId",
      totalDeposit: "DepositBalance",
      freeHolding: "bool",
      instances: "u32",
      instanceMetadatas: "u32",
      attributes: "u32",
      isFrozen: "bool"
    },
    DestroyWitness: {
      instances: "Compact<u32>",
      instanceMetadatas: "Compact<u32>",
      attributes: "Compact<u32>"
    },
    InstanceDetails: {
      owner: "AccountId",
      approved: "Option<AccountId>",
      isFrozen: "bool",
      deposit: "DepositBalance"
    },
    ClassMetadata: {
      deposit: "DepositBalance",
      data: "Vec<u8>",
      isFrozen: "bool"
    },
    InstanceMetadata: {
      deposit: "DepositBalance",
      data: "Vec<u8>",
      isFrozen: "bool"
    }
  }
};

// node_modules/@polkadot/types/interfaces/utility/definitions.js
init_shim();
var definitions_default48 = {
  rpc: {},
  types: {
    Multisig: {
      when: "Timepoint",
      deposit: "Balance",
      depositor: "AccountId",
      approvals: "Vec<AccountId>"
    },
    Timepoint: {
      height: "BlockNumber",
      index: "u32"
    }
  }
};

// node_modules/@polkadot/types/interfaces/vesting/definitions.js
init_shim();
var definitions_default49 = {
  rpc: {},
  types: {
    VestingInfo: {
      locked: "Balance",
      perBlock: "Balance",
      startingBlock: "BlockNumber"
    }
  }
};

// node_modules/@polkadot/types/interfaces/attestations/definitions.js
init_shim();
var definitions_default50 = {
  rpc: {},
  types: {
    BlockAttestations: {
      receipt: "CandidateReceipt",
      valid: "Vec<AccountId>",
      invalid: "Vec<AccountId>"
    },
    IncludedBlocks: {
      actualNumber: "BlockNumber",
      session: "SessionIndex",
      randomSeed: "H256",
      activeParachains: "Vec<ParaId>",
      paraBlocks: "Vec<Hash>"
    },
    MoreAttestations: {}
  }
};

// node_modules/@polkadot/types/interfaces/bridges/definitions.js
init_shim();
var definitions_default51 = {
  rpc: {},
  types: {
    BridgedBlockHash: "H256",
    BridgedBlockNumber: "BlockNumber",
    BridgedHeader: "Header",
    BridgeMessageId: "(LaneId, MessageNonce)",
    CallOrigin: {
      _enum: {
        SourceRoot: "Null",
        TargetAccount: "(AccountId, MultiSigner, MultiSignature)",
        SourceAccount: "AccountId"
      }
    },
    ChainId: "[u8; 4]",
    DeliveredMessages: {
      begin: "MessageNonce",
      end: "MessageNonce",
      // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
      dispatchResults: "BitVec"
    },
    DispatchFeePayment: {
      _enum: ["AtSourceChain", "AtTargetChain"]
    },
    InboundLaneData: {
      relayers: "Vec<UnrewardedRelayer>",
      lastConfirmedNonce: "MessageNonce"
    },
    InboundRelayer: "AccountId",
    InitializationData: {
      header: "Header",
      authorityList: "AuthorityList",
      setId: "SetId",
      isHalted: "bool"
    },
    LaneId: "[u8; 4]",
    MessageData: {
      payload: "Bytes",
      fee: "Balance"
    },
    MessagesDeliveryProofOf: {
      bridgedHeaderHash: "BlockHash",
      storageProof: "Vec<Bytes>",
      lane: "LaneId"
    },
    MessageKey: {
      laneId: "LaneId",
      nonce: "MessageNonce"
    },
    MessageNonce: "u64",
    MessagesProofOf: {
      bridgedHeaderHash: "BridgedBlockHash",
      storageProof: "Vec<Bytes>",
      lane: "LaneId",
      noncesStart: "MessageNonce",
      noncesEnd: "MessageNonce"
    },
    OperatingMode: {
      _enum: ["Normal", "RejectingOutboundMessages", "Halted"]
    },
    OutboundLaneData: {
      oldestUnprunedNonce: "MessageNonce",
      latestReceivedNonce: "MessageNonce",
      latestGeneratedNonce: "MessageNonce"
    },
    OutboundMessageFee: "Balance",
    OutboundPayload: {
      specVersion: "u32",
      weight: "Weight",
      origin: "CallOrigin",
      dispatchFeePayment: "DispatchFeePayment",
      call: "Bytes"
    },
    Parameter: "Null",
    RelayerId: "AccountId",
    UnrewardedRelayer: {
      relayer: "RelayerId",
      messages: "DeliveredMessages"
    },
    UnrewardedRelayersState: {
      unrewardedRelayer_Entries: "MessageNonce",
      messagesInOldestEntry: "MessageNonce",
      totalMessages: "MessageNonce"
    }
  }
};

// node_modules/@polkadot/types/interfaces/claims/definitions.js
init_shim();
var definitions_default52 = {
  rpc: {},
  types: {
    StatementKind: {
      _enum: ["Regular", "Saft"]
    }
  }
};

// node_modules/@polkadot/types/interfaces/crowdloan/definitions.js
init_shim();
var definitions_default53 = {
  rpc: {},
  types: {
    FundIndex: "u32",
    LastContribution: {
      _enum: {
        Never: "Null",
        PreEnding: "u32",
        Ending: "BlockNumber"
      }
    },
    FundInfo: {
      depositor: "AccountId",
      verifier: "Option<MultiSigner>",
      deposit: "Balance",
      raised: "Balance",
      end: "BlockNumber",
      cap: "Balance",
      lastContribution: "LastContribution",
      firstPeriod: "LeasePeriod",
      lastPeriod: "LeasePeriod",
      trieIndex: "TrieIndex"
    },
    TrieIndex: "u32"
  }
};

// node_modules/@polkadot/types/interfaces/cumulus/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/cumulus/runtime.js
init_shim();
var runtime22 = {
  CollectCollationInfo: [
    {
      methods: {
        collect_collation_info: {
          description: "Collect information about a collation.",
          params: [
            {
              name: "header",
              type: "Header"
            }
          ],
          type: "CollationInfo"
        }
      },
      version: 2
    },
    {
      methods: {
        collect_collation_info: {
          description: "Collect information about a collation.",
          params: [],
          type: "CollationInfoV1"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/cumulus/definitions.js
var dmpQueue = {
  CollationInfo: {
    upwardMessages: "Vec<UpwardMessage>",
    horizontalMessages: "Vec<OutboundHrmpMessage>",
    newValidationCode: "Option<ValidationCode>",
    processedDownwardMessages: "u32",
    hrmpWatermark: "RelayBlockNumber",
    headData: "HeadData"
  },
  CollationInfoV1: {
    upwardMessages: "Vec<UpwardMessage>",
    horizontalMessages: "Vec<OutboundHrmpMessage>",
    newValidationCode: "Option<ValidationCode>",
    processedDownwardMessages: "u32",
    hrmpWatermark: "RelayBlockNumber"
  },
  ConfigData: {
    maxIndividual: "Weight"
  },
  MessageId: "[u8; 32]",
  OverweightIndex: "u64",
  PageCounter: "u32",
  PageIndexData: {
    beginUsed: "PageCounter",
    endUsed: "PageCounter",
    overweightCount: "OverweightIndex"
  }
};
var definitions_default54 = {
  rpc: {},
  runtime: runtime22,
  types: dmpQueue
};

// node_modules/@polkadot/types/interfaces/finality/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/finality/runtime.js
init_shim();
var finalityV1 = {
  methods: {
    best_finalized: {
      description: "Returns number and hash of the best finalized header known to the bridge module.",
      params: [],
      type: "(BlockNumber, Hash)"
    }
  },
  version: 1
};
var runtime23 = {
  KusamaFinalityApi: [finalityV1],
  PolkadotFinalityApi: [finalityV1],
  RococoFinalityApi: [finalityV1],
  WestendFinalityApi: [finalityV1]
};

// node_modules/@polkadot/types/interfaces/finality/definitions.js
var definitions_default55 = {
  rpc: {},
  runtime: runtime23,
  types: {}
};

// node_modules/@polkadot/types/interfaces/parachains/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/parachains/hrmp.js
init_shim();
var hrmp_default = {
  HrmpChannel: {
    maxCapacity: "u32",
    maxTotalSize: "u32",
    maxMessageSize: "u32",
    msgCount: "u32",
    totalSize: "u32",
    mqcHead: "Option<Hash>",
    senderDeposit: "Balance",
    recipientDeposit: "Balance"
  },
  HrmpChannelId: {
    sender: "u32",
    receiver: "u32"
  },
  HrmpOpenChannelRequest: {
    confirmed: "bool",
    age: "SessionIndex",
    senderDeposit: "Balance",
    maxMessageSize: "u32",
    maxCapacity: "u32",
    maxTotalSize: "u32"
  }
};

// node_modules/@polkadot/types/interfaces/parachains/runtime.js
init_shim();
var PH_V1_TO_V2 = {
  assumed_validation_data: {
    description: "Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      },
      {
        name: "hash",
        type: "Hash"
      }
    ],
    type: "Option<(PersistedValidationData, ValidationCodeHash)>"
  },
  availability_cores: {
    description: "Yields information on all availability cores as relevant to the child block.",
    params: [],
    type: "Vec<CoreState>"
  },
  candidate_events: {
    description: "Get a vector of events concerning candidates that occurred within a block.",
    params: [],
    type: "Vec<CandidateEvent>"
  },
  candidate_pending_availability: {
    description: "Get the receipt of a candidate pending availability.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      }
    ],
    type: "Option<CommittedCandidateReceipt>"
  },
  check_validation_outputs: {
    description: "Checks if the given validation outputs pass the acceptance criteria.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      },
      {
        name: "outputs",
        type: "CandidateCommitments"
      }
    ],
    type: "bool"
  },
  dmq_contents: {
    description: "Get all the pending inbound messages in the downward message queue for a para.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      }
    ],
    type: "Vec<InboundDownwardMessage>"
  },
  inbound_hrmp_channels_contents: {
    description: "Get the contents of all channels addressed to the given recipient.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      }
    ],
    type: "Vec<InboundHrmpMessage>"
  },
  on_chain_votes: {
    description: "Scrape dispute relevant from on-chain, backing votes and resolved disputes.",
    params: [],
    type: "Option<ScrapedOnChainVotes>"
  },
  persisted_validation_data: {
    description: "Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      },
      {
        name: "assumption",
        type: "OccupiedCoreAssumption"
      }
    ],
    type: "Option<PersistedValidationData>"
  },
  session_index_for_child: {
    description: "Returns the session index expected at a child of the block.",
    params: [],
    type: "SessionIndex"
  },
  validation_code: {
    description: "Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      },
      {
        name: "assumption",
        type: "OccupiedCoreAssumption"
      }
    ],
    type: "ValidationCode"
  },
  validation_code_by_hash: {
    description: "Get the validation code from its hash.",
    params: [
      {
        name: "hash",
        type: "ValidationCodeHash"
      }
    ],
    type: "Option<ValidationCode>"
  },
  validator_groups: {
    description: "Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on",
    params: [],
    type: "(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)"
  },
  validators: {
    description: "Get the current validators.",
    params: [],
    type: "Vec<ValidatorId>"
  }
};
var PH_V2_TO_V3 = {
  pvfs_require_precheck: {
    description: "Returns code hashes of PVFs that require pre-checking by validators in the active set.",
    params: [],
    type: "Vec<ValidationCodeHash>"
  },
  session_info: {
    description: "Get the session info for the given session, if stored.",
    params: [
      {
        name: "index",
        type: "SessionIndex"
      }
    ],
    type: "Option<SessionInfo>"
  },
  submit_pvf_check_statement: {
    description: "Submits a PVF pre-checking statement into the transaction pool.",
    params: [
      {
        name: "stmt",
        type: "PvfCheckStatement"
      },
      {
        name: "signature",
        type: "ValidatorSignature"
      }
    ],
    type: "Null"
  },
  validation_code_hash: {
    description: "Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      },
      {
        name: "assumption",
        type: "OccupiedCoreAssumption"
      }
    ],
    type: "Option<ValidationCodeHash>"
  }
};
var PH_V3 = {
  disputes: {
    description: "Returns all onchain disputes.",
    params: [],
    type: "Vec<(SessionIndex, CandidateHash, DisputeState)>"
  }
};
var PH_V4 = {
  session_executor_params: {
    description: "Returns execution parameters for the session.",
    params: [
      {
        name: "sessionIndex",
        type: "SessionIndex"
      }
    ],
    type: "Option<ExecutorParams>"
  }
};
var PH_V5 = {
  key_ownership_proof: {
    description: "Returns a merkle proof of a validator session key",
    params: [
      {
        name: "validatorId",
        type: "ValidatorId"
      }
    ],
    type: "Option<OpaqueKeyOwnershipProof>"
  },
  submit_report_dispute_lost: {
    description: "Submit an unsigned extrinsic to slash validators who lost a dispute about a candidate of a past session",
    params: [
      {
        name: "disputeProof",
        type: "DisputeProof"
      },
      {
        name: "keyOwnershipProof",
        type: "OpaqueKeyOwnershipProof"
      }
    ],
    type: "Option<Null>"
  },
  unapplied_slashes: {
    description: "Returns a list of validators that lost a past session dispute and need to be slashed",
    params: [],
    type: "Vec<(SessionIndex, CandidateHash, PendingSlashes)>"
  }
};
var runtime24 = {
  ParachainHost: [
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3,
        ...PH_V3,
        ...PH_V4,
        ...PH_V5
      },
      version: 5
    },
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3,
        ...PH_V3,
        ...PH_V4
      },
      version: 4
    },
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3,
        ...PH_V3
      },
      version: 3
    },
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3
      },
      version: 2
    },
    {
      methods: {
        session_info: {
          description: "Get the session info for the given session, if stored.",
          params: [
            {
              name: "index",
              type: "SessionIndex"
            }
          ],
          type: "Option<OldV1SessionInfo>"
        },
        ...PH_V1_TO_V2
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/parachains/slots.js
init_shim();
var SlotRange10 = {
  _enum: ["ZeroZero", "ZeroOne", "ZeroTwo", "ZeroThree", "OneOne", "OneTwo", "OneThree", "TwoTwo", "TwoThree", "ThreeThree"]
};
var SlotRange = {
  _enum: ["ZeroZero", "ZeroOne", "ZeroTwo", "ZeroThree", "ZeroFour", "ZeroFive", "ZeroSix", "ZeroSeven", "OneOne", "OneTwo", "OneThree", "OneFour", "OneFive", "OneSix", "OneSeven", "TwoTwo", "TwoThree", "TwoFour", "TwoFive", "TwoSix", "TwoSeven", "ThreeThree", "ThreeFour", "ThreeFive", "ThreeSix", "ThreeSeven", "FourFour", "FourFive", "FourSix", "FourSeven", "FiveFive", "FiveSix", "FiveSeven", "SixSix", "SixSeven", "SevenSeven"]
};
var oldTypes = {
  Bidder: {
    _enum: {
      New: "NewBidder",
      Existing: "ParaId"
    }
  },
  IncomingParachain: {
    _enum: {
      Unset: "NewBidder",
      Fixed: "IncomingParachainFixed",
      Deploy: "IncomingParachainDeploy"
    }
  },
  IncomingParachainDeploy: {
    code: "ValidationCode",
    initialHeadData: "HeadData"
  },
  IncomingParachainFixed: {
    codeHash: "Hash",
    codeSize: "u32",
    initialHeadData: "HeadData"
  },
  NewBidder: {
    who: "AccountId",
    sub: "SubId"
  },
  SubId: "u32"
};
var slots_default = {
  ...oldTypes,
  AuctionIndex: "u32",
  LeasePeriod: "BlockNumber",
  LeasePeriodOf: "BlockNumber",
  SlotRange10,
  SlotRange,
  WinningData10: `[WinningDataEntry; ${SlotRange10._enum.length}]`,
  WinningData: `[WinningDataEntry; ${SlotRange._enum.length}]`,
  WinningDataEntry: "Option<(AccountId, ParaId, BalanceOf)>",
  WinnersData10: "Vec<WinnersDataTuple10>",
  WinnersData: "Vec<WinnersDataTuple>",
  WinnersDataTuple10: "(AccountId, ParaId, BalanceOf, SlotRange10)",
  WinnersDataTuple: "(AccountId, ParaId, BalanceOf, SlotRange)"
};

// node_modules/@polkadot/types/interfaces/parachains/definitions.js
var proposeTypes = {
  ParachainProposal: {
    proposer: "AccountId",
    genesisHead: "HeadData",
    validators: "Vec<ValidatorId>",
    name: "Bytes",
    balance: "Balance"
  },
  RegisteredParachainInfo: {
    validators: "Vec<ValidatorId>",
    proposer: "AccountId"
  }
};
var cumulusTypes = {
  ServiceQuality: {
    _enum: ["Ordered", "Fast"]
  }
};
var disputeTypes = {
  DisputeLocation: {
    _enum: ["Local", "Remote"]
  },
  DisputeResult: {
    _enum: ["Valid", "Invalid"]
  },
  DisputeState: {
    validatorsFor: "BitVec",
    validatorsAgainst: "BitVec",
    start: "BlockNumber",
    concludedAt: "Option<BlockNumber>"
  },
  DisputeStatement: {
    _enum: {
      Valid: "ValidDisputeStatementKind",
      Invalid: "InvalidDisputeStatementKind"
    }
  },
  DisputeStatementSet: {
    candidateHash: "CandidateHash",
    session: "SessionIndex",
    statements: "Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>"
  },
  ExecutorParam: {
    _enum: {
      Phantom: "Null",
      MaxMemoryPages: "u32",
      StackLogicalMax: "u32",
      StackNativeMax: "u32",
      PrecheckingMaxMemory: "u64",
      PvfPrepTimeout: "(PvfPrepTimeoutKind, u64)",
      PvfExecTimeout: "(PvfExecTimeoutKind, u64)"
    }
  },
  ExecutorParamsHash: "Hash",
  ExecutorParams: "Vec<ExecutorParam>",
  ExplicitDisputeStatement: {
    valid: "bool",
    candidateHash: "CandidateHash",
    session: "SessionIndex"
  },
  InvalidDisputeStatementKind: {
    _enum: ["Explicit"]
  },
  MultiDisputeStatementSet: "Vec<DisputeStatementSet>",
  PvfExecTimeoutKind: {
    _enum: ["Backing", "Approval"]
  },
  PvfPrepTimeoutKind: {
    _enum: ["Precheck", "Lenient"]
  },
  ValidDisputeStatementKind: {
    _enum: {
      Explicit: "Null",
      BackingSeconded: "Hash",
      BackingValid: "Hash",
      ApprovalChecking: "Null"
    }
  }
};
var definitions_default56 = {
  rpc: {},
  runtime: runtime24,
  types: {
    ...cumulusTypes,
    ...disputeTypes,
    ...hrmp_default,
    ...proposeTypes,
    ...slots_default,
    AbridgedCandidateReceipt: {
      parachainIndex: "ParaId",
      relayParent: "Hash",
      headData: "HeadData",
      collator: "CollatorId",
      signature: "CollatorSignature",
      povBlockHash: "Hash",
      commitments: "CandidateCommitments"
    },
    AbridgedHostConfiguration: {
      maxCodeSize: "u32",
      maxHeadDataSize: "u32",
      maxUpwardQueueCount: "u32",
      maxUpwardQueueSize: "u32",
      maxUpwardMessageSize: "u32",
      maxUpwardMessageNumPerCandidate: "u32",
      hrmpMaxMessageNumPerCandidate: "u32",
      validationUpgradeFrequency: "BlockNumber",
      validationUpgradeDelay: "BlockNumber"
    },
    AbridgedHrmpChannel: {
      maxCapacity: "u32",
      maxTotalSize: "u32",
      maxMessageSize: "u32",
      msgCount: "u32",
      totalSize: "u32",
      mqcHead: "Option<Hash>"
    },
    AssignmentId: "AccountId",
    AssignmentKind: {
      _enum: {
        Parachain: "Null",
        Parathread: "(CollatorId, u32)"
      }
    },
    AttestedCandidate: {
      candidate: "AbridgedCandidateReceipt",
      validityVotes: "Vec<ValidityAttestation>",
      validatorIndices: "BitVec"
    },
    AuthorityDiscoveryId: "AccountId",
    AvailabilityBitfield: "BitVec",
    AvailabilityBitfieldRecord: {
      bitfield: "AvailabilityBitfield",
      submittedTt: "BlockNumber"
    },
    BackedCandidate: {
      candidate: "CommittedCandidateReceipt",
      validityVotes: "Vec<ValidityAttestation>",
      validatorIndices: "BitVec"
    },
    BufferedSessionChange: {
      applyAt: "BlockNumber",
      validators: "Vec<ValidatorId>",
      queued: "Vec<ValidatorId>",
      sessionIndex: "SessionIndex"
    },
    CandidateCommitments: {
      upwardMessages: "Vec<UpwardMessage>",
      horizontalMessages: "Vec<OutboundHrmpMessage>",
      newValidationCode: "Option<ValidationCode>",
      headData: "HeadData",
      processedDownwardMessages: "u32",
      hrmpWatermark: "BlockNumber"
    },
    CandidateDescriptor: {
      paraId: "ParaId",
      relayParent: "RelayChainHash",
      collatorId: "CollatorId",
      persistedValidationDataHash: "Hash",
      povHash: "Hash",
      erasureRoot: "Hash",
      signature: "CollatorSignature",
      paraHead: "Hash",
      validationCodeHash: "ValidationCodeHash"
    },
    CandidateEvent: {
      _enum: {
        CandidateBacked: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
        CandidateIncluded: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
        CandidateTimedOut: "(CandidateReceipt, HeadData, CoreIndex)"
      }
    },
    CandidateHash: "Hash",
    CandidateInfo: {
      who: "AccountId",
      deposit: "Balance"
    },
    CandidatePendingAvailability: {
      core: "CoreIndex",
      hash: "CandidateHash",
      descriptor: "CandidateDescriptor",
      availabilityVotes: "BitVec",
      backers: "BitVec",
      relayParentNumber: "BlockNumber",
      backedInNumber: "BlockNumber",
      backingGroup: "GroupIndex"
    },
    CandidateReceipt: {
      descriptor: "CandidateDescriptor",
      commitmentsHash: "Hash"
    },
    GlobalValidationData: {
      maxCodeSize: "u32",
      maxHeadDataSize: "u32",
      blockNumber: "BlockNumber"
    },
    CollatorId: "H256",
    CollatorSignature: "Signature",
    CommittedCandidateReceipt: {
      descriptor: "CandidateDescriptor",
      commitments: "CandidateCommitments"
    },
    CoreAssignment: {
      core: "CoreIndex",
      paraId: "ParaId",
      kind: "AssignmentKind",
      groupIdx: "GroupIndex"
    },
    CoreIndex: "u32",
    CoreOccupied: {
      _enum: {
        Parathread: "ParathreadEntry",
        Parachain: "Null"
      }
    },
    CoreState: {
      _enum: {
        Occupied: "OccupiedCore",
        Scheduled: "ScheduledCore",
        Free: "Null"
      }
    },
    DisputeProof: {
      timeSlot: "DisputesTimeSlot",
      kind: "SlashingOffenceKind",
      validatorIndex: "ValidatorIndex",
      validatorId: "ValidatorId"
    },
    DisputesTimeSlot: {
      sessionIndex: "SessionIndex",
      candidateHash: "CandidateHash"
    },
    DoubleVoteReport: {
      identity: "ValidatorId",
      first: "(Statement, ValidatorSignature)",
      second: "(Statement, ValidatorSignature)",
      proof: "MembershipProof",
      signingContext: "SigningContext"
    },
    DownwardMessage: "Bytes",
    GroupIndex: "u32",
    GroupRotationInfo: {
      sessionStartBlock: "BlockNumber",
      groupRotationFrequency: "BlockNumber",
      now: "BlockNumber"
    },
    GlobalValidationSchedule: {
      maxCodeSize: "u32",
      maxHeadDataSize: "u32",
      blockNumber: "BlockNumber"
    },
    HeadData: "Bytes",
    HostConfiguration: {
      maxCodeSize: "u32",
      maxHeadDataSize: "u32",
      maxUpwardQueueCount: "u32",
      maxUpwardQueueSize: "u32",
      maxUpwardMessageSize: "u32",
      maxUpwardMessageNumPerCandidate: "u32",
      hrmpMaxMessageNumPerCandidate: "u32",
      validationUpgradeFrequency: "BlockNumber",
      validationUpgradeDelay: "BlockNumber",
      maxPovSize: "u32",
      maxDownwardMessageSize: "u32",
      preferredDispatchableUpwardMessagesStepWeight: "Weight",
      hrmpMaxParachainOutboundChannels: "u32",
      hrmpMaxParathreadOutboundChannels: "u32",
      hrmpOpenRequestTtl: "u32",
      hrmpSenderDeposit: "Balance",
      hrmpRecipientDeposit: "Balance",
      hrmpChannelMaxCapacity: "u32",
      hrmpChannelMaxTotalSize: "u32",
      hrmpMaxParachainInboundChannels: "u32",
      hrmpMaxParathreadInboundChannels: "u32",
      hrmpChannelMaxMessageSize: "u32",
      codeRetentionPeriod: "BlockNumber",
      parathreadCores: "u32",
      parathreadRetries: "u32",
      groupRotationFrequency: "BlockNumber",
      chainAvailabilityPeriod: "BlockNumber",
      threadAvailabilityPeriod: "BlockNumber",
      schedulingLookahead: "u32",
      maxValidatorsPerCore: "Option<u32>",
      maxValidators: "Option<u32>",
      disputePeriod: "SessionIndex",
      disputePostConclusionAcceptancePeriod: "BlockNumber",
      disputeMaxSpamSlots: "u32",
      disputeConclusionByTimeOutPeriod: "BlockNumber",
      noShowSlots: "u32",
      nDelayTranches: "u32",
      zerothDelayTrancheWidth: "u32",
      neededApprovals: "u32",
      relayVrfModuloSamples: "u32"
    },
    InboundDownwardMessage: {
      pubSentAt: "BlockNumber",
      pubMsg: "DownwardMessage"
    },
    InboundHrmpMessage: {
      sentAt: "BlockNumber",
      data: "Bytes"
    },
    InboundHrmpMessages: "Vec<InboundHrmpMessage>",
    LocalValidationData: {
      parentHead: "HeadData",
      balance: "Balance",
      codeUpgradeAllowed: "Option<BlockNumber>"
    },
    MessageIngestionType: {
      downwardMessages: "Vec<InboundDownwardMessage>",
      horizontalMessages: "BTreeMap<ParaId, InboundHrmpMessages>"
    },
    MessageQueueChain: "RelayChainHash",
    OccupiedCore: {
      nextUpOnAvailable: "Option<ScheduledCore>",
      occupiedSince: "BlockNumber",
      timeOutAt: "BlockNumber",
      nextUpOnTimeOut: "Option<ScheduledCore>",
      availability: "BitVec",
      groupResponsible: "GroupIndex",
      candidateHash: "CandidateHash",
      candidateDescriptor: "CandidateDescriptor"
    },
    OccupiedCoreAssumption: {
      _enum: ["Included,", "TimedOut", "Free"]
    },
    OutboundHrmpMessage: {
      recipient: "u32",
      data: "Bytes"
    },
    PendingSlashes: {
      _alias: {
        slashKeys: "keys"
      },
      slashKeys: "BTreeMap<ValidatorIndex, ValidatorId>",
      kind: "SlashingOffenceKind"
    },
    ParachainDispatchOrigin: {
      _enum: ["Signed", "Parachain", "Root"]
    },
    ParachainInherentData: {
      validationData: "PersistedValidationData",
      relayChainState: "StorageProof",
      downwardMessages: "Vec<InboundDownwardMessage>",
      horizontalMessages: "BTreeMap<ParaId, VecInboundHrmpMessage>"
    },
    ParachainsInherentData: {
      bitfields: "SignedAvailabilityBitfields",
      backedCandidates: "Vec<BackedCandidate>",
      disputes: "MultiDisputeStatementSet",
      parentHeader: "Header"
    },
    ParaGenesisArgs: {
      genesisHead: "Bytes",
      validationCode: "Bytes",
      parachain: "bool"
    },
    ParaId: "u32",
    ParaInfo: {
      manager: "AccountId",
      deposit: "Balance",
      locked: "bool"
    },
    ParaLifecycle: {
      _enum: ["Onboarding", "Parathread", "Parachain", "UpgradingToParachain", "DowngradingToParathread", "OutgoingParathread", "OutgoingParachain"]
    },
    ParaPastCodeMeta: {
      upgradeTimes: "Vec<ReplacementTimes>",
      lastPruned: "Option<BlockNumber>"
    },
    ParaScheduling: {
      _enum: ["Always", "Dynamic"]
    },
    ParathreadClaim: "(ParaId, CollatorId)",
    ParathreadClaimQueue: {
      queue: "Vec<QueuedParathread>",
      nextCoreOffset: "u32"
    },
    ParathreadEntry: {
      claim: "ParathreadClaim",
      retries: "u32"
    },
    ParaValidatorIndex: "u32",
    PersistedValidationData: {
      parentHead: "HeadData",
      relayParentNumber: "RelayChainBlockNumber",
      relayParentStorageRoot: "Hash",
      maxPovSize: "u32"
    },
    PvfCheckStatement: {
      accept: "bool",
      subject: "ValidationCodeHash",
      sessionIndex: "SessionIndex",
      validatorIndex: "ParaValidatorIndex"
    },
    QueuedParathread: {
      claim: "ParathreadEntry",
      coreOffset: "u32"
    },
    RelayBlockNumber: "u32",
    RelayChainBlockNumber: "RelayBlockNumber",
    RelayHash: "Hash",
    RelayChainHash: "RelayHash",
    Remark: "[u8; 32]",
    ReplacementTimes: {
      expectedAt: "BlockNumber",
      activatedAt: "BlockNumber"
    },
    Retriable: {
      _enum: {
        Never: "Null",
        WithRetries: "u32"
      }
    },
    ScheduledCore: {
      paraId: "ParaId",
      collator: "Option<CollatorId>"
    },
    Scheduling: {
      _enum: ["Always", "Dynamic"]
    },
    ScrapedOnChainVotes: {
      session: "SessionIndex",
      backingValidatorsPerCandidate: "Vec<(CandidateReceipt, Vec<(ParaValidatorIndex, ValidityAttestation)>)>",
      disputes: "MultiDisputeStatementSet"
    },
    SessionInfo: {
      activeValidatorIndices: "Vec<ParaValidatorIndex>",
      randomSeed: "[u8; 32]",
      disputePeriod: "SessionIndex",
      validators: "Vec<ValidatorId>",
      discoveryKeys: "Vec<AuthorityDiscoveryId>",
      assignmentKeys: "Vec<AssignmentId>",
      validatorGroups: "Vec<Vec<ValidatorIndex>>",
      nCores: "u32",
      zerothDelayTrancheWidth: "u32",
      relayVrfModuloSamples: "u32",
      nDelayTranches: "u32",
      noShowSlots: "u32",
      neededApprovals: "u32"
    },
    OldV1SessionInfo: {
      validators: "Vec<ValidatorId>",
      discoveryKeys: "Vec<AuthorityDiscoveryId>",
      assignmentKeys: "Vec<AssignmentId>",
      validatorGroups: "Vec<Vec<ParaValidatorIndex>>",
      nCores: "u32",
      zerothDelayTrancheWidth: "u32",
      relayVrfModuloSamples: "u32",
      nDelayTranches: "u32",
      noShowSlots: "u32",
      neededApprovals: "u32"
    },
    SessionInfoValidatorGroup: "Vec<ParaValidatorIndex>",
    SignedAvailabilityBitfield: {
      payload: "BitVec",
      validatorIndex: "ParaValidatorIndex",
      signature: "ValidatorSignature"
    },
    SignedAvailabilityBitfields: "Vec<SignedAvailabilityBitfield>",
    SigningContext: {
      sessionIndex: "SessionIndex",
      parentHash: "Hash"
    },
    SlashingOffenceKind: {
      _enum: ["ForInvalid", "AgainstValid"]
    },
    Statement: {
      _enum: {
        Never: "Null",
        Candidate: "Hash",
        Valid: "Hash",
        Invalid: "Hash"
      }
    },
    TransientValidationData: {
      maxCodeSize: "u32",
      maxHeadDataSize: "u32",
      balance: "Balance",
      codeUpgradeAllowed: "Option<BlockNumber>",
      dmqLength: "u32"
    },
    UpgradeGoAhead: {
      _enum: ["Abort", "GoAhead"]
    },
    UpgradeRestriction: {
      _enum: ["Present"]
    },
    UpwardMessage: "Bytes",
    ValidationFunctionParams: {
      maxCodeSize: "u32",
      relayChainHeight: "RelayChainBlockNumber",
      codeUpgradeAllowed: "Option<RelayChainBlockNumber>"
    },
    ValidationCode: "Bytes",
    ValidationCodeHash: "Hash",
    ValidationData: {
      persisted: "PersistedValidationData",
      transient: "TransientValidationData"
    },
    ValidationDataType: {
      validationData: "ValidationData",
      relayChainState: "Vec<Bytes>"
    },
    ValidatorSignature: "Signature",
    ValidityAttestation: {
      _enum: {
        Never: "Null",
        Implicit: "ValidatorSignature",
        Explicit: "ValidatorSignature"
      }
    },
    MessagingStateSnapshot: {
      relayDispatchQueueSize: "(u32, u32)",
      egressChannels: "Vec<MessagingStateSnapshotEgressEntry>"
    },
    MessagingStateSnapshotEgressEntry: "(ParaId, AbridgedHrmpChannel)",
    SystemInherentData: "ParachainInherentData",
    VecInboundHrmpMessage: "Vec<InboundHrmpMessage>"
  }
};

// node_modules/@polkadot/types/interfaces/poll/definitions.js
init_shim();
var definitions_default57 = {
  rpc: {},
  types: {
    Approvals: "[bool; 4]"
  }
};

// node_modules/@polkadot/types/interfaces/purchase/definitions.js
init_shim();
var definitions_default58 = {
  rpc: {},
  types: {
    AccountStatus: {
      validity: "AccountValidity",
      freeBalance: "Balance",
      lockedBalance: "Balance",
      signature: "Vec<u8>",
      vat: "Permill"
    },
    AccountValidity: {
      _enum: ["Invalid", "Initiated", "Pending", "ValidLow", "ValidHigh", "Completed"]
    }
  }
};

// node_modules/@polkadot/types/interfaces/xcm/definitions.js
init_shim();

// node_modules/@polkadot/types-create/index.js
init_shim();

// node_modules/@polkadot/types-create/detectPackage.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/detectPackage.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/detectOther.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/x-textdecoder/browser.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/x-textdecoder/fallback.js
init_shim();
var TextDecoder16 = class {
  constructor(encoding) {
    __publicField(this, "__encoding");
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count2 = value.length; i < count2; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/types-create/node_modules/@polkadot/x-textdecoder/packageInfo.js
init_shim();
var packageInfo42 = { name: "@polkadot/x-textdecoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types-create/node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder17 = extractGlobal("TextDecoder", TextDecoder16);

// node_modules/@polkadot/types-create/node_modules/@polkadot/x-textencoder/browser.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/x-textencoder/fallback.js
init_shim();
var TextEncoder16 = class {
  encode(value) {
    const count2 = value.length;
    const u8a9 = new Uint8Array(count2);
    for (let i = 0; i < count2; i++) {
      u8a9[i] = value.charCodeAt(i);
    }
    return u8a9;
  }
};

// node_modules/@polkadot/types-create/node_modules/@polkadot/x-textencoder/packageInfo.js
init_shim();
var packageInfo43 = { name: "@polkadot/x-textencoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types-create/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder17 = extractGlobal("TextEncoder", TextEncoder16);

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/detectOther.js
var detectOther_default18 = [packageInfo42, packageInfo43];

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/packageInfo.js
init_shim();
var packageInfo44 = { name: "@polkadot/util", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/versionDetect.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/function.js
init_shim();
function isFunction10(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/versionDetect.js
var DEDUPE8 = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
var POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG8 = "POLKADOTJS_DISABLE_ESM_CJS_WARNING";
function getEntry8(name) {
  const _global = xglobal;
  if (!_global.__polkadotjs) {
    _global.__polkadotjs = {};
  }
  if (!_global.__polkadotjs[name]) {
    _global.__polkadotjs[name] = [];
  }
  return _global.__polkadotjs[name];
}
function formatDisplay8(all3, fmt) {
  let max2 = 0;
  for (let i = 0, count2 = all3.length; i < count2; i++) {
    max2 = Math.max(max2, all3[i].version.length);
  }
  return all3.map((d) => `	${fmt(d.version.padEnd(max2), d).join("	")}`).join("\n");
}
function formatInfo8(version, { name }) {
  return [
    version,
    name
  ];
}
function formatVersion8(version, { path, type }) {
  let extracted;
  if (path && path.length >= 5) {
    const nmIndex = path.indexOf("node_modules");
    extracted = nmIndex === -1 ? path : path.substring(nmIndex);
  } else {
    extracted = "<unknown>";
  }
  return [
    `${`${type || ""}`.padStart(3)} ${version}`,
    extracted
  ];
}
function getPath8(infoPath, pathOrFn) {
  if (infoPath) {
    return infoPath;
  } else if (isFunction10(pathOrFn)) {
    try {
      return pathOrFn() || "";
    } catch {
      return "";
    }
  }
  return pathOrFn || "";
}
function warn8(pre, all3, fmt) {
  console.warn(`${pre}
${DEDUPE8}
${formatDisplay8(all3, fmt)}`);
}
function detectPackage9({ name, path, type, version }, pathOrFn, deps = []) {
  var _a, _b;
  if (!name.startsWith("@polkadot")) {
    throw new Error(`Invalid package descriptor ${name}`);
  }
  const entry = getEntry8(name);
  entry.push({ path: getPath8(path, pathOrFn), type, version });
  const entriesSameVersion = entry.every((e) => e.version === version);
  const esmCjsWarningDisabled = ((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG8]) === "1";
  const multipleEntries = entry.length !== 1;
  const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;
  if (multipleEntries && !disableWarnings) {
    warn8(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion8);
  } else {
    const mismatches = deps.filter((d) => d && d.version !== version);
    if (mismatches.length) {
      warn8(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo8);
    }
  }
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/detectPackage.js
detectPackage9(packageInfo44, null, detectOther_default18);

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bundle.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/array/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/array/chunk.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/array/filter.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/array/flatten.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/array/range.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/array/shuffle.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/array/unzip.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/array/zip.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/assert.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bi/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bi/min.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bi/helpers.js
init_shim();
function createCmp8(cmp) {
  return (...items) => {
    const count2 = items.length;
    if (count2 === 0) {
      throw new Error("Must provide one or more arguments");
    }
    let result = items[0];
    for (let i = 1; i < count2; i++) {
      if (cmp(items[i], result)) {
        result = items[i];
      }
    }
    return result;
  };
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bi/min.js
var nMax8 = createCmp8((a, b) => a > b);
var nMin8 = createCmp8((a, b) => a < b);

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bi/sqrt.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bi/consts.js
init_shim();
var _0n18 = BigInt2(0);
var _1n18 = BigInt2(1);
var _2n15 = BigInt2(2);
var _3n10 = BigInt2(3);
var _4n10 = BigInt2(4);
var _5n10 = BigInt2(5);
var _6n8 = BigInt2(6);
var _7n10 = BigInt2(7);
var _8n10 = BigInt2(8);
var _9n9 = BigInt2(9);
var _10n9 = BigInt2(10);
var _100n8 = BigInt2(100);
var _1000n8 = BigInt2(1e3);
var _1Mn8 = BigInt2(1e6);
var _1Bn8 = BigInt2(1e9);
var _1Qn8 = _1Bn8 * _1Bn8;
var _2pow53n8 = BigInt2(Number.MAX_SAFE_INTEGER);
var _sqrt2pow53n8 = BigInt2(94906265);

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bi/toBigInt.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/hex/toBigInt.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/toBigInt.js
init_shim();
var U8_MAX8 = BigInt2(256);
var U16_MAX8 = BigInt2(256 * 256);
var U64_MAX8 = BigInt2("0x10000000000000000");

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/hex/toU8a.js
init_shim();
var CHR8 = "0123456789abcdef";
var U815 = new Uint8Array(256);
var U1615 = new Uint8Array(256 * 256);
for (let i = 0, count2 = CHR8.length; i < count2; i++) {
  U815[CHR8[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U815[CHR8[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1615[s | j] = U815[i] << 4 | U815[j];
  }
}
function hexToU8a9(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U1615[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/bn.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bn/bn.js
init_shim();
var import_bn103 = __toESM(require_bn8(), 1);

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/hex.js
init_shim();
var REGEX_HEX_PREFIXED8 = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX8 = /^[\da-fA-F]+$/;
function isHex9(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED8.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/toBigInt.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/helpers.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/object.js
init_shim();
function isObject8(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/helpers.js
function isOn8(...fns) {
  return (value) => (isObject8(value) || isFunction10(value)) && fns.every((f) => isFunction10(value[f]));
}
function isOnFunction8(...fns) {
  return (value) => isFunction10(value) && fns.every((f) => isFunction10(value[f]));
}
function isOnObject8(...fns) {
  return (value) => isObject8(value) && fns.every((f) => isFunction10(value[f]));
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt8 = isOn8("toBigInt");

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/toBn.js
init_shim();
var isToBn8 = isOn8("toBn");

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bi/toHex.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/cmp.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/toU8a.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/buffer.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/has.js
init_shim();
var hasBigInt9 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer8 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess8 = typeof xglobal.process === "object";

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/buffer.js
function isBuffer8(value) {
  return hasBuffer8 && !!value && isFunction10(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/u8a.js
init_shim();
function isU8a9(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/string/toU8a.js
init_shim();
var encoder8 = new TextEncoder17();
function stringToU8a9(value) {
  return value ? encoder8.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a9(value) {
  return isU8a9(value) ? isBuffer8(value) ? new Uint8Array(value) : value : isHex9(value) ? hexToU8a9(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a9(value);
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/concat.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/empty.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/eq.js
init_shim();
function u8aEq9(a, b) {
  const u8aa = u8aToU8a9(a);
  const u8ab = u8aToU8a9(b);
  if (u8aa.length === u8ab.length) {
    const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
    const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
    const mod5 = u8aa.length % 4 | 0;
    const length = u8aa.length - mod5 | 0;
    for (let i = 0; i < length; i += 4) {
      if (dvA.getUint32(i) !== dvB.getUint32(i)) {
        return false;
      }
    }
    for (let i = length, count2 = u8aa.length; i < count2; i++) {
      if (u8aa[i] !== u8ab[i]) {
        return false;
      }
    }
    return true;
  }
  return false;
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/fixLength.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/sorted.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/toBn.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/toBuffer.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/toFloat.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/toHex.js
init_shim();
var U816 = new Array(256);
var U1616 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U816[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1616[s | j] = U816[i] + U816[j];
  }
}
function hex6(value, result) {
  const mod5 = value.length % 2 | 0;
  const length = value.length - mod5 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U1616[value[i] << 8 | value[i + 1]];
  }
  if (mod5) {
    result += U816[value[length] | 0];
  }
  return result;
}
function u8aToHex9(value, bitLength = -1, isPrefixed = true) {
  const empty3 = isPrefixed ? "0x" : "";
  if (!(value == null ? void 0 : value.length)) {
    return empty3;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex6(value.subarray(0, length / 2), empty3)}…${hex6(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex6(value, empty3);
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/toNumber.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/toString.js
init_shim();
var decoder8 = new TextDecoder17("utf-8");

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/wrap.js
init_shim();
var U8A_WRAP_ETHEREUM8 = u8aToU8a9("Ethereum Signed Message:\n");
var U8A_WRAP_PREFIX8 = u8aToU8a9("<Bytes>");
var U8A_WRAP_POSTFIX8 = u8aToU8a9("</Bytes>");
var WRAP_LEN8 = U8A_WRAP_PREFIX8.length + U8A_WRAP_POSTFIX8.length;

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bi/toU8a.js
init_shim();
var DIV8 = BigInt2(256);
var NEG_MASK8 = BigInt2(255);

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bn/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bn/fromHex.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/hex/toBn.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/hex/stripPrefix.js
init_shim();
function hexStripPrefix8(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED8.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX8.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/hex/toBn.js
function hexToBn8(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn103.default(0);
  }
  const stripped = hexStripPrefix8(value);
  const bn = new import_bn103.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bn/min.js
init_shim();
var bnMax8 = createCmp8((a, b) => a.gt(b));
var bnMin8 = createCmp8((a, b) => a.lt(b));

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bn/sqrt.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bn/consts.js
init_shim();
var BN_ZERO8 = new import_bn103.default(0);
var BN_ONE8 = new import_bn103.default(1);
var BN_TWO8 = new import_bn103.default(2);
var BN_THREE8 = new import_bn103.default(3);
var BN_FOUR8 = new import_bn103.default(4);
var BN_FIVE8 = new import_bn103.default(5);
var BN_SIX8 = new import_bn103.default(6);
var BN_SEVEN8 = new import_bn103.default(7);
var BN_EIGHT8 = new import_bn103.default(8);
var BN_NINE8 = new import_bn103.default(9);
var BN_TEN8 = new import_bn103.default(10);
var BN_HUNDRED8 = new import_bn103.default(100);
var BN_THOUSAND8 = new import_bn103.default(1e3);
var BN_MILLION8 = new import_bn103.default(1e6);
var BN_BILLION8 = new import_bn103.default(1e9);
var BN_QUINTILL8 = BN_BILLION8.mul(BN_BILLION8);
var BN_MAX_INTEGER8 = new import_bn103.default(Number.MAX_SAFE_INTEGER);
var BN_SQRT_MAX_INTEGER8 = new import_bn103.default(94906265);

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bn/toBn.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/bigInt.js
init_shim();
function isBigInt8(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bn/toBn.js
function bnToBn8(value) {
  return value ? import_bn103.default.isBN(value) ? value : isHex9(value) ? hexToBn8(value.toString()) : isBigInt8(value) ? new import_bn103.default(value.toString()) : isToBn8(value) ? value.toBn() : isToBigInt8(value) ? new import_bn103.default(value.toBigInt().toString()) : new import_bn103.default(value) : new import_bn103.default(0);
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bn/toHex.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/bn/toU8a.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/buffer/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/buffer/toU8a.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/compact/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/compact/addLength.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/compact/toU8a.js
init_shim();
var MAX_U88 = BN_TWO8.pow(new import_bn103.default(8 - 2)).isub(BN_ONE8);
var MAX_U168 = BN_TWO8.pow(new import_bn103.default(16 - 2)).isub(BN_ONE8);
var MAX_U328 = BN_TWO8.pow(new import_bn103.default(32 - 2)).isub(BN_ONE8);

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/compact/fromU8a.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/compact/stripLength.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/extractTime.js
init_shim();
var MIN_MS8 = 60 * 1e3;
var HR_MS8 = MIN_MS8 * 60;
var DAY_MS8 = HR_MS8 * 24;

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/float/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/float/toU8a.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/format/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/format/formatBalance.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/boolean.js
init_shim();
function isBoolean8(value) {
  return typeof value === "boolean";
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/format/formatDecimal.js
init_shim();
var NUMBER_REGEX8 = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal8(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX8) : value.match(NUMBER_REGEX8);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/format/getSeparator.js
init_shim();
function getSeparator8(locale) {
  return {
    decimal: 0.1.toLocaleString(locale).substring(1, 2),
    thousand: 1e3.toLocaleString(locale).substring(1, 2)
  };
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/format/si.js
init_shim();
var SI_MID8 = 8;
var SI8 = [
  { power: -24, text: "yocto", value: "y" },
  { power: -21, text: "zepto", value: "z" },
  { power: -18, text: "atto", value: "a" },
  { power: -15, text: "femto", value: "f" },
  { power: -12, text: "pico", value: "p" },
  { power: -9, text: "nano", value: "n" },
  { power: -6, text: "micro", value: "µ" },
  { power: -3, text: "milli", value: "m" },
  { power: 0, text: "Unit", value: "-" },
  { power: 3, text: "Kilo", value: "k" },
  { power: 6, text: "Mill", value: "M" },
  { power: 9, text: "Bill", value: "B" },
  { power: 12, text: "Tril", value: "T" },
  { power: 15, text: "Peta", value: "P" },
  { power: 18, text: "Exa", value: "E" },
  { power: 21, text: "Zeta", value: "Z" },
  { power: 24, text: "Yotta", value: "Y" }
];
function findSi8(type) {
  for (let i = 0, count2 = SI8.length; i < count2; i++) {
    if (SI8[i].value === type) {
      return SI8[i];
    }
  }
  return SI8[SI_MID8];
}
function calcSi8(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi8(forceUnit);
  }
  const siDefIndex = SI_MID8 - 1 + Math.ceil((text.length - decimals) / 3);
  return SI8[siDefIndex] || SI8[siDefIndex < 0 ? 0 : SI8.length - 1];
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/format/formatBalance.js
var DEFAULT_DECIMALS8 = 0;
var DEFAULT_UNIT8 = SI8[SI_MID8].text;
var defaultDecimals8 = DEFAULT_DECIMALS8;
var defaultUnit8 = DEFAULT_UNIT8;
function _formatBalance8(input, { decimals = defaultDecimals8, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text = bnToBn8(input).toString();
  if (text.length === 0 || text === "0") {
    return "0";
  }
  let sign2 = "";
  if (text[0].startsWith("-")) {
    sign2 = "-";
    text = text.substring(1);
  }
  const si = calcSi8(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text.substring(0, mid);
  let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean8(withUnit) ? SI8[SI_MID8].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator8(locale);
  return `${sign2}${formatDecimal8(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
var formatBalance8 = _formatBalance8;
formatBalance8.calcSi = (text, decimals = defaultDecimals8) => calcSi8(text, decimals);
formatBalance8.findSi = findSi8;
formatBalance8.getDefaults = () => {
  return {
    decimals: defaultDecimals8,
    unit: defaultUnit8
  };
};
formatBalance8.getOptions = (decimals = defaultDecimals8) => {
  return SI8.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
};
formatBalance8.setDefaults = ({ decimals, unit }) => {
  defaultDecimals8 = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals8;
  defaultUnit8 = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit8;
  SI8[SI_MID8].text = defaultUnit8;
};

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/format/formatDate.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/format/formatElapsed.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/format/formatNumber.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/hex/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/hex/addPrefix.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/hex/hasPrefix.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/hex/fixLength.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/hex/toNumber.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/hex/toString.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/array.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/ascii.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/string.js
init_shim();
function isString9(value) {
  return typeof value === "string" || value instanceof String;
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/childClass.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/class.js
init_shim();
var isClass8 = isOnFunction8("isPrototypeOf", "hasOwnProperty");

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/codec.js
init_shim();
var checkCodec8 = isOnObject8("toHex", "toHuman", "toU8a");
var checkRegistry8 = isOnObject8("get");

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/compact.js
init_shim();
var isCompact8 = isOnObject8("toBigInt", "toBn", "toNumber", "unwrap");

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/error.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/instanceOf.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/ip.js
init_shim();
var v48 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
var v6s8 = "[a-fA-F\\d]{1,4}";
var v68 = `
(?:
(?:${v6s8}:){7}(?:${v6s8}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6s8}:){6}(?:${v48}|:${v6s8}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6s8}:){5}(?::${v48}|(?::${v6s8}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6s8}:){4}(?:(?::${v6s8}){0,1}:${v48}|(?::${v6s8}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6s8}:){3}(?:(?::${v6s8}){0,2}:${v48}|(?::${v6s8}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6s8}:){2}(?:(?::${v6s8}){0,3}:${v48}|(?::${v6s8}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6s8}:){1}(?:(?::${v6s8}){0,4}:${v48}|(?::${v6s8}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6s8}){0,5}:${v48}|(?::${v6s8}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
var v46Exact8 = new RegExp(`(?:^${v48}$)|(?:^${v68}$)`);
var v4exact8 = new RegExp(`^${v48}$`);
var v6exact8 = new RegExp(`^${v68}$`);

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/jsonObject.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/stringify.js
init_shim();
function replacer4(_, v) {
  return isBigInt8(v) ? v.toString() : v;
}
function stringify8(value, space) {
  return JSON.stringify(value, replacer4, space);
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/null.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/number.js
init_shim();
function isNumber9(value) {
  return typeof value === "number";
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/observable.js
init_shim();
var isObservable9 = isOn8("next");

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/promise.js
init_shim();
var isPromise9 = isOnObject8("catch", "then");

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/riscv.js
init_shim();
var ELF_MAGIC8 = new Uint8Array([127, 69, 76, 70]);
var PVM_MAGIC8 = new Uint8Array([80, 86, 77, 0]);

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/testChain.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/undefined.js
init_shim();
function isUndefined8(value) {
  return value === void 0;
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/utf8.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/wasm.js
init_shim();
var WASM_MAGIC8 = new Uint8Array([0, 97, 115, 109]);

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/lazy.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/logger.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/noop.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/memoize.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/nextTick.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/number/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/number/toHex.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/number/toU8a.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/object/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/object/clear.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/object/copy.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/object/spread.js
init_shim();
function objectSpread8(dest, ...sources) {
  for (let i = 0, count2 = sources.length; i < count2; i++) {
    const src = sources[i];
    if (src) {
      if (typeof src.entries === "function") {
        for (const [key, value] of src.entries()) {
          dest[key] = value;
        }
      } else {
        Object.assign(dest, src);
      }
    }
  }
  return dest;
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/object/entries.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/object/keys.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/object/property.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/object/values.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/promisify.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/string/index.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/string/camelCase.js
init_shim();
var CC_TO_UP8 = new Array(256);
var CC_TO_LO8 = new Array(256);
for (let i = 0, count2 = CC_TO_UP8.length; i < count2; i++) {
  CC_TO_LO8[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP8[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps8(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP8[w.charCodeAt(w.length - 1)];
}
function converter15(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count2 = parts.length; i < count2; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps8), i);
    }
    return result;
  };
}
var stringCamelCase9 = converter15((w, i) => (i ? CC_TO_UP8[w.charCodeAt(0)] : CC_TO_LO8[w.charCodeAt(0)]) + w.slice(1));
var stringPascalCase8 = converter15((w) => CC_TO_UP8[w.charCodeAt(0)] + w.slice(1));

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/string/lowerFirst.js
init_shim();
function converter16(map2) {
  return (value) => value ? map2[value.charCodeAt(0)] + value.slice(1) : "";
}
var stringLowerFirst8 = converter16(CC_TO_LO8);
var stringUpperFirst8 = converter16(CC_TO_UP8);

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/string/shorten.js
init_shim();

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/string/toHex.js
init_shim();

// node_modules/@polkadot/types-create/detectOther.js
init_shim();
var detectOther_default19 = [packageInfo8];

// node_modules/@polkadot/types-create/detectPackage.js
detectPackage9(packageInfo41, null, detectOther_default19);

// node_modules/@polkadot/types-create/bundle.js
init_shim();

// node_modules/@polkadot/types-create/types/index.js
init_shim();

// node_modules/@polkadot/types-create/types/augmentRegistry.js
init_shim();

// node_modules/@polkadot/types-codec/types/registry.js
init_shim();

// node_modules/@polkadot/types-create/types/lookup.js
init_shim();

// node_modules/@polkadot/types-create/types/types.js
init_shim();
var TypeDefInfo;
(function(TypeDefInfo2) {
  TypeDefInfo2[TypeDefInfo2["BTreeMap"] = 0] = "BTreeMap";
  TypeDefInfo2[TypeDefInfo2["BTreeSet"] = 1] = "BTreeSet";
  TypeDefInfo2[TypeDefInfo2["Compact"] = 2] = "Compact";
  TypeDefInfo2[TypeDefInfo2["DoNotConstruct"] = 3] = "DoNotConstruct";
  TypeDefInfo2[TypeDefInfo2["Enum"] = 4] = "Enum";
  TypeDefInfo2[TypeDefInfo2["HashMap"] = 5] = "HashMap";
  TypeDefInfo2[TypeDefInfo2["Int"] = 6] = "Int";
  TypeDefInfo2[TypeDefInfo2["Linkage"] = 7] = "Linkage";
  TypeDefInfo2[TypeDefInfo2["Null"] = 8] = "Null";
  TypeDefInfo2[TypeDefInfo2["Option"] = 9] = "Option";
  TypeDefInfo2[TypeDefInfo2["Plain"] = 10] = "Plain";
  TypeDefInfo2[TypeDefInfo2["Range"] = 11] = "Range";
  TypeDefInfo2[TypeDefInfo2["RangeInclusive"] = 12] = "RangeInclusive";
  TypeDefInfo2[TypeDefInfo2["Result"] = 13] = "Result";
  TypeDefInfo2[TypeDefInfo2["Set"] = 14] = "Set";
  TypeDefInfo2[TypeDefInfo2["Si"] = 15] = "Si";
  TypeDefInfo2[TypeDefInfo2["Struct"] = 16] = "Struct";
  TypeDefInfo2[TypeDefInfo2["Tuple"] = 17] = "Tuple";
  TypeDefInfo2[TypeDefInfo2["UInt"] = 18] = "UInt";
  TypeDefInfo2[TypeDefInfo2["Vec"] = 19] = "Vec";
  TypeDefInfo2[TypeDefInfo2["VecFixed"] = 20] = "VecFixed";
  TypeDefInfo2[TypeDefInfo2["WrapperKeepOpaque"] = 21] = "WrapperKeepOpaque";
  TypeDefInfo2[TypeDefInfo2["WrapperOpaque"] = 22] = "WrapperOpaque";
})(TypeDefInfo || (TypeDefInfo = {}));

// node_modules/@polkadot/types-create/exports.js
init_shim();

// node_modules/@polkadot/types-create/create/index.js
init_shim();

// node_modules/@polkadot/types-create/create/class.js
init_shim();

// node_modules/@polkadot/types-codec/index.js
init_shim();

// node_modules/@polkadot/types-codec/detectPackage.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/detectPackage.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/detectOther.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/x-textdecoder/browser.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/x-textdecoder/fallback.js
init_shim();
var TextDecoder18 = class {
  constructor(encoding) {
    __publicField(this, "__encoding");
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count2 = value.length; i < count2; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/types-codec/node_modules/@polkadot/x-textdecoder/packageInfo.js
init_shim();
var packageInfo45 = { name: "@polkadot/x-textdecoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types-codec/node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder19 = extractGlobal("TextDecoder", TextDecoder18);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/x-textencoder/browser.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/x-textencoder/fallback.js
init_shim();
var TextEncoder18 = class {
  encode(value) {
    const count2 = value.length;
    const u8a9 = new Uint8Array(count2);
    for (let i = 0; i < count2; i++) {
      u8a9[i] = value.charCodeAt(i);
    }
    return u8a9;
  }
};

// node_modules/@polkadot/types-codec/node_modules/@polkadot/x-textencoder/packageInfo.js
init_shim();
var packageInfo46 = { name: "@polkadot/x-textencoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types-codec/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder19 = extractGlobal("TextEncoder", TextEncoder18);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/detectOther.js
var detectOther_default20 = [packageInfo45, packageInfo46];

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/packageInfo.js
init_shim();
var packageInfo47 = { name: "@polkadot/util", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/versionDetect.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/function.js
init_shim();
function isFunction11(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/versionDetect.js
var DEDUPE9 = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
var POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG9 = "POLKADOTJS_DISABLE_ESM_CJS_WARNING";
function getEntry9(name) {
  const _global = xglobal;
  if (!_global.__polkadotjs) {
    _global.__polkadotjs = {};
  }
  if (!_global.__polkadotjs[name]) {
    _global.__polkadotjs[name] = [];
  }
  return _global.__polkadotjs[name];
}
function formatDisplay9(all3, fmt) {
  let max2 = 0;
  for (let i = 0, count2 = all3.length; i < count2; i++) {
    max2 = Math.max(max2, all3[i].version.length);
  }
  return all3.map((d) => `	${fmt(d.version.padEnd(max2), d).join("	")}`).join("\n");
}
function formatInfo9(version, { name }) {
  return [
    version,
    name
  ];
}
function formatVersion9(version, { path, type }) {
  let extracted;
  if (path && path.length >= 5) {
    const nmIndex = path.indexOf("node_modules");
    extracted = nmIndex === -1 ? path : path.substring(nmIndex);
  } else {
    extracted = "<unknown>";
  }
  return [
    `${`${type || ""}`.padStart(3)} ${version}`,
    extracted
  ];
}
function getPath9(infoPath, pathOrFn) {
  if (infoPath) {
    return infoPath;
  } else if (isFunction11(pathOrFn)) {
    try {
      return pathOrFn() || "";
    } catch {
      return "";
    }
  }
  return pathOrFn || "";
}
function warn9(pre, all3, fmt) {
  console.warn(`${pre}
${DEDUPE9}
${formatDisplay9(all3, fmt)}`);
}
function detectPackage10({ name, path, type, version }, pathOrFn, deps = []) {
  var _a, _b;
  if (!name.startsWith("@polkadot")) {
    throw new Error(`Invalid package descriptor ${name}`);
  }
  const entry = getEntry9(name);
  entry.push({ path: getPath9(path, pathOrFn), type, version });
  const entriesSameVersion = entry.every((e) => e.version === version);
  const esmCjsWarningDisabled = ((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG9]) === "1";
  const multipleEntries = entry.length !== 1;
  const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;
  if (multipleEntries && !disableWarnings) {
    warn9(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion9);
  } else {
    const mismatches = deps.filter((d) => d && d.version !== version);
    if (mismatches.length) {
      warn9(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo9);
    }
  }
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/detectPackage.js
detectPackage10(packageInfo47, null, detectOther_default20);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bundle.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/array/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/array/chunk.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/array/filter.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/array/flatten.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/array/range.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/array/shuffle.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/array/unzip.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/array/zip.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/assert.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bi/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bi/min.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bi/helpers.js
init_shim();
function createCmp9(cmp) {
  return (...items) => {
    const count2 = items.length;
    if (count2 === 0) {
      throw new Error("Must provide one or more arguments");
    }
    let result = items[0];
    for (let i = 1; i < count2; i++) {
      if (cmp(items[i], result)) {
        result = items[i];
      }
    }
    return result;
  };
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bi/min.js
var nMax9 = createCmp9((a, b) => a > b);
var nMin9 = createCmp9((a, b) => a < b);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bi/sqrt.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bi/consts.js
init_shim();
var _0n19 = BigInt2(0);
var _1n19 = BigInt2(1);
var _2n16 = BigInt2(2);
var _3n11 = BigInt2(3);
var _4n11 = BigInt2(4);
var _5n11 = BigInt2(5);
var _6n9 = BigInt2(6);
var _7n11 = BigInt2(7);
var _8n11 = BigInt2(8);
var _9n10 = BigInt2(9);
var _10n10 = BigInt2(10);
var _100n9 = BigInt2(100);
var _1000n9 = BigInt2(1e3);
var _1Mn9 = BigInt2(1e6);
var _1Bn9 = BigInt2(1e9);
var _1Qn9 = _1Bn9 * _1Bn9;
var _2pow53n9 = BigInt2(Number.MAX_SAFE_INTEGER);
var _sqrt2pow53n9 = BigInt2(94906265);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bi/toBigInt.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/toBigInt.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toBigInt.js
init_shim();
var U8_MAX9 = BigInt2(256);
var U16_MAX9 = BigInt2(256 * 256);
var U64_MAX9 = BigInt2("0x10000000000000000");

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/toU8a.js
init_shim();
var CHR9 = "0123456789abcdef";
var U817 = new Uint8Array(256);
var U1617 = new Uint8Array(256 * 256);
for (let i = 0, count2 = CHR9.length; i < count2; i++) {
  U817[CHR9[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U817[CHR9[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1617[s | j] = U817[i] << 4 | U817[j];
  }
}
function hexToU8a10(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U1617[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/bn.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/bn.js
init_shim();
var import_bn116 = __toESM(require_bn9(), 1);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/bn.js
function isBn9(value) {
  return import_bn116.default.isBN(value);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/hex.js
init_shim();
var REGEX_HEX_PREFIXED9 = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX9 = /^[\da-fA-F]+$/;
function isHex10(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED9.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/toBigInt.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/helpers.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/object.js
init_shim();
function isObject9(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/helpers.js
function isOn9(...fns) {
  return (value) => (isObject9(value) || isFunction11(value)) && fns.every((f) => isFunction11(value[f]));
}
function isOnFunction9(...fns) {
  return (value) => isFunction11(value) && fns.every((f) => isFunction11(value[f]));
}
function isOnObject9(...fns) {
  return (value) => isObject9(value) && fns.every((f) => isFunction11(value[f]));
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt9 = isOn9("toBigInt");

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/toBn.js
init_shim();
var isToBn9 = isOn9("toBn");

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bi/toHex.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/cmp.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toU8a.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/buffer.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/has.js
init_shim();
var hasBigInt10 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer9 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess9 = typeof xglobal.process === "object";

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/buffer.js
function isBuffer9(value) {
  return hasBuffer9 && !!value && isFunction11(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/u8a.js
init_shim();
function isU8a10(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/string/toU8a.js
init_shim();
var encoder9 = new TextEncoder19();
function stringToU8a10(value) {
  return value ? encoder9.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a10(value) {
  return isU8a10(value) ? isBuffer9(value) ? new Uint8Array(value) : value : isHex10(value) ? hexToU8a10(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a10(value);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/concat.js
init_shim();
function u8aConcatStrict10(u8as, length = 0) {
  const count2 = u8as.length;
  let offset = 0;
  if (!length) {
    for (let i = 0; i < count2; i++) {
      length += u8as[i].length;
    }
  }
  const result = new Uint8Array(length);
  for (let i = 0; i < count2; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }
  return result;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/empty.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/eq.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/fixLength.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/sorted.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toBn.js
init_shim();
function u8aToBn9(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count2 = value.length;
  if (isNegative && count2 && value[count2 - 1] & 128) {
    switch (count2) {
      case 0:
        return new import_bn116.default(0);
      case 1:
        return new import_bn116.default((value[0] ^ 255) * -1 - 1);
      case 2:
        return new import_bn116.default((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
      case 3:
        return new import_bn116.default((value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1);
      case 4:
        return new import_bn116.default((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
      case 5:
        return new import_bn116.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1);
      case 6:
        return new import_bn116.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1);
      default:
        return new import_bn116.default(value, "le").fromTwos(count2 * 8);
    }
  }
  switch (count2) {
    case 0:
      return new import_bn116.default(0);
    case 1:
      return new import_bn116.default(value[0]);
    case 2:
      return new import_bn116.default(value[0] + (value[1] << 8));
    case 3:
      return new import_bn116.default(value[0] + (value[1] << 8) + (value[2] << 16));
    case 4:
      return new import_bn116.default(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
    case 5:
      return new import_bn116.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216);
    case 6:
      return new import_bn116.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
    default:
      return new import_bn116.default(value, "le");
  }
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toBuffer.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toFloat.js
init_shim();
function u8aToFloat9(value, { bitLength = 32, isLe = true } = {}) {
  if (bitLength !== 32 && bitLength !== 64) {
    throw new Error("Invalid bitLength provided, expected 32 or 64");
  } else if (value.length < bitLength / 8) {
    throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);
  }
  const dv = new DataView(value.buffer, value.byteOffset);
  return bitLength === 32 ? dv.getFloat32(0, isLe) : dv.getFloat64(0, isLe);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toHex.js
init_shim();
var U818 = new Array(256);
var U1618 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U818[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1618[s | j] = U818[i] + U818[j];
  }
}
function hex7(value, result) {
  const mod5 = value.length % 2 | 0;
  const length = value.length - mod5 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U1618[value[i] << 8 | value[i + 1]];
  }
  if (mod5) {
    result += U818[value[length] | 0];
  }
  return result;
}
function u8aToHex10(value, bitLength = -1, isPrefixed = true) {
  const empty3 = isPrefixed ? "0x" : "";
  if (!(value == null ? void 0 : value.length)) {
    return empty3;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex7(value.subarray(0, length / 2), empty3)}…${hex7(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex7(value, empty3);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toNumber.js
init_shim();
function u8aToNumber9(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count2 = value.length;
  if (isNegative && count2 && value[count2 - 1] & 128) {
    switch (count2) {
      case 0:
        return 0;
      case 1:
        return (value[0] ^ 255) * -1 - 1;
      case 2:
        return (value[0] + (value[1] << 8) ^ 65535) * -1 - 1;
      case 3:
        return (value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1;
      case 4:
        return (value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1;
      case 5:
        return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1;
      case 6:
        return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1;
      default:
        throw new Error("Value more than 48-bits cannot be reliably converted");
    }
  }
  switch (count2) {
    case 0:
      return 0;
    case 1:
      return value[0];
    case 2:
      return value[0] + (value[1] << 8);
    case 3:
      return value[0] + (value[1] << 8) + (value[2] << 16);
    case 4:
      return value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216;
    case 5:
      return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216;
    case 6:
      return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216;
    default:
      throw new Error("Value more than 48-bits cannot be reliably converted");
  }
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toString.js
init_shim();
var decoder9 = new TextDecoder19("utf-8");
function u8aToString10(value) {
  return value ? decoder9.decode(value) : "";
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/wrap.js
init_shim();
var U8A_WRAP_ETHEREUM9 = u8aToU8a10("Ethereum Signed Message:\n");
var U8A_WRAP_PREFIX9 = u8aToU8a10("<Bytes>");
var U8A_WRAP_POSTFIX9 = u8aToU8a10("</Bytes>");
var WRAP_LEN9 = U8A_WRAP_PREFIX9.length + U8A_WRAP_POSTFIX9.length;

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bi/toU8a.js
init_shim();
var DIV9 = BigInt2(256);
var NEG_MASK9 = BigInt2(255);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/fromHex.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/toBn.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/stripPrefix.js
init_shim();
function hexStripPrefix9(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED9.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX9.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/toBn.js
function hexToBn9(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn116.default(0);
  }
  const stripped = hexStripPrefix9(value);
  const bn = new import_bn116.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/min.js
init_shim();
var bnMax9 = createCmp9((a, b) => a.gt(b));
var bnMin9 = createCmp9((a, b) => a.lt(b));

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/sqrt.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/consts.js
init_shim();
var BN_ZERO9 = new import_bn116.default(0);
var BN_ONE9 = new import_bn116.default(1);
var BN_TWO9 = new import_bn116.default(2);
var BN_THREE9 = new import_bn116.default(3);
var BN_FOUR9 = new import_bn116.default(4);
var BN_FIVE9 = new import_bn116.default(5);
var BN_SIX9 = new import_bn116.default(6);
var BN_SEVEN9 = new import_bn116.default(7);
var BN_EIGHT9 = new import_bn116.default(8);
var BN_NINE9 = new import_bn116.default(9);
var BN_TEN9 = new import_bn116.default(10);
var BN_HUNDRED9 = new import_bn116.default(100);
var BN_THOUSAND9 = new import_bn116.default(1e3);
var BN_MILLION9 = new import_bn116.default(1e6);
var BN_BILLION9 = new import_bn116.default(1e9);
var BN_QUINTILL9 = BN_BILLION9.mul(BN_BILLION9);
var BN_MAX_INTEGER9 = new import_bn116.default(Number.MAX_SAFE_INTEGER);
var BN_SQRT_MAX_INTEGER9 = new import_bn116.default(94906265);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/toBn.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/bigInt.js
init_shim();
function isBigInt9(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/toBn.js
function bnToBn9(value) {
  return value ? import_bn116.default.isBN(value) ? value : isHex10(value) ? hexToBn9(value.toString()) : isBigInt9(value) ? new import_bn116.default(value.toString()) : isToBn9(value) ? value.toBn() : isToBigInt9(value) ? new import_bn116.default(value.toBigInt().toString()) : new import_bn116.default(value) : new import_bn116.default(0);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/toHex.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/toU8a.js
init_shim();
var DEFAULT_OPTS4 = { bitLength: -1, isLe: true, isNegative: false };
function bnToU8a10(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS4) {
  const valueBn = bnToBn9(value);
  const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);
  if (!value) {
    return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(byteLength);
  }
  const output5 = new Uint8Array(byteLength);
  const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
  output5.set(bn.toArray(isLe ? "le" : "be", byteLength), 0);
  return output5;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/toHex.js
function bnToHex9(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {
  return u8aToHex10(bnToU8a10(value, { bitLength, isLe, isNegative }));
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/buffer/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/buffer/toU8a.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/compact/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/compact/addLength.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/compact/toU8a.js
init_shim();
var MAX_U89 = BN_TWO9.pow(new import_bn116.default(8 - 2)).isub(BN_ONE9);
var MAX_U169 = BN_TWO9.pow(new import_bn116.default(16 - 2)).isub(BN_ONE9);
var MAX_U329 = BN_TWO9.pow(new import_bn116.default(32 - 2)).isub(BN_ONE9);
var BL_164 = { bitLength: 16 };
var BL_324 = { bitLength: 32 };
function compactToU8a9(value) {
  const bn = bnToBn9(value);
  if (bn.lte(MAX_U89)) {
    return new Uint8Array([bn.toNumber() << 2]);
  } else if (bn.lte(MAX_U169)) {
    return bnToU8a10(bn.shln(2).iadd(BN_ONE9), BL_164);
  } else if (bn.lte(MAX_U329)) {
    return bnToU8a10(bn.shln(2).iadd(BN_TWO9), BL_324);
  }
  const u8a9 = bnToU8a10(bn);
  let length = u8a9.length;
  while (u8a9[length - 1] === 0) {
    length--;
  }
  if (length < 4) {
    throw new Error("Invalid length, previous checks match anything less than 2^30");
  }
  return u8aConcatStrict10([
    // subtract 4 as minimum (also catered for in decoding)
    new Uint8Array([(length - 4 << 2) + 3]),
    u8a9.subarray(0, length)
  ]);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/compact/addLength.js
function compactAddLength10(input) {
  return u8aConcatStrict10([
    compactToU8a9(input.length),
    input
  ]);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/compact/fromU8a.js
init_shim();
function compactFromU8a9(input) {
  const u8a9 = u8aToU8a10(input);
  switch (u8a9[0] & 3) {
    case 0:
      return [1, new import_bn116.default(u8a9[0] >>> 2)];
    case 1:
      return [2, new import_bn116.default(u8a9[0] + (u8a9[1] << 8) >>> 2)];
    case 2:
      return [4, new import_bn116.default(u8a9[0] + (u8a9[1] << 8) + (u8a9[2] << 16) + u8a9[3] * 16777216 >>> 2)];
    default: {
      const offset = (u8a9[0] >>> 2) + 5;
      switch (offset) {
        case 5:
          return [5, new import_bn116.default(u8a9[1] + (u8a9[2] << 8) + (u8a9[3] << 16) + u8a9[4] * 16777216)];
        case 6:
          return [6, new import_bn116.default(u8a9[1] + (u8a9[2] << 8) + (u8a9[3] << 16) + (u8a9[4] + (u8a9[5] << 8)) * 16777216)];
        case 7:
          return [7, new import_bn116.default(u8a9[1] + (u8a9[2] << 8) + (u8a9[3] << 16) + (u8a9[4] + (u8a9[5] << 8) + (u8a9[6] << 16)) * 16777216)];
        default:
          return [offset, u8aToBn9(u8a9.subarray(1, offset))];
      }
    }
  }
}
function compactFromU8aLim9(u8a9) {
  switch (u8a9[0] & 3) {
    case 0:
      return [1, u8a9[0] >>> 2];
    case 1:
      return [2, u8a9[0] + (u8a9[1] << 8) >>> 2];
    case 2:
      return [4, u8a9[0] + (u8a9[1] << 8) + (u8a9[2] << 16) + u8a9[3] * 16777216 >>> 2];
    default: {
      switch ((u8a9[0] >>> 2) + 5) {
        case 5:
          return [5, u8a9[1] + (u8a9[2] << 8) + (u8a9[3] << 16) + u8a9[4] * 16777216];
        case 6:
          return [6, u8a9[1] + (u8a9[2] << 8) + (u8a9[3] << 16) + (u8a9[4] + (u8a9[5] << 8)) * 16777216];
        case 7:
          return [7, u8a9[1] + (u8a9[2] << 8) + (u8a9[3] << 16) + (u8a9[4] + (u8a9[5] << 8) + (u8a9[6] << 16)) * 16777216];
        default:
          throw new Error("Compact input is > Number.MAX_SAFE_INTEGER");
      }
    }
  }
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/compact/stripLength.js
init_shim();
function compactStripLength9(input) {
  const [offset, length] = compactFromU8a9(input);
  const total = offset + length.toNumber();
  return [
    total,
    input.subarray(offset, total)
  ];
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/extractTime.js
init_shim();
var MIN_MS9 = 60 * 1e3;
var HR_MS9 = MIN_MS9 * 60;
var DAY_MS9 = HR_MS9 * 24;

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/float/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/float/toU8a.js
init_shim();
function floatToU8a9(value = 0, { bitLength = 32, isLe = true } = {}) {
  if (bitLength !== 32 && bitLength !== 64) {
    throw new Error("Invalid bitLength provided, expected 32 or 64");
  }
  const result = new Uint8Array(bitLength / 8);
  const dv = new DataView(result.buffer, result.byteOffset);
  if (bitLength === 32) {
    dv.setFloat32(0, Number(value), isLe);
  } else {
    dv.setFloat64(0, Number(value), isLe);
  }
  return result;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/formatBalance.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/boolean.js
init_shim();
function isBoolean9(value) {
  return typeof value === "boolean";
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/formatDecimal.js
init_shim();
var NUMBER_REGEX9 = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal9(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX9) : value.match(NUMBER_REGEX9);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/getSeparator.js
init_shim();
function getSeparator9(locale) {
  return {
    decimal: 0.1.toLocaleString(locale).substring(1, 2),
    thousand: 1e3.toLocaleString(locale).substring(1, 2)
  };
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/si.js
init_shim();
var SI_MID9 = 8;
var SI9 = [
  { power: -24, text: "yocto", value: "y" },
  { power: -21, text: "zepto", value: "z" },
  { power: -18, text: "atto", value: "a" },
  { power: -15, text: "femto", value: "f" },
  { power: -12, text: "pico", value: "p" },
  { power: -9, text: "nano", value: "n" },
  { power: -6, text: "micro", value: "µ" },
  { power: -3, text: "milli", value: "m" },
  { power: 0, text: "Unit", value: "-" },
  { power: 3, text: "Kilo", value: "k" },
  { power: 6, text: "Mill", value: "M" },
  { power: 9, text: "Bill", value: "B" },
  { power: 12, text: "Tril", value: "T" },
  { power: 15, text: "Peta", value: "P" },
  { power: 18, text: "Exa", value: "E" },
  { power: 21, text: "Zeta", value: "Z" },
  { power: 24, text: "Yotta", value: "Y" }
];
function findSi9(type) {
  for (let i = 0, count2 = SI9.length; i < count2; i++) {
    if (SI9[i].value === type) {
      return SI9[i];
    }
  }
  return SI9[SI_MID9];
}
function calcSi9(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi9(forceUnit);
  }
  const siDefIndex = SI_MID9 - 1 + Math.ceil((text.length - decimals) / 3);
  return SI9[siDefIndex] || SI9[siDefIndex < 0 ? 0 : SI9.length - 1];
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/formatBalance.js
var DEFAULT_DECIMALS9 = 0;
var DEFAULT_UNIT9 = SI9[SI_MID9].text;
var defaultDecimals9 = DEFAULT_DECIMALS9;
var defaultUnit9 = DEFAULT_UNIT9;
function _formatBalance9(input, { decimals = defaultDecimals9, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text = bnToBn9(input).toString();
  if (text.length === 0 || text === "0") {
    return "0";
  }
  let sign2 = "";
  if (text[0].startsWith("-")) {
    sign2 = "-";
    text = text.substring(1);
  }
  const si = calcSi9(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text.substring(0, mid);
  let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean9(withUnit) ? SI9[SI_MID9].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator9(locale);
  return `${sign2}${formatDecimal9(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
var formatBalance9 = _formatBalance9;
formatBalance9.calcSi = (text, decimals = defaultDecimals9) => calcSi9(text, decimals);
formatBalance9.findSi = findSi9;
formatBalance9.getDefaults = () => {
  return {
    decimals: defaultDecimals9,
    unit: defaultUnit9
  };
};
formatBalance9.getOptions = (decimals = defaultDecimals9) => {
  return SI9.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
};
formatBalance9.setDefaults = ({ decimals, unit }) => {
  defaultDecimals9 = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals9;
  defaultUnit9 = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit9;
  SI9[SI_MID9].text = defaultUnit9;
};

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/formatDate.js
init_shim();
function zeroPad5(value) {
  return value.toString().padStart(2, "0");
}
function formatDate9(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad5(date.getMonth() + 1);
  const day = zeroPad5(date.getDate());
  const hour = zeroPad5(date.getHours());
  const minute = zeroPad5(date.getMinutes());
  const second = zeroPad5(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/formatElapsed.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/formatNumber.js
init_shim();
function formatNumber9(value, { locale = "en" } = {}) {
  const { thousand } = getSeparator9(locale);
  return formatDecimal9(bnToBn9(value).toString(), thousand);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/addPrefix.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/hasPrefix.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/fixLength.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/toNumber.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/toString.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/array.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/ascii.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/string.js
init_shim();
function isString10(value) {
  return typeof value === "string" || value instanceof String;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/ascii.js
function isAsciiStr(str) {
  for (let i = 0, count2 = str.length; i < count2; i++) {
    const b = str.charCodeAt(i);
    if (b < 32 || b > 126) {
      return false;
    }
  }
  return true;
}
function isAsciiBytes(u8a9) {
  for (let i = 0, count2 = u8a9.length; i < count2; i++) {
    const b = u8a9[i] | 0;
    if (b < 32 || b > 126) {
      return false;
    }
  }
  return true;
}
function isAscii9(value) {
  return isString10(value) ? isHex10(value) ? isAsciiBytes(u8aToU8a10(value)) : isAsciiStr(value) : value ? isAsciiBytes(value) : false;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/childClass.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/class.js
init_shim();
var isClass9 = isOnFunction9("isPrototypeOf", "hasOwnProperty");

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/codec.js
init_shim();
var checkCodec9 = isOnObject9("toHex", "toHuman", "toU8a");
var checkRegistry9 = isOnObject9("get");
function isCodec9(value) {
  return checkCodec9(value) && checkRegistry9(value.registry);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/compact.js
init_shim();
var isCompact9 = isOnObject9("toBigInt", "toBn", "toNumber", "unwrap");

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/error.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/instanceOf.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/ip.js
init_shim();
var v49 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
var v6s9 = "[a-fA-F\\d]{1,4}";
var v69 = `
(?:
(?:${v6s9}:){7}(?:${v6s9}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6s9}:){6}(?:${v49}|:${v6s9}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6s9}:){5}(?::${v49}|(?::${v6s9}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6s9}:){4}(?:(?::${v6s9}){0,1}:${v49}|(?::${v6s9}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6s9}:){3}(?:(?::${v6s9}){0,2}:${v49}|(?::${v6s9}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6s9}:){2}(?:(?::${v6s9}){0,3}:${v49}|(?::${v6s9}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6s9}:){1}(?:(?::${v6s9}){0,4}:${v49}|(?::${v6s9}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6s9}){0,5}:${v49}|(?::${v6s9}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
var v46Exact9 = new RegExp(`(?:^${v49}$)|(?:^${v69}$)`);
var v4exact9 = new RegExp(`^${v49}$`);
var v6exact9 = new RegExp(`^${v69}$`);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/jsonObject.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/stringify.js
init_shim();
function replacer5(_, v) {
  return isBigInt9(v) ? v.toString() : v;
}
function stringify9(value, space) {
  return JSON.stringify(value, replacer5, space);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/null.js
init_shim();
function isNull9(value) {
  return value === null;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/number.js
init_shim();
function isNumber10(value) {
  return typeof value === "number";
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/observable.js
init_shim();
var isObservable10 = isOn9("next");

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/promise.js
init_shim();
var isPromise10 = isOnObject9("catch", "then");

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/riscv.js
init_shim();
var ELF_MAGIC9 = new Uint8Array([127, 69, 76, 70]);
var PVM_MAGIC9 = new Uint8Array([80, 86, 77, 0]);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/testChain.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/undefined.js
init_shim();
function isUndefined9(value) {
  return value === void 0;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/utf8.js
init_shim();
function isUtf89(value) {
  if (!value) {
    return isString10(value);
  }
  const u8a9 = u8aToU8a10(value);
  const len = u8a9.length;
  let i = 0;
  while (i < len) {
    if (u8a9[i] <= 127) {
      i += 1;
    } else if (u8a9[i] >= 194 && u8a9[i] <= 223) {
      if (i + 1 < len) {
        if (u8a9[i + 1] < 128 || u8a9[i + 1] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 2;
    } else if (u8a9[i] === 224) {
      if (i + 2 < len) {
        if (u8a9[i + 1] < 160 || u8a9[i + 1] > 191) {
          return false;
        }
        if (u8a9[i + 2] < 128 || u8a9[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a9[i] >= 225 && u8a9[i] <= 236) {
      if (i + 2 < len) {
        if (u8a9[i + 1] < 128 || u8a9[i + 1] > 191) {
          return false;
        }
        if (u8a9[i + 2] < 128 || u8a9[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a9[i] === 237) {
      if (i + 2 < len) {
        if (u8a9[i + 1] < 128 || u8a9[i + 1] > 159) {
          return false;
        }
        if (u8a9[i + 2] < 128 || u8a9[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a9[i] >= 238 && u8a9[i] <= 239) {
      if (i + 2 < len) {
        if (u8a9[i + 1] < 128 || u8a9[i + 1] > 191) {
          return false;
        }
        if (u8a9[i + 2] < 128 || u8a9[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a9[i] === 240) {
      if (i + 3 < len) {
        if (u8a9[i + 1] < 144 || u8a9[i + 1] > 191) {
          return false;
        }
        if (u8a9[i + 2] < 128 || u8a9[i + 2] > 191) {
          return false;
        }
        if (u8a9[i + 3] < 128 || u8a9[i + 3] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 4;
    } else if (u8a9[i] >= 241 && u8a9[i] <= 243) {
      if (i + 3 < len) {
        if (u8a9[i + 1] < 128 || u8a9[i + 1] > 191) {
          return false;
        }
        if (u8a9[i + 2] < 128 || u8a9[i + 2] > 191) {
          return false;
        }
        if (u8a9[i + 3] < 128 || u8a9[i + 3] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 4;
    } else if (u8a9[i] === 244) {
      if (i + 3 < len) {
        if (u8a9[i + 1] < 128 || u8a9[i + 1] > 143) {
          return false;
        }
        if (u8a9[i + 2] < 128 || u8a9[i + 2] > 191) {
          return false;
        }
        if (u8a9[i + 3] < 128 || u8a9[i + 3] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 4;
    } else {
      return false;
    }
  }
  return true;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/wasm.js
init_shim();
var WASM_MAGIC9 = new Uint8Array([0, 97, 115, 109]);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/lazy.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/logger.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/noop.js
init_shim();
function identity3(value) {
  return value;
}
function noop10() {
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/logger.js
var logTo5 = {
  debug: "log",
  error: "error",
  log: "log",
  warn: "warn"
};
function formatOther5(value) {
  if (value && isObject9(value) && value.constructor === Object) {
    const result = {};
    for (const [k, v] of Object.entries(value)) {
      result[k] = loggerFormat5(v);
    }
    return result;
  }
  return value;
}
function loggerFormat5(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat5);
  } else if (isBn9(value)) {
    return value.toString();
  } else if (isU8a10(value) || isBuffer9(value)) {
    return u8aToHex10(u8aToU8a10(value));
  }
  return formatOther5(value);
}
function formatWithLength5(maxLength) {
  return (v) => {
    if (maxLength <= 0) {
      return v;
    }
    const r = `${v}`;
    return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
  };
}
function apply5(log, type, values, maxSize = -1) {
  if (values.length === 1 && isFunction11(values[0])) {
    const fnResult = values[0]();
    return apply5(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }
  console[logTo5[log]](formatDate9(/* @__PURE__ */ new Date()), type, ...values.map(loggerFormat5).map(formatWithLength5(maxSize)));
}
function isDebugOn5(e, type) {
  return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff5(e, type) {
  return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
}
function getDebugFlag5(env, type) {
  let flag = false;
  for (const e of env) {
    if (isDebugOn5(e, type)) {
      flag = true;
    } else if (isDebugOff5(e, type)) {
      flag = false;
    }
  }
  return flag;
}
function parseEnv5(type) {
  var _a, _b, _c, _d;
  const maxSize = parseInt(((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b["DEBUG_MAX"]) || "-1", 10);
  return [
    getDebugFlag5((((_d = (_c = xglobal.process) == null ? void 0 : _c.env) == null ? void 0 : _d["DEBUG"]) || "").toLowerCase().split(","), type),
    isNaN(maxSize) ? -1 : maxSize
  ];
}
function logger6(origin) {
  const type = `${origin.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv5(origin.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply5("debug", type, values, maxSize) : noop10,
    error: (...values) => apply5("error", type, values),
    log: (...values) => apply5("log", type, values),
    noop: noop10,
    warn: (...values) => apply5("warn", type, values)
  };
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/memoize.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/nextTick.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/number/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/number/toHex.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/number/toU8a.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/object/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/object/clear.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/object/copy.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/object/spread.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/object/entries.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/object/keys.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/object/property.js
init_shim();
function objectProperty9(that, key, getter, getName, index = 0) {
  const name = getName ? getName(key, index) : key;
  if (!(name in that)) {
    Object.defineProperty(that, name, {
      enumerable: true,
      // Unlike in lazy, we always call into the upper function, i.e. this method
      // does not cache old values (it is expected to be used for dynamic values)
      get: function() {
        return getter(key, index, this);
      }
    });
  }
}
function objectProperties9(that, keys2, getter, getName) {
  for (let i = 0, count2 = keys2.length; i < count2; i++) {
    objectProperty9(that, keys2[i], getter, getName, i);
  }
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/object/values.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/promisify.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/string/index.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/string/camelCase.js
init_shim();
var CC_TO_UP9 = new Array(256);
var CC_TO_LO9 = new Array(256);
for (let i = 0, count2 = CC_TO_UP9.length; i < count2; i++) {
  CC_TO_LO9[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP9[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps9(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP9[w.charCodeAt(w.length - 1)];
}
function converter17(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count2 = parts.length; i < count2; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps9), i);
    }
    return result;
  };
}
var stringCamelCase10 = converter17((w, i) => (i ? CC_TO_UP9[w.charCodeAt(0)] : CC_TO_LO9[w.charCodeAt(0)]) + w.slice(1));
var stringPascalCase9 = converter17((w) => CC_TO_UP9[w.charCodeAt(0)] + w.slice(1));

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/string/lowerFirst.js
init_shim();
function converter18(map2) {
  return (value) => value ? map2[value.charCodeAt(0)] + value.slice(1) : "";
}
var stringLowerFirst9 = converter18(CC_TO_LO9);
var stringUpperFirst9 = converter18(CC_TO_UP9);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/string/shorten.js
init_shim();

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/string/toHex.js
init_shim();

// node_modules/@polkadot/types-codec/detectOther.js
init_shim();
var detectOther_default21 = [];

// node_modules/@polkadot/types-codec/detectPackage.js
detectPackage10(packageInfo8, null, detectOther_default21);

// node_modules/@polkadot/types-codec/bundle.js
init_shim();

// node_modules/@polkadot/types-codec/abstract/index.js
init_shim();

// node_modules/@polkadot/types-codec/abstract/Array.js
init_shim();

// node_modules/@polkadot/types-codec/utils/compareArray.js
init_shim();

// node_modules/@polkadot/types-codec/utils/util.js
init_shim();
function hasEq(o) {
  return isFunction11(o.eq);
}

// node_modules/@polkadot/types-codec/utils/compareArray.js
function compareArray(a, b) {
  if (Array.isArray(b)) {
    return a.length === b.length && isUndefined9(a.find((v, index) => hasEq(v) ? !v.eq(b[index]) : v !== b[index]));
  }
  return false;
}

// node_modules/@polkadot/types-codec/abstract/Array.js
var AbstractArray = class extends Array {
  /**
   * @description This ensures that operators such as clice, filter, map, etc. return
   * new Array instances (without this we need to apply overrides)
   */
  static get [Symbol.species]() {
    return Array;
  }
  constructor(registry, length) {
    super(length);
    this.registry = registry;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    const count2 = this.length;
    let total = compactToU8a9(count2).length;
    for (let i = 0; i < count2; i++) {
      total += this[i].encodedLength;
    }
    return total;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.length === 0;
  }
  /**
   * @description The length of the value
   */
  get length() {
    return super.length;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareArray(this, other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      inner: this.inspectInner(),
      outer: [compactToU8a9(this.length)]
    };
  }
  /**
   * @internal
   * @description Internal per-item inspection of internal values
   */
  inspectInner() {
    const count2 = this.length;
    const inner = new Array(count2);
    for (let i = 0; i < count2; i++) {
      inner[i] = this[i].inspect();
    }
    return inner;
  }
  /**
   * @description Converts the Object to an standard JavaScript Array
   */
  toArray() {
    return Array.from(this);
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex10(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    const count2 = this.length;
    const result = new Array(count2);
    for (let i = 0; i < count2; i++) {
      result[i] = this[i] && this[i].toHuman(isExtended);
    }
    return result;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    const count2 = this.length;
    const result = new Array(count2);
    for (let i = 0; i < count2; i++) {
      result[i] = this[i] && this[i].toJSON();
    }
    return result;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    const count2 = this.length;
    const result = new Array(count2);
    for (let i = 0; i < count2; i++) {
      result[i] = this[i] && this[i].toPrimitive();
    }
    return result;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    const count2 = this.length;
    const result = new Array(count2);
    for (let i = 0; i < count2; i++) {
      result[i] = this[i].toString();
    }
    return `[${result.join(", ")}]`;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = this.toU8aInner();
    return isBare ? u8aConcatStrict10(encoded) : u8aConcatStrict10([compactToU8a9(this.length), ...encoded]);
  }
  /**
   * @internal
   * @description Internal per-item SCALE encoding of contained values
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8aInner(isBare) {
    const count2 = this.length;
    const encoded = new Array(count2);
    for (let i = 0; i < count2; i++) {
      encoded[i] = this[i].toU8a(isBare);
    }
    return encoded;
  }
};

// node_modules/@polkadot/types-codec/abstract/Base.js
init_shim();
var AbstractBase = class {
  constructor(registry, value, initialU8aLength) {
    this.initialU8aLength = initialU8aLength;
    this.__internal__raw = value;
    this.registry = registry;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description returns the inner (wrapped value)
   */
  get inner() {
    return this.__internal__raw;
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.__internal__raw.isEmpty;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.__internal__raw.eq(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return this.__internal__raw.inspect();
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */
  toHex(isLe) {
    return this.__internal__raw.toHex(isLe);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    return this.__internal__raw.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.__internal__raw.toJSON();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.__internal__raw.toPrimitive();
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.__internal__raw.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return this.__internal__raw.toU8a(isBare);
  }
  /**
   * @description Returns the inner wrapped value (equivalent to valueOf)
   */
  unwrap() {
    return this.__internal__raw;
  }
  /**
   * @description Returns the inner wrapped value
   */
  valueOf() {
    return this.__internal__raw;
  }
};

// node_modules/@polkadot/types-codec/abstract/Int.js
init_shim();
var DEFAULT_UINT_BITS = 64;
var MAX_NUMBER_BITS = 52;
var MUL_P = new import_bn116.default(1e4);
var FORMATTERS = [
  ["Perquintill", BN_QUINTILL9],
  ["Perbill", BN_BILLION9],
  ["Permill", BN_MILLION9],
  ["Percent", BN_HUNDRED9]
];
function isToBn10(value) {
  return isFunction11(value.toBn);
}
function toPercentage(value, divisor) {
  return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
}
function decodeAbstractInt(value, isNegative) {
  if (isNumber10(value)) {
    if (!Number.isInteger(value) || value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) {
      throw new Error("Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1");
    }
    return value;
  } else if (isString10(value)) {
    if (isHex10(value, -1, true)) {
      return hexToBn9(value, { isLe: false, isNegative }).toString();
    }
    if (value.includes(".") || value.includes(",") || value.includes("e")) {
      throw new Error("String should not contain decimal points or scientific notation");
    }
    return value;
  } else if (isBn9(value) || isBigInt9(value)) {
    return value.toString();
  } else if (isObject9(value)) {
    if (isToBn10(value)) {
      return value.toBn().toString();
    }
    const keys2 = Object.keys(value);
    if (keys2.length !== 1) {
      throw new Error("Unable to construct number from multi-key object");
    }
    return decodeAbstractInt(value[keys2[0]], isNegative);
  } else if (!value) {
    return 0;
  }
  throw new Error(`Unable to create BN from unknown type ${typeof value}`);
}
var AbstractInt = class extends import_bn116.default {
  constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
    super(
      // shortcut isU8a as used in SCALE decoding
      isU8a10(value) ? bitLength <= 48 ? u8aToNumber9(value.subarray(0, bitLength / 8), { isNegative: isSigned }) : u8aToBn9(value.subarray(0, bitLength / 8), { isLe: true, isNegative: isSigned }).toString() : decodeAbstractInt(value, isSigned)
    );
    this.registry = registry;
    this.__internal__bitLength = bitLength;
    this.encodedLength = this.__internal__bitLength / 8;
    this.initialU8aLength = this.__internal__bitLength / 8;
    this.isUnsigned = !isSigned;
    const isNegative = this.isNeg();
    const maxBits = bitLength - (isSigned && !isNegative ? 1 : 0);
    if (isNegative && !isSigned) {
      throw new Error(`${this.toRawType()}: Negative number passed to unsigned type`);
    } else if (super.bitLength() > maxBits) {
      throw new Error(`${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
    }
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is a zero value (align elsewhere)
   */
  get isEmpty() {
    return this.isZero();
  }
  /**
   * @description Returns the number of bits in the value
   */
  bitLength() {
    return this.__internal__bitLength;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  eq(other) {
    return super.eq(isHex10(other) ? hexToBn9(other.toString(), { isLe: false, isNegative: !this.isUnsigned }) : bnToBn9(other));
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description True if this value is the max of the type
   */
  isMax() {
    const u8a9 = this.toU8a().filter((b) => b === 255);
    return u8a9.length === this.__internal__bitLength / 8;
  }
  /**
   * @description Returns a BigInt representation of the number
   */
  toBigInt() {
    return BigInt(this.toString());
  }
  /**
   * @description Returns the BN representation of the number. (Compatibility)
   */
  toBn() {
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex(isLe = false) {
    return bnToHex9(this, {
      bitLength: this.bitLength(),
      isLe,
      isNegative: !this.isUnsigned
    });
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(_isExpanded) {
    const rawType = this.toRawType();
    if (rawType === "Balance") {
      return this.isMax() ? "everything" : formatBalance9(this, { decimals: this.registry.chainDecimals[0], withSi: true, withUnit: this.registry.chainTokens[0] });
    }
    const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
    return divisor ? toPercentage(this, divisor) : formatNumber9(this);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON(onlyHex = false) {
    return onlyHex || this.__internal__bitLength > 128 || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
  }
  /**
   * @description Returns the value in a primitive form, either number when <= 52 bits, or string otherwise
   */
  toPrimitive() {
    return super.bitLength() > MAX_NUMBER_BITS ? this.toString() : this.toNumber();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return this instanceof this.registry.createClassUnsafe("Balance") ? "Balance" : `${this.isUnsigned ? "u" : "i"}${this.bitLength()}`;
  }
  /**
   * @description Returns the string representation of the value
   * @param base The base to use for the conversion
   */
  toString(base) {
    return super.toString(base);
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return bnToU8a10(this, {
      bitLength: this.bitLength(),
      isLe: true,
      isNegative: !this.isUnsigned
    });
  }
};

// node_modules/@polkadot/types-codec/base/index.js
init_shim();

// node_modules/@polkadot/types-codec/base/Compact.js
init_shim();

// node_modules/@polkadot/types-codec/utils/index.js
init_shim();

// node_modules/@polkadot/types-codec/utils/compareMap.js
init_shim();
function hasMismatch(a, b) {
  return isUndefined9(a) || (hasEq(a) ? !a.eq(b) : a !== b);
}
function notEntry(value) {
  return !Array.isArray(value) || value.length !== 2;
}
function compareMapArray(a, b) {
  return a.size === b.length && !b.some((e) => notEntry(e) || hasMismatch(a.get(e[0]), e[1]));
}
function compareMap(a, b) {
  if (Array.isArray(b)) {
    return compareMapArray(a, b);
  } else if (b instanceof Map) {
    return compareMapArray(a, [...b.entries()]);
  } else if (isObject9(b)) {
    return compareMapArray(a, Object.entries(b));
  }
  return false;
}

// node_modules/@polkadot/types-codec/utils/compareSet.js
init_shim();
function compareSetArray(a, b) {
  return a.size === b.length && !b.some((e) => !a.has(e));
}
function compareSet(a, b) {
  if (Array.isArray(b)) {
    return compareSetArray(a, b);
  } else if (b instanceof Set) {
    return compareSetArray(a, [...b.values()]);
  } else if (isObject9(b)) {
    return compareSetArray(a, Object.values(b));
  }
  return false;
}

// node_modules/@polkadot/types-codec/utils/decodeU8a.js
init_shim();
function formatFailure(registry, fn, _result, { message }, u8a9, i, count2, Type2, key) {
  let type = "";
  try {
    type = `: ${new Type2(registry).toRawType()}`;
  } catch {
  }
  return `${fn}: failed at ${u8aToHex10(u8a9.subarray(0, 16))}…${key ? ` on ${key}` : ""} (index ${i + 1}/${count2})${type}:: ${message}`;
}
function decodeU8a(registry, result, u8a9, [Types, keys2]) {
  const count2 = result.length;
  let offset = 0;
  let i = 0;
  try {
    while (i < count2) {
      const value = new Types[i](registry, u8a9.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = value;
      i++;
    }
  } catch (error) {
    throw new Error(formatFailure(registry, "decodeU8a", result, error, u8a9.subarray(offset), i, count2, Types[i], keys2[i]));
  }
  return [result, offset];
}
function decodeU8aStruct(registry, result, u8a9, [Types, keys2]) {
  const count2 = result.length;
  let offset = 0;
  let i = 0;
  try {
    while (i < count2) {
      const value = new Types[i](registry, u8a9.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = [keys2[i], value];
      i++;
    }
  } catch (error) {
    throw new Error(formatFailure(registry, "decodeU8aStruct", result, error, u8a9.subarray(offset), i, count2, Types[i], keys2[i]));
  }
  return [result, offset];
}
function decodeU8aVec(registry, result, u8a9, startAt, Type2) {
  const count2 = result.length;
  let offset = startAt;
  let i = 0;
  try {
    while (i < count2) {
      const value = new Type2(registry, u8a9.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = value;
      i++;
    }
  } catch (error) {
    throw new Error(formatFailure(registry, "decodeU8aVec", result, error, u8a9.subarray(offset), i, count2, Type2));
  }
  return [offset, offset - startAt];
}

// node_modules/@polkadot/types-codec/utils/sanitize.js
init_shim();
var BOUNDED = ["BTreeMap", "BTreeSet", "HashMap", "Vec"];
var ALLOWED_BOXES = BOUNDED.concat(["Compact", "DoNotConstruct", "Int", "Linkage", "Range", "RangeInclusive", "Result", "Opaque", "Option", "UInt", "WrapperKeepOpaque", "WrapperOpaque"]);
var BOX_PRECEDING = ["<", "(", "[", '"', ",", " "];
var mappings = [
  // alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
  alias("<T::InherentOfflineReport as InherentOfflineReport>::Inherent", "InherentOfflineReport", false),
  alias("VecDeque<", "Vec<", false),
  // <T::Balance as HasCompact>
  cleanupCompact(),
  // Change BoundedVec<Type, Size> to Vec<Type>
  removeExtensions("Bounded", true),
  // Change WeakVec<Type> to Vec<Type>
  removeExtensions("Weak", false),
  // Remove all the trait prefixes
  removeTraits(),
  // remove PairOf<T> -> (T, T)
  removePairOf(),
  // remove boxing, `Box<Proposal>` -> `Proposal`
  removeWrap("Box<"),
  // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
  removeGenerics(),
  // alias String -> Text (compat with jsonrpc methods)
  alias("String", "Text"),
  // alias Vec<u8> -> Bytes
  alias("Vec<u8>", "Bytes"),
  alias("&\\[u8\\]", "Bytes"),
  alias("&'static\\[u8\\]", "Bytes"),
  // alias RawAddress -> Address
  alias("RawAddress", "Address"),
  // lookups, mapped to Address/AccountId as appropriate in runtime
  alias("Lookup::Source", "LookupSource"),
  alias("Lookup::Target", "LookupTarget"),
  // HACK duplication between contracts & primitives, however contracts prefixed with exec
  alias("exec::StorageKey", "ContractStorageKey"),
  // flattens tuples with one value, `(AccountId)` -> `AccountId`
  flattenSingleTuple(),
  // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
  removeColons(),
  // remove all trailing spaces - this should always be the last
  trim()
];
function trim() {
  return (value) => value.trim();
}
function findClosing(value, start) {
  let depth = 0;
  for (let i = start, count2 = value.length; i < count2; i++) {
    if (value[i] === ">") {
      if (!depth) {
        return i;
      }
      depth--;
    } else if (value[i] === "<") {
      depth++;
    }
  }
  throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
}
function alias(src, dest, withChecks = true) {
  const from2 = new RegExp(`(^${src}|${BOX_PRECEDING.map((box) => `\\${box}${src}`).join("|")})`, "g");
  const to = (src2) => {
    from2.lastIndex = 0;
    return withChecks && BOX_PRECEDING.includes(src2[0]) ? `${src2[0]}${dest}` : dest;
  };
  return (value) => value.replace(from2, to);
}
function cleanupCompact() {
  return (value) => {
    if (value.includes(" as HasCompact")) {
      for (let i = 0, count2 = value.length; i < count2; i++) {
        if (value[i] === "<") {
          const end = findClosing(value, i + 1) - 14;
          if (value.substring(end, end + 14) === " as HasCompact") {
            value = `Compact<${value.substring(i + 1, end)}>`;
          }
        }
      }
    }
    return value;
  };
}
function flattenSingleTuple() {
  const from1 = /,\)/g;
  const from2 = /\(([^,]+)\)/;
  return (value) => {
    from1.lastIndex = 0;
    return value.replace(from1, ")").replace(from2, "$1");
  };
}
function replaceTagWith(value, matcher, replacer6) {
  let index = -1;
  while (true) {
    index = value.indexOf(matcher, index + 1);
    if (index === -1) {
      return value;
    }
    const start = index + matcher.length;
    const end = findClosing(value, start);
    value = `${value.substring(0, index)}${replacer6(value.substring(start, end))}${value.substring(end + 1)}`;
  }
}
function removeExtensions(type, isSized) {
  return (value) => {
    for (let i = 0, count2 = BOUNDED.length; i < count2; i++) {
      const tag = BOUNDED[i];
      value = replaceTagWith(value, `${type}${tag}<`, (v) => {
        const parts = v.split(",").map((s) => s.trim()).filter((s) => s);
        if (isSized) {
          parts.pop();
        }
        return `${tag}<${parts.join(",")}>`;
      });
    }
    return value;
  };
}
function removeColons() {
  return (value) => {
    let index = 0;
    while (index !== -1) {
      index = value.indexOf("::");
      if (index === 0) {
        value = value.substring(2);
      } else if (index !== -1) {
        let start = index;
        while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
          start--;
        }
        value = `${value.substring(0, start + 1)}${value.substring(index + 2)}`;
      }
    }
    return value;
  };
}
function removeGenerics() {
  return (value) => {
    for (let i = 0, count2 = value.length; i < count2; i++) {
      if (value[i] === "<") {
        const box = ALLOWED_BOXES.find((box2) => {
          const start = i - box2.length;
          return start >= 0 && value.substring(start, i) === box2 && // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
          (start === 0 || BOX_PRECEDING.includes(value[start - 1]));
        });
        if (!box) {
          const end = findClosing(value, i + 1);
          value = `${value.substring(0, i)}${value.substring(end + 1)}`;
        }
      }
    }
    return value;
  };
}
function removePairOf() {
  const replacer6 = (v) => `(${v},${v})`;
  return (value) => replaceTagWith(value, "PairOf<", replacer6);
}
function removeTraits() {
  const from1 = /\s/g;
  const from2 = /(T|Self)::/g;
  const from3 = /<(T|Self)asTrait>::/g;
  const from4 = /<Tas[a-z]+::Trait>::/g;
  const from5 = /<LookupasStaticLookup>/g;
  const from6 = /::Type/g;
  return (value) => {
    from1.lastIndex = 0;
    from2.lastIndex = 0;
    from3.lastIndex = 0;
    from4.lastIndex = 0;
    from5.lastIndex = 0;
    from6.lastIndex = 0;
    return value.replace(from1, "").replace(from2, "").replace(from3, "").replace(from4, "").replace(from5, "Lookup").replace(from6, "");
  };
}
function removeWrap(check) {
  const replacer6 = (v) => v;
  return (value) => replaceTagWith(value, check, replacer6);
}
var sanitizeMap = /* @__PURE__ */ new Map();
function sanitize(value) {
  const startValue = value.toString();
  const memoized = sanitizeMap.get(startValue);
  if (memoized) {
    return memoized;
  }
  let result = startValue;
  for (let i = 0, count2 = mappings.length; i < count2; i++) {
    result = mappings[i](result);
  }
  sanitizeMap.set(startValue, result);
  return result;
}

// node_modules/@polkadot/types-codec/utils/sortValues.js
init_shim();
function isArrayLike2(arg) {
  return arg instanceof Uint8Array || Array.isArray(arg);
}
function isEnum(arg) {
  return isCodec9(arg) && isNumber10(arg.index) && isCodec9(arg.value);
}
function isNumberLike(arg) {
  return isNumber10(arg) || isBn9(arg) || isBigInt9(arg);
}
function sortArray(a, b) {
  let sortRes = 0;
  const minLen = Math.min(a.length, b.length);
  for (let i = 0; i < minLen; ++i) {
    sortRes = sortAsc(a[i], b[i]);
    if (sortRes !== 0) {
      return sortRes;
    }
  }
  return a.length - b.length;
}
function sortAsc(a, b) {
  if (isNumberLike(a) && isNumberLike(b)) {
    return bnToBn9(a).cmp(bnToBn9(b));
  } else if (a instanceof Map && b instanceof Map) {
    return sortAsc(Array.from(a.values()), Array.from(b.values()));
  } else if (isEnum(a) && isEnum(b)) {
    return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
  } else if (isArrayLike2(a) && isArrayLike2(b)) {
    return sortArray(a, b);
  } else if (isCodec9(a) && isCodec9(b)) {
    return sortAsc(a.toU8a(true), b.toU8a(true));
  }
  throw new Error(`Attempting to sort unrecognized values: ${stringify9(a)} (typeof ${typeof a}) <-> ${stringify9(b)} (typeof ${typeof b})`);
}
function sortSet(set) {
  return new Set(Array.from(set).sort(sortAsc));
}
function sortMap(map2) {
  return new Map(Array.from(map2.entries()).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
}

// node_modules/@polkadot/types-codec/utils/toConstructors.js
init_shim();
function typeToConstructor(registry, type) {
  return typeof type === "function" ? type : registry.createClassUnsafe(type);
}
function typesToConstructors(registry, types6) {
  const count2 = types6.length;
  const result = new Array(count2);
  for (let i = 0; i < count2; i++) {
    result[i] = typeToConstructor(registry, types6[i]);
  }
  return result;
}
function mapToTypeMap(registry, input) {
  const entries = Object.entries(input);
  const count2 = entries.length;
  const output5 = [new Array(count2), new Array(count2)];
  for (let i = 0; i < count2; i++) {
    output5[1][i] = entries[i][0];
    output5[0][i] = typeToConstructor(registry, entries[i][1]);
  }
  return output5;
}

// node_modules/@polkadot/types-codec/utils/typesToMap.js
init_shim();
function typesToMap(registry, [Types, keys2]) {
  const result = {};
  for (let i = 0, count2 = keys2.length; i < count2; i++) {
    result[keys2[i]] = registry.getClassName(Types[i]) || new Types[i](registry).toRawType();
  }
  return result;
}

// node_modules/@polkadot/types-codec/base/Compact.js
function decodeCompact(registry, Type2, value) {
  if (isU8a10(value)) {
    const [decodedLength, bn] = (value[0] & 3) < 3 ? compactFromU8aLim9(value) : compactFromU8a9(value);
    return [new Type2(registry, bn), decodedLength];
  } else if (value instanceof Compact) {
    const raw = value.unwrap();
    return raw instanceof Type2 ? [raw, 0] : [new Type2(registry, raw), 0];
  } else if (value instanceof Type2) {
    return [value, 0];
  }
  return [new Type2(registry, value), 0];
}
var Compact = class {
  constructor(registry, Type2, value = 0, { definition, setDefinition = identity3 } = {}) {
    this.registry = registry;
    this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
    const [raw, decodedLength] = decodeCompact(registry, this.__internal__Type, value);
    this.initialU8aLength = decodedLength;
    this.__internal__raw = raw;
  }
  static with(Type2) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends Compact {
      constructor(registry, value) {
        super(registry, Type2, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.__internal__raw.isEmpty;
  }
  /**
   * @description Returns the number of bits in the value
   */
  bitLength() {
    return this.__internal__raw.bitLength();
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.__internal__raw.eq(other instanceof Compact ? other.__internal__raw : other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a BigInt representation of the number
   */
  toBigInt() {
    return this.__internal__raw.toBigInt();
  }
  /**
   * @description Returns the BN representation of the number
   */
  toBn() {
    return this.__internal__raw.toBn();
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */
  toHex(isLe) {
    return this.__internal__raw.toHex(isLe);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    return this.__internal__raw.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.__internal__raw.toJSON();
  }
  /**
   * @description Returns the number representation for the value
   */
  toNumber() {
    return this.__internal__raw.toNumber();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.__internal__raw.toPrimitive();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `Compact<${this.registry.getClassName(this.__internal__Type) || this.__internal__raw.toRawType()}>`;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.__internal__raw.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return compactToU8a9(this.__internal__raw.toBn());
  }
  /**
   * @description Returns the embedded [[UInt]] or [[Moment]] value
   */
  unwrap() {
    return this.__internal__raw;
  }
};

// node_modules/@polkadot/types-codec/base/DoNotConstruct.js
init_shim();
var DoNotConstruct = class {
  constructor(registry, typeName = "DoNotConstruct") {
    this.registry = registry;
    this.__internal__neverError = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
    throw this.__internal__neverError;
  }
  static with(typeName) {
    return class extends DoNotConstruct {
      constructor(registry) {
        super(registry, typeName);
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    throw this.__internal__neverError;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    throw this.__internal__neverError;
  }
  /**
   * @description Checks if the value is an empty value (always true)
   */
  get isEmpty() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  eq() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  inspect() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toHex() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toHuman() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toJSON() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toPrimitive() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toRawType() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toString() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toU8a() {
    throw this.__internal__neverError;
  }
};

// node_modules/@polkadot/types-codec/base/Enum.js
init_shim();

// node_modules/@polkadot/types-codec/base/Null.js
init_shim();
var Null = class {
  constructor(registry) {
    this.encodedLength = 0;
    this.isEmpty = true;
    this.initialU8aLength = 0;
    this.registry = registry;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    throw new Error(".hash is not implemented on Null");
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return other instanceof Null || isNull9(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {};
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return "0x";
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return null;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return null;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Null";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return "";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return new Uint8Array();
  }
};

// node_modules/@polkadot/types-codec/base/Enum.js
function isRustEnum(def) {
  const defValues = Object.values(def);
  if (defValues.some((v) => isNumber10(v))) {
    if (!defValues.every((v) => isNumber10(v) && v >= 0 && v <= 255)) {
      throw new Error("Invalid number-indexed enum definition");
    }
    return false;
  }
  return true;
}
function extractDef(registry, _def) {
  const def = {};
  let isBasic;
  let isIndexed;
  if (Array.isArray(_def)) {
    for (let i = 0, count2 = _def.length; i < count2; i++) {
      def[_def[i]] = { Type: Null, index: i };
    }
    isBasic = true;
    isIndexed = false;
  } else if (isRustEnum(_def)) {
    const [Types, keys2] = mapToTypeMap(registry, _def);
    for (let i = 0, count2 = keys2.length; i < count2; i++) {
      def[keys2[i]] = { Type: Types[i], index: i };
    }
    isBasic = !Object.values(def).some(({ Type: Type2 }) => Type2 !== Null);
    isIndexed = false;
  } else {
    const entries = Object.entries(_def);
    for (let i = 0, count2 = entries.length; i < count2; i++) {
      const [key, index] = entries[i];
      def[key] = { Type: Null, index };
    }
    isBasic = true;
    isIndexed = true;
  }
  return {
    def,
    isBasic,
    isIndexed
  };
}
function getEntryType(def, checkIdx) {
  const values = Object.values(def);
  for (let i = 0, count2 = values.length; i < count2; i++) {
    const { Type: Type2, index } = values[i];
    if (index === checkIdx) {
      return Type2;
    }
  }
  throw new Error(`Unable to create Enum via index ${checkIdx}, in ${Object.keys(def).join(", ")}`);
}
function createFromU8a(registry, def, index, value) {
  const Type2 = getEntryType(def, index);
  return {
    index,
    value: new Type2(registry, value)
  };
}
function createFromValue(registry, def, index = 0, value) {
  const Type2 = getEntryType(def, index);
  return {
    index,
    value: value instanceof Type2 ? value : new Type2(registry, value)
  };
}
function decodeFromJSON(registry, def, key, value) {
  const keys2 = Object.keys(def).map((k) => k.toLowerCase());
  const keyLower = key.toLowerCase();
  const index = keys2.indexOf(keyLower);
  if (index === -1) {
    throw new Error(`Cannot map Enum JSON, unable to find '${key}' in ${keys2.join(", ")}`);
  }
  try {
    return createFromValue(registry, def, Object.values(def)[index].index, value);
  } catch (error) {
    throw new Error(`Enum(${key}):: ${error.message}`);
  }
}
function decodeEnum(registry, def, value, index) {
  if (isNumber10(index)) {
    return createFromValue(registry, def, index, value);
  } else if (isU8a10(value) || isHex10(value)) {
    const u8a9 = u8aToU8a10(value);
    if (u8a9.length) {
      return createFromU8a(registry, def, u8a9[0], u8a9.subarray(1));
    }
  } else if (value instanceof Enum) {
    return createFromValue(registry, def, value.index, value.value);
  } else if (isNumber10(value)) {
    return createFromValue(registry, def, value);
  } else if (isString10(value)) {
    return decodeFromJSON(registry, def, value.toString());
  } else if (isObject9(value)) {
    const key = Object.keys(value)[0];
    return decodeFromJSON(registry, def, key, value[key]);
  }
  return createFromValue(registry, def, Object.values(def)[0].index);
}
var Enum = class {
  constructor(registry, Types, value, index, { definition, setDefinition = identity3 } = {}) {
    const { def, isBasic, isIndexed } = definition || setDefinition(extractDef(registry, Types));
    const decoded = isU8a10(value) && value.length && !isNumber10(index) ? createFromU8a(registry, def, value[0], value.subarray(1)) : decodeEnum(registry, def, value, index);
    this.registry = registry;
    this.__internal__def = def;
    this.__internal__isBasic = isBasic;
    this.__internal__isIndexed = isIndexed;
    this.__internal__indexes = Object.values(def).map(({ index: index2 }) => index2);
    this.__internal__entryIndex = this.__internal__indexes.indexOf(decoded.index);
    this.__internal__raw = decoded.value;
    if (this.__internal__raw.initialU8aLength) {
      this.initialU8aLength = 1 + this.__internal__raw.initialU8aLength;
    }
  }
  static with(Types) {
    var _a;
    let definition;
    const setDefinition = (d) => definition = d;
    return _a = class extends Enum {
      constructor(registry, value, index) {
        super(registry, Types, value, index, { definition, setDefinition });
      }
    }, (() => {
      const keys2 = Array.isArray(Types) ? Types : Object.keys(Types);
      const count2 = keys2.length;
      const asKeys = new Array(count2);
      const isKeys = new Array(count2);
      for (let i = 0; i < count2; i++) {
        const name = stringPascalCase9(keys2[i]);
        asKeys[i] = `as${name}`;
        isKeys[i] = `is${name}`;
      }
      objectProperties9(_a.prototype, isKeys, (_, i, self2) => self2.type === keys2[i]);
      objectProperties9(_a.prototype, asKeys, (k, i, self2) => {
        if (self2.type !== keys2[i]) {
          throw new Error(`Cannot convert '${self2.type}' via ${k}`);
        }
        return self2.value;
      });
    })(), _a;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return 1 + this.__internal__raw.encodedLength;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description The index of the enum value
   */
  get index() {
    return this.__internal__indexes[this.__internal__entryIndex];
  }
  /**
   * @description The value of the enum
   */
  get inner() {
    return this.__internal__raw;
  }
  /**
   * @description true if this is a basic enum (no values)
   */
  get isBasic() {
    return this.__internal__isBasic;
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.__internal__raw.isEmpty;
  }
  /**
   * @description Checks if the Enum points to a [[Null]] type
   */
  get isNone() {
    return this.__internal__raw instanceof Null;
  }
  /**
   * @description The available keys for this enum
   */
  get defIndexes() {
    return this.__internal__indexes;
  }
  /**
   * @description The available keys for this enum
   */
  get defKeys() {
    return Object.keys(this.__internal__def);
  }
  /**
   * @description The name of the type this enum value represents
   */
  get type() {
    return this.defKeys[this.__internal__entryIndex];
  }
  /**
   * @description The value of the enum
   */
  get value() {
    return this.__internal__raw;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (isU8a10(other)) {
      return !this.toU8a().some((entry, index) => entry !== other[index]);
    } else if (isNumber10(other)) {
      return this.toNumber() === other;
    } else if (this.__internal__isBasic && isString10(other)) {
      return this.type === other;
    } else if (isHex10(other)) {
      return this.toHex() === other;
    } else if (other instanceof Enum) {
      return this.index === other.index && this.value.eq(other.value);
    } else if (isObject9(other)) {
      return this.value.eq(other[this.type]);
    }
    return this.value.eq(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    if (this.__internal__isBasic) {
      return { outer: [new Uint8Array([this.index])] };
    }
    const { inner, outer = [] } = this.__internal__raw.inspect();
    return {
      inner,
      outer: [new Uint8Array([this.index]), ...outer]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex10(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    return this.__internal__isBasic || this.isNone ? this.type : { [this.type]: this.__internal__raw.toHuman(isExtended) };
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.__internal__isBasic ? this.type : { [stringCamelCase10(this.type)]: this.__internal__raw.toJSON() };
  }
  /**
   * @description Returns the number representation for the value
   */
  toNumber() {
    return this.index;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.__internal__isBasic ? this.type : { [stringCamelCase10(this.type)]: this.__internal__raw.toPrimitive() };
  }
  /**
   * @description Returns a raw struct representation of the enum types
   */
  _toRawStruct() {
    if (this.__internal__isBasic) {
      return this.__internal__isIndexed ? this.defKeys.reduce((out, key, index) => {
        out[key] = this.__internal__indexes[index];
        return out;
      }, {}) : this.defKeys;
    }
    const entries = Object.entries(this.__internal__def);
    return typesToMap(this.registry, entries.reduce((out, [key, { Type: Type2 }], i) => {
      out[0][i] = Type2;
      out[1][i] = key;
      return out;
    }, [new Array(entries.length), new Array(entries.length)]));
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return stringify9({ _enum: this._toRawStruct() });
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.isNone ? this.type : stringify9(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return isBare ? this.__internal__raw.toU8a(isBare) : u8aConcatStrict10([
      new Uint8Array([this.index]),
      this.__internal__raw.toU8a(isBare)
    ]);
  }
};

// node_modules/@polkadot/types-codec/base/Int.js
init_shim();
var Int = class extends AbstractInt {
  constructor(registry, value = 0, bitLength) {
    super(registry, value, bitLength, true);
  }
  static with(bitLength, typeName) {
    return class extends Int {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }
      toRawType() {
        return typeName || super.toRawType();
      }
    };
  }
};

// node_modules/@polkadot/types-codec/base/Option.js
init_shim();
var None = class extends Null {
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "None";
  }
};
function decodeOption(registry, Type2, value) {
  if (value instanceof Type2) {
    return value;
  } else if (value instanceof Option) {
    if (value.value instanceof Type2) {
      return value.value;
    } else if (value.isNone) {
      return new None(registry);
    }
    return new Type2(registry, value.value);
  } else if (isNull9(value) || isUndefined9(value) || value === "0x" || value instanceof None) {
    return new None(registry);
  } else if (isU8a10(value)) {
    return !value.length || value[0] === 0 ? new None(registry) : new Type2(registry, value.subarray(1));
  }
  return new Type2(registry, value);
}
var Option = class {
  constructor(registry, typeName, value, { definition, setDefinition = identity3 } = {}) {
    const Type2 = definition || setDefinition(typeToConstructor(registry, typeName));
    const decoded = isU8a10(value) && value.length && !isCodec9(value) ? value[0] === 0 ? new None(registry) : new Type2(registry, value.subarray(1)) : decodeOption(registry, Type2, value);
    this.registry = registry;
    this.__internal__Type = Type2;
    this.__internal__raw = decoded;
    if (decoded == null ? void 0 : decoded.initialU8aLength) {
      this.initialU8aLength = 1 + decoded.initialU8aLength;
    }
  }
  static with(Type2) {
    let definition;
    const setDefinition = (d) => {
      definition = d;
      return d;
    };
    return class extends Option {
      constructor(registry, value) {
        super(registry, Type2, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return 1 + this.__internal__raw.encodedLength;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the Option has no value
   */
  get isEmpty() {
    return this.isNone;
  }
  /**
   * @description Checks if the Option has no value
   */
  get isNone() {
    return this.__internal__raw instanceof None;
  }
  /**
   * @description Checks if the Option has a value
   */
  get isSome() {
    return !this.isNone;
  }
  /**
   * @description The actual value for the Option
   */
  get value() {
    return this.__internal__raw;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (other instanceof Option) {
      return this.isSome === other.isSome && this.value.eq(other.value);
    }
    return this.value.eq(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    if (this.isNone) {
      return { outer: [new Uint8Array([0])] };
    }
    const { inner, outer = [] } = this.__internal__raw.inspect();
    return {
      inner,
      outer: [new Uint8Array([1]), ...outer]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return this.isNone ? "0x" : u8aToHex10(this.toU8a().subarray(1));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    return this.__internal__raw.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.isNone ? null : this.__internal__raw.toJSON();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.isNone ? null : this.__internal__raw.toPrimitive();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType(isBare) {
    const wrapped = this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType();
    return isBare ? wrapped : `Option<${wrapped}>`;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.__internal__raw.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    if (isBare) {
      return this.__internal__raw.toU8a(true);
    }
    const u8a9 = new Uint8Array(this.encodedLength);
    if (this.isSome) {
      u8a9.set([1]);
      u8a9.set(this.__internal__raw.toU8a(), 1);
    }
    return u8a9;
  }
  /**
   * @description Returns the value that the Option represents (if available), throws if null
   */
  unwrap() {
    if (this.isNone) {
      throw new Error("Option: unwrapping a None value");
    }
    return this.__internal__raw;
  }
  /**
   * @description Returns the value that the Option represents (if available) or defaultValue if none
   * @param defaultValue The value to return if the option isNone
   */
  unwrapOr(defaultValue) {
    return this.isSome ? this.unwrap() : defaultValue;
  }
  /**
   * @description Returns the value that the Option represents (if available) or defaultValue if none
   * @param defaultValue The value to return if the option isNone
   */
  unwrapOrDefault() {
    return this.isSome ? this.unwrap() : new this.__internal__Type(this.registry);
  }
};

// node_modules/@polkadot/types-codec/base/Result.js
init_shim();
var Result = class extends Enum {
  constructor(registry, Ok, Err, value) {
    super(registry, { Ok, Err }, value);
  }
  static with(Types) {
    return class extends Result {
      constructor(registry, value) {
        super(registry, Types.Ok, Types.Err, value);
      }
    };
  }
  /**
   * @description Returns the wrapper Err value (if isErr)
   */
  get asErr() {
    if (!this.isErr) {
      throw new Error("Cannot extract Err value from Ok result, check isErr first");
    }
    return this.value;
  }
  /**
   * @description Returns the wrapper Ok value (if isOk)
   */
  get asOk() {
    if (!this.isOk) {
      throw new Error("Cannot extract Ok value from Err result, check isOk first");
    }
    return this.value;
  }
  /**
   * @description Checks if the Result has no value
   */
  get isEmpty() {
    return this.isOk && this.value.isEmpty;
  }
  /**
   * @description Checks if the Result wraps an Err value
   */
  get isErr() {
    return !this.isOk;
  }
  /**
   * @description Checks if the Result wraps an Ok value
   */
  get isOk() {
    return this.index === 0;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    const Types = this._toRawStruct();
    return `Result<${Types.Ok},${Types.Err}>`;
  }
};

// node_modules/@polkadot/types-codec/base/Tuple.js
init_shim();
function decodeTuple(registry, result, value, Classes) {
  if (Array.isArray(value)) {
    const Types = Classes[0];
    for (let i = 0, count2 = Types.length; i < count2; i++) {
      try {
        const entry = value == null ? void 0 : value[i];
        result[i] = entry instanceof Types[i] ? entry : new Types[i](registry, entry);
      } catch (error) {
        throw new Error(`Tuple: failed on ${i}:: ${error.message}`);
      }
    }
    return [result, 0];
  } else if (isHex10(value)) {
    return decodeU8a(registry, result, u8aToU8a10(value), Classes);
  } else if (!value || !result.length) {
    const Types = Classes[0];
    for (let i = 0, count2 = Types.length; i < count2; i++) {
      result[i] = new Types[i](registry);
    }
    return [result, 0];
  }
  throw new Error(`Expected array input to Tuple decoding, found ${typeof value}: ${stringify9(value)}`);
}
var Tuple = class extends AbstractArray {
  constructor(registry, Types, value, { definition, setDefinition = identity3 } = {}) {
    const Classes = definition || setDefinition(Array.isArray(Types) ? [typesToConstructors(registry, Types), []] : isFunction11(Types) || isString10(Types) ? [[typeToConstructor(registry, Types)], []] : mapToTypeMap(registry, Types));
    super(registry, Classes[0].length);
    this.initialU8aLength = (isU8a10(value) ? decodeU8a(registry, this, value, Classes) : decodeTuple(registry, this, value, Classes))[1];
    this.__internal__Types = Classes;
  }
  static with(Types) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends Tuple {
      constructor(registry, value) {
        super(registry, Types, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let total = 0;
    for (let i = 0, count2 = this.length; i < count2; i++) {
      total += this[i].encodedLength;
    }
    return total;
  }
  /**
   * @description The types definition of the tuple
   */
  get Types() {
    return this.__internal__Types[1].length ? this.__internal__Types[1] : this.__internal__Types[0].map((T) => new T(this.registry).toRawType());
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      inner: this.inspectInner()
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    const types6 = this.__internal__Types[0].map((T) => this.registry.getClassName(T) || new T(this.registry).toRawType());
    return `(${types6.join(",")})`;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify9(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return u8aConcatStrict10(this.toU8aInner(isBare));
  }
};

// node_modules/@polkadot/types-codec/base/UInt.js
init_shim();
var UInt = class extends AbstractInt {
  static with(bitLength, typeName) {
    return class extends UInt {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }
      toRawType() {
        return typeName || super.toRawType();
      }
    };
  }
};

// node_modules/@polkadot/types-codec/base/Vec.js
init_shim();
var MAX_LENGTH = 64 * 1024;
var l6 = logger6("Vec");
function decodeVecLength(value) {
  if (Array.isArray(value)) {
    return [value, value.length, 0];
  } else if (isU8a10(value) || isHex10(value)) {
    const u8a9 = u8aToU8a10(value);
    const [startAt, length] = compactFromU8aLim9(u8a9);
    if (length > MAX_LENGTH) {
      throw new Error(`Vec length ${length.toString()} exceeds ${MAX_LENGTH}`);
    }
    return [u8a9, length, startAt];
  } else if (!value) {
    return [null, 0, 0];
  }
  throw new Error(`Expected array/hex input to Vec<*> decoding, found ${typeof value}: ${stringify9(value)}`);
}
function decodeVec(registry, result, value, startAt, Type2) {
  if (Array.isArray(value)) {
    const count2 = result.length;
    for (let i = 0; i < count2; i++) {
      const entry = value[i];
      try {
        result[i] = entry instanceof Type2 ? entry : new Type2(registry, entry);
      } catch (error) {
        l6.error(`Unable to decode on index ${i}`, error.message);
        throw error;
      }
    }
    return [0, 0];
  } else if (!value) {
    return [0, 0];
  }
  return decodeU8aVec(registry, result, u8aToU8a10(value), startAt, Type2);
}
var Vec = class extends AbstractArray {
  constructor(registry, Type2, value = [], { definition, setDefinition = identity3 } = {}) {
    const [decodeFrom, length, startAt] = decodeVecLength(value);
    super(registry, length);
    this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
    this.initialU8aLength = (isU8a10(decodeFrom) ? decodeU8aVec(registry, this, decodeFrom, startAt, this.__internal__Type) : decodeVec(registry, this, decodeFrom, startAt, this.__internal__Type))[0];
  }
  static with(Type2) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends Vec {
      constructor(registry, value) {
        super(registry, Type2, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The type for the items
   */
  get Type() {
    return this.__internal__Type.name;
  }
  /**
   * @description Finds the index of the value in the array
   */
  indexOf(other) {
    const check = other instanceof this.__internal__Type ? other : new this.__internal__Type(this.registry, other);
    for (let i = 0, count2 = this.length; i < count2; i++) {
      if (check.eq(this[i])) {
        return i;
      }
    }
    return -1;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `Vec<${this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType()}>`;
  }
};

// node_modules/@polkadot/types-codec/base/VecAny.js
init_shim();

// node_modules/@polkadot/types-codec/base/VecFixed.js
init_shim();
var VecFixed = class extends AbstractArray {
  constructor(registry, Type2, length, value = [], { definition, setDefinition = identity3 } = {}) {
    super(registry, length);
    this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
    this.initialU8aLength = (isU8a10(value) ? decodeU8aVec(registry, this, value, 0, this.__internal__Type) : decodeVec(registry, this, value, 0, this.__internal__Type))[1];
  }
  static with(Type2, length) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends VecFixed {
      constructor(registry, value) {
        super(registry, Type2, length, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The type for the items
   */
  get Type() {
    return new this.__internal__Type(this.registry).toRawType();
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let total = 0;
    for (let i = 0, count2 = this.length; i < count2; i++) {
      total += this[i].encodedLength;
    }
    return total;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      inner: this.inspectInner()
    };
  }
  toU8a() {
    const encoded = this.toU8aInner();
    return encoded.length ? u8aConcatStrict10(encoded) : new Uint8Array([]);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `[${this.Type};${this.length}]`;
  }
};

// node_modules/@polkadot/types-codec/extended/index.js
init_shim();

// node_modules/@polkadot/types-codec/extended/BitVec.js
init_shim();

// node_modules/@polkadot/types-codec/native/Raw.js
init_shim();
var Raw = class extends Uint8Array {
  /**
   * @description This ensures that operators such as clice, filter, map, etc. return
   * new Array instances (without this we need to apply overrides)
   */
  static get [Symbol.species]() {
    return Uint8Array;
  }
  constructor(registry, value, initialU8aLength) {
    super(u8aToU8a10(value));
    this.registry = registry;
    this.initialU8aLength = initialU8aLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.length;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Returns true if the wrapped value contains only ASCII printable characters
   */
  get isAscii() {
    return isAscii9(this);
  }
  /**
   * @description Returns true if the type wraps an empty/default all-0 value
   */
  get isEmpty() {
    return !this.length || isUndefined9(this.find((b) => !!b));
  }
  /**
   * @description Returns true if the wrapped value contains only utf8 characters
   */
  get isUtf8() {
    return isUtf89(this);
  }
  /**
   * @description Returns the number of bits in the value
   */
  bitLength() {
    return this.length * 8;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (other instanceof Uint8Array) {
      return this.length === other.length && !this.some((b, index) => b !== other[index]);
    }
    return this.eq(u8aToU8a10(other));
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex10(this);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toPrimitive();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    if (this.isAscii) {
      const text = this.toUtf8();
      if (isAscii9(text)) {
        return text;
      }
    }
    return this.toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Raw";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.toHex();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return Uint8Array.from(this);
  }
  /**
   * @description Returns the wrapped data as a UTF-8 string
   */
  toUtf8() {
    if (!this.isUtf8) {
      throw new Error("The character sequence is not a valid Utf8 string");
    }
    return u8aToString10(this);
  }
};

// node_modules/@polkadot/types-codec/extended/BitVec.js
function decodeBitVecU8a(value) {
  if (!(value == null ? void 0 : value.length)) {
    return [0, new Uint8Array()];
  }
  const [offset, length] = compactFromU8aLim9(value);
  const total = offset + Math.ceil(length / 8);
  if (total > value.length) {
    throw new Error(`BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
  }
  return [length, value.subarray(offset, total)];
}
function decodeBitVec(value) {
  if (Array.isArray(value) || isString10(value)) {
    const u8a9 = u8aToU8a10(value);
    return [u8a9.length / 8, u8a9];
  }
  return decodeBitVecU8a(value);
}
var BitVec = class extends Raw {
  // In lieu of having the Msb/Lsb identifiers passed through, we default to assuming
  // we are dealing with Lsb, which is the default (as of writing) BitVec format used
  // in the Polkadot code (this only affects the toHuman displays)
  constructor(registry, value, isMsb = false) {
    const [decodedLength, u8a9] = decodeBitVec(value);
    super(registry, u8a9);
    this.__internal__decodedLength = decodedLength;
    this.__internal__isMsb = isMsb;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.length + compactToU8a9(this.__internal__decodedLength).length;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [compactToU8a9(this.__internal__decodedLength), super.toU8a()]
    };
  }
  /**
   * @description Creates a boolean array of the bit values
   */
  toBoolArray() {
    const map2 = [...this.toU8a(true)].map((v) => [
      !!(v & 128),
      !!(v & 64),
      !!(v & 32),
      !!(v & 16),
      !!(v & 8),
      !!(v & 4),
      !!(v & 2),
      !!(v & 1)
    ]);
    const count2 = map2.length;
    const result = new Array(8 * count2);
    for (let i = 0; i < count2; i++) {
      const off = i * 8;
      const v = map2[i];
      for (let j = 0; j < 8; j++) {
        result[off + j] = this.__internal__isMsb ? v[j] : v[7 - j];
      }
    }
    return result;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return `0b${[...this.toU8a(true)].map((d) => `00000000${d.toString(2)}`.slice(-8)).map((s) => this.__internal__isMsb ? s : s.split("").reverse().join("")).join("_")}`;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "BitVec";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const bitVec = super.toU8a(isBare);
    return isBare ? bitVec : u8aConcatStrict10([compactToU8a9(this.__internal__decodedLength), bitVec]);
  }
};

// node_modules/@polkadot/types-codec/extended/BTreeMap.js
init_shim();

// node_modules/@polkadot/types-codec/extended/Map.js
init_shim();

// node_modules/@polkadot/types-codec/native/Struct.js
init_shim();
function noopSetDefinition(d) {
  return d;
}
function decodeStructFromObject(registry, [Types, keys2], value, jsonMap) {
  let jsonObj;
  const typeofArray = Array.isArray(value);
  const typeofMap = value instanceof Map;
  const count2 = keys2.length;
  if (!typeofArray && !typeofMap && !isObject9(value)) {
    throw new Error(`Struct: Cannot decode value ${stringify9(value)} (typeof ${typeof value}), expected an input object, map or array`);
  } else if (typeofArray && value.length !== count2) {
    throw new Error(`Struct: Unable to map ${stringify9(value)} array to object with known keys ${keys2.join(", ")}`);
  }
  const raw = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const key = keys2[i];
    const jsonKey = jsonMap.get(key) || key;
    const Type2 = Types[i];
    let assign;
    try {
      if (typeofArray) {
        assign = value[i];
      } else if (typeofMap) {
        assign = jsonKey && value.get(jsonKey);
      } else {
        assign = jsonKey && value[jsonKey];
        if (isUndefined9(assign)) {
          if (isUndefined9(jsonObj)) {
            const entries = Object.entries(value);
            jsonObj = {};
            for (let e = 0, ecount = entries.length; e < ecount; e++) {
              jsonObj[stringCamelCase10(entries[e][0])] = entries[e][1];
            }
          }
          assign = jsonKey && jsonObj[jsonKey];
        }
      }
      raw[i] = [
        key,
        assign instanceof Type2 ? assign : new Type2(registry, assign)
      ];
    } catch (error) {
      let type = Type2.name;
      try {
        type = new Type2(registry).toRawType();
      } catch {
      }
      throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
    }
  }
  return [raw, 0];
}
var Struct = class extends Map {
  constructor(registry, Types, value, jsonMap = /* @__PURE__ */ new Map(), { definition, setDefinition = noopSetDefinition } = {}) {
    const typeMap = definition || setDefinition(mapToTypeMap(registry, Types));
    const [decoded, decodedLength] = isU8a10(value) || isHex10(value) ? decodeU8aStruct(registry, new Array(typeMap[0].length), u8aToU8a10(value), typeMap) : value instanceof Struct ? [value, 0] : decodeStructFromObject(registry, typeMap, value || {}, jsonMap);
    super(decoded);
    this.initialU8aLength = decodedLength;
    this.registry = registry;
    this.__internal__jsonMap = jsonMap;
    this.__internal__Types = typeMap;
  }
  static with(Types, jsonMap) {
    var _a;
    let definition;
    const setDefinition = (d) => definition = d;
    return _a = class extends Struct {
      constructor(registry, value) {
        super(registry, Types, value, jsonMap, { definition, setDefinition });
      }
    }, (() => {
      const keys2 = Object.keys(Types);
      objectProperties9(_a.prototype, keys2, (k, _, self2) => self2.get(k));
    })(), _a;
  }
  /**
   * @description The available keys for this struct
   */
  get defKeys() {
    return this.__internal__Types[1];
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    for (const v of this.values()) {
      if (!v.isEmpty) {
        return false;
      }
    }
    return true;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let total = 0;
    for (const v of this.values()) {
      total += v.encodedLength;
    }
    return total;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Returns the Type description of the structure
   */
  get Type() {
    const result = {};
    const [Types, keys2] = this.__internal__Types;
    for (let i = 0, count2 = keys2.length; i < count2; i++) {
      result[keys2[i]] = new Types[i](this.registry).toRawType();
    }
    return result;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareMap(this, other);
  }
  /**
   * @description Returns a specific names entry in the structure
   * @param key The name of the entry to retrieve
   */
  get(key) {
    return super.get(key);
  }
  /**
   * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
   */
  getAtIndex(index) {
    return this.toArray()[index];
  }
  /**
   * @description Returns the a types value by name
   */
  getT(key) {
    return super.get(key);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect(isBare) {
    const inner = [];
    for (const [k, v] of this.entries()) {
      inner.push({
        ...v.inspect(!isBare || isBoolean9(isBare) ? isBare : isBare[k]),
        name: stringCamelCase10(k)
      });
    }
    return {
      inner
    };
  }
  /**
   * @description Converts the Object to an standard JavaScript Array
   */
  toArray() {
    return [...this.values()];
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex10(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k] = v.toHuman(isExtended);
    }
    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[this.__internal__jsonMap.get(k) || k] = v.toJSON();
    }
    return json;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k] = v.toPrimitive();
    }
    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return stringify9(typesToMap(this.registry, this.__internal__Types));
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify9(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = [];
    for (const [k, v] of this.entries()) {
      encoded.push(v.toU8a(!isBare || isBoolean9(isBare) ? isBare : isBare[k]));
    }
    return u8aConcatStrict10(encoded);
  }
};

// node_modules/@polkadot/types-codec/extended/Map.js
var l7 = logger6("Map");
function decodeMapFromU8a(registry, KeyClass, ValClass, u8a9) {
  const output5 = /* @__PURE__ */ new Map();
  const [offset, count2] = compactFromU8aLim9(u8a9);
  const types6 = [];
  for (let i = 0; i < count2; i++) {
    types6.push(KeyClass, ValClass);
  }
  const [values, decodedLength] = decodeU8a(registry, new Array(types6.length), u8a9.subarray(offset), [types6, []]);
  for (let i = 0, count3 = values.length; i < count3; i += 2) {
    output5.set(values[i], values[i + 1]);
  }
  return [KeyClass, ValClass, output5, offset + decodedLength];
}
function decodeMapFromMap(registry, KeyClass, ValClass, value) {
  const output5 = /* @__PURE__ */ new Map();
  for (const [key, val] of value.entries()) {
    const isComplex = KeyClass.prototype instanceof AbstractArray || KeyClass.prototype instanceof Struct || KeyClass.prototype instanceof Enum;
    try {
      output5.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex && typeof key === "string" ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));
    } catch (error) {
      l7.error("Failed to decode key or value:", error.message);
      throw error;
    }
  }
  return [KeyClass, ValClass, output5, 0];
}
function decodeMap(registry, keyType, valType, value) {
  const KeyClass = typeToConstructor(registry, keyType);
  const ValClass = typeToConstructor(registry, valType);
  if (!value) {
    return [KeyClass, ValClass, /* @__PURE__ */ new Map(), 0];
  } else if (isU8a10(value) || isHex10(value)) {
    return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a10(value));
  } else if (value instanceof Map) {
    return decodeMapFromMap(registry, KeyClass, ValClass, value);
  } else if (isObject9(value)) {
    return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
  }
  throw new Error("Map: cannot decode type");
}
var CodecMap = class extends Map {
  constructor(registry, keyType, valType, rawValue, type = "HashMap") {
    const [KeyClass, ValClass, decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
    super(type === "BTreeMap" ? sortMap(decoded) : decoded);
    this.registry = registry;
    this.initialU8aLength = decodedLength;
    this.__internal__KeyClass = KeyClass;
    this.__internal__ValClass = ValClass;
    this.__internal__type = type;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let len = compactToU8a9(this.size).length;
    for (const [k, v] of this.entries()) {
      len += k.encodedLength + v.encodedLength;
    }
    return len;
  }
  /**
   * @description Returns a hash of the value
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareMap(this, other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const inner = [];
    for (const [k, v] of this.entries()) {
      inner.push(k.inspect());
      inner.push(v.inspect());
    }
    return {
      inner,
      outer: [compactToU8a9(this.size)]
    };
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */
  toHex() {
    return u8aToHex10(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k instanceof Raw && k.isAscii ? k.toUtf8() : k.toString()] = v.toHuman(isExtended);
    }
    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k.toString()] = v.toJSON();
    }
    return json;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k instanceof Raw && k.isAscii ? k.toUtf8() : k.toString()] = v.toPrimitive();
    }
    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `${this.__internal__type}<${this.registry.getClassName(this.__internal__KeyClass) || new this.__internal__KeyClass(this.registry).toRawType()},${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify9(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = [];
    if (!isBare) {
      encoded.push(compactToU8a9(this.size));
    }
    for (const [k, v] of this.entries()) {
      encoded.push(k.toU8a(isBare), v.toU8a(isBare));
    }
    return u8aConcatStrict10(encoded);
  }
};

// node_modules/@polkadot/types-codec/extended/BTreeMap.js
var BTreeMap = class extends CodecMap {
  static with(keyType, valType) {
    return class extends BTreeMap {
      constructor(registry, value) {
        super(registry, keyType, valType, value, "BTreeMap");
      }
    };
  }
};

// node_modules/@polkadot/types-codec/extended/BTreeSet.js
init_shim();
var l8 = logger6("BTreeSet");
function decodeSetFromU8a(registry, ValClass, u8a9) {
  const output5 = /* @__PURE__ */ new Set();
  const [offset, count2] = compactFromU8aLim9(u8a9);
  const result = new Array(count2);
  const [decodedLength] = decodeU8aVec(registry, result, u8a9, offset, ValClass);
  for (let i = 0; i < count2; i++) {
    output5.add(result[i]);
  }
  return [ValClass, output5, decodedLength];
}
function decodeSetFromSet(registry, ValClass, value) {
  const output5 = /* @__PURE__ */ new Set();
  value.forEach((val) => {
    try {
      output5.add(val instanceof ValClass ? val : new ValClass(registry, val));
    } catch (error) {
      l8.error("Failed to decode key or value:", error.message);
      throw error;
    }
  });
  return [ValClass, output5, 0];
}
function decodeSet(registry, valType, value) {
  const ValClass = typeToConstructor(registry, valType);
  if (!value) {
    return [ValClass, /* @__PURE__ */ new Set(), 0];
  } else if (isU8a10(value) || isHex10(value)) {
    return decodeSetFromU8a(registry, ValClass, u8aToU8a10(value));
  } else if (Array.isArray(value) || value instanceof Set) {
    return decodeSetFromSet(registry, ValClass, value);
  }
  throw new Error("BTreeSet: cannot decode type");
}
var BTreeSet = class extends Set {
  constructor(registry, valType, rawValue) {
    const [ValClass, values, decodedLength] = decodeSet(registry, valType, rawValue);
    super(sortSet(values));
    this.registry = registry;
    this.initialU8aLength = decodedLength;
    this.__internal__ValClass = ValClass;
  }
  static with(valType) {
    return class extends BTreeSet {
      constructor(registry, value) {
        super(registry, valType, value);
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let len = compactToU8a9(this.size).length;
    for (const v of this.values()) {
      len += v.encodedLength;
    }
    return len;
  }
  /**
   * @description Returns a hash of the value
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description The actual set values as a string[]
   */
  get strings() {
    return [...super.values()].map((v) => v.toString());
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareSet(this, other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const inner = [];
    for (const v of this.values()) {
      inner.push(v.inspect());
    }
    return {
      inner,
      outer: [compactToU8a9(this.size)]
    };
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */
  toHex() {
    return u8aToHex10(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    const json = [];
    for (const v of this.values()) {
      json.push(v.toHuman(isExtended));
    }
    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    const json = [];
    for (const v of this.values()) {
      json.push(v.toJSON());
    }
    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `BTreeSet<${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    const json = [];
    for (const v of this.values()) {
      json.push(v.toPrimitive());
    }
    return json;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify9(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = [];
    if (!isBare) {
      encoded.push(compactToU8a9(this.size));
    }
    for (const v of this.values()) {
      encoded.push(v.toU8a(isBare));
    }
    return u8aConcatStrict10(encoded);
  }
};

// node_modules/@polkadot/types-codec/extended/Bytes.js
init_shim();
var MAX_LENGTH2 = 10 * 1024 * 1024;
function decodeBytesU8a(value) {
  if (!value.length) {
    return [new Uint8Array(), 0];
  }
  const [offset, length] = compactFromU8aLim9(value);
  const total = offset + length;
  if (length > MAX_LENGTH2) {
    throw new Error(`Bytes length ${length.toString()} exceeds ${MAX_LENGTH2}`);
  } else if (total > value.length) {
    throw new Error(`Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
  }
  return [value.subarray(offset, total), total];
}
var Bytes = class extends Raw {
  constructor(registry, value) {
    const [u8a9, decodedLength] = isU8a10(value) && !(value instanceof Raw) ? decodeBytesU8a(value) : Array.isArray(value) || isString10(value) ? [u8aToU8a10(value), 0] : [value, 0];
    super(registry, u8a9, decodedLength);
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.length + compactToU8a9(this.length).length;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect(isBare) {
    const clength = compactToU8a9(this.length);
    return {
      outer: isBare ? [super.toU8a()] : this.length ? [clength, super.toU8a()] : [clength]
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Bytes";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return isBare ? super.toU8a(isBare) : compactAddLength10(this);
  }
};

// node_modules/@polkadot/types-codec/extended/HashMap.js
init_shim();
var HashMap = class extends CodecMap {
  static with(keyType, valType) {
    return class extends HashMap {
      constructor(registry, value) {
        super(registry, keyType, valType, value);
      }
    };
  }
};

// node_modules/@polkadot/types-codec/extended/Linkage.js
init_shim();
var EMPTY2 = new Uint8Array();

// node_modules/@polkadot/types-codec/extended/OptionBool.js
init_shim();

// node_modules/@polkadot/types-codec/native/Bool.js
init_shim();
var bool = class extends Boolean {
  constructor(registry, value = false) {
    super(isU8a10(value) ? value[0] === 1 : value instanceof Boolean ? value.valueOf() : !!value);
    this.initialU8aLength = 1;
    this.registry = registry;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return 1 | 0;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value (true when it wraps false/default)
   */
  get isEmpty() {
    return this.isFalse;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */
  get isFalse() {
    return !this.isTrue;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */
  get isTrue() {
    return this.valueOf();
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex10(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.valueOf();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "bool";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.toJSON().toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return new Uint8Array([this.valueOf() ? 1 : 0]);
  }
};

// node_modules/@polkadot/types-codec/extended/OptionBool.js
function decodeU8a2(registry, value) {
  return value[0] === 0 ? null : new bool(registry, value[0] === 1);
}
var OptionBool = class extends Option {
  constructor(registry, value) {
    super(registry, bool, isU8a10(value) || isHex10(value) ? decodeU8a2(registry, u8aToU8a10(value)) : value);
    this.initialU8aLength = 1;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return 1 | 0;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */
  get isFalse() {
    return this.isSome ? !this.value.valueOf() : false;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */
  get isTrue() {
    return this.isSome ? this.value.valueOf() : false;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return { outer: [this.toU8a()] };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType(isBare) {
    return isBare ? "bool" : "Option<bool>";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    if (isBare) {
      return super.toU8a(true);
    }
    return this.isSome ? new Uint8Array([this.isTrue ? 1 : 2]) : new Uint8Array([0]);
  }
};

// node_modules/@polkadot/types-codec/extended/Range.js
init_shim();
var Range = class extends Tuple {
  constructor(registry, Type2, value, { rangeName = "Range" } = {}) {
    super(registry, [Type2, Type2], value);
    this.__internal__rangeName = rangeName;
  }
  static with(Type2) {
    return class extends Range {
      constructor(registry, value) {
        super(registry, Type2, value);
      }
    };
  }
  /**
   * @description Returns the starting range value
   */
  get start() {
    return this[0];
  }
  /**
   * @description Returns the ending range value
   */
  get end() {
    return this[1];
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `${this.__internal__rangeName}<${this.start.toRawType()}>`;
  }
};

// node_modules/@polkadot/types-codec/extended/RangeInclusive.js
init_shim();
var RangeInclusive = class extends Range {
  constructor(registry, Type2, value) {
    super(registry, Type2, value, { rangeName: "RangeInclusive" });
  }
  static with(Type2) {
    return class extends RangeInclusive {
      constructor(registry, value) {
        super(registry, Type2, value);
      }
    };
  }
};

// node_modules/@polkadot/types-codec/extended/Type.js
init_shim();

// node_modules/@polkadot/types-codec/native/Text.js
init_shim();
var MAX_LENGTH3 = 128 * 1024;
function decodeText(value) {
  if (isU8a10(value)) {
    if (!value.length) {
      return ["", 0];
    }
    if (value instanceof Raw) {
      return [u8aToString10(value), 0];
    }
    const [offset, length] = compactFromU8aLim9(value);
    const total = offset + length;
    if (length > MAX_LENGTH3) {
      throw new Error(`Text: length ${length.toString()} exceeds ${MAX_LENGTH3}`);
    } else if (total > value.length) {
      throw new Error(`Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    return [u8aToString10(value.subarray(offset, total)), total];
  } else if (isHex10(value)) {
    return [u8aToString10(hexToU8a10(value)), 0];
  }
  return [value ? value.toString() : "", 0];
}
var Text = class extends String {
  constructor(registry, value) {
    const [str, decodedLength] = decodeText(value);
    super(str);
    this.__internal__override = null;
    this.registry = registry;
    this.initialU8aLength = decodedLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.length === 0;
  }
  /**
   * @description The length of the value
   */
  get length() {
    return super.length;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return isString10(other) ? this.toString() === other.toString() : false;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const value = stringToU8a10(super.toString());
    return {
      outer: value.length ? [compactToU8a9(value.length), value] : [compactToU8a9(value.length)]
    };
  }
  /**
   * @description Set an override value for this
   */
  setOverride(override) {
    this.__internal__override = override;
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex10(this.toU8a(true));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toString();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Text";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.__internal__override || super.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = stringToU8a10(super.toString());
    return isBare ? encoded : compactAddLength10(encoded);
  }
};

// node_modules/@polkadot/types-codec/extended/Type.js
var Type = class extends Text {
  constructor(registry, value = "") {
    super(registry, value);
    this.setOverride(sanitize(this.toString()));
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Type";
  }
};

// node_modules/@polkadot/types-codec/extended/U8aFixed.js
init_shim();
function decodeU8aFixed(value, bitLength) {
  const u8a9 = u8aToU8a10(value);
  const byteLength = bitLength / 8;
  if (!u8a9.length) {
    return [new Uint8Array(byteLength), 0];
  }
  if (isU8a10(value) ? u8a9.length < byteLength : u8a9.length !== byteLength) {
    throw new Error(`Expected input with ${byteLength} bytes (${bitLength} bits), found ${u8a9.length} bytes`);
  }
  return [u8a9.subarray(0, byteLength), byteLength];
}
var U8aFixed = class extends Raw {
  constructor(registry, value = new Uint8Array(), bitLength = 256) {
    const [u8a9, decodedLength] = decodeU8aFixed(value, bitLength);
    super(registry, u8a9, decodedLength);
  }
  static with(bitLength, typeName) {
    return class extends U8aFixed {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }
      toRawType() {
        return typeName || super.toRawType();
      }
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `[u8;${this.length}]`;
  }
};

// node_modules/@polkadot/types-codec/extended/WrapperKeepOpaque.js
init_shim();
function decodeRaw(registry, typeName, value) {
  const Type2 = typeToConstructor(registry, typeName);
  if (isU8a10(value) || isHex10(value)) {
    try {
      const [, u8a9] = isHex10(value) ? [0, u8aToU8a10(value)] : value instanceof Raw ? [0, value.subarray()] : compactStripLength9(value);
      return [Type2, new Type2(registry, u8a9), value];
    } catch {
      return [Type2, null, value];
    }
  }
  const instance = new Type2(registry, value);
  return [Type2, instance, compactAddLength10(instance.toU8a())];
}
var WrapperKeepOpaque = class extends Bytes {
  constructor(registry, typeName, value, { opaqueName = "WrapperKeepOpaque" } = {}) {
    const [Type2, decoded, u8a9] = decodeRaw(registry, typeName, value);
    super(registry, u8a9);
    this.__internal__Type = Type2;
    this.__internal__decoded = decoded;
    this.__internal__opaqueName = opaqueName;
  }
  static with(Type2) {
    return class extends WrapperKeepOpaque {
      constructor(registry, value) {
        super(registry, Type2, value);
      }
    };
  }
  /**
   * @description Checks if the wrapper is decodable
   */
  get isDecoded() {
    return !!this.__internal__decoded;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return this.__internal__decoded ? {
      inner: [this.__internal__decoded.inspect()],
      outer: [compactToU8a9(this.length)]
    } : {
      outer: [compactToU8a9(this.length), this.toU8a(true)]
    };
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    return this.__internal__decoded ? this.__internal__decoded.toHuman(isExtended) : super.toHuman();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.__internal__decoded ? this.__internal__decoded.toPrimitive() : super.toPrimitive();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `${this.__internal__opaqueName}<${this.registry.getClassName(this.__internal__Type) || (this.__internal__decoded ? this.__internal__decoded.toRawType() : new this.__internal__Type(this.registry).toRawType())}>`;
  }
  /**
   * @description Converts the Object to to a string (either decoded or bytes)
   */
  toString() {
    return this.__internal__decoded ? this.__internal__decoded.toString() : super.toString();
  }
  /**
   * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
   */
  unwrap() {
    if (!this.__internal__decoded) {
      throw new Error(`${this.__internal__opaqueName}: unwrapping an undecodable value`);
    }
    return this.__internal__decoded;
  }
};

// node_modules/@polkadot/types-codec/extended/WrapperOpaque.js
init_shim();
var WrapperOpaque = class extends WrapperKeepOpaque {
  constructor(registry, typeName, value) {
    super(registry, typeName, value, { opaqueName: "WrapperOpaque" });
  }
  static with(Type2) {
    return class extends WrapperOpaque {
      constructor(registry, value) {
        super(registry, Type2, value);
      }
    };
  }
  /**
   * @description The inner value for this wrapper, in all cases it _should_ be decodable (unlike KeepOpaque)
   */
  get inner() {
    return this.unwrap();
  }
};

// node_modules/@polkadot/types-codec/native/index.js
init_shim();

// node_modules/@polkadot/types-codec/native/Date.js
init_shim();

// node_modules/@polkadot/types-codec/native/Float.js
init_shim();
var Float = class extends Number {
  constructor(registry, value, { bitLength = 32 } = {}) {
    super(isU8a10(value) || isHex10(value) ? value.length === 0 ? 0 : u8aToFloat9(u8aToU8a10(value), { bitLength }) : value || 0);
    this.__internal__bitLength = bitLength;
    this.encodedLength = bitLength / 8;
    this.initialU8aLength = this.encodedLength;
    this.registry = registry;
  }
  static with(bitLength) {
    return class extends Float {
      constructor(registry, value) {
        super(registry, value, { bitLength });
      }
    };
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Returns true if the type wraps an empty/default all-0 value
   */
  get isEmpty() {
    return this.valueOf() === 0;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.valueOf() === Number(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex10(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toString();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the number representation (Same as valueOf)
   */
  toNumber() {
    return this.valueOf();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toNumber();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `f${this.__internal__bitLength}`;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return floatToU8a9(this, {
      bitLength: this.__internal__bitLength
    });
  }
};

// node_modules/@polkadot/types-codec/native/Json.js
init_shim();
function decodeJson(value) {
  return Object.entries(value || {});
}
var Json = class extends Map {
  constructor(registry, value) {
    const decoded = decodeJson(value);
    super(decoded);
    this.registry = registry;
    objectProperties9(this, decoded.map(([k]) => k), (k) => this.get(k));
  }
  /**
   * @description Always 0, never encodes as a Uint8Array
   */
  get encodedLength() {
    return 0 | 0;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return [...this.keys()].length === 0;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareMap(this, other);
  }
  /**
   * @description Returns a typed value from the internal map
   */
  getT(key) {
    return this.get(key);
  }
  /**
   * @description Unimplemented, will throw
   */
  inspect() {
    throw new Error("Unimplemented");
  }
  /**
   * @description Unimplemented, will throw
   */
  toHex() {
    throw new Error("Unimplemented");
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return [...this.entries()].reduce((json, [key, value]) => {
      json[key] = isFunction11(value.toHuman) ? value.toHuman() : value;
      return json;
    }, {});
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return [...this.entries()].reduce((json, [key, value]) => {
      json[key] = value;
      return json;
    }, {});
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return [...this.entries()].reduce((json, [key, value]) => {
      json[key] = isFunction11(value.toPrimitive) ? value.toPrimitive() : value;
      return json;
    }, {});
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Json";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify9(this.toJSON());
  }
  /**
   * @description Unimplemented, will throw
   */
  toU8a(_isBare) {
    throw new Error("Unimplemented");
  }
};

// node_modules/@polkadot/types-codec/native/Set.js
init_shim();
function encodeSet(setValues, values) {
  const encoded = new import_bn116.default(0);
  for (let i = 0, count2 = values.length; i < count2; i++) {
    encoded.ior(bnToBn9(setValues[values[i]] || 0));
  }
  return encoded;
}
function decodeSetArray(setValues, values) {
  const count2 = values.length;
  const result = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const key = values[i];
    if (isUndefined9(setValues[key])) {
      throw new Error(`Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(", ")}`);
    }
    result[i] = key;
  }
  return result;
}
function decodeSetNumber(setValues, _value) {
  const bn = bnToBn9(_value);
  const keys2 = Object.keys(setValues);
  const result = [];
  for (let i = 0, count2 = keys2.length; i < count2; i++) {
    const key = keys2[i];
    if (bn.and(bnToBn9(setValues[key])).eq(bnToBn9(setValues[key]))) {
      result.push(key);
    }
  }
  const computed = encodeSet(setValues, result);
  if (!bn.eq(computed)) {
    throw new Error(`Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(", ")}`);
  }
  return result;
}
function decodeSet2(setValues, value = 0, bitLength) {
  if (bitLength % 8 !== 0) {
    throw new Error(`Expected valid bitLength, power of 8, found ${bitLength}`);
  }
  const byteLength = bitLength / 8;
  if (isU8a10(value)) {
    return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn9(value.subarray(0, byteLength), { isLe: true }));
  } else if (isString10(value)) {
    return decodeSet2(setValues, u8aToU8a10(value), byteLength);
  } else if (value instanceof Set || Array.isArray(value)) {
    const input = Array.isArray(value) ? value : [...value.values()];
    return decodeSetArray(setValues, input);
  }
  return decodeSetNumber(setValues, value);
}
var CodecSet = class extends Set {
  constructor(registry, setValues, value, bitLength = 8) {
    super(decodeSet2(setValues, value, bitLength));
    this.add = (key) => {
      if (this.__internal__allowed && isUndefined9(this.__internal__allowed[key])) {
        throw new Error(`Set: Invalid key '${key}' on add`);
      }
      super.add(key);
      return this;
    };
    this.registry = registry;
    this.__internal__allowed = setValues;
    this.__internal__byteLength = bitLength / 8;
  }
  static with(values, bitLength) {
    var _a;
    return _a = class extends CodecSet {
      constructor(registry, value) {
        super(registry, values, value, bitLength);
      }
    }, (() => {
      const keys2 = Object.keys(values);
      const count2 = keys2.length;
      const isKeys = new Array(count2);
      for (let i = 0; i < count2; i++) {
        isKeys[i] = `is${stringPascalCase9(keys2[i])}`;
      }
      objectProperties9(_a.prototype, isKeys, (_, i, self2) => self2.strings.includes(keys2[i]));
    })(), _a;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.__internal__byteLength;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description true is the Set contains no values
   */
  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description The actual set values as a string[]
   */
  get strings() {
    return [...super.values()];
  }
  /**
   * @description The encoded value for the set members
   */
  get valueEncoded() {
    return encodeSet(this.__internal__allowed, this.strings);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (Array.isArray(other)) {
      return compareArray(this.strings.sort(), other.sort());
    } else if (other instanceof Set) {
      return this.eq([...other.values()]);
    } else if (isNumber10(other) || isBn9(other)) {
      return this.valueEncoded.eq(bnToBn9(other));
    }
    return false;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex10(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.strings;
  }
  /**
   * @description The encoded value for the set members
   */
  toNumber() {
    return this.valueEncoded.toNumber();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return stringify9({ _set: this.__internal__allowed });
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return `[${this.strings.join(", ")}]`;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return bnToU8a10(this.valueEncoded, {
      bitLength: this.__internal__byteLength * 8,
      isLe: true
    });
  }
};

// node_modules/@polkadot/types-codec/primitive/index.js
init_shim();

// node_modules/@polkadot/types-codec/primitive/F32.js
init_shim();
var f32 = class extends Float.with(32) {
  constructor() {
    super(...arguments);
    this.__FloatType = "f32";
  }
};

// node_modules/@polkadot/types-codec/primitive/F64.js
init_shim();
var f64 = class extends Float.with(64) {
  constructor() {
    super(...arguments);
    this.__FloatType = "f64";
  }
};

// node_modules/@polkadot/types-codec/primitive/I8.js
init_shim();
var i8 = class extends Int.with(8) {
  constructor() {
    super(...arguments);
    this.__IntType = "i8";
  }
};

// node_modules/@polkadot/types-codec/primitive/I16.js
init_shim();
var i16 = class extends Int.with(16) {
  constructor() {
    super(...arguments);
    this.__IntType = "i16";
  }
};

// node_modules/@polkadot/types-codec/primitive/I32.js
init_shim();
var i32 = class extends Int.with(32) {
  constructor() {
    super(...arguments);
    this.__IntType = "i32";
  }
};

// node_modules/@polkadot/types-codec/primitive/I64.js
init_shim();
var i64 = class extends Int.with(64) {
  constructor() {
    super(...arguments);
    this.__IntType = "i64";
  }
};

// node_modules/@polkadot/types-codec/primitive/I128.js
init_shim();
var i128 = class extends Int.with(128) {
  constructor() {
    super(...arguments);
    this.__IntType = "i128";
  }
};

// node_modules/@polkadot/types-codec/primitive/I256.js
init_shim();
var i256 = class extends Int.with(256) {
  constructor() {
    super(...arguments);
    this.__IntType = "i256";
  }
};

// node_modules/@polkadot/types-codec/primitive/ISize.js
init_shim();
var isize = class extends i32 {
  constructor(registry, value) {
    super(registry, value);
    throw new Error("The `isize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally i64) and WASM (always i32) code. Use one of the `i32` or `i64` types explicitly.");
  }
};

// node_modules/@polkadot/types-codec/primitive/U8.js
init_shim();
var u8 = class extends UInt.with(8) {
  constructor() {
    super(...arguments);
    this.__UIntType = "u8";
  }
};

// node_modules/@polkadot/types-codec/primitive/U16.js
init_shim();
var u16 = class extends UInt.with(16) {
  constructor() {
    super(...arguments);
    this.__UIntType = "u16";
  }
};

// node_modules/@polkadot/types-codec/primitive/U32.js
init_shim();
var u322 = class extends UInt.with(32) {
  constructor() {
    super(...arguments);
    this.__UIntType = "u32";
  }
};

// node_modules/@polkadot/types-codec/primitive/U64.js
init_shim();
var u642 = class extends UInt.with(64) {
  constructor() {
    super(...arguments);
    this.__UIntType = "u64";
  }
};

// node_modules/@polkadot/types-codec/primitive/U128.js
init_shim();
var u128 = class extends UInt.with(128) {
  constructor() {
    super(...arguments);
    this.__UIntType = "u128";
  }
};

// node_modules/@polkadot/types-codec/primitive/U256.js
init_shim();
var u256 = class extends UInt.with(256) {
  constructor() {
    super(...arguments);
    this.__UIntType = "u256";
  }
};

// node_modules/@polkadot/types-codec/primitive/USize.js
init_shim();
var usize = class extends u322 {
  constructor(registry, value) {
    super(registry, value);
    throw new Error("The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.");
  }
};

// node_modules/@polkadot/types-create/util/getTypeDef.js
init_shim();

// node_modules/@polkadot/types-create/util/typeSplit.js
init_shim();
function typeSplit(type) {
  const result = [];
  let c = 0;
  let f = 0;
  let s = 0;
  let t = 0;
  let start = 0;
  for (let i = 0, count2 = type.length; i < count2; i++) {
    switch (type[i]) {
      case ",": {
        if (!(c || f || s || t)) {
          result.push(type.substring(start, i).trim());
          start = i + 1;
        }
        break;
      }
      case "<":
        c++;
        break;
      case ">":
        c--;
        break;
      case "[":
        f++;
        break;
      case "]":
        f--;
        break;
      case "{":
        s++;
        break;
      case "}":
        s--;
        break;
      case "(":
        t++;
        break;
      case ")":
        t--;
        break;
    }
  }
  if (c || f || s || t) {
    throw new Error(`Invalid definition (missing terminators) found in ${type}`);
  }
  result.push(type.substring(start, type.length).trim());
  return result;
}

// node_modules/@polkadot/types-create/util/getTypeDef.js
var KNOWN_INTERNALS = ["_alias", "_fallback"];
function getTypeString(typeOrObj) {
  return isString9(typeOrObj) ? typeOrObj.toString() : stringify8(typeOrObj);
}
function isRustEnum2(details) {
  const values = Object.values(details);
  if (values.some((v) => isNumber9(v))) {
    if (!values.every((v) => isNumber9(v) && v >= 0 && v <= 255)) {
      throw new Error("Invalid number-indexed enum definition");
    }
    return false;
  }
  return true;
}
function _decodeEnum(value, details, count2, fallbackType) {
  value.info = TypeDefInfo.Enum;
  value.fallbackType = fallbackType;
  if (Array.isArray(details)) {
    value.sub = details.map((name, index) => ({
      index,
      info: TypeDefInfo.Plain,
      name,
      type: "Null"
    }));
  } else if (isRustEnum2(details)) {
    value.sub = Object.entries(details).map(([name, typeOrObj], index) => objectSpread8({}, getTypeDef(getTypeString(typeOrObj || "Null"), { name }, count2), { index }));
  } else {
    value.sub = Object.entries(details).map(([name, index]) => ({
      index,
      info: TypeDefInfo.Plain,
      name,
      type: "Null"
    }));
  }
  return value;
}
function _decodeSet(value, details, fallbackType) {
  value.info = TypeDefInfo.Set;
  value.fallbackType = fallbackType;
  value.length = details._bitLength;
  value.sub = Object.entries(details).filter(([name]) => !name.startsWith("_")).map(([name, index]) => ({
    index,
    info: TypeDefInfo.Plain,
    name,
    type: "Null"
  }));
  return value;
}
function _decodeStruct(value, type, _, count2) {
  const parsed = JSON.parse(type);
  const keys2 = Object.keys(parsed);
  if (parsed._enum) {
    return _decodeEnum(value, parsed._enum, count2, parsed._fallback);
  } else if (parsed._set) {
    return _decodeSet(value, parsed._set, parsed._fallback);
  }
  value.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : void 0;
  value.fallbackType = parsed._fallback;
  value.sub = keys2.filter((name) => !KNOWN_INTERNALS.includes(name)).map((name) => getTypeDef(getTypeString(parsed[name]), { name }, count2));
  return value;
}
function _decodeFixedVec(value, type, _, count2) {
  const max2 = type.length - 1;
  let index = -1;
  let inner = 0;
  for (let i = 1; i < max2 && index === -1; i++) {
    switch (type[i]) {
      case ";": {
        if (inner === 0) {
          index = i;
        }
        break;
      }
      case "[":
      case "(":
      case "<":
        inner++;
        break;
      case "]":
      case ")":
      case ">":
        inner--;
        break;
    }
  }
  if (index === -1) {
    throw new Error(`${type}: Unable to extract location of ';'`);
  }
  const vecType = type.substring(1, index);
  const [strLength, displayName] = type.substring(index + 1, max2).split(";");
  const length = parseInt(strLength.trim(), 10);
  if (length > 2048) {
    throw new Error(`${type}: Only support for [Type; <length>], where length <= 2048`);
  }
  value.displayName = displayName;
  value.length = length;
  value.sub = getTypeDef(vecType, {}, count2);
  return value;
}
function _decodeTuple(value, _, subType, count2) {
  value.sub = subType.length === 0 ? [] : typeSplit(subType).map((inner) => getTypeDef(inner, {}, count2));
  return value;
}
function _decodeAnyInt(value, type, _, clazz) {
  const [strLength, displayName] = type.substring(clazz.length + 1, type.length - 1).split(",");
  const length = parseInt(strLength.trim(), 10);
  if (length > 8192 || length % 8) {
    throw new Error(`${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
  }
  value.displayName = displayName;
  value.length = length;
  return value;
}
function _decodeInt(value, type, subType) {
  return _decodeAnyInt(value, type, subType, "Int");
}
function _decodeUInt(value, type, subType) {
  return _decodeAnyInt(value, type, subType, "UInt");
}
function _decodeDoNotConstruct(value, type, _) {
  const NAME_LENGTH = "DoNotConstruct".length;
  value.displayName = type.substring(NAME_LENGTH + 1, type.length - 1);
  return value;
}
function hasWrapper(type, [start, end]) {
  return type.startsWith(start) && type.slice(-1 * end.length) === end;
}
var nestedExtraction = [
  ["[", "]", TypeDefInfo.VecFixed, _decodeFixedVec],
  ["{", "}", TypeDefInfo.Struct, _decodeStruct],
  ["(", ")", TypeDefInfo.Tuple, _decodeTuple],
  // the inner for these are the same as tuple, multiple values
  ["BTreeMap<", ">", TypeDefInfo.BTreeMap, _decodeTuple],
  ["HashMap<", ">", TypeDefInfo.HashMap, _decodeTuple],
  ["Int<", ">", TypeDefInfo.Int, _decodeInt],
  ["Result<", ">", TypeDefInfo.Result, _decodeTuple],
  ["UInt<", ">", TypeDefInfo.UInt, _decodeUInt],
  ["DoNotConstruct<", ">", TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]
];
var wrappedExtraction = [
  ["BTreeSet<", ">", TypeDefInfo.BTreeSet],
  ["Compact<", ">", TypeDefInfo.Compact],
  ["Linkage<", ">", TypeDefInfo.Linkage],
  ["Opaque<", ">", TypeDefInfo.WrapperOpaque],
  ["Option<", ">", TypeDefInfo.Option],
  ["Range<", ">", TypeDefInfo.Range],
  ["RangeInclusive<", ">", TypeDefInfo.RangeInclusive],
  ["Vec<", ">", TypeDefInfo.Vec],
  ["WrapperKeepOpaque<", ">", TypeDefInfo.WrapperKeepOpaque],
  ["WrapperOpaque<", ">", TypeDefInfo.WrapperOpaque]
];
function extractSubType(type, [start, end]) {
  return type.substring(start.length, type.length - end.length);
}
function getTypeDef(_type, { displayName, name } = {}, count2 = 0) {
  const type = sanitize(_type);
  const value = { displayName, info: TypeDefInfo.Plain, name, type };
  if (++count2 > 64) {
    throw new Error("getTypeDef: Maximum nested limit reached");
  }
  const nested = nestedExtraction.find((nested2) => hasWrapper(type, nested2));
  if (nested) {
    value.info = nested[2];
    return nested[3](value, type, extractSubType(type, nested), count2);
  }
  const wrapped = wrappedExtraction.find((wrapped2) => hasWrapper(type, wrapped2));
  if (wrapped) {
    value.info = wrapped[2];
    value.sub = getTypeDef(extractSubType(type, wrapped), {}, count2);
  }
  return value;
}

// node_modules/@polkadot/types-create/create/class.js
function getTypeDefType({ lookupName, type }) {
  return lookupName || type;
}
function getSubDefArray(value) {
  if (!Array.isArray(value.sub)) {
    throw new Error(`Expected subtype as TypeDef[] in ${stringify8(value)}`);
  }
  return value.sub;
}
function getSubDef(value) {
  if (!value.sub || Array.isArray(value.sub)) {
    throw new Error(`Expected subtype as TypeDef in ${stringify8(value)}`);
  }
  return value.sub;
}
function getSubType(value) {
  return getTypeDefType(getSubDef(value));
}
function getTypeClassMap(value) {
  const subs = getSubDefArray(value);
  const map2 = {};
  for (let i = 0, count2 = subs.length; i < count2; i++) {
    const sub = subs[i];
    if (!sub.name) {
      throw new Error(`No name found in definition ${stringify8(sub)}`);
    }
    map2[sub.name] = getTypeDefType(sub);
  }
  return map2;
}
function getTypeClassArray(value) {
  return getSubDefArray(value).map(getTypeDefType);
}
function createInt(Clazz, { displayName, length }) {
  if (!isNumber9(length)) {
    throw new Error(`Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
  }
  return Clazz.with(length, displayName);
}
function createHashMap(Clazz, value) {
  const [keyType, valueType] = getTypeClassArray(value);
  return Clazz.with(keyType, valueType);
}
function createWithSub(Clazz, value) {
  return Clazz.with(getSubType(value));
}
var infoMapping = {
  [TypeDefInfo.BTreeMap]: (_registry, value) => createHashMap(BTreeMap, value),
  [TypeDefInfo.BTreeSet]: (_registry, value) => createWithSub(BTreeSet, value),
  [TypeDefInfo.Compact]: (_registry, value) => createWithSub(Compact, value),
  [TypeDefInfo.DoNotConstruct]: (_registry, value) => DoNotConstruct.with(value.displayName || value.type),
  [TypeDefInfo.Enum]: (_registry, value) => {
    const subs = getSubDefArray(value);
    return Enum.with(subs.every(({ type }) => type === "Null") ? subs.reduce((out, { index, name }, count2) => {
      if (!name) {
        throw new Error("No name found in sub definition");
      }
      out[name] = index || count2;
      return out;
    }, {}) : getTypeClassMap(value));
  },
  [TypeDefInfo.HashMap]: (_registry, value) => createHashMap(HashMap, value),
  [TypeDefInfo.Int]: (_registry, value) => createInt(Int, value),
  // We have circular deps between Linkage & Struct
  [TypeDefInfo.Linkage]: (_registry, value) => {
    const type = `Option<${getSubType(value)}>`;
    const Clazz = Struct.with({ previous: type, next: type });
    Clazz.prototype.toRawType = function() {
      return `Linkage<${this.next.toRawType(true)}>`;
    };
    return Clazz;
  },
  [TypeDefInfo.Null]: (_registry, _value) => Null,
  [TypeDefInfo.Option]: (_registry, value) => {
    if (!value.sub || Array.isArray(value.sub)) {
      throw new Error("Expected type information for Option");
    }
    return createWithSub(Option, value);
  },
  [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
  [TypeDefInfo.Range]: (_registry, value) => createWithSub(Range, value),
  [TypeDefInfo.RangeInclusive]: (_registry, value) => createWithSub(RangeInclusive, value),
  [TypeDefInfo.Result]: (_registry, value) => {
    const [Ok, Err] = getTypeClassArray(value);
    return Result.with({ Err, Ok });
  },
  [TypeDefInfo.Set]: (_registry, value) => CodecSet.with(getSubDefArray(value).reduce((result, { index, name }) => {
    if (!name || !isNumber9(index)) {
      throw new Error("No name found in sub definition");
    }
    result[name] = index;
    return result;
  }, {}), value.length),
  [TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
  [TypeDefInfo.Struct]: (_registry, value) => Struct.with(getTypeClassMap(value), value.alias),
  [TypeDefInfo.Tuple]: (_registry, value) => Tuple.with(getTypeClassArray(value)),
  [TypeDefInfo.UInt]: (_registry, value) => createInt(UInt, value),
  [TypeDefInfo.Vec]: (_registry, { sub }) => {
    if (!sub || Array.isArray(sub)) {
      throw new Error("Expected type information for vector");
    }
    return sub.type === "u8" ? Bytes : Vec.with(getTypeDefType(sub));
  },
  [TypeDefInfo.VecFixed]: (_registry, { displayName, length, sub }) => {
    if (!isNumber9(length) || !sub || Array.isArray(sub)) {
      throw new Error("Expected length & type information for fixed vector");
    }
    return sub.type === "u8" ? U8aFixed.with(length * 8, displayName) : VecFixed.with(getTypeDefType(sub), length);
  },
  [TypeDefInfo.WrapperKeepOpaque]: (_registry, value) => createWithSub(WrapperKeepOpaque, value),
  [TypeDefInfo.WrapperOpaque]: (_registry, value) => createWithSub(WrapperOpaque, value)
};
function constructTypeClass(registry, typeDef) {
  try {
    const Type2 = infoMapping[typeDef.info](registry, typeDef);
    if (!Type2) {
      throw new Error("No class created");
    }
    if (!Type2.__fallbackType && typeDef.fallbackType) {
      Type2.__fallbackType = typeDef.fallbackType;
    }
    return Type2;
  } catch (error) {
    throw new Error(`Unable to construct class from ${stringify8(typeDef)}: ${error.message}`);
  }
}
function getTypeClass(registry, typeDef) {
  return registry.getUnsafe(typeDef.type, false, typeDef);
}
function createClassUnsafe(registry, type) {
  return (
    // just retrieve via name, no creation via typeDef
    registry.getUnsafe(type) || // we don't have an existing type, create the class via typeDef
    getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type))
  );
}

// node_modules/@polkadot/types-create/create/type.js
init_shim();
function checkInstance(created, matcher) {
  const u8a9 = created.toU8a();
  const rawType = created.toRawType();
  const isOk = (
    // full match, all ok
    u8aEq9(u8a9, matcher) || // on a length-prefixed type, just check the actual length
    ["Bytes", "Text", "Type"].includes(rawType) && matcher.length === created.length || // when the created is empty and matcher is also empty, let it slide...
    created.isEmpty && matcher.every((v) => !v)
  );
  if (!isOk) {
    throw new Error(`${rawType}:: Decoded input doesn't match input, received ${u8aToHex9(matcher, 512)} (${matcher.length} bytes), created ${u8aToHex9(u8a9, 512)} (${u8a9.length} bytes)`);
  }
}
function checkPedantic(created, [value]) {
  if (isU8a9(value)) {
    checkInstance(created, value);
  } else if (isHex9(value)) {
    checkInstance(created, u8aToU8a9(value));
  }
}
function initType(registry, Type2, params = [], { blockHash, isFallback, isOptional, isPedantic } = {}) {
  const created = new (isOptional ? Option.with(Type2) : Type2)(registry, ...params);
  isPedantic && checkPedantic(created, params);
  if (blockHash) {
    created.createdAtHash = createTypeUnsafe(registry, "BlockHash", [blockHash]);
  }
  if (isFallback) {
    created.isStorageFallback = true;
  }
  return created;
}
function createTypeUnsafe(registry, type, params = [], options = {}) {
  let Clazz = null;
  let firstError = null;
  try {
    Clazz = createClassUnsafe(registry, type);
    return initType(registry, Clazz, params, options);
  } catch (error) {
    firstError = new Error(`createType(${type}):: ${error.message}`);
  }
  if (Clazz == null ? void 0 : Clazz.__fallbackType) {
    try {
      Clazz = createClassUnsafe(registry, Clazz.__fallbackType);
      return initType(registry, Clazz, params, options);
    } catch {
    }
  }
  throw firstError;
}

// node_modules/@polkadot/types-create/util/index.js
init_shim();

// node_modules/@polkadot/types-create/util/encodeTypes.js
init_shim();
var stringIdentity = (value) => value.toString();
var INFO_WRAP = ["BTreeMap", "BTreeSet", "Compact", "HashMap", "Option", "Result", "Vec"];
function paramsNotation(outer, inner, transform = stringIdentity) {
  return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(", ")}>` : ""}`;
}
function encodeWithParams(registry, typeDef, outer) {
  const { info: info6, sub } = typeDef;
  switch (info6) {
    case TypeDefInfo.BTreeMap:
    case TypeDefInfo.BTreeSet:
    case TypeDefInfo.Compact:
    case TypeDefInfo.HashMap:
    case TypeDefInfo.Linkage:
    case TypeDefInfo.Option:
    case TypeDefInfo.Range:
    case TypeDefInfo.RangeInclusive:
    case TypeDefInfo.Result:
    case TypeDefInfo.Vec:
    case TypeDefInfo.WrapperKeepOpaque:
    case TypeDefInfo.WrapperOpaque:
      return paramsNotation(outer, sub, (p) => encodeTypeDef(registry, p));
  }
  throw new Error(`Unable to encode ${stringify8(typeDef)} with params`);
}
function encodeSubTypes(registry, sub, asEnum, extra) {
  const names = sub.map(({ name }) => name);
  if (!names.every((n) => !!n)) {
    throw new Error(`Subtypes does not have consistent names, ${names.join(", ")}`);
  }
  const inner = objectSpread8({}, extra);
  for (let i = 0, count2 = sub.length; i < count2; i++) {
    const def = sub[i];
    if (!def.name) {
      throw new Error(`No name found in ${stringify8(def)}`);
    }
    inner[def.name] = encodeTypeDef(registry, def);
  }
  return stringify8(asEnum ? { _enum: inner } : inner);
}
var encoders = {
  [TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, "BTreeMap"),
  [TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, "BTreeSet"),
  [TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Compact"),
  [TypeDefInfo.DoNotConstruct]: (registry, { displayName, lookupIndex, lookupName }) => `DoNotConstruct<${lookupName || displayName || (isUndefined8(lookupIndex) ? "Unknown" : registry.createLookupType(lookupIndex))}>`,
  [TypeDefInfo.Enum]: (registry, { sub }) => {
    if (!Array.isArray(sub)) {
      throw new Error("Unable to encode Enum type");
    }
    return sub.every(({ type }) => type === "Null") ? stringify8({ _enum: sub.map(({ name }, index) => `${name || `Empty${index}`}`) }) : encodeSubTypes(registry, sub, true);
  },
  [TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, "HashMap"),
  [TypeDefInfo.Int]: (_registry, { length = 32 }) => `Int<${length}>`,
  [TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Linkage"),
  [TypeDefInfo.Null]: (_registry, _typeDef) => "Null",
  [TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Option"),
  [TypeDefInfo.Plain]: (_registry, { displayName, type }) => displayName || type,
  [TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Range"),
  [TypeDefInfo.RangeInclusive]: (registry, typeDef) => encodeWithParams(registry, typeDef, "RangeInclusive"),
  [TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Result"),
  [TypeDefInfo.Set]: (_registry, { length = 8, sub }) => {
    if (!Array.isArray(sub)) {
      throw new Error("Unable to encode Set type");
    }
    return stringify8({
      _set: sub.reduce((all3, { index, name }, count2) => objectSpread8(all3, { [`${name || `Unknown${index || count2}`}`]: index || count2 }), { _bitLength: length || 8 })
    });
  },
  [TypeDefInfo.Si]: (_registry, { lookupName, type }) => lookupName || type,
  [TypeDefInfo.Struct]: (registry, { alias: alias2, sub }) => {
    if (!Array.isArray(sub)) {
      throw new Error("Unable to encode Struct type");
    }
    return encodeSubTypes(registry, sub, false, alias2 ? {
      _alias: [...alias2.entries()].reduce((all3, [k, v]) => objectSpread8(all3, { [k]: v }), {})
    } : {});
  },
  [TypeDefInfo.Tuple]: (registry, { sub }) => {
    if (!Array.isArray(sub)) {
      throw new Error("Unable to encode Tuple type");
    }
    return `(${sub.map((type) => encodeTypeDef(registry, type)).join(",")})`;
  },
  [TypeDefInfo.UInt]: (_registry, { length = 32 }) => `UInt<${length}>`,
  [TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Vec"),
  [TypeDefInfo.VecFixed]: (_registry, { length, sub }) => {
    if (!isNumber9(length) || !sub || Array.isArray(sub)) {
      throw new Error("Unable to encode VecFixed type");
    }
    return `[${sub.type};${length}]`;
  },
  [TypeDefInfo.WrapperKeepOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, "WrapperKeepOpaque"),
  [TypeDefInfo.WrapperOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, "WrapperOpaque")
};
function encodeType(registry, typeDef, withLookup = true) {
  return withLookup && typeDef.lookupName ? typeDef.lookupName : encoders[typeDef.info](registry, typeDef);
}
function encodeTypeDef(registry, typeDef) {
  return typeDef.displayName && !INFO_WRAP.some((i) => typeDef.displayName === i) ? typeDef.displayName : encodeType(registry, typeDef);
}
function withTypeString(registry, typeDef) {
  return objectSpread8({}, typeDef, {
    type: encodeType(registry, typeDef, false)
  });
}

// node_modules/@polkadot/types-create/util/xcm.js
init_shim();
var XCM_MAPPINGS = ["AssetInstance", "Fungibility", "Junction", "Junctions", "MultiAsset", "MultiAssetFilter", "MultiLocation", "Response", "WildFungibility", "WildMultiAsset", "Xcm", "XcmError", "XcmOrder"];
function mapXcmTypes(version) {
  return XCM_MAPPINGS.reduce((all3, key) => objectSpread8(all3, { [key]: `${key}${version}` }), {});
}

// node_modules/@polkadot/types/interfaces/xcm/v0.js
init_shim();
var v02 = {
  FungibilityV0: "FungibilityV1",
  WildFungibilityV0: "WildFungibilityV1",
  AssetInstanceV0: {
    _enum: {
      Undefined: "Null",
      Index8: "u8",
      Index16: "Compact<u16>",
      Index32: "Compact<u32>",
      Index64: "Compact<u64>",
      Index128: "Compact<u128>",
      Array4: "[u8; 4]",
      Array8: "[u8; 8]",
      Array16: "[u8; 16]",
      Array32: "[u8; 32]",
      Blob: "Vec<u8>"
    }
  },
  JunctionV0: {
    _enum: {
      Parent: "Null",
      Parachain: "Compact<u32>",
      AccountId32: {
        network: "NetworkId",
        id: "AccountId"
      },
      AccountIndex64: {
        network: "NetworkId",
        index: "Compact<u64>"
      },
      AccountKey20: {
        network: "NetworkId",
        key: "[u8; 20]"
      },
      PalletInstance: "u8",
      GeneralIndex: "Compact<u128>",
      GeneralKey: "Vec<u8>",
      OnlyChild: "Null",
      Plurality: {
        id: "BodyId",
        part: "BodyPart"
      }
    }
  },
  MultiAssetV0: {
    _enum: {
      None: "Null",
      All: "Null",
      AllFungible: "Null",
      AllNonFungible: "Null",
      AllAbstractFungible: "Vec<u8>",
      AllAbstractNonFungible: "Vec<u8>",
      AllConcreteFungible: "MultiLocationV0",
      AllConcreteNonFungible: "MultiLocationV0",
      AbstractFungible: {
        id: "Vec<u8>",
        instance: "Compact<u128>"
      },
      AbstractNonFungible: {
        class: "Vec<u8>",
        instance: "AssetInstanceV0"
      },
      ConcreteFungible: {
        id: "MultiLocationV0",
        amount: "Compact<u128>"
      },
      ConcreteNonFungible: {
        class: "MultiLocationV0",
        instance: "AssetInstanceV0"
      }
    }
  },
  MultiLocationV0: {
    _enum: {
      Here: "Null",
      X1: "JunctionV0",
      X2: "(JunctionV0, JunctionV0)",
      X3: "(JunctionV0, JunctionV0, JunctionV0)",
      X4: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
      X5: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
      X6: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
      X7: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
      X8: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)"
    }
  },
  OriginKindV0: {
    _enum: ["Native", "SovereignAccount", "Superuser", "Xcm"]
  },
  ResponseV0: {
    _enum: {
      Assets: "Vec<MultiAssetV0>"
    }
  },
  XcmV0: {
    _enum: {
      WithdrawAsset: {
        assets: "Vec<MultiAssetV0>",
        effects: "Vec<XcmOrderV0>"
      },
      ReserveAssetDeposit: {
        assets: "Vec<MultiAssetV0>",
        effects: "Vec<XcmOrderV0>"
      },
      ReceiveTeleportedAsset: {
        assets: "Vec<MultiAssetV0>",
        effects: "Vec<XcmOrderV0>"
      },
      QueryResponse: {
        queryId: "Compact<u64>",
        response: "ResponseV0"
      },
      TransferAsset: {
        assets: "Vec<MultiAssetV0>",
        dest: "MultiLocationV0"
      },
      TransferReserveAsset: {
        assets: "Vec<MultiAssetV0>",
        dest: "MultiLocationV0",
        effects: "Vec<XcmOrderV0>"
      },
      Transact: {
        originType: "XcmOriginKind",
        requireWeightAtMost: "u64",
        call: "DoubleEncodedCall"
      },
      HrmpNewChannelOpenRequest: {
        sender: "Compact<u32>",
        maxMessageSize: "Compact<u32>",
        maxCapacity: "Compact<u32>"
      },
      HrmpChannelAccepted: {
        recipient: "Compact<u32>"
      },
      HrmpChannelClosing: {
        initiator: "Compact<u32>",
        sender: "Compact<u32>",
        recipient: "Compact<u32>"
      },
      RelayedFrom: {
        who: "MultiLocationV0",
        message: "XcmV0"
      }
    }
  },
  XcmErrorV0: {
    _enum: {
      Undefined: "Null",
      Overflow: "Null",
      Unimplemented: "Null",
      UnhandledXcmVersion: "Null",
      UnhandledXcmMessage: "Null",
      UnhandledEffect: "Null",
      EscalationOfPrivilege: "Null",
      UntrustedReserveLocation: "Null",
      UntrustedTeleportLocation: "Null",
      DestinationBufferOverflow: "Null",
      SendFailed: "Null",
      CannotReachDestination: "(MultiLocation, Xcm)",
      MultiLocationFull: "Null",
      FailedToDecode: "Null",
      BadOrigin: "Null",
      ExceedsMaxMessageSize: "Null",
      FailedToTransactAsset: "Null",
      WeightLimitReached: "Weight",
      Wildcard: "Null",
      TooMuchWeightRequired: "Null",
      NotHoldingFees: "Null",
      WeightNotComputable: "Null",
      Barrier: "Null",
      NotWithdrawable: "Null",
      LocationCannotHold: "Null",
      TooExpensive: "Null",
      AssetNotFound: "Null",
      RecursionLimitReached: "Null"
    }
  },
  XcmOrderV0: {
    _enum: {
      Null: "Null",
      DepositAsset: {
        assets: "Vec<MultiAssetV0>",
        dest: "MultiLocationV0"
      },
      DepositReserveAsset: {
        assets: "Vec<MultiAssetV0>",
        dest: "MultiLocationV0",
        effects: "Vec<XcmOrderV0>"
      },
      ExchangeAsset: {
        give: "Vec<MultiAssetV0>",
        receive: "Vec<MultiAssetV0>"
      },
      InitiateReserveWithdraw: {
        assets: "Vec<MultiAssetV0>",
        reserve: "MultiLocationV0",
        effects: "Vec<XcmOrderV0>"
      },
      InitiateTeleport: {
        assets: "Vec<MultiAssetV0>",
        dest: "MultiLocationV0",
        effects: "Vec<XcmOrderV0>"
      },
      QueryHolding: {
        queryId: "Compact<u64>",
        dest: "MultiLocationV0",
        assets: "Vec<MultiAssetV0>"
      },
      BuyExecution: {
        fees: "MultiAssetV0",
        weight: "u64",
        debt: "u64",
        haltOnError: "bool",
        xcm: "Vec<XcmV0>"
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/xcm/v1.js
init_shim();
var v16 = {
  AssetInstanceV1: {
    _enum: {
      Undefined: "Null",
      Index: "Compact<u128>",
      Array4: "[u8; 4]",
      Array8: "[u8; 8]",
      Array16: "[u8; 16]",
      Array32: "[u8; 32]",
      Blob: "Bytes"
    }
  },
  FungibilityV1: {
    _enum: {
      Fungible: "Compact<u128>",
      NonFungible: "AssetInstanceV1"
    }
  },
  JunctionV1: {
    _enum: {
      Parachain: "Compact<u32>",
      AccountId32: {
        network: "NetworkId",
        id: "AccountId"
      },
      AccountIndex64: {
        network: "NetworkId",
        index: "Compact<u64>"
      },
      AccountKey20: {
        network: "NetworkId",
        key: "[u8; 20]"
      },
      PalletInstance: "u8",
      GeneralIndex: "Compact<u128>",
      GeneralKey: "Vec<u8>",
      OnlyChild: "Null",
      Plurality: {
        id: "BodyId",
        part: "BodyPart"
      }
    }
  },
  JunctionsV1: {
    _enum: {
      Here: "Null",
      X1: "JunctionV1",
      X2: "(JunctionV1, JunctionV1)",
      X3: "(JunctionV1, JunctionV1, JunctionV1)",
      X4: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
      X5: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
      X6: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
      X7: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
      X8: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)"
    }
  },
  MultiAssetsV1: "Vec<MultiAssetV1>",
  MultiAssetV1: {
    id: "XcmAssetId",
    fungibility: "FungibilityV1"
  },
  MultiAssetFilterV1: {
    _enum: {
      Definite: "MultiAssetsV1",
      Wild: "WildMultiAssetV1"
    }
  },
  MultiLocationV1: {
    parents: "u8",
    interior: "JunctionsV1"
  },
  OriginKindV1: "OriginKindV0",
  ResponseV1: {
    _enum: {
      Assets: "MultiAssetsV1"
    }
  },
  WildFungibilityV1: {
    _enum: ["Fungible", "NonFungible"]
  },
  WildMultiAssetV1: {
    _enum: {
      All: "Null",
      AllOf: {
        id: "XcmAssetId",
        fungibility: "WildFungibilityV1"
      }
    }
  },
  XcmV1: {
    _enum: {
      WithdrawAsset: {
        assets: "MultiAssetsV1",
        effects: "Vec<XcmOrderV1>"
      },
      ReserveAssetDeposit: {
        assets: "MultiAssetsV1",
        effects: "Vec<XcmOrderV1>"
      },
      ReceiveTeleportedAsset: {
        assets: "MultiAssetsV1",
        effects: "Vec<XcmOrderV1>"
      },
      QueryResponse: {
        queryId: "Compact<u64>",
        response: "ResponseV1"
      },
      TransferAsset: {
        assets: "MultiAssetsV1",
        dest: "MultiLocationV1"
      },
      TransferReserveAsset: {
        assets: "MultiAssetsV1",
        dest: "MultiLocationV1",
        effects: "Vec<XcmOrderV1>"
      },
      Transact: {
        originType: "XcmOriginKind",
        requireWeightAtMost: "u64",
        call: "DoubleEncodedCall"
      },
      HrmpNewChannelOpenRequest: {
        sender: "Compact<u32>",
        maxMessageSize: "Compact<u32>",
        maxCapacity: "Compact<u32>"
      },
      HrmpChannelAccepted: {
        recipient: "Compact<u32>"
      },
      HrmpChannelClosing: {
        initiator: "Compact<u32>",
        sender: "Compact<u32>",
        recipient: "Compact<u32>"
      },
      RelayedFrom: {
        who: "MultiLocationV1",
        message: "XcmV1"
      }
    }
  },
  XcmErrorV1: {
    _enum: {
      Undefined: "Null",
      Overflow: "Null",
      Unimplemented: "Null",
      UnhandledXcmVersion: "Null",
      UnhandledXcmMessage: "Null",
      UnhandledEffect: "Null",
      EscalationOfPrivilege: "Null",
      UntrustedReserveLocation: "Null",
      UntrustedTeleportLocation: "Null",
      DestinationBufferOverflow: "Null",
      SendFailed: "Null",
      CannotReachDestination: "(MultiLocationV1, XcmV1)",
      MultiLocationFull: "Null",
      FailedToDecode: "Null",
      BadOrigin: "Null",
      ExceedsMaxMessageSize: "Null",
      FailedToTransactAsset: "Null",
      WeightLimitReached: "Weight",
      Wildcard: "Null",
      TooMuchWeightRequired: "Null",
      NotHoldingFees: "Null",
      WeightNotComputable: "Null",
      Barrier: "Null",
      NotWithdrawable: "Null",
      LocationCannotHold: "Null",
      TooExpensive: "Null",
      AssetNotFound: "Null",
      DestinationUnsupported: "Null",
      RecursionLimitReached: "Null"
    }
  },
  XcmOrderV1: {
    _enum: {
      Noop: "Null",
      DepositAsset: {
        assets: "MultiAssetFilterV1",
        maxAssets: "u32",
        beneficiary: "MultiLocationV1"
      },
      DepositReserveAsset: {
        assets: "MultiAssetFilterV1",
        maxAssets: "u32",
        dest: "MultiLocationV1",
        effects: "Vec<XcmOrderV1>"
      },
      ExchangeAsset: {
        give: "MultiAssetFilterV1",
        receive: "MultiAssetsV1"
      },
      InitiateReserveWithdraw: {
        assets: "MultiAssetFilterV1",
        reserve: "MultiLocationV1",
        effects: "Vec<XcmOrderV1>"
      },
      InitiateTeleport: {
        assets: "MultiAssetFilterV1",
        dest: "MultiLocationV1",
        effects: "Vec<XcmOrderV1>"
      },
      QueryHolding: {
        queryId: "Compact<u64>",
        dest: "MultiLocationV1",
        assets: "MultiAssetFilterV1"
      },
      BuyExecution: {
        fees: "MultiAssetV1",
        weight: "u64",
        debt: "u64",
        haltOnError: "bool",
        instructions: "Vec<XcmV1>"
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/xcm/v2.js
init_shim();
var v2 = {
  AssetInstanceV2: "AssetInstanceV1",
  FungibilityV2: "FungibilityV1",
  JunctionV2: "JunctionV1",
  JunctionsV2: "JunctionsV1",
  MultiAssetsV2: "MultiAssetsV1",
  MultiAssetV2: "MultiAssetV1",
  MultiAssetFilterV2: "MultiAssetFilterV1",
  MultiLocationV2: "MultiLocationV1",
  OriginKindV2: "OriginKindV1",
  WildFungibilityV2: "WildFungibilityV1",
  ResponseV2: {
    _enum: {
      Null: "Null",
      Assets: "MultiAssetsV2",
      ExecutionResult: "ResponseV2Result"
    }
  },
  ResponseV2Error: "(u32, XcmErrorV2)",
  ResponseV2Result: "Result<Null, ResponseV2Error>",
  WeightLimitV2: {
    _enum: {
      Unlimited: "Null",
      Limited: "Compact<u64>"
    }
  },
  InstructionV2: {
    _enum: {
      WithdrawAsset: "MultiAssetsV2",
      ReserveAssetDeposited: "MultiAssetsV2",
      ReceiveTeleportedAsset: "MultiAssetsV2",
      QueryResponse: {
        queryId: "Compact<u64>",
        response: "ResponseV2",
        maxWeight: "Compact<u64>"
      },
      TransferAsset: {
        assets: "MultiAssetsV2",
        beneficiary: "MultiLocationV2"
      },
      TransferReserveAsset: {
        assets: "MultiAssetsV2",
        dest: "MultiLocationV2",
        xcm: "XcmV2"
      },
      Transact: {
        originType: "OriginKindV2",
        requireWeightAtMost: "u64",
        call: "DoubleEncodedCall"
      },
      HrmpNewChannelOpenRequest: {
        sender: "Compact<u32>",
        maxMessageSize: "Compact<u32>",
        maxCapacity: "Compact<u32>"
      },
      HrmpChannelAccepted: {
        recipient: "Compact<u32>"
      },
      HrmpChannelClosing: {
        initiator: "Compact<u32>",
        sender: "Compact<u32>",
        recipient: "Compact<u32>"
      },
      ClearOrigin: "Null",
      DescendOrigin: "InteriorMultiLocation",
      ReportError: {
        queryId: "Compact<u64>",
        dest: "MultiLocationV2",
        maxResponseWeight: "Compact<u64>"
      },
      DepositAsset: {
        assets: "MultiAssetFilterV2",
        maxAssets: "u32",
        beneficiary: "MultiLocationV2"
      },
      DepositReserveAsset: {
        assets: "MultiAssetFilterV2",
        maxAssets: "u32",
        dest: "MultiLocationV2",
        xcm: "XcmV2"
      },
      ExchangeAsset: {
        give: "MultiAssetFilterV2",
        receive: "MultiAssetsV2"
      },
      InitiateReserveWithdraw: {
        assets: "MultiAssetFilterV2",
        reserve: "MultiLocationV2",
        xcm: "XcmV2"
      },
      InitiateTeleport: {
        assets: "MultiAssetFilterV2",
        dest: "MultiLocationV2",
        xcm: "XcmV2"
      },
      QueryHolding: {
        query_id: "Compact<u64>",
        dest: "MultiLocationV2",
        assets: "MultiAssetFilterV2",
        maxResponse_Weight: "Compact<u64>"
      },
      BuyExecution: {
        fees: "MultiAssetV2",
        weightLimit: "WeightLimitV2"
      },
      RefundSurplus: "Null",
      SetErrorHandler: "XcmV2",
      SetAppendix: "XcmV2",
      ClearError: "Null",
      ClaimAsset: {
        assets: "MultiAssetsV2",
        ticket: "MultiLocationV2"
      },
      Trap: "u64"
    }
  },
  WildMultiAssetV2: "WildMultiAssetV1",
  XcmV2: "Vec<InstructionV2>",
  XcmErrorV2: {
    _enum: {
      Undefined: "Null",
      Overflow: "Null",
      Unimplemented: "Null",
      UnhandledXcmVersion: "Null",
      UnhandledXcmMessage: "Null",
      UnhandledEffect: "Null",
      EscalationOfPrivilege: "Null",
      UntrustedReserveLocation: "Null",
      UntrustedTeleportLocation: "Null",
      DestinationBufferOverflow: "Null",
      MultiLocationFull: "Null",
      MultiLocationNotInvertible: "Null",
      FailedToDecode: "Null",
      BadOrigin: "Null",
      ExceedsMaxMessageSize: "Null",
      FailedToTransactAsset: "Null",
      WeightLimitReached: "Weight",
      Wildcard: "Null",
      TooMuchWeightRequired: "Null",
      NotHoldingFees: "Null",
      WeightNotComputable: "Null",
      Barrier: "Null",
      NotWithdrawable: "Null",
      LocationCannotHold: "Null",
      TooExpensive: "Null",
      AssetNotFound: "Null",
      DestinationUnsupported: "Null",
      RecursionLimitReached: "Null",
      Transport: "Null",
      Unroutable: "Null",
      UnknownWeightRequired: "Null",
      Trap: "u64",
      UnknownClaim: "Null",
      InvalidLocation: "Null"
    }
  },
  XcmOrderV2: "XcmOrderV1"
};

// node_modules/@polkadot/types/interfaces/xcm/definitions.js
var XCM_LATEST = "V2";
var xcm = {
  XcmOrigin: {
    _enum: {
      Xcm: "MultiLocation"
    }
  },
  XcmpMessageFormat: {
    _enum: ["ConcatenatedVersionedXcm", "ConcatenatedEncodedBlob", "Signals"]
  },
  XcmAssetId: {
    _enum: {
      Concrete: "MultiLocation",
      Abstract: "Bytes"
    }
  },
  InboundStatus: {
    _enum: ["Ok", "Suspended"]
  },
  OutboundStatus: {
    _enum: ["Ok", "Suspended"]
  },
  MultiAssets: "Vec<MultiAsset>"
};
var location = {
  BodyId: {
    _enum: {
      Unit: "Null",
      Named: "Vec<u8>",
      Index: "Compact<u32>",
      Executive: "Null",
      Technical: "Null",
      Legislative: "Null",
      Judicial: "Null"
    }
  },
  BodyPart: {
    _enum: {
      Voice: "Null",
      Members: "Compact<u32>",
      Fraction: {
        nom: "Compact<u32>",
        denom: "Compact<u32>"
      },
      AtLeastProportion: {
        nom: "Compact<u32>",
        denom: "Compact<u32>"
      },
      MoreThanProportion: {
        nom: "Compact<u32>",
        denom: "Compact<u32>"
      }
    }
  },
  InteriorMultiLocation: "Junctions",
  NetworkId: {
    _enum: {
      Any: "Null",
      Named: "Vec<u8>",
      Polkadot: "Null",
      Kusama: "Null"
    }
  }
};
var definitions_default59 = {
  rpc: {},
  types: {
    ...location,
    ...xcm,
    ...v02,
    ...v16,
    ...v2,
    ...mapXcmTypes(XCM_LATEST),
    DoubleEncodedCall: {
      encoded: "Vec<u8>"
    },
    XcmOriginKind: {
      _enum: ["Native", "SovereignAccount", "Superuser", "Xcm"]
    },
    Outcome: {
      _enum: {
        Complete: "Weight",
        Incomplete: "(Weight, XcmErrorV0)",
        Error: "XcmErrorV0"
      }
    },
    QueryId: "u64",
    QueryStatus: {
      _enum: {
        Pending: {
          responder: "VersionedMultiLocation",
          maybeNotify: "Option<(u8, u8)>",
          timeout: "BlockNumber"
        },
        Ready: {
          response: "VersionedResponse",
          at: "BlockNumber"
        }
      }
    },
    QueueConfigData: {
      suspendThreshold: "u32",
      dropThreshold: "u32",
      resumeThreshold: "u32",
      thresholdWeight: "Weight",
      weightRestrictDecay: "Weight"
    },
    VersionMigrationStage: {
      _enum: {
        MigrateSupportedVersion: "Null",
        MigrateVersionNotifiers: "Null",
        NotifyCurrentTargets: "Option<Bytes>",
        MigrateAndNotifyOldTargets: "Null"
      }
    },
    VersionedMultiAsset: {
      _enum: {
        V0: "MultiAssetV0",
        V1: "MultiAssetV1",
        V2: "MultiAssetV2"
      }
    },
    VersionedMultiAssets: {
      _enum: {
        V0: "Vec<MultiAssetV0>",
        V1: "MultiAssetsV1",
        V2: "MultiAssetsV2"
      }
    },
    VersionedMultiLocation: {
      _enum: {
        V0: "MultiLocationV0",
        V1: "MultiLocationV1",
        V2: "MultiLocationV2"
      }
    },
    VersionedResponse: {
      V0: "ResponseV0",
      V1: "ResponseV1",
      V2: "ResponseV2"
    },
    VersionedXcm: {
      _enum: {
        V0: "XcmV0",
        V1: "XcmV1",
        V2: "XcmV2"
      }
    },
    XcmVersion: "u32"
  }
};

// node_modules/@polkadot/types/interfaces/contractsAbi/definitions.js
init_shim();
var layout = {
  ContractCryptoHasher: {
    _enum: ["Blake2x256", "Sha2x256", "Keccak256"]
  },
  ContractDiscriminant: "u32",
  ContractLayoutArray: {
    offset: "ContractLayoutKey",
    len: "u32",
    cellsPerElem: "u64",
    layout: "ContractStorageLayout"
  },
  ContractLayoutCell: {
    key: "ContractLayoutKey",
    ty: "SiLookupTypeId"
  },
  ContractLayoutEnum: {
    dispatchKey: "ContractLayoutKey",
    variants: "BTreeMap<ContractDiscriminant, ContractLayoutStruct>"
  },
  ContractLayoutHash: {
    offset: "ContractLayoutKey",
    strategy: "ContractLayoutHashingStrategy",
    layout: "ContractStorageLayout"
  },
  ContractLayoutHashingStrategy: {
    hasher: "ContractCryptoHasher",
    postfix: "Vec<u8>",
    prefix: "Vec<u8>"
  },
  ContractLayoutKey: "[u8; 32]",
  ContractLayoutStruct: {
    fields: "Vec<ContractLayoutStructField>"
  },
  ContractLayoutStructField: {
    layout: "ContractStorageLayout",
    name: "Text"
  },
  ContractStorageLayout: {
    _enum: {
      Cell: "ContractLayoutCell",
      Hash: "ContractLayoutHash",
      Array: "ContractLayoutArray",
      Struct: "ContractLayoutStruct",
      Enum: "ContractLayoutEnum"
    }
  }
};
var spec = {
  ContractConstructorSpecV0: {
    name: "Text",
    selector: "ContractSelector",
    args: "Vec<ContractMessageParamSpecV0>",
    docs: "Vec<Text>"
  },
  ContractConstructorSpecV1: {
    name: "Vec<Text>",
    selector: "ContractSelector",
    args: "Vec<ContractMessageParamSpecV0>",
    docs: "Vec<Text>"
  },
  ContractConstructorSpecV2: {
    label: "Text",
    selector: "ContractSelector",
    args: "Vec<ContractMessageParamSpecV2>",
    docs: "Vec<Text>"
  },
  ContractConstructorSpecV3: {
    label: "Text",
    selector: "ContractSelector",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV2>",
    docs: "Vec<Text>"
  },
  ContractConstructorSpecV4: {
    label: "Text",
    selector: "ContractSelector",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV2>",
    docs: "Vec<Text>",
    default: "bool",
    returnType: "Option<ContractTypeSpec>"
  },
  ContractContractSpecV0: {
    constructors: "Vec<ContractConstructorSpecV0>",
    messages: "Vec<ContractMessageSpecV0>",
    events: "Vec<ContractEventSpecV0>",
    docs: "Vec<Text>"
  },
  ContractContractSpecV1: {
    constructors: "Vec<ContractConstructorSpecV1>",
    messages: "Vec<ContractMessageSpecV1>",
    events: "Vec<ContractEventSpecV1>",
    docs: "Vec<Text>"
  },
  ContractContractSpecV2: {
    constructors: "Vec<ContractConstructorSpecV2>",
    messages: "Vec<ContractMessageSpecV2>",
    events: "Vec<ContractEventSpecV2>",
    docs: "Vec<Text>"
  },
  ContractContractSpecV3: {
    constructors: "Vec<ContractConstructorSpecV3>",
    messages: "Vec<ContractMessageSpecV2>",
    events: "Vec<ContractEventSpecV2>",
    docs: "Vec<Text>"
  },
  ContractContractSpecV4: {
    constructors: "Vec<ContractConstructorSpecV4>",
    messages: "Vec<ContractMessageSpecV3>",
    events: "Vec<ContractEventSpecV2>",
    docs: "Vec<Text>",
    environment: "ContractEnvironmentV4"
  },
  ContractDisplayName: "SiPath",
  ContractEventParamSpecV0: {
    name: "Text",
    indexed: "bool",
    type: "ContractTypeSpec",
    docs: "Vec<Text>"
  },
  ContractEventParamSpecV2: {
    label: "Text",
    indexed: "bool",
    type: "ContractTypeSpec",
    docs: "Vec<Text>"
  },
  ContractEventSpecV0: {
    name: "Text",
    args: "Vec<ContractEventParamSpecV0>",
    docs: "Vec<Text>"
  },
  ContractEventSpecV1: {
    name: "Text",
    args: "Vec<ContractEventParamSpecV0>",
    docs: "Vec<Text>"
  },
  ContractEventSpecV2: {
    label: "Text",
    args: "Vec<ContractEventParamSpecV2>",
    docs: "Vec<Text>"
  },
  ContractMessageParamSpecV0: {
    name: "Text",
    type: "ContractTypeSpec"
  },
  ContractMessageParamSpecV2: {
    label: "Text",
    type: "ContractTypeSpec"
  },
  ContractMessageSpecV0: {
    name: "Text",
    selector: "ContractSelector",
    mutates: "bool",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV0>",
    returnType: "Option<ContractTypeSpec>",
    docs: "Vec<Text>"
  },
  ContractMessageSpecV1: {
    name: "Vec<Text>",
    selector: "ContractSelector",
    mutates: "bool",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV0>",
    returnType: "Option<ContractTypeSpec>",
    docs: "Vec<Text>"
  },
  ContractMessageSpecV2: {
    label: "Text",
    selector: "ContractSelector",
    mutates: "bool",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV2>",
    returnType: "Option<ContractTypeSpec>",
    docs: "Vec<Text>"
  },
  ContractMessageSpecV3: {
    label: "Text",
    selector: "ContractSelector",
    mutates: "bool",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV2>",
    returnType: "Option<ContractTypeSpec>",
    docs: "Vec<Text>",
    default: "bool"
  },
  ContractSelector: "[u8; 4]",
  ContractTypeSpec: {
    type: "SiLookupTypeId",
    displayName: "ContractDisplayName"
  }
};
var latest = {
  ContractConstructorSpecLatest: "ContractConstructorSpecV4",
  ContractEventSpecLatest: "ContractEventSpecV2",
  ContractEventParamSpecLatest: "ContractEventParamSpecV2",
  ContractMessageParamSpecLatest: "ContractMessageParamSpecV2",
  ContractMessageSpecLatest: "ContractMessageSpecV3",
  ContractMetadataLatest: "ContractMetadataV4"
};
var definitions_default60 = {
  rpc: {},
  types: {
    ...layout,
    ...spec,
    ...latest,
    ContractProjectInfo: {
      source: "ContractProjectSource",
      contract: "ContractProjectContract"
    },
    ContractMetadataV0: {
      metadataVersion: "Text",
      types: "Vec<Si0Type>",
      spec: "ContractContractSpecV0"
    },
    ContractMetadataV1: {
      types: "Vec<PortableType>",
      spec: "ContractContractSpecV1"
    },
    ContractMetadataV2: {
      types: "Vec<PortableType>",
      spec: "ContractContractSpecV2"
    },
    ContractMetadataV3: {
      types: "Vec<PortableType>",
      spec: "ContractContractSpecV3"
    },
    ContractMetadataV4: {
      types: "Vec<PortableType>",
      spec: "ContractContractSpecV4"
    },
    ContractMetadata: {
      _enum: {
        V0: "ContractMetadataV0",
        V1: "ContractMetadataV1",
        V2: "ContractMetadataV2",
        V3: "ContractMetadataV3",
        V4: "ContractMetadataV4"
      }
    },
    ContractProjectV0: {
      metadataVersion: "Text",
      source: "ContractProjectSource",
      contract: "ContractProjectContract",
      types: "Vec<Si0Type>",
      spec: "ContractContractSpecV0"
    },
    ContractProject: "(ContractProjectInfo, ContractMetadata)",
    ContractProjectContract: {
      _alias: {
        docs: "documentation"
      },
      name: "Text",
      version: "Text",
      authors: "Vec<Text>",
      description: "Option<Text>",
      docs: "Option<Text>",
      repository: "Option<Text>",
      homepage: "Option<Text>",
      license: "Option<Text>"
    },
    ContractProjectSource: {
      _alias: {
        wasmHash: "hash"
      },
      wasmHash: "[u8; 32]",
      language: "Text",
      compiler: "Text",
      wasm: "Raw"
    },
    ContractEnvironmentV4: {
      _alias: {
        hashType: "hash"
      },
      // NOTE These are not marked optional in the Rust code, however since we
      // convert from older versions to newer, we may not have these fields.
      // The Option<...> works since our inputs are always JSON, so it will
      // be None when not specified.
      //
      // Additionally we don't mark the full structure as Option, rather we
      // do it on a per-field basis since fields may be added as the versions
      // progress.
      accountId: "Option<ContractTypeSpec>",
      balance: "Option<ContractTypeSpec>",
      blockNumber: "Option<ContractTypeSpec>",
      hashType: "Option<ContractTypeSpec>",
      timestamp: "Option<ContractTypeSpec>",
      maxEventTopics: "Option<u32>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/eth/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/eth/rpc.js
init_shim();
var netRpc = {
  listening: {
    aliasSection: "net",
    description: "Returns true if client is actively listening for network connections. Otherwise false.",
    params: [],
    type: "bool"
  },
  peerCount: {
    aliasSection: "net",
    description: "Returns number of peers connected to node.",
    params: [],
    type: "Text"
  },
  version: {
    aliasSection: "net",
    description: "Returns protocol version.",
    params: [],
    type: "Text"
  }
};
var web3Rpc = {
  clientVersion: {
    aliasSection: "web3",
    description: "Returns current client version.",
    params: [],
    type: "Text"
  },
  sha3: {
    aliasSection: "web3",
    description: "Returns sha3 of the given data",
    params: [{ name: "data", type: "Bytes" }],
    type: "H256"
  }
};
var rpc10 = {
  ...netRpc,
  ...web3Rpc,
  accounts: {
    description: "Returns accounts list.",
    params: [],
    type: "Vec<H160>"
  },
  blockNumber: {
    description: "Returns the blockNumber",
    params: [],
    type: "U256"
  },
  call: {
    description: "Call contract, returning the output data.",
    params: [
      {
        name: "request",
        type: "EthCallRequest"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "Bytes"
  },
  chainId: {
    description: "Returns the chain ID used for transaction signing at the current best block. None is returned if not available.",
    params: [],
    type: "U64"
  },
  coinbase: {
    description: "Returns block author.",
    params: [],
    type: "H160"
  },
  estimateGas: {
    description: "Estimate gas needed for execution of given contract.",
    params: [
      {
        name: "request",
        type: "EthCallRequest"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "U256"
  },
  feeHistory: {
    description: "Returns fee history for given block count & reward percentiles",
    params: [
      {
        name: "blockCount",
        type: "U256"
      },
      {
        name: "newestBlock",
        type: "BlockNumber"
      },
      {
        name: "rewardPercentiles",
        type: "Option<Vec<f64>>"
      }
    ],
    type: "EthFeeHistory"
  },
  gasPrice: {
    description: "Returns current gas price.",
    params: [],
    type: "U256"
  },
  getBalance: {
    description: "Returns balance of the given account.",
    params: [
      {
        name: "address",
        type: "H160"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "U256"
  },
  getBlockByHash: {
    description: "Returns block with given hash.",
    params: [
      {
        name: "hash",
        type: "H256"
      },
      {
        name: "full",
        type: "bool"
      }
    ],
    type: "Option<EthRichBlock>"
  },
  getBlockByNumber: {
    description: "Returns block with given number.",
    params: [
      {
        name: "block",
        type: "BlockNumber"
      },
      { name: "full", type: "bool" }
    ],
    type: "Option<EthRichBlock>"
  },
  getBlockTransactionCountByHash: {
    description: "Returns the number of transactions in a block with given hash.",
    params: [
      {
        name: "hash",
        type: "H256"
      }
    ],
    type: "U256"
  },
  getBlockTransactionCountByNumber: {
    description: "Returns the number of transactions in a block with given block number.",
    params: [
      {
        name: "block",
        type: "BlockNumber"
      }
    ],
    type: "U256"
  },
  getCode: {
    description: "Returns the code at given address at given time (block number).",
    params: [
      {
        name: "address",
        type: "H160"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "Bytes"
  },
  getFilterChanges: {
    description: "Returns filter changes since last poll.",
    params: [
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "EthFilterChanges"
  },
  getFilterLogs: {
    description: "Returns all logs matching given filter (in a range 'from' - 'to').",
    params: [
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "Vec<EthLog>"
  },
  getLogs: {
    description: "Returns logs matching given filter object.",
    params: [
      {
        name: "filter",
        type: "EthFilter"
      }
    ],
    type: "Vec<EthLog>"
  },
  getProof: {
    description: "Returns proof for account and storage.",
    params: [
      {
        name: "address",
        type: "H160"
      },
      {
        name: "storageKeys",
        type: "Vec<H256>"
      },
      {
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "EthAccount"
  },
  getStorageAt: {
    description: "Returns content of the storage at given address.",
    params: [
      {
        name: "address",
        type: "H160"
      },
      {
        name: "index",
        type: "U256"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "H256"
  },
  getTransactionByBlockHashAndIndex: {
    description: "Returns transaction at given block hash and index.",
    params: [
      {
        name: "hash",
        type: "H256"
      },
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "EthTransaction"
  },
  getTransactionByBlockNumberAndIndex: {
    description: "Returns transaction by given block number and index.",
    params: [
      {
        name: "number",
        type: "BlockNumber"
      },
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "EthTransaction"
  },
  getTransactionByHash: {
    description: "Get transaction by its hash.",
    params: [
      {
        name: "hash",
        type: "H256"
      }
    ],
    type: "EthTransaction"
  },
  getTransactionCount: {
    description: "Returns the number of transactions sent from given address at given time (block number).",
    params: [
      {
        name: "address",
        type: "H160"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "U256"
  },
  getTransactionReceipt: {
    description: "Returns transaction receipt by transaction hash.",
    params: [
      {
        name: "hash",
        type: "H256"
      }
    ],
    type: "EthReceipt"
  },
  getUncleByBlockHashAndIndex: {
    description: "Returns an uncles at given block and index.",
    params: [
      {
        name: "hash",
        type: "H256"
      },
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "EthRichBlock"
  },
  getUncleByBlockNumberAndIndex: {
    description: "Returns an uncles at given block and index.",
    params: [
      {
        name: "number",
        type: "BlockNumber"
      },
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "EthRichBlock"
  },
  getUncleCountByBlockHash: {
    description: "Returns the number of uncles in a block with given hash.",
    params: [
      {
        name: "hash",
        type: "H256"
      }
    ],
    type: "U256"
  },
  getUncleCountByBlockNumber: {
    description: "Returns the number of uncles in a block with given block number.",
    params: [
      {
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "U256"
  },
  getWork: {
    description: "Returns the hash of the current block, the seedHash, and the boundary condition to be met.",
    params: [],
    type: "EthWork"
  },
  hashrate: {
    description: "Returns the number of hashes per second that the node is mining with.",
    params: [],
    type: "U256"
  },
  maxPriorityFeePerGas: {
    description: "Returns max priority fee per gas",
    params: [],
    type: "U256"
  },
  mining: {
    description: "Returns true if client is actively mining new blocks.",
    params: [],
    type: "bool"
  },
  newBlockFilter: {
    description: "Returns id of new block filter.",
    params: [],
    type: "U256"
  },
  newFilter: {
    description: "Returns id of new filter.",
    params: [
      {
        name: "filter",
        type: "EthFilter"
      }
    ],
    type: "U256"
  },
  newPendingTransactionFilter: {
    description: "Returns id of new block filter.",
    params: [],
    type: "U256"
  },
  protocolVersion: {
    description: "Returns protocol version encoded as a string (quotes are necessary).",
    params: [],
    type: "u64"
  },
  sendRawTransaction: {
    description: "Sends signed transaction, returning its hash.",
    params: [
      {
        name: "bytes",
        type: "Bytes"
      }
    ],
    type: "H256"
  },
  sendTransaction: {
    description: "Sends transaction; will block waiting for signer to return the transaction hash",
    params: [
      {
        name: "tx",
        type: "EthTransactionRequest"
      }
    ],
    type: "H256"
  },
  submitHashrate: {
    description: "Used for submitting mining hashrate.",
    params: [
      {
        name: "index",
        type: "U256"
      },
      {
        name: "hash",
        type: "H256"
      }
    ],
    type: "bool"
  },
  submitWork: {
    description: "Used for submitting a proof-of-work solution.",
    params: [
      {
        name: "nonce",
        type: "H64"
      },
      {
        name: "headerHash",
        type: "H256"
      },
      {
        name: "mixDigest",
        type: "H256"
      }
    ],
    type: "bool"
  },
  subscribe: {
    description: "Subscribe to Eth subscription.",
    params: [
      { name: "kind", type: "EthSubKind" },
      {
        isOptional: true,
        name: "params",
        type: "EthSubParams"
      }
    ],
    pubsub: [
      "subscription",
      "subscribe",
      "unsubscribe"
    ],
    type: "Null"
  },
  syncing: {
    description: "Returns an object with data about the sync status or false.",
    params: [],
    type: "EthSyncStatus"
  },
  uninstallFilter: {
    description: "Uninstalls filter.",
    params: [
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "bool"
  }
};

// node_modules/@polkadot/types/interfaces/eth/runtime.js
init_shim();
var ethMethodsV4 = {
  account_basic: {
    description: "Returns pallet_evm::Accounts by address.",
    params: [
      {
        name: "address",
        type: "H160"
      }
    ],
    type: "EvmAccount"
  },
  account_code_at: {
    description: "For a given account address, returns pallet_evm::AccountCodes.",
    params: [
      {
        name: "address",
        type: "H160"
      }
    ],
    type: "Bytes"
  },
  author: {
    description: "Returns the converted FindAuthor::find_author authority id.",
    params: [],
    type: "H160"
  },
  call: {
    description: "Returns a frame_ethereum::call response. If `estimate` is true,",
    params: [
      {
        name: "from",
        type: "H160"
      },
      {
        name: "to",
        type: "H160"
      },
      {
        name: "data",
        type: "Vec<u8>"
      },
      {
        name: "value",
        type: "U256"
      },
      {
        name: "gasLimit",
        type: "U256"
      },
      {
        name: "maxFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "maxPriorityFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "nonce",
        type: "Option<U256>"
      },
      {
        name: "estimate",
        type: "bool"
      },
      {
        name: "accessList",
        type: "Option<Vec<(H160, Vec<H256>)>>"
      }
    ],
    type: "Result<EvmCallInfo, DispatchError>"
  },
  chain_id: {
    description: "Returns runtime defined pallet_evm::ChainId.",
    params: [],
    type: "u64"
  },
  create: {
    description: "Returns a frame_ethereum::call response. If `estimate` is true,",
    params: [
      {
        name: "from",
        type: "H160"
      },
      {
        name: "data",
        type: "Vec<u8>"
      },
      {
        name: "value",
        type: "U256"
      },
      {
        name: "gasLimit",
        type: "U256"
      },
      {
        name: "maxFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "maxPriorityFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "nonce",
        type: "Option<U256>"
      },
      {
        name: "estimate",
        type: "bool"
      },
      {
        name: "accessList",
        type: "Option<Vec<(H160, Vec<H256>)>>"
      }
    ],
    type: "Result<EvmCreateInfo, DispatchError>"
  },
  current_all: {
    description: "Return all the current data for a block in a single runtime call.",
    params: [],
    type: "(Option<BlockV2>, Option<Vec<EthReceiptV3>>, Option<Vec<EthTransactionStatus>>)"
  },
  current_block: {
    description: "Return the current block.",
    params: [],
    type: "BlockV2"
  },
  current_receipts: {
    description: "Return the current receipt.",
    params: [],
    type: "Option<Vec<EthReceiptV3>>"
  },
  current_transaction_statuses: {
    description: "Return the current transaction status.",
    params: [],
    type: "Option<Vec<EthTransactionStatus>>"
  },
  elasticity: {
    description: "Return the elasticity multiplier.",
    params: [],
    type: "Option<Permill>"
  },
  extrinsic_filter: {
    description: "Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.",
    params: [
      {
        name: "xts",
        type: "Vec<Extrinsic>"
      }
    ],
    type: "Vec<TransactionV2>"
  },
  gas_price: {
    description: "Returns FixedGasPrice::min_gas_price",
    params: [],
    type: "u256"
  },
  storage_at: {
    description: "For a given account address and index, returns pallet_evm::AccountStorages.",
    params: [
      {
        name: "address",
        type: "H160"
      },
      {
        name: "index",
        type: "u256"
      }
    ],
    type: "H256"
  }
};
var ethMethodsV5 = {
  call: {
    description: "Returns a frame_ethereum::call response. If `estimate` is true,",
    params: [
      {
        name: "from",
        type: "H160"
      },
      {
        name: "to",
        type: "H160"
      },
      {
        name: "data",
        type: "Vec<u8>"
      },
      {
        name: "value",
        type: "U256"
      },
      {
        name: "gasLimit",
        type: "U256"
      },
      {
        name: "maxFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "maxPriorityFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "nonce",
        type: "Option<U256>"
      },
      {
        name: "estimate",
        type: "bool"
      },
      {
        name: "accessList",
        type: "Option<Vec<(H160, Vec<H256>)>>"
      }
    ],
    type: "Result<EvmCallInfoV2, DispatchError>"
  },
  create: {
    description: "Returns a frame_ethereum::call response. If `estimate` is true,",
    params: [
      {
        name: "from",
        type: "H160"
      },
      {
        name: "data",
        type: "Vec<u8>"
      },
      {
        name: "value",
        type: "U256"
      },
      {
        name: "gasLimit",
        type: "U256"
      },
      {
        name: "maxFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "maxPriorityFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "nonce",
        type: "Option<U256>"
      },
      {
        name: "estimate",
        type: "bool"
      },
      {
        name: "accessList",
        type: "Option<Vec<(H160, Vec<H256>)>>"
      }
    ],
    type: "Result<EvmCreateInfoV2, DispatchError>"
  }
};
var runtime25 = {
  ConvertTransactionRuntimeApi: [
    {
      methods: {
        convert_transaction: {
          description: "Converts an Ethereum-style transaction to Extrinsic",
          params: [
            {
              name: "transaction",
              type: "TransactionV2"
            }
          ],
          type: "Extrinsic"
        }
      },
      version: 2
    }
  ],
  DebugRuntimeApi: [
    {
      methods: {
        trace_block: {
          description: "Trace all block extrinsics",
          params: [
            {
              name: "extrinsics",
              type: "Vec<Extrinsic>"
            },
            {
              name: "knownTransactions",
              type: "Vec<H256>"
            }
          ],
          type: "Result<(), DispatchError>"
        },
        trace_transaction: {
          description: "Trace transaction extrinsics",
          params: [
            {
              name: "extrinsics",
              type: "Vec<Extrinsic>"
            },
            {
              name: "transaction",
              type: "EthTransaction"
            }
          ],
          type: "Result<(), DispatchError>"
        }
      },
      version: 4
    }
  ],
  EthereumRuntimeRPCApi: [
    {
      methods: {
        ...ethMethodsV4
      },
      version: 4
    },
    {
      methods: {
        ...ethMethodsV4,
        ...ethMethodsV5
      },
      version: 5
    }
  ]
};

// node_modules/@polkadot/types/interfaces/eth/definitions.js
var V0 = {
  BlockV0: {
    header: "EthHeader",
    transactions: "Vec<TransactionV0>",
    ommers: "Vec<EthHeader>"
  },
  LegacyTransaction: {
    nonce: "U256",
    gasPrice: "U256",
    gasLimit: "U256",
    action: "EthTransactionAction",
    value: "U256",
    input: "Bytes",
    signature: "EthTransactionSignature"
  },
  TransactionV0: "LegacyTransaction"
};
var V1 = {
  BlockV1: {
    header: "EthHeader",
    transactions: "Vec<TransactionV1>",
    ommers: "Vec<EthHeader>"
  },
  EIP2930Transaction: {
    chainId: "u64",
    nonce: "U256",
    gasPrice: "U256",
    gasLimit: "U256",
    action: "EthTransactionAction",
    value: "U256",
    input: "Bytes",
    accessList: "EthAccessList",
    oddYParity: "bool",
    r: "H256",
    s: "H256"
  },
  TransactionV1: {
    _enum: {
      Legacy: "LegacyTransaction",
      EIP2930: "EIP2930Transaction"
    }
  }
};
var V2 = {
  BlockV2: {
    header: "EthHeader",
    transactions: "Vec<TransactionV2>",
    ommers: "Vec<EthHeader>"
  },
  EIP1559Transaction: {
    chainId: "u64",
    nonce: "U256",
    maxPriorityFeePerGas: "U256",
    maxFeePerGas: "U256",
    gasLimit: "U256",
    action: "EthTransactionAction",
    value: "U256",
    input: "Bytes",
    accessList: "EthAccessList",
    oddYParity: "bool",
    r: "H256",
    s: "H256"
  },
  TransactionV2: {
    _enum: {
      Legacy: "LegacyTransaction",
      EIP2930: "EIP2930Transaction",
      EIP1559: "EIP1559Transaction"
    }
  }
};
var types = {
  ...V0,
  ...V1,
  ...V2,
  EthereumAccountId: "GenericEthereumAccountId",
  EthereumAddress: "GenericEthereumAccountId",
  EthereumLookupSource: "GenericEthereumLookupSource",
  EthereumSignature: "[u8; 65]",
  EthAccessListItem: {
    address: "EthAddress",
    slots: "Vec<H256>"
  },
  EthAccessList: "Vec<EthAccessListItem>",
  EthAccount: {
    address: "EthAddress",
    balance: "U256",
    nonce: "U256",
    codeHash: "H256",
    storageHash: "H256",
    accountProof: "Vec<Bytes>",
    storageProof: "Vec<EthStorageProof>"
  },
  EthAddress: "H160",
  EthBlock: {
    header: "EthHeader",
    transactions: "Vec<EthTransaction>",
    ommers: "Vec<EthHeader>"
  },
  EthHeader: {
    parentHash: "H256",
    ommersHash: "H256",
    beneficiary: "EthAddress",
    stateRoot: "H256",
    transactionsRoot: "H256",
    receiptsRoot: "H256",
    logsBloom: "EthBloom",
    difficulty: "U256",
    number: "U256",
    gasLimit: "U256",
    gasUsed: "U256",
    timestamp: "u64",
    extraData: "Bytes",
    mixMash: "H256",
    nonce: "H64"
  },
  EthRichBlock: {
    _alias: {
      blockHash: "hash",
      blockSize: "size"
    },
    blockHash: "Option<H256>",
    parentHash: "H256",
    sha3Uncles: "H256",
    author: "EthAddress",
    miner: "EthAddress",
    stateRoot: "H256",
    transactionsRoot: "H256",
    receiptsRoot: "H256",
    number: "Option<U256>",
    gasUsed: "U256",
    gasLimit: "U256",
    extraData: "Bytes",
    logsBloom: "EthBloom",
    timestamp: "U256",
    difficulty: "U256",
    totalDifficulty: "Option<U256>",
    sealFields: "Vec<Bytes>",
    uncles: "Vec<H256>",
    transactions: "Vec<EthTransaction>",
    blockSize: "Option<U256>"
  },
  EthBloom: "H2048",
  EthCallRequest: {
    from: "Option<EthAddress>",
    to: "Option<EthAddress>",
    gasPrice: "Option<U256>",
    gas: "Option<U256>",
    value: "Option<U256>",
    data: "Option<Bytes>",
    nonce: "Option<U256>"
  },
  EthFeeHistory: {
    oldestBlock: "U256",
    baseFeePerGas: "Vec<U256>",
    gasUsedRatio: "Vec<f64>",
    reward: "Option<Vec<Vec<U256>>>"
  },
  EthFilter: {
    fromBlock: "Option<BlockNumber>",
    toBlock: "Option<BlockNumber>",
    blockHash: "Option<H256>",
    address: "Option<EthFilterAddress>",
    topics: "Option<EthFilterTopic>"
  },
  EthFilterAddress: {
    _enum: {
      Single: "EthAddress",
      Multiple: "Vec<EthAddress>",
      Null: "Null"
    }
  },
  EthFilterChanges: {
    _enum: {
      Logs: "Vec<EthLog>",
      Hashes: "Vec<H256>",
      Empty: "Null"
    }
  },
  EthFilterTopic: {
    _enum: {
      Single: "EthFilterTopicInner",
      Multiple: "Vec<EthFilterTopicInner>",
      Null: "Null"
    }
  },
  EthFilterTopicEntry: "Option<H256>",
  EthFilterTopicInner: {
    _enum: {
      Single: "EthFilterTopicEntry",
      Multiple: "Vec<EthFilterTopicEntry>",
      Null: "Null"
    }
  },
  EthRichHeader: {
    _alias: {
      blockHash: "hash",
      blockSize: "size"
    },
    blockHash: "Option<H256>",
    parentHash: "H256",
    sha3Uncles: "H256",
    author: "EthAddress",
    miner: "EthAddress",
    stateRoot: "H256",
    transactionsRoot: "H256",
    receiptsRoot: "H256",
    number: "Option<U256>",
    gasUsed: "U256",
    gasLimit: "U256",
    extraData: "Bytes",
    logsBloom: "EthBloom",
    timestamp: "U256",
    difficulty: "U256",
    sealFields: "Vec<Bytes>",
    blockSize: "Option<U256>"
  },
  EthLog: {
    address: "EthAddress",
    topics: "Vec<H256>",
    data: "Bytes",
    blockHash: "Option<H256>",
    blockNumber: "Option<U256>",
    transactionHash: "Option<H256>",
    transactionIndex: "Option<U256>",
    logIndex: "Option<U256>",
    transactionLogIndex: "Option<U256>",
    removed: "bool"
  },
  EthReceipt: {
    transactionHash: "Option<H256>",
    transactionIndex: "Option<U256>",
    blockHash: "Option<H256>",
    from: "Option<EthAddress>",
    to: "Option<EthAddress>",
    blockNumber: "Option<U256>",
    cumulativeGasUsed: "U256",
    gasUsed: "Option<U256>",
    contractAddress: "Option<EthAddress>",
    logs: "Vec<EthLog>",
    root: "Option<H256>",
    logsBloom: "EthBloom",
    statusCode: "Option<U64>"
  },
  // not convinced, however the original commit matches, so... (maybe V3 is incorrect?)
  EthReceiptV0: "EthReceipt",
  EthReceiptV3: "EthReceipt",
  EthStorageProof: {
    key: "U256",
    value: "U256",
    proof: "Vec<Bytes>"
  },
  EthSubKind: {
    _enum: ["newHeads", "logs", "newPendingTransactions", "syncing"]
  },
  EthSubParams: {
    _enum: {
      None: "Null",
      Logs: "EthFilter"
    }
  },
  EthSubResult: {
    _enum: {
      Header: "EthRichHeader",
      Log: "EthLog",
      TransactionHash: "H256",
      SyncState: "EthSyncStatus"
    }
  },
  EthSyncInfo: {
    startingBlock: "U256",
    currentBlock: "U256",
    highestBlock: "U256",
    warpChunksAmount: "Option<U256>",
    warpChunksProcessed: "Option<U256>"
  },
  EthSyncStatus: {
    _enum: {
      Info: "EthSyncInfo",
      None: "Null"
    }
  },
  EthTransaction: {
    hash: "H256",
    nonce: "U256",
    blockHash: "Option<H256>",
    blockNumber: "Option<U256>",
    transactionIndex: "Option<U256>",
    from: "H160",
    to: "Option<H160>",
    value: "U256",
    gasPrice: "Option<U256>",
    maxFeePerGas: "Option<U256>",
    maxPriorityFeePerGas: "Option<U256>",
    gas: "U256",
    input: "Bytes",
    creates: "Option<H160>",
    raw: "Bytes",
    publicKey: "Option<H512>",
    chainId: "Option<U64>",
    standardV: "U256",
    v: "U256",
    r: "U256",
    s: "U256",
    accessList: "Option<Vec<EthAccessListItem>>",
    transactionType: "Option<U256>"
  },
  EthTransactionSignature: {
    v: "u64",
    r: "H256",
    s: "H256"
  },
  EthTransactionAction: {
    _enum: {
      Call: "H160",
      Create: "Null"
    }
  },
  EthTransactionCondition: {
    _enum: {
      block: "u64",
      time: "u64"
    }
  },
  EthTransactionRequest: {
    from: "Option<EthAddress>",
    to: "Option<EthAddress>",
    gasPrice: "Option<U256>",
    gas: "Option<U256>",
    value: "Option<U256>",
    data: "Option<Bytes>",
    nonce: "Option<U256>"
  },
  EthTransactionStatus: {
    transactionHash: "H256",
    transactionIndex: "u32",
    from: "EthAddress",
    to: "Option<EthAddress>",
    contractAddress: "Option<EthAddress>",
    logs: "Vec<EthLog>",
    logsBloom: "EthBloom"
  },
  EthWork: {
    powHash: "H256",
    seedHash: "H256",
    target: "H256",
    number: "Option<u64>"
  }
};
var definitions_default61 = { rpc: rpc10, runtime: runtime25, types };

// node_modules/@polkadot/types/interfaces/nimbus/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/nimbus/runtime.js
init_shim();
var runtime26 = {
  // deprecated, the NimbusApi is current - this is for backwards compat
  AuthorFilterAPI: [
    {
      methods: {
        can_author: {
          description: "The runtime api used to predict whether an author will be eligible in the given slot",
          params: [
            {
              name: "author",
              type: "AccountId"
            },
            {
              name: "relayParent",
              type: "u32"
            },
            {
              name: "parentHeader",
              type: "Header"
            }
          ],
          type: "bool"
        }
      },
      version: 2
    },
    {
      methods: {
        can_author: {
          description: "The runtime api used to predict whether an author will be eligible in the given slot",
          params: [
            {
              name: "author",
              type: "AccountId"
            },
            {
              name: "relayParent",
              type: "u32"
            }
          ],
          type: "bool"
        }
      },
      version: 1
    }
  ],
  NimbusApi: [
    {
      methods: {
        can_author: {
          description: "The runtime api used to predict whether a Nimbus author will be eligible in the given slot",
          params: [
            {
              name: "author",
              type: "AccountId"
            },
            {
              name: "relayParent",
              type: "u32"
            },
            {
              name: "parentHeader",
              type: "Header"
            }
          ],
          type: "bool"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/nimbus/definitions.js
var definitions_default62 = {
  rpc: {},
  runtime: runtime26,
  types: {}
};

// node_modules/@polkadot/types/interfaces/ormlOracle/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/ormlOracle/runtime.js
init_shim();
var runtime27 = {
  // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/oracle/rpc/runtime-api/src/lib.rs#L12-L21
  OracleApi: [
    {
      methods: {
        get_all_values: {
          description: "Retrieves all values",
          params: [
            {
              name: "providerId",
              // This is a Codec type
              type: "Raw"
            }
          ],
          // This won't actually work as expected - since we have
          // no information about the actual Raw sizes, we cannot
          // handle it in this format (it would need an override
          // for the specific Codec). So return the Raw value.
          // type: 'Vec<(Raw, Option<Raw>)>'
          type: "Raw"
        },
        get_value: {
          description: "Retrieves a single value",
          params: [
            {
              name: "providerId",
              // This is a Codec type
              type: "Raw"
            },
            {
              name: "key",
              // This is a Codec type
              type: "Raw"
            }
          ],
          // This is an Option<Codec> type
          type: "Option<Raw>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/ormlOracle/definitions.js
var definitions_default63 = {
  rpc: {},
  runtime: runtime27,
  types: {}
};

// node_modules/@polkadot/types/interfaces/ormlTokens/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/ormlTokens/runtime.js
init_shim();
var runtime28 = {
  // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/tokens/rpc/runtime-api/src/lib.rs#L11-L18
  TokensApi: [
    {
      methods: {
        query_existential_deposit: {
          description: "Query the existential amount for a specific currency",
          params: [
            {
              name: "currencyId",
              // This is CurrencyId, as per the return value, we are unsure
              // if this is specialized and/or global to the chain or not
              type: "Raw"
            }
          ],
          // This is Balance - since we don't understand enough about the way
          // in which this is used, we default to u128 here (it certainly could
          // be a specialized type that doesn't map to the on-chain Balance)
          type: "u128"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/ormlTokens/definitions.js
var definitions_default64 = {
  rpc: {},
  runtime: runtime28,
  types: {}
};

// node_modules/@polkadot/types/interfaces/rpc/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/rpc/rpc.js
init_shim();
var rpc11 = {
  methods: {
    description: "Retrieves the list of RPC methods that are exposed by the node",
    params: [],
    type: "RpcMethods"
  }
};

// node_modules/@polkadot/types/interfaces/rpc/definitions.js
var definitions_default65 = {
  rpc: rpc11,
  types: {
    RpcMethods: {
      version: "u32",
      methods: "Vec<Text>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/author/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/author/rpc.js
init_shim();
var rpc12 = {
  hasKey: {
    description: "Returns true if the keystore has private keys for the given public key and key type.",
    isUnsafe: true,
    params: [
      {
        name: "publicKey",
        type: "Bytes"
      },
      {
        name: "keyType",
        type: "Text"
      }
    ],
    type: "bool"
  },
  hasSessionKeys: {
    description: "Returns true if the keystore has private keys for the given session public keys.",
    isUnsafe: true,
    params: [
      {
        name: "sessionKeys",
        type: "Bytes"
      }
    ],
    type: "bool"
  },
  insertKey: {
    description: "Insert a key into the keystore.",
    isUnsafe: true,
    params: [
      {
        name: "keyType",
        type: "Text"
      },
      {
        name: "suri",
        type: "Text"
      },
      {
        name: "publicKey",
        type: "Bytes"
      }
    ],
    type: "Bytes"
  },
  pendingExtrinsics: {
    description: "Returns all pending extrinsics, potentially grouped by sender",
    params: [],
    type: "Vec<Extrinsic>"
  },
  removeExtrinsic: {
    description: "Remove given extrinsic from the pool and temporarily ban it to prevent reimporting",
    isUnsafe: true,
    params: [
      {
        name: "bytesOrHash",
        type: "Vec<ExtrinsicOrHash>"
      }
    ],
    type: "Vec<Hash>"
  },
  rotateKeys: {
    description: "Generate new session keys and returns the corresponding public keys",
    isUnsafe: true,
    params: [],
    type: "Bytes"
  },
  submitAndWatchExtrinsic: {
    description: "Submit and subscribe to watch an extrinsic until unsubscribed",
    isSigned: true,
    params: [
      {
        name: "extrinsic",
        type: "Extrinsic"
      }
    ],
    pubsub: [
      "extrinsicUpdate",
      "submitAndWatchExtrinsic",
      "unwatchExtrinsic"
    ],
    type: "ExtrinsicStatus"
  },
  submitExtrinsic: {
    description: "Submit a fully formatted extrinsic for block inclusion",
    isSigned: true,
    params: [
      {
        name: "extrinsic",
        type: "Extrinsic"
      }
    ],
    type: "Hash"
  }
};

// node_modules/@polkadot/types/interfaces/author/definitions.js
var definitions_default66 = {
  rpc: rpc12,
  types: {
    ExtrinsicOrHash: {
      _enum: {
        Hash: "Hash",
        Extrinsic: "Bytes"
      }
    },
    ExtrinsicStatus: {
      _enum: {
        Future: "Null",
        Ready: "Null",
        Broadcast: "Vec<Text>",
        InBlock: "Hash",
        Retracted: "Hash",
        FinalityTimeout: "Hash",
        Finalized: "Hash",
        Usurped: "Hash",
        Dropped: "Null",
        Invalid: "Null"
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/chain/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/chain/rpc.js
init_shim();
var rpc13 = {
  getBlock: {
    description: "Get header and body of a relay chain block",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "hash",
        type: "BlockHash"
      }
    ],
    type: "SignedBlock"
  },
  getBlockHash: {
    description: "Get the block hash for a specific block",
    params: [
      {
        isOptional: true,
        name: "blockNumber",
        type: "BlockNumber"
      }
    ],
    type: "BlockHash"
  },
  getFinalizedHead: {
    alias: ["chain_getFinalisedHead"],
    description: "Get hash of the last finalized block in the canon chain",
    params: [],
    type: "BlockHash"
  },
  getHeader: {
    alias: ["chain_getHead"],
    description: "Retrieves the header for a specific block",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "hash",
        type: "BlockHash"
      }
    ],
    type: "Header"
  },
  subscribeAllHeads: {
    description: "Retrieves the newest header via subscription",
    params: [],
    pubsub: [
      "allHead",
      "subscribeAllHeads",
      "unsubscribeAllHeads"
    ],
    type: "Header"
  },
  subscribeFinalizedHeads: {
    alias: ["chain_subscribeFinalisedHeads", "chain_unsubscribeFinalisedHeads"],
    description: "Retrieves the best finalized header via subscription",
    params: [],
    pubsub: [
      "finalizedHead",
      "subscribeFinalizedHeads",
      "unsubscribeFinalizedHeads"
    ],
    type: "Header"
  },
  subscribeNewHeads: {
    alias: ["chain_unsubscribeNewHeads", "subscribe_newHead", "unsubscribe_newHead"],
    description: "Retrieves the best header via subscription",
    params: [],
    // NOTE These still has the aliassed version, compatible with 1.x
    pubsub: [
      "newHead",
      "subscribeNewHead",
      "unsubscribeNewHead"
    ],
    type: "Header"
  }
};

// node_modules/@polkadot/types/interfaces/chain/definitions.js
var definitions_default67 = {
  rpc: rpc13,
  types: {
    BlockHash: "Hash"
  }
};

// node_modules/@polkadot/types/interfaces/childstate/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/childstate/rpc.js
init_shim();
var rpc14 = {
  getKeys: {
    description: "Returns the keys with prefix from a child storage, leave empty to get all the keys",
    params: [
      {
        name: "childKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "prefix",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Vec<StorageKey>"
  },
  getKeysPaged: {
    alias: ["childstate_getKeysPagedAt"],
    description: "Returns the keys with prefix from a child storage with pagination support",
    params: [
      {
        name: "childKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "prefix",
        type: "StorageKey"
      },
      {
        name: "count",
        type: "u32"
      },
      {
        isOptional: true,
        name: "startKey",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Vec<StorageKey>"
  },
  getStorage: {
    description: "Returns a child storage entry at a specific block state",
    params: [
      {
        name: "childKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Option<StorageData>"
  },
  getStorageEntries: {
    description: "Returns child storage entries for multiple keys at a specific block state",
    params: [
      {
        name: "childKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Vec<Option<StorageData>>"
  },
  getStorageHash: {
    description: "Returns the hash of a child storage entry at a block state",
    params: [
      {
        name: "childKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Option<Hash>"
  },
  getStorageSize: {
    description: "Returns the size of a child storage entry at a block state",
    params: [
      {
        name: "childKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Option<u64>"
  }
};

// node_modules/@polkadot/types/interfaces/childstate/definitions.js
var definitions_default68 = {
  rpc: rpc14,
  types: {
    // StorageKey extends Bytes
    PrefixedStorageKey: "StorageKey"
  }
};

// node_modules/@polkadot/types/interfaces/offchain/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/offchain/rpc.js
init_shim();
var rpc15 = {
  localStorageGet: {
    description: "Get offchain local storage under given key and prefix",
    isUnsafe: true,
    params: [
      {
        name: "kind",
        type: "StorageKind"
      },
      {
        name: "key",
        type: "Bytes"
      }
    ],
    type: "Option<Bytes>"
  },
  localStorageSet: {
    description: "Set offchain local storage under given key and prefix",
    isUnsafe: true,
    params: [
      {
        name: "kind",
        type: "StorageKind"
      },
      {
        name: "key",
        type: "Bytes"
      },
      {
        name: "value",
        type: "Bytes"
      }
    ],
    type: "Null"
  }
};

// node_modules/@polkadot/types/interfaces/offchain/runtime.js
init_shim();
var runtime29 = {
  OffchainWorkerApi: [
    {
      methods: {
        offchain_worker: {
          description: "Starts the off-chain task for given block header.",
          params: [
            {
              name: "header",
              type: "Header"
            }
          ],
          type: "Null"
        }
      },
      version: 2
    },
    {
      methods: {
        offchain_worker: {
          description: "Starts the off-chain task for given block header.",
          params: [
            {
              name: "number",
              type: "BlockNumber"
            }
          ],
          type: "Null"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/offchain/definitions.js
var definitions_default69 = {
  rpc: rpc15,
  runtime: runtime29,
  types: {
    StorageKind: {
      _enum: {
        PERSISTENT: 1,
        LOCAL: 2
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/payment/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/payment/rpc.js
init_shim();
var rpc16 = {
  queryFeeDetails: {
    // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
    deprecated: "Use `api.call.transactionPaymentApi.queryFeeDetails` instead",
    description: "Query the detailed fee of a given encoded extrinsic",
    params: [
      {
        name: "extrinsic",
        type: "Bytes"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "FeeDetails"
  },
  queryInfo: {
    // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
    deprecated: "Use `api.call.transactionPaymentApi.queryInfo` instead",
    description: "Retrieves the fee information for an encoded extrinsic",
    params: [
      {
        name: "extrinsic",
        type: "Bytes"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    // NOTE: Stuck on V1 forever (at least for the time being)
    type: "RuntimeDispatchInfoV1"
  }
};

// node_modules/@polkadot/types/interfaces/payment/runtime.js
init_shim();
var V1_TO_V4_SHARED_PAY = {
  query_fee_details: {
    description: "The transaction fee details",
    params: [
      {
        name: "uxt",
        type: "Extrinsic"
      },
      {
        name: "len",
        type: "u32"
      }
    ],
    type: "FeeDetails"
  }
};
var V1_TO_V3_SHARED_CALL = {
  query_call_fee_details: {
    description: "The call fee details",
    params: [
      {
        name: "call",
        type: "Call"
      },
      {
        name: "len",
        type: "u32"
      }
    ],
    type: "FeeDetails"
  }
};
var V2_TO_V4_SHARED_PAY = {
  query_info: {
    description: "The transaction info",
    params: [
      {
        name: "uxt",
        type: "Extrinsic"
      },
      {
        name: "len",
        type: "u32"
      }
    ],
    type: "RuntimeDispatchInfo"
  }
};
var V2_V3_SHARED_CALL = {
  query_call_info: {
    description: "The call info",
    params: [
      {
        name: "call",
        type: "Call"
      },
      {
        name: "len",
        type: "u32"
      }
    ],
    type: "RuntimeDispatchInfo"
  }
};
var V3_SHARED_PAY_CALL = {
  query_length_to_fee: {
    description: "Query the output of the current LengthToFee given some input",
    params: [
      {
        name: "length",
        type: "u32"
      }
    ],
    type: "Balance"
  },
  query_weight_to_fee: {
    description: "Query the output of the current WeightToFee given some input",
    params: [
      {
        name: "weight",
        type: "Weight"
      }
    ],
    type: "Balance"
  }
};
var runtime30 = {
  TransactionPaymentApi: [
    {
      // V4 is equivalent to V3 (V4 just dropped all V1 references)
      methods: {
        ...V3_SHARED_PAY_CALL,
        ...V2_TO_V4_SHARED_PAY,
        ...V1_TO_V4_SHARED_PAY
      },
      version: 4
    },
    {
      methods: {
        ...V3_SHARED_PAY_CALL,
        ...V2_TO_V4_SHARED_PAY,
        ...V1_TO_V4_SHARED_PAY
      },
      version: 3
    },
    {
      methods: {
        ...V2_TO_V4_SHARED_PAY,
        ...V1_TO_V4_SHARED_PAY
      },
      version: 2
    },
    {
      methods: {
        query_info: {
          description: "The transaction info",
          params: [
            {
              name: "uxt",
              type: "Extrinsic"
            },
            {
              name: "len",
              type: "u32"
            }
          ],
          // NOTE: _Should_ be V1 (as per current Substrate), however the interface was
          // changed mid-flight between versions. So we have some of each depending on
          // runtime. (We do detect the weight type, so correct)
          type: "RuntimeDispatchInfo"
        },
        ...V1_TO_V4_SHARED_PAY
      },
      version: 1
    }
  ],
  TransactionPaymentCallApi: [
    {
      methods: {
        ...V3_SHARED_PAY_CALL,
        ...V2_V3_SHARED_CALL,
        ...V1_TO_V3_SHARED_CALL
      },
      version: 3
    },
    {
      methods: {
        ...V2_V3_SHARED_CALL,
        ...V1_TO_V3_SHARED_CALL
      },
      version: 2
    },
    {
      methods: {
        CALL: {
          description: "The call info",
          params: [
            {
              name: "call",
              type: "Call"
            },
            {
              name: "len",
              type: "u32"
            }
          ],
          // NOTE: As per the above comment, the below is correct according to Substrate, but
          // _may_ yield fallback decoding on some versions of the runtime
          type: "RuntimeDispatchInfo"
        },
        ...V1_TO_V3_SHARED_CALL
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/payment/definitions.js
var definitions_default70 = {
  rpc: rpc16,
  runtime: runtime30,
  types: {
    FeeDetails: {
      inclusionFee: "Option<InclusionFee>"
      // skipped in serde
      // tip: 'Balance'
    },
    InclusionFee: {
      baseFee: "Balance",
      lenFee: "Balance",
      adjustedWeightFee: "Balance"
    },
    RuntimeDispatchInfo: {
      weight: "Weight",
      class: "DispatchClass",
      partialFee: "Balance"
    },
    RuntimeDispatchInfoV1: {
      weight: "WeightV1",
      class: "DispatchClass",
      partialFee: "Balance"
    },
    RuntimeDispatchInfoV2: {
      weight: "WeightV2",
      class: "DispatchClass",
      partialFee: "Balance"
    }
  }
};

// node_modules/@polkadot/types/interfaces/state/definitions.js
init_shim();

// node_modules/@polkadot/types/interfaces/state/rpc.js
init_shim();
var rpc17 = {
  call: {
    alias: ["state_callAt"],
    description: "Perform a call to a builtin on the chain",
    params: [
      {
        name: "method",
        type: "Text"
      },
      {
        name: "data",
        type: "Bytes"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Bytes"
  },
  getChildKeys: {
    description: "Retrieves the keys with prefix of a specific child storage",
    params: [
      {
        name: "childStorageKey",
        type: "StorageKey"
      },
      {
        name: "childDefinition",
        type: "StorageKey"
      },
      {
        name: "childType",
        type: "u32"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageKey>"
  },
  getChildReadProof: {
    description: "Returns proof of storage for child key entries at a specific block state.",
    params: [
      {
        name: "childStorageKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ReadProof"
  },
  getChildStorage: {
    description: "Retrieves the child storage for a key",
    params: [
      {
        name: "childStorageKey",
        type: "StorageKey"
      },
      {
        name: "childDefinition",
        type: "StorageKey"
      },
      {
        name: "childType",
        type: "u32"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "StorageData"
  },
  getChildStorageHash: {
    description: "Retrieves the child storage hash",
    params: [
      {
        name: "childStorageKey",
        type: "StorageKey"
      },
      {
        name: "childDefinition",
        type: "StorageKey"
      },
      {
        name: "childType",
        type: "u32"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Hash"
  },
  getChildStorageSize: {
    description: "Retrieves the child storage size",
    params: [
      {
        name: "childStorageKey",
        type: "StorageKey"
      },
      {
        name: "childDefinition",
        type: "StorageKey"
      },
      {
        name: "childType",
        type: "u32"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "u64"
  },
  getKeys: {
    deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
    description: "Retrieves the keys with a certain prefix",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageKey>"
  },
  getKeysPaged: {
    alias: ["state_getKeysPagedAt"],
    description: "Returns the keys with prefix with pagination support.",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        name: "count",
        type: "u32"
      },
      {
        isOptional: true,
        name: "startKey",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageKey>"
  },
  getMetadata: {
    description: "Returns the runtime metadata",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Metadata"
  },
  getPairs: {
    deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
    description: "Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)",
    isUnsafe: true,
    params: [
      {
        name: "prefix",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<KeyValue>"
  },
  getReadProof: {
    description: "Returns proof of storage entries at a specific block state",
    params: [
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ReadProof"
  },
  getRuntimeVersion: {
    alias: ["chain_getRuntimeVersion"],
    description: "Get the runtime version",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "RuntimeVersion"
  },
  getStorage: {
    alias: ["state_getStorageAt"],
    description: "Retrieves the storage for a key",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "StorageData"
  },
  getStorageHash: {
    alias: ["state_getStorageHashAt"],
    description: "Retrieves the storage hash",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Hash"
  },
  getStorageSize: {
    alias: ["state_getStorageSizeAt"],
    description: "Retrieves the storage size",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "u64"
  },
  queryStorage: {
    description: "Query historical storage entries (by key) starting from a start block",
    isUnsafe: true,
    params: [
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        name: "fromBlock",
        type: "Hash"
      },
      {
        isOptional: true,
        name: "toBlock",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageChangeSet>"
  },
  queryStorageAt: {
    description: "Query storage entries (by key) starting at block hash given as the second parameter",
    params: [
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageChangeSet>"
  },
  subscribeRuntimeVersion: {
    alias: ["chain_subscribeRuntimeVersion", "chain_unsubscribeRuntimeVersion"],
    description: "Retrieves the runtime version via subscription",
    params: [],
    pubsub: [
      "runtimeVersion",
      "subscribeRuntimeVersion",
      "unsubscribeRuntimeVersion"
    ],
    type: "RuntimeVersion"
  },
  subscribeStorage: {
    description: "Subscribes to storage changes for the provided keys",
    // NOTE Just marking it here to follow the logic - this is unsafe when no
    // keys are provided (i.e. subscribing to all), generally this is used
    // extensively with normal subscriptions
    // isUnsafe: true,
    params: [
      {
        isOptional: true,
        name: "keys",
        type: "Vec<StorageKey>"
      }
    ],
    pubsub: [
      "storage",
      "subscribeStorage",
      "unsubscribeStorage"
    ],
    type: "StorageChangeSet"
  },
  traceBlock: {
    description: "Provides a way to trace the re-execution of a single block",
    isUnsafe: true,
    params: [
      {
        name: "block",
        type: "Hash"
      },
      {
        name: "targets",
        type: "Option<Text>"
      },
      {
        name: "storageKeys",
        type: "Option<Text>"
      },
      {
        name: "methods",
        type: "Option<Text>"
      }
    ],
    type: "TraceBlockResponse"
  },
  trieMigrationStatus: {
    description: "Check current migration state",
    isUnsafe: true,
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "MigrationStatusResult"
  }
};

// node_modules/@polkadot/types/interfaces/state/definitions.js
var definitions_default71 = {
  rpc: rpc17,
  types: {
    ApiId: "[u8; 8]",
    BlockTrace: {
      blockHash: "Text",
      parentHash: "Text",
      tracingTargets: "Text",
      storageKeys: "Text",
      spans: "Vec<BlockTraceSpan>",
      events: "Vec<BlockTraceEvent>"
    },
    BlockTraceEvent: {
      target: "Text",
      data: "BlockTraceEventData",
      parentId: "Option<u64>"
    },
    BlockTraceEventData: {
      stringValues: "HashMap<Text, Text>"
    },
    BlockTraceSpan: {
      id: "u64",
      parentId: "Option<u64>",
      name: "Text",
      target: "Text",
      wasm: "bool"
    },
    KeyValueOption: "(StorageKey, Option<StorageData>)",
    MigrationStatusResult: {
      topRemainingToMigrate: "u64",
      childRemainingToMigrate: "u64"
    },
    ReadProof: {
      at: "Hash",
      proof: "Vec<Bytes>"
    },
    RuntimeVersionApi: "(ApiId, u32)",
    RuntimeVersion: {
      specName: "Text",
      implName: "Text",
      authoringVersion: "u32",
      specVersion: "u32",
      implVersion: "u32",
      apis: "Vec<RuntimeVersionApi>",
      transactionVersion: "u32",
      stateVersion: "u8"
    },
    RuntimeVersionPre4: {
      specName: "Text",
      implName: "Text",
      authoringVersion: "u32",
      specVersion: "u32",
      implVersion: "u32",
      apis: "Vec<RuntimeVersionApi>",
      transactionVersion: "u32"
    },
    RuntimeVersionPre3: {
      specName: "Text",
      implName: "Text",
      authoringVersion: "u32",
      specVersion: "u32",
      implVersion: "u32",
      apis: "Vec<RuntimeVersionApi>"
    },
    RuntimeVersionPartial: {
      specName: "Text",
      specVersion: "u32",
      apis: "Vec<RuntimeVersionApi>"
    },
    SpecVersion: "u32",
    StorageChangeSet: {
      block: "Hash",
      changes: "Vec<KeyValueOption>"
    },
    TraceBlockResponse: {
      _enum: {
        TraceError: "TraceError",
        BlockTrace: "BlockTrace"
      }
    },
    TraceError: {
      error: "Text"
    }
  }
};

// node_modules/@polkadot/types/interfaces/jsonrpc.js
init_shim();
var jsonrpc = {};
Object.keys(definitions_exports).forEach((s) => Object.entries(definitions_exports[s].rpc || {}).forEach(([method, def]) => {
  const section2 = def.aliasSection || s;
  if (!jsonrpc[section2]) {
    jsonrpc[section2] = {};
  }
  jsonrpc[section2][method] = objectSpread7({}, def, {
    isSubscription: !!def.pubsub,
    jsonrpc: `${section2}_${method}`,
    method,
    section: section2
  });
}));
var jsonrpc_default = jsonrpc;

// node_modules/@polkadot/types/metadata/PortableRegistry/index.js
init_shim();

// node_modules/@polkadot/types/metadata/PortableRegistry/PortableRegistry.js
init_shim();
var l9 = logger5("PortableRegistry");
var TYPE_UNWRAP = { toNumber: () => -1 };
var PRIMITIVE_ALIAS = {
  Char: "u32",
  Str: "Text"
};
var PATHS_ALIAS = splitNamespace([
  // full matching on exact names...
  // these are well-known types with additional encoding
  "sp_core::crypto::AccountId32",
  "sp_runtime::generic::era::Era",
  "sp_runtime::multiaddress::MultiAddress",
  // ethereum overrides (Frontier, Moonbeam, Polkadot claims)
  "fp_account::AccountId20",
  "account::AccountId20",
  "polkadot_runtime_common::claims::EthereumAddress",
  // weights 2 is a structure, however for 1.5. with a single field it
  // should be flatenned (can appear in Compact<Weight> extrinsics)
  "frame_support::weights::weight_v2::Weight",
  "sp_weights::weight_v2::Weight",
  // wildcard matching in place...
  // these have a specific encoding or logic, use a wildcard for {pallet, darwinia}_democracy
  "*_democracy::vote::Vote",
  "*_conviction_voting::vote::Vote",
  "*_identity::types::Data",
  // these are opaque Vec<u8> wrappers
  "sp_core::OpaqueMetadata",
  "sp_core::OpaquePeerId",
  "sp_core::offchain::OpaqueMultiaddr",
  // shorten some well-known types
  "primitive_types::*",
  "sp_arithmetic::per_things::*",
  // runtime
  "*_runtime::RuntimeCall",
  "*_runtime::RuntimeEvent",
  // ink!
  "ink::env::types::*",
  "ink::primitives::types::*",
  "ink_env::types::*",
  "ink_primitives::types::*",
  // noir
  "np_runtime::accountname::AccountName",
  "np_runtime::universaladdress::UniversalAddress"
]);
var PATHS_SET = splitNamespace([
  "pallet_identity::types::BitFlags"
]);
var BITVEC_NS_LSB = ["bitvec::order::Lsb0", "BitOrderLsb0"];
var BITVEC_NS_MSB = ["bitvec::order::Msb0", "BitOrderMsb0"];
var BITVEC_NS = [...BITVEC_NS_LSB, ...BITVEC_NS_MSB];
var WRAPPERS = ["BoundedBTreeMap", "BoundedBTreeSet", "BoundedVec", "Box", "BTreeMap", "BTreeSet", "Cow", "Option", "Range", "RangeInclusive", "Result", "WeakBoundedVec", "WrapperKeepOpaque", "WrapperOpaque"];
var RESERVED = [
  // JS reserved words
  "entries",
  "keys",
  "new",
  "size",
  // exposed by all Codec objects
  "hash",
  "registry"
];
var PATH_RM_INDEX_1 = ["generic", "misc", "pallet", "traits", "types"];
function sanitizeDocs(docs) {
  const count2 = docs.length;
  const result = new Array(count2);
  for (let i = 0; i < count2; i++) {
    result[i] = docs[i].toString();
  }
  return result;
}
function splitNamespace(values) {
  const count2 = values.length;
  const result = new Array(count2);
  for (let i = 0; i < count2; i++) {
    result[i] = values[i].split("::");
  }
  return result;
}
function matchParts(first2, second) {
  return first2.length === second.length && first2.every((a, index) => {
    const b = second[index].toString();
    if (a === "*" || a === b) {
      return true;
    }
    if (a.includes("*") && a.includes("_") && b.includes("_")) {
      let suba = a.split("_");
      let subb = b.split("_");
      if (suba[0] === "*") {
        const indexOf = subb.indexOf(suba[1]);
        if (indexOf !== -1) {
          suba = suba.slice(1);
          subb = subb.slice(indexOf);
        }
      }
      if (suba.length === 2 && suba[1] === "*" && suba[0] === subb[0]) {
        return true;
      }
      return matchParts(suba, subb);
    }
    return false;
  });
}
function getAliasPath({ def, path }) {
  if (["frame_support::weights::weight_v2::Weight", "sp_weights::weight_v2::Weight"].includes(path.join("::"))) {
    return !def.isComposite || def.asComposite.fields.length === 1 ? "WeightV1" : null;
  }
  return path.length && PATHS_ALIAS.some((a) => matchParts(a, path)) ? path[path.length - 1].toString() : null;
}
function extractNameFlat(portable, lookupIndex, params, path, isInternal = false) {
  const count2 = path.length;
  if (count2 === 0 || WRAPPERS.includes(path[count2 - 1].toString())) {
    return null;
  }
  const camels = new Array(count2);
  const lowers = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const c = stringPascalCase7(isInternal ? path[i].replace("pallet_", "") : path[i]);
    const l19 = c.toLowerCase();
    camels[i] = c;
    lowers[i] = l19;
  }
  let name = "";
  for (let i = 0; i < count2; i++) {
    const l19 = lowers[i];
    if (i !== 1 || !PATH_RM_INDEX_1.includes(l19)) {
      if (l19 !== lowers[i + 1]) {
        name += camels[i];
      }
    }
  }
  if (camels[1] === "RawOrigin" && count2 === 2 && params.length === 2 && params[1].type.isSome) {
    const instanceType = portable[params[1].type.unwrap().toNumber()];
    if (instanceType.type.path.length === 2) {
      name = `${name}${instanceType.type.path[1].toString()}`;
    }
  }
  return { lookupIndex, name, params };
}
function extractName(portable, lookupIndex, { type: { params, path } }) {
  return extractNameFlat(portable, lookupIndex, params, path);
}
function nextDupeMatches(name, startAt, names) {
  const result = [names[startAt]];
  for (let i = startAt + 1, count2 = names.length; i < count2; i++) {
    const v = names[i];
    if (v.name === name) {
      result.push(v);
    }
  }
  return result;
}
function rewriteDupes(input, rewrite) {
  const count2 = input.length;
  for (let i = 0; i < count2; i++) {
    const a = input[i];
    for (let j = i + 1; j < count2; j++) {
      const b = input[j];
      if (a.lookupIndex !== b.lookupIndex && a.name === b.name) {
        return false;
      }
    }
  }
  for (let i = 0; i < count2; i++) {
    const p = input[i];
    rewrite[p.lookupIndex] = p.name;
  }
  return true;
}
function removeDupeNames(lookup, portable, names) {
  const rewrite = {};
  return names.map((original, startAt) => {
    const { lookupIndex, name, params } = original;
    if (!name) {
      return null;
    } else if (rewrite[lookupIndex]) {
      return original;
    }
    const allSame = nextDupeMatches(name, startAt, names);
    if (allSame.length === 1) {
      return original;
    }
    const anyDiff = allSame.some((o) => params.length !== o.params.length || params.some((p, index) => !p.name.eq(o.params[index].name) || p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== o.params[index].type.unwrapOr(TYPE_UNWRAP).toNumber()));
    if (!anyDiff) {
      return original;
    }
    const paramIdx = params.findIndex(({ type }, index) => allSame.every(({ params: params2 }, aIndex) => params2[index].type.isSome && (aIndex === 0 || !params2[index].type.eq(type))));
    if (paramIdx === -1) {
      return original;
    }
    const sameCount = allSame.length;
    const adjusted = new Array(sameCount);
    for (let i = 0; i < sameCount; i++) {
      const { lookupIndex: lookupIndex2, name: name2, params: params2 } = allSame[i];
      const { def, path } = lookup.getSiType(params2[paramIdx].type.unwrap());
      if (!def.isPrimitive && !path.length) {
        return null;
      }
      adjusted[i] = {
        lookupIndex: lookupIndex2,
        name: def.isPrimitive ? `${name2}${def.asPrimitive.toString()}` : `${name2}${path[path.length - 1].toString()}`
      };
    }
    if (rewriteDupes(adjusted, rewrite)) {
      return original;
    }
    for (let i = 0; i < sameCount; i++) {
      const { lookupIndex: lookupIndex2, name: name2, params: params2 } = allSame[i];
      const { def, path } = lookup.getSiType(params2[paramIdx].type.unwrap());
      const flat = extractNameFlat(portable, lookupIndex2, params2, path, true);
      if (def.isPrimitive || !flat) {
        return null;
      }
      adjusted[i] = {
        lookupIndex: lookupIndex2,
        name: `${name2}${flat.name}`
      };
    }
    if (rewriteDupes(adjusted, rewrite)) {
      return original;
    }
    return null;
  }).filter((n) => !!n).map(({ lookupIndex, name, params }) => ({
    lookupIndex,
    name: rewrite[lookupIndex] || name,
    params
  }));
}
function registerTypes(lookup, lookups, names, params) {
  lookup.registry.register(lookups);
  if (params.SpRuntimeUncheckedExtrinsic) {
    const [addrParam, , sigParam] = params.SpRuntimeUncheckedExtrinsic;
    const siAddress = lookup.getSiType(addrParam.type.unwrap());
    const siSignature = lookup.getSiType(sigParam.type.unwrap());
    const nsSignature = siSignature.path.join("::");
    let nsAccountId = siAddress.path.join("::");
    const isMultiAddress = nsAccountId === "sp_runtime::multiaddress::MultiAddress";
    if (isMultiAddress) {
      const [idParam] = siAddress.params;
      nsAccountId = lookup.getSiType(idParam.type.unwrap()).path.join("::");
    }
    lookup.registry.register({
      // known: account::AccountId20, fp_account::AccountId20, primitive_types::H160
      AccountId: nsAccountId.endsWith("::AccountId20") || nsAccountId.endsWith("::H160") ? "AccountId20" : "AccountId32",
      Address: isMultiAddress ? "MultiAddress" : "AccountId",
      ExtrinsicSignature: ["sp_runtime::MultiSignature"].includes(nsSignature) ? "MultiSignature" : names[sigParam.type.unwrap().toNumber()] || "MultiSignature"
    });
  }
}
function extractAliases(params, isContract) {
  const hasParams = Object.keys(params).some((k) => !k.startsWith("Pallet"));
  const alias2 = {};
  if (params.SpRuntimeUncheckedExtrinsic) {
    const [, { type }] = params.SpRuntimeUncheckedExtrinsic;
    alias2[type.unwrap().toNumber()] = "Call";
  } else if (hasParams && !isContract) {
    l9.warn("Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic");
  }
  if (params.FrameSystemEventRecord) {
    const [{ type }] = params.FrameSystemEventRecord;
    alias2[type.unwrap().toNumber()] = "Event";
  } else if (hasParams && !isContract) {
    l9.warn("Unable to determine runtime Event type, cannot inspect frame_system::EventRecord");
  }
  return alias2;
}
function extractTypeInfo(lookup, portable) {
  const nameInfo = [];
  const types6 = {};
  for (let i = 0, count2 = portable.length; i < count2; i++) {
    const type = portable[i];
    const lookupIndex = type.id.toNumber();
    const extracted = extractName(portable, lookupIndex, portable[i]);
    if (extracted) {
      nameInfo.push(extracted);
    }
    types6[lookupIndex] = type;
  }
  const lookups = {};
  const names = {};
  const params = {};
  const dedup = removeDupeNames(lookup, portable, nameInfo);
  for (let i = 0, count2 = dedup.length; i < count2; i++) {
    const { lookupIndex, name, params: p } = dedup[i];
    names[lookupIndex] = name;
    lookups[name] = lookup.registry.createLookupType(lookupIndex);
    params[name] = p;
  }
  return { lookups, names, params, types: types6 };
}
var PortableRegistry = class extends Struct {
  constructor(registry, value, isContract) {
    super(registry, {
      types: "Vec<PortableType>"
    }, value);
    this.__internal__typeDefs = {};
    const { lookups, names, params, types: types6 } = extractTypeInfo(this, this.types);
    this.__internal__alias = extractAliases(params, isContract);
    this.__internal__lookups = lookups;
    this.__internal__names = names;
    this.__internal__params = params;
    this.__internal__types = types6;
  }
  /**
   * @description Returns all the available type names for this chain
   **/
  get names() {
    return Object.values(this.__internal__names).sort();
  }
  /**
   * @description Returns all the available parameterized types for this chain
   **/
  get paramTypes() {
    return this.__internal__params;
  }
  /**
   * @description The types of the registry
   */
  get types() {
    return this.getT("types");
  }
  /**
   * @description Register all available types into the registry (generally for internal usage)
   */
  register() {
    registerTypes(this, this.__internal__lookups, this.__internal__names, this.__internal__params);
  }
  /**
   * @description Returns the name for a specific lookup
   */
  getName(lookupId) {
    return this.__internal__names[this.__internal__getLookupId(lookupId)];
  }
  /**
   * @description Finds a specific type in the registry
   */
  getSiType(lookupId) {
    const found = (this.__internal__types || this.types)[this.__internal__getLookupId(lookupId)];
    if (!found) {
      throw new Error(`PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
    }
    return found.type;
  }
  /**
   * @description Lookup the type definition for the index
   */
  getTypeDef(lookupId) {
    const lookupIndex = this.__internal__getLookupId(lookupId);
    if (!this.__internal__typeDefs[lookupIndex]) {
      const lookupName = this.__internal__names[lookupIndex];
      const empty3 = {
        info: TypeDefInfo.DoNotConstruct,
        lookupIndex,
        lookupName,
        type: this.registry.createLookupType(lookupIndex)
      };
      if (lookupName) {
        this.__internal__typeDefs[lookupIndex] = empty3;
      }
      const extracted = this.__internal__extract(this.getSiType(lookupId), lookupIndex);
      if (!lookupName) {
        this.__internal__typeDefs[lookupIndex] = empty3;
      }
      Object.keys(extracted).forEach((k) => {
        if (k !== "lookupName" || extracted[k]) {
          this.__internal__typeDefs[lookupIndex][k] = extracted[k];
        }
      });
      if (extracted.info === TypeDefInfo.Plain) {
        this.__internal__typeDefs[lookupIndex].lookupNameRoot = this.__internal__typeDefs[lookupIndex].lookupName;
        delete this.__internal__typeDefs[lookupIndex].lookupName;
      }
    }
    return this.__internal__typeDefs[lookupIndex];
  }
  /**
   * @description For a specific field, perform adjustments to not have built-in conflicts
   */
  sanitizeField(name) {
    let nameField = null;
    let nameOrig = null;
    if (name.isSome) {
      nameField = stringCamelCase8(name.unwrap());
      if (nameField.includes("#")) {
        nameOrig = nameField;
        nameField = nameOrig.replace(/#/g, "_");
      } else if (RESERVED.includes(nameField)) {
        nameOrig = nameField;
        nameField = `${nameField}_`;
      }
    }
    return [nameField, nameOrig];
  }
  /** @internal Creates a TypeDef based on an internal lookupId */
  __internal__createSiDef(lookupId) {
    const typeDef = this.getTypeDef(lookupId);
    const lookupIndex = lookupId.toNumber();
    return [TypeDefInfo.DoNotConstruct, TypeDefInfo.Enum, TypeDefInfo.Struct].includes(typeDef.info) && typeDef.lookupName ? {
      docs: typeDef.docs,
      info: TypeDefInfo.Si,
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex],
      type: this.registry.createLookupType(lookupId)
    } : typeDef;
  }
  /** @internal Converts a lookupId input to the actual lookup index */
  __internal__getLookupId(lookupId) {
    if (isString8(lookupId)) {
      if (!this.registry.isLookupType(lookupId)) {
        throw new Error(`PortableRegistry: Expected a lookup string type, found ${lookupId}`);
      }
      return parseInt(lookupId.replace("Lookup", ""), 10);
    } else if (isNumber8(lookupId)) {
      return lookupId;
    }
    return lookupId.toNumber();
  }
  /** @internal Converts a type into a TypeDef for Codec usage */
  __internal__extract(type, lookupIndex) {
    const namespace = type.path.join("::");
    let typeDef;
    const aliasType = this.__internal__alias[lookupIndex] || getAliasPath(type);
    try {
      if (aliasType) {
        typeDef = this.__internal__extractAliasPath(lookupIndex, aliasType);
      } else {
        switch (type.def.type) {
          case "Array":
            typeDef = this.__internal__extractArray(lookupIndex, type.def.asArray);
            break;
          case "BitSequence":
            typeDef = this.__internal__extractBitSequence(lookupIndex, type.def.asBitSequence);
            break;
          case "Compact":
            typeDef = this.__internal__extractCompact(lookupIndex, type.def.asCompact);
            break;
          case "Composite":
            typeDef = this.__internal__extractComposite(lookupIndex, type, type.def.asComposite);
            break;
          case "HistoricMetaCompat":
            typeDef = this.__internal__extractHistoric(lookupIndex, type.def.asHistoricMetaCompat);
            break;
          case "Primitive":
            typeDef = this.__internal__extractPrimitive(lookupIndex, type);
            break;
          case "Sequence":
            typeDef = this.__internal__extractSequence(lookupIndex, type.def.asSequence);
            break;
          case "Tuple":
            typeDef = this.__internal__extractTuple(lookupIndex, type.def.asTuple);
            break;
          case "Variant":
            typeDef = this.__internal__extractVariant(lookupIndex, type, type.def.asVariant);
            break;
          default:
            assertUnreachable(type.def.type);
        }
      }
    } catch (error) {
      throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ""}: Error extracting ${stringify7(type)}: ${error.message}`);
    }
    return objectSpread7({
      docs: sanitizeDocs(type.docs),
      namespace
    }, typeDef);
  }
  /** @internal Extracts a ScaleInfo Array into TypeDef.VecFixed */
  __internal__extractArray(_, { len, type }) {
    const length = len.toNumber();
    if (length > 2048) {
      throw new Error("Only support for [Type; <length>], where length <= 2048");
    }
    return withTypeString(this.registry, {
      info: TypeDefInfo.VecFixed,
      length,
      sub: this.__internal__createSiDef(type)
    });
  }
  /** @internal Extracts a ScaleInfo BitSequence into TypeDef.Plain */
  __internal__extractBitSequence(_, { bitOrderType, bitStoreType }) {
    const a = this.__internal__createSiDef(bitOrderType);
    const b = this.__internal__createSiDef(bitStoreType);
    const [bitOrder, bitStore] = BITVEC_NS.includes(a.namespace || "") ? [a, b] : [b, a];
    if (!bitOrder.namespace || !BITVEC_NS.includes(bitOrder.namespace)) {
      throw new Error(`Unexpected bitOrder found as ${bitOrder.namespace || "<unknown>"}`);
    } else if (bitStore.info !== TypeDefInfo.Plain || bitStore.type !== "u8") {
      throw new Error(`Only u8 bitStore is currently supported, found ${bitStore.type}`);
    }
    const isLsb = BITVEC_NS_LSB.includes(bitOrder.namespace);
    if (!isLsb) {
    }
    return {
      info: TypeDefInfo.Plain,
      type: "BitVec"
    };
  }
  /** @internal Extracts a ScaleInfo Compact into TypeDef.Compact */
  __internal__extractCompact(_, { type }) {
    return withTypeString(this.registry, {
      info: TypeDefInfo.Compact,
      sub: this.__internal__createSiDef(type)
    });
  }
  /** @internal Extracts a ScaleInfo Composite into TypeDef.{BTree*, Range*, Wrapper*} */
  __internal__extractComposite(lookupIndex, { params, path }, { fields }) {
    if (path.length) {
      const pathFirst = path[0].toString();
      const pathLast = path[path.length - 1].toString();
      if (path.length === 1 && pathFirst === "BTreeMap") {
        if (params.length !== 2) {
          throw new Error(`BTreeMap requires 2 parameters, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.BTreeMap,
          sub: params.map(({ type }) => this.__internal__createSiDef(type.unwrap()))
        });
      } else if (path.length === 1 && pathFirst === "BTreeSet") {
        if (params.length !== 1) {
          throw new Error(`BTreeSet requires 1 parameter, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.BTreeSet,
          sub: this.__internal__createSiDef(params[0].type.unwrap())
        });
      } else if (["Range", "RangeInclusive"].includes(pathFirst)) {
        if (params.length !== 1) {
          throw new Error(`Range requires 1 parameter, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: pathFirst === "Range" ? TypeDefInfo.Range : TypeDefInfo.RangeInclusive,
          sub: this.__internal__createSiDef(params[0].type.unwrap()),
          type: pathFirst
        });
      } else if (["WrapperKeepOpaque", "WrapperOpaque"].includes(pathLast)) {
        if (params.length !== 1) {
          throw new Error(`WrapperOpaque requires 1 parameter, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: pathLast === "WrapperKeepOpaque" ? TypeDefInfo.WrapperKeepOpaque : TypeDefInfo.WrapperOpaque,
          sub: this.__internal__createSiDef(params[0].type.unwrap()),
          type: pathLast
        });
      }
    }
    return PATHS_SET.some((p) => matchParts(p, path)) ? this.__internal__extractCompositeSet(lookupIndex, params, fields) : this.__internal__extractFields(lookupIndex, fields);
  }
  /** @internal Extracts a ScaleInfo CompositeSet into TypeDef.Set */
  __internal__extractCompositeSet(_, params, fields) {
    if (params.length !== 1 || fields.length !== 1) {
      throw new Error("Set handling expects param/field as single entries");
    }
    return withTypeString(this.registry, {
      info: TypeDefInfo.Set,
      length: this.registry.createTypeUnsafe(this.registry.createLookupType(fields[0].type), []).bitLength(),
      sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({ index, name }) => ({
        // This will be an issue > 2^53 - 1 ... don't have those (yet)
        index: index.toNumber(),
        info: TypeDefInfo.Plain,
        name: name.toString(),
        type: "Null"
      }))
    });
  }
  /** @internal Extracts ScaleInfo enum/struct fields into TypeDef.{Struct, Tuple} */
  __internal__extractFields(lookupIndex, fields) {
    let isStruct = true;
    let isTuple = true;
    const count2 = fields.length;
    for (let f = 0; f < count2; f++) {
      const { name } = fields[f];
      isStruct = isStruct && name.isSome;
      isTuple = isTuple && name.isNone;
    }
    if (!isTuple && !isStruct) {
      throw new Error("Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)");
    }
    if (count2 === 0) {
      return {
        info: TypeDefInfo.Null,
        type: "Null"
      };
    } else if (isTuple && count2 === 1) {
      const typeDef = this.__internal__createSiDef(fields[0].type);
      return objectSpread7({}, typeDef, lookupIndex === -1 ? null : {
        lookupIndex,
        lookupName: this.__internal__names[lookupIndex],
        lookupNameRoot: typeDef.lookupName
      }, fields[0].typeName.isSome ? { typeName: sanitize(fields[0].typeName.unwrap()) } : null);
    }
    const [sub, alias2] = this.__internal__extractFieldsAlias(fields);
    return withTypeString(this.registry, objectSpread7({
      info: isTuple ? TypeDefInfo.Tuple : TypeDefInfo.Struct,
      sub
    }, alias2.size ? { alias: alias2 } : null, lookupIndex === -1 ? null : {
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex]
    }));
  }
  /** @internal Apply field aliassed (with no JS conflicts) */
  __internal__extractFieldsAlias(fields) {
    const alias2 = /* @__PURE__ */ new Map();
    const count2 = fields.length;
    const sub = new Array(count2);
    for (let i = 0; i < count2; i++) {
      const { docs, name, type, typeName } = fields[i];
      const typeDef = this.__internal__createSiDef(type);
      if (name.isNone) {
        sub[i] = typeDef;
      } else {
        const [nameField, nameOrig] = this.sanitizeField(name);
        if (nameField && nameOrig) {
          alias2.set(nameField, nameOrig);
        }
        sub[i] = objectSpread7({
          docs: sanitizeDocs(docs),
          name: nameField
        }, typeDef, typeName.isSome ? { typeName: sanitize(typeName.unwrap()) } : null);
      }
    }
    return [sub, alias2];
  }
  /** @internal Extracts an internal Historic (pre V14) type  */
  __internal__extractHistoric(_, type) {
    return objectSpread7({
      displayName: type.toString(),
      isFromSi: true
    }, getTypeDef(type));
  }
  /** @internal Extracts a ScaleInfo Primitive into TypeDef.Plain */
  __internal__extractPrimitive(_, type) {
    const typeStr = type.def.asPrimitive.type.toString();
    return {
      info: TypeDefInfo.Plain,
      type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
    };
  }
  /** @internal Applies an alias path onto the TypeDef */
  __internal__extractAliasPath(_, type) {
    return {
      info: TypeDefInfo.Plain,
      type
    };
  }
  /** @internal Extracts a ScaleInfo Sequence into TypeDef.Vec (with Bytes shortcut) */
  __internal__extractSequence(lookupIndex, { type }) {
    const sub = this.__internal__createSiDef(type);
    if (sub.type === "u8") {
      return {
        info: TypeDefInfo.Plain,
        type: "Bytes"
      };
    }
    return withTypeString(this.registry, {
      info: TypeDefInfo.Vec,
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex],
      sub
    });
  }
  /** @internal Extracts a ScaleInfo Tuple into TypeDef.Tuple */
  __internal__extractTuple(lookupIndex, ids) {
    if (ids.length === 0) {
      return {
        info: TypeDefInfo.Null,
        type: "Null"
      };
    } else if (ids.length === 1) {
      return this.getTypeDef(ids[0]);
    }
    const sub = ids.map((t) => this.__internal__createSiDef(t));
    return withTypeString(this.registry, {
      info: TypeDefInfo.Tuple,
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex],
      sub
    });
  }
  /** @internal Extracts a ScaleInfo Variant into TypeDef.{Option, Result, Enum} */
  __internal__extractVariant(lookupIndex, { params, path }, { variants }) {
    if (path.length) {
      const specialVariant = path[0].toString();
      if (specialVariant === "Option") {
        if (params.length !== 1) {
          throw new Error(`Option requires 1 parameter, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.Option,
          sub: this.__internal__createSiDef(params[0].type.unwrap())
        });
      } else if (specialVariant === "Result") {
        if (params.length !== 2) {
          throw new Error(`Result requires 2 parameters, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.Result,
          sub: params.map(({ type }, index) => objectSpread7({
            name: ["Ok", "Error"][index]
          }, this.__internal__createSiDef(type.unwrap())))
        });
      }
    }
    if (variants.length === 0) {
      return {
        info: TypeDefInfo.Null,
        type: "Null"
      };
    }
    return this.__internal__extractVariantEnum(lookupIndex, variants);
  }
  /** @internal Extracts a ScaleInfo Variant into TypeDef.Enum */
  __internal__extractVariantEnum(lookupIndex, variants) {
    const sub = [];
    variants.slice().sort((a, b) => a.index.cmp(b.index)).forEach(({ fields, index: bnIndex, name }) => {
      const index = bnIndex.toNumber();
      while (sub.length !== index) {
        sub.push({
          index: sub.length,
          info: TypeDefInfo.Null,
          name: `__Unused${sub.length}`,
          type: "Null"
        });
      }
      sub.push(objectSpread7(this.__internal__extractFields(-1, fields), {
        index,
        name: name.toString()
      }));
    });
    return withTypeString(this.registry, {
      info: TypeDefInfo.Enum,
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex],
      sub
    });
  }
};

// node_modules/@polkadot/types/metadata/PortableRegistry/toV1.js
init_shim();
function convertType(key) {
  return (registry, { type }) => registry.createType("Si1TypeDef", {
    [key]: {
      type: type.toNumber()
    }
  });
}
var convertCompact = convertType("Compact");
var convertSequence = convertType("Sequence");

// node_modules/@polkadot/types/util/index.js
init_shim();

// node_modules/@polkadot/types/util/storage.js
init_shim();

// node_modules/@polkadot/types/metadata/util/index.js
init_shim();

// node_modules/@polkadot/types/metadata/util/flattenUniq.js
init_shim();
function flattenUniq(list, result = []) {
  for (let i = 0, count2 = list.length; i < count2; i++) {
    const entry = list[i];
    if (Array.isArray(entry)) {
      flattenUniq(entry, result);
    } else {
      result.push(entry);
    }
  }
  return [...new Set(result)];
}

// node_modules/@polkadot/types/metadata/util/getSiName.js
init_shim();
function getSiName(lookup, type) {
  const typeDef = lookup.getTypeDef(type);
  return typeDef.lookupName || typeDef.type;
}

// node_modules/@polkadot/types/metadata/util/getUniqTypes.js
init_shim();

// node_modules/@polkadot/types/metadata/util/validateTypes.js
init_shim();

// node_modules/@polkadot/types/metadata/util/extractTypes.js
init_shim();
function extractSubSingle(_, { sub }) {
  const { lookupName, type } = sub;
  return extractTypes([lookupName || type]);
}
function extractSubArray(_, { sub }) {
  return extractTypes(sub.map(({ lookupName, type }) => lookupName || type));
}
function unhandled(type, { info: info6 }) {
  throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${TypeDefInfo[info6]})`);
}
var mapping = {
  [TypeDefInfo.BTreeMap]: extractSubArray,
  [TypeDefInfo.BTreeSet]: extractSubSingle,
  [TypeDefInfo.Compact]: extractSubSingle,
  [TypeDefInfo.DoNotConstruct]: unhandled,
  [TypeDefInfo.Enum]: extractSubArray,
  [TypeDefInfo.HashMap]: extractSubArray,
  [TypeDefInfo.Int]: unhandled,
  [TypeDefInfo.Linkage]: extractSubSingle,
  [TypeDefInfo.Null]: unhandled,
  [TypeDefInfo.Option]: extractSubSingle,
  [TypeDefInfo.Plain]: (_, typeDef) => typeDef.lookupName || typeDef.type,
  [TypeDefInfo.Range]: extractSubSingle,
  [TypeDefInfo.RangeInclusive]: extractSubSingle,
  [TypeDefInfo.Result]: extractSubArray,
  [TypeDefInfo.Set]: extractSubArray,
  [TypeDefInfo.Si]: unhandled,
  [TypeDefInfo.Struct]: extractSubArray,
  [TypeDefInfo.Tuple]: extractSubArray,
  [TypeDefInfo.UInt]: unhandled,
  [TypeDefInfo.Vec]: extractSubSingle,
  [TypeDefInfo.VecFixed]: extractSubSingle,
  [TypeDefInfo.WrapperKeepOpaque]: extractSubSingle,
  [TypeDefInfo.WrapperOpaque]: extractSubSingle
};
function extractTypes(types6) {
  const count2 = types6.length;
  const result = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const type = types6[i];
    const typeDef = getTypeDef(type);
    result[i] = mapping[typeDef.info](type, typeDef);
  }
  return result;
}

// node_modules/@polkadot/types/metadata/util/validateTypes.js
var l10 = logger5("metadata");
function validateTypes(registry, throwError2, types6) {
  const missing = flattenUniq(extractTypes(types6)).filter((type) => !registry.hasType(type) && !registry.isLookupType(type)).sort();
  if (missing.length !== 0) {
    const message = `Unknown types found, no types for ${missing.join(", ")}`;
    if (throwError2) {
      throw new Error(message);
    } else {
      l10.warn(message);
    }
  }
  return types6;
}

// node_modules/@polkadot/types/metadata/util/getUniqTypes.js
function extractTypes2(lookup, types6) {
  return types6.map(({ type }) => lookup.getTypeDef(type).type);
}
function extractFieldTypes(lookup, type) {
  return lookup.getSiType(type).def.asVariant.variants.map(({ fields }) => extractTypes2(lookup, fields));
}
function getPalletNames({ lookup, pallets }) {
  return pallets.reduce((all3, { calls, constants, events: events2, storage }) => {
    all3.push([extractTypes2(lookup, constants)]);
    if (calls.isSome) {
      all3.push(extractFieldTypes(lookup, calls.unwrap().type));
    }
    if (events2.isSome) {
      all3.push(extractFieldTypes(lookup, events2.unwrap().type));
    }
    if (storage.isSome) {
      all3.push(storage.unwrap().items.map(({ type }) => {
        if (type.isPlain) {
          return [lookup.getTypeDef(type.asPlain).type];
        }
        const { hashers, key, value } = type.asMap;
        return hashers.length === 1 ? [
          lookup.getTypeDef(value).type,
          lookup.getTypeDef(key).type
        ] : [
          lookup.getTypeDef(value).type,
          ...lookup.getSiType(key).def.asTuple.map((t) => lookup.getTypeDef(t).type)
        ];
      }));
    }
    return all3;
  }, []);
}
function getUniqTypes(registry, meta, throwError2) {
  return validateTypes(registry, throwError2, flattenUniq(getPalletNames(meta)));
}

// node_modules/@polkadot/types/metadata/util/toCallsOnly.js
init_shim();
function trimDocs(docs) {
  const strings = docs.map((d) => d.toString().trim());
  const firstEmpty = strings.findIndex((d) => !d.length);
  return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
}
function toCallsOnly(registry, { extrinsic, lookup, pallets }) {
  return registry.createTypeUnsafe("MetadataLatest", [{
    extrinsic,
    lookup: {
      types: lookup.types.map(({ id, type }) => registry.createTypeUnsafe("PortableType", [{
        id,
        type: objectSpread7({}, type, { docs: trimDocs(type.docs) })
      }]))
    },
    pallets: pallets.map(({ calls, index, name }) => ({
      calls: registry.createTypeUnsafe("Option<PalletCallMetadataLatest>", [calls.unwrapOr(null)]),
      index,
      name
    }))
  }]).toJSON();
}

// node_modules/@polkadot/types/util/storage.js
function unwrapStorageSi(type) {
  return type.isPlain ? type.asPlain : type.asMap.value;
}
function unwrapStorageType(registry, type, isOptional) {
  const outputType = getSiName(registry.lookup, unwrapStorageSi(type));
  return isOptional ? `Option<${outputType}>` : outputType;
}

// node_modules/@polkadot/types/codec/index.js
init_shim();

// node_modules/@polkadot/types/create/index.js
init_shim();

// node_modules/@polkadot/types/create/createClass.js
init_shim();

// node_modules/@polkadot/types/create/createType.js
init_shim();

// node_modules/@polkadot/types/create/lazy.js
init_shim();
function lazyVariants(lookup, { type }, getName, creator) {
  const result = {};
  const variants = lookup.getSiType(type).def.asVariant.variants;
  for (let i = 0, count2 = variants.length; i < count2; i++) {
    lazyMethod4(result, variants[i], creator, getName, i);
  }
  return result;
}

// node_modules/@polkadot/types/create/registry.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/detectPackage.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/detectOther.js
init_shim();
var detectOther_default22 = [packageInfo28, packageInfo40, packageInfo];

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/packageInfo.js
init_shim();
var packageInfo48 = { name: "@polkadot/util-crypto", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/detectPackage.js
detectPackage8(packageInfo48, null, detectOther_default22);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/bundle.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/bundleInit.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/crypto.js
init_shim();
function cryptoWaitReady2() {
  return waitReady().then(() => {
    if (!isReady()) {
      throw new Error("Unable to initialize @polkadot/util-crypto");
    }
    return true;
  }).catch(() => false);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/bundleInit.js
cryptoWaitReady2().catch(() => {
});

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/addressToEvm.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/decode.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/base58/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/base58/bs58.js
init_shim();

// node_modules/@polkadot/types/node_modules/@scure/base/lib/esm/index.js
init_shim();
function assertNumber2(n) {
  if (!Number.isSafeInteger(n))
    throw new Error(`Wrong integer: ${n}`);
}
function chain2(...args) {
  const wrap = (a, b) => (c) => a(b(c));
  const encode = Array.from(args).reverse().reduce((acc, i) => acc ? wrap(acc, i.encode) : i.encode, void 0);
  const decode2 = args.reduce((acc, i) => acc ? wrap(acc, i.decode) : i.decode, void 0);
  return { encode, decode: decode2 };
}
function alphabet2(alphabet5) {
  return {
    encode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return digits.map((i) => {
        assertNumber2(i);
        if (i < 0 || i >= alphabet5.length)
          throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet5.length})`);
        return alphabet5[i];
      });
    },
    decode: (input) => {
      if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
        throw new Error("alphabet.decode input should be array of strings");
      return input.map((letter) => {
        if (typeof letter !== "string")
          throw new Error(`alphabet.decode: not string element=${letter}`);
        const index = alphabet5.indexOf(letter);
        if (index === -1)
          throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet5}`);
        return index;
      });
    }
  };
}
function join2(separator = "") {
  if (typeof separator !== "string")
    throw new Error("join separator should be string");
  return {
    encode: (from2) => {
      if (!Array.isArray(from2) || from2.length && typeof from2[0] !== "string")
        throw new Error("join.encode input should be array of strings");
      for (let i of from2)
        if (typeof i !== "string")
          throw new Error(`join.encode: non-string input=${i}`);
      return from2.join(separator);
    },
    decode: (to) => {
      if (typeof to !== "string")
        throw new Error("join.decode input should be string");
      return to.split(separator);
    }
  };
}
function padding2(bits, chr = "=") {
  assertNumber2(bits);
  if (typeof chr !== "string")
    throw new Error("padding chr should be string");
  return {
    encode(data) {
      if (!Array.isArray(data) || data.length && typeof data[0] !== "string")
        throw new Error("padding.encode input should be array of strings");
      for (let i of data)
        if (typeof i !== "string")
          throw new Error(`padding.encode: non-string input=${i}`);
      while (data.length * bits % 8)
        data.push(chr);
      return data;
    },
    decode(input) {
      if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
        throw new Error("padding.encode input should be array of strings");
      for (let i of input)
        if (typeof i !== "string")
          throw new Error(`padding.decode: non-string input=${i}`);
      let end = input.length;
      if (end * bits % 8)
        throw new Error("Invalid padding: string should have whole number of bytes");
      for (; end > 0 && input[end - 1] === chr; end--) {
        if (!((end - 1) * bits % 8))
          throw new Error("Invalid padding: string has too much padding");
      }
      return input.slice(0, end);
    }
  };
}
function normalize3(fn) {
  if (typeof fn !== "function")
    throw new Error("normalize fn should be function");
  return { encode: (from2) => from2, decode: (to) => fn(to) };
}
function convertRadix3(data, from2, to) {
  if (from2 < 2)
    throw new Error(`convertRadix: wrong from=${from2}, base cannot be less than 2`);
  if (to < 2)
    throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
  if (!Array.isArray(data))
    throw new Error("convertRadix: data should be array");
  if (!data.length)
    return [];
  let pos = 0;
  const res = [];
  const digits = Array.from(data);
  digits.forEach((d) => {
    assertNumber2(d);
    if (d < 0 || d >= from2)
      throw new Error(`Wrong integer: ${d}`);
  });
  while (true) {
    let carry = 0;
    let done = true;
    for (let i = pos; i < digits.length; i++) {
      const digit = digits[i];
      const digitBase = from2 * carry + digit;
      if (!Number.isSafeInteger(digitBase) || from2 * carry / from2 !== carry || digitBase - digit !== from2 * carry) {
        throw new Error("convertRadix: carry overflow");
      }
      carry = digitBase % to;
      const rounded = Math.floor(digitBase / to);
      digits[i] = rounded;
      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
        throw new Error("convertRadix: carry overflow");
      if (!done)
        continue;
      else if (!rounded)
        pos = i;
      else
        done = false;
    }
    res.push(carry);
    if (done)
      break;
  }
  for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
    res.push(0);
  return res.reverse();
}
var gcd2 = (
  /* @__NO_SIDE_EFFECTS__ */
  (a, b) => !b ? a : gcd2(b, a % b)
);
var radix2carry2 = (
  /*@__NO_SIDE_EFFECTS__ */
  (from2, to) => from2 + (to - gcd2(from2, to))
);
function convertRadix22(data, from2, to, padding5) {
  if (!Array.isArray(data))
    throw new Error("convertRadix2: data should be array");
  if (from2 <= 0 || from2 > 32)
    throw new Error(`convertRadix2: wrong from=${from2}`);
  if (to <= 0 || to > 32)
    throw new Error(`convertRadix2: wrong to=${to}`);
  if (radix2carry2(from2, to) > 32) {
    throw new Error(`convertRadix2: carry overflow from=${from2} to=${to} carryBits=${radix2carry2(from2, to)}`);
  }
  let carry = 0;
  let pos = 0;
  const mask = 2 ** to - 1;
  const res = [];
  for (const n of data) {
    assertNumber2(n);
    if (n >= 2 ** from2)
      throw new Error(`convertRadix2: invalid data word=${n} from=${from2}`);
    carry = carry << from2 | n;
    if (pos + from2 > 32)
      throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from2}`);
    pos += from2;
    for (; pos >= to; pos -= to)
      res.push((carry >> pos - to & mask) >>> 0);
    carry &= 2 ** pos - 1;
  }
  carry = carry << to - pos & mask;
  if (!padding5 && pos >= from2)
    throw new Error("Excess padding");
  if (!padding5 && carry)
    throw new Error(`Non-zero padding: ${carry}`);
  if (padding5 && pos > 0)
    res.push(carry >>> 0);
  return res;
}
function radix3(num) {
  assertNumber2(num);
  return {
    encode: (bytes5) => {
      if (!(bytes5 instanceof Uint8Array))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix3(Array.from(bytes5), 2 ** 8, num);
    },
    decode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("radix.decode input should be array of strings");
      return Uint8Array.from(convertRadix3(digits, num, 2 ** 8));
    }
  };
}
function radix22(bits, revPadding = false) {
  assertNumber2(bits);
  if (bits <= 0 || bits > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (radix2carry2(8, bits) > 32 || radix2carry2(bits, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (bytes5) => {
      if (!(bytes5 instanceof Uint8Array))
        throw new Error("radix2.encode input should be Uint8Array");
      return convertRadix22(Array.from(bytes5), 8, bits, !revPadding);
    },
    decode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("radix2.decode input should be array of strings");
      return Uint8Array.from(convertRadix22(digits, bits, 8, revPadding));
    }
  };
}
function unsafeWrapper2(fn) {
  if (typeof fn !== "function")
    throw new Error("unsafeWrapper fn should be function");
  return function(...args) {
    try {
      return fn.apply(null, args);
    } catch (e) {
    }
  };
}
function checksum2(len, fn) {
  assertNumber2(len);
  if (typeof fn !== "function")
    throw new Error("checksum fn should be function");
  return {
    encode(data) {
      if (!(data instanceof Uint8Array))
        throw new Error("checksum.encode: input should be Uint8Array");
      const checksum5 = fn(data).slice(0, len);
      const res = new Uint8Array(data.length + len);
      res.set(data);
      res.set(checksum5, data.length);
      return res;
    },
    decode(data) {
      if (!(data instanceof Uint8Array))
        throw new Error("checksum.decode: input should be Uint8Array");
      const payload = data.slice(0, -len);
      const newChecksum = fn(payload).slice(0, len);
      const oldChecksum = data.slice(-len);
      for (let i = 0; i < len; i++)
        if (newChecksum[i] !== oldChecksum[i])
          throw new Error("Invalid checksum");
      return payload;
    }
  };
}
var utils2 = { alphabet: alphabet2, chain: chain2, checksum: checksum2, radix: radix3, radix2: radix22, join: join2, padding: padding2 };
var base162 = chain2(radix22(4), alphabet2("0123456789ABCDEF"), join2(""));
var base322 = chain2(radix22(5), alphabet2("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding2(5), join2(""));
var base32hex2 = chain2(radix22(5), alphabet2("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding2(5), join2(""));
var base32crockford2 = chain2(radix22(5), alphabet2("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join2(""), normalize3((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
var base642 = chain2(radix22(6), alphabet2("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding2(6), join2(""));
var base64url2 = chain2(radix22(6), alphabet2("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding2(6), join2(""));
var base64urlnopad2 = chain2(radix22(6), alphabet2("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join2(""));
var genBase582 = (abc) => chain2(radix3(58), alphabet2(abc), join2(""));
var base582 = genBase582("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var base58flickr2 = genBase582("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
var base58xrp2 = genBase582("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
var BECH_ALPHABET2 = chain2(alphabet2("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join2(""));
var POLYMOD_GENERATORS2 = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod2(pre) {
  const b = pre >> 25;
  let chk = (pre & 33554431) << 5;
  for (let i = 0; i < POLYMOD_GENERATORS2.length; i++) {
    if ((b >> i & 1) === 1)
      chk ^= POLYMOD_GENERATORS2[i];
  }
  return chk;
}
function bechChecksum2(prefix2, words, encodingConst = 1) {
  const len = prefix2.length;
  let chk = 1;
  for (let i = 0; i < len; i++) {
    const c = prefix2.charCodeAt(i);
    if (c < 33 || c > 126)
      throw new Error(`Invalid prefix (${prefix2})`);
    chk = bech32Polymod2(chk) ^ c >> 5;
  }
  chk = bech32Polymod2(chk);
  for (let i = 0; i < len; i++)
    chk = bech32Polymod2(chk) ^ prefix2.charCodeAt(i) & 31;
  for (let v of words)
    chk = bech32Polymod2(chk) ^ v;
  for (let i = 0; i < 6; i++)
    chk = bech32Polymod2(chk);
  chk ^= encodingConst;
  return BECH_ALPHABET2.encode(convertRadix22([chk % 2 ** 30], 30, 5, false));
}
function genBech322(encoding) {
  const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
  const _words = radix22(5);
  const fromWords = _words.decode;
  const toWords = _words.encode;
  const fromWordsUnsafe = unsafeWrapper2(fromWords);
  function encode(prefix2, words, limit = 90) {
    if (typeof prefix2 !== "string")
      throw new Error(`bech32.encode prefix should be string, not ${typeof prefix2}`);
    if (!Array.isArray(words) || words.length && typeof words[0] !== "number")
      throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
    const actualLength = prefix2.length + 7 + words.length;
    if (limit !== false && actualLength > limit)
      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
    const lowered = prefix2.toLowerCase();
    const sum = bechChecksum2(lowered, words, ENCODING_CONST);
    return `${lowered}1${BECH_ALPHABET2.encode(words)}${sum}`;
  }
  function decode2(str, limit = 90) {
    if (typeof str !== "string")
      throw new Error(`bech32.decode input should be string, not ${typeof str}`);
    if (str.length < 8 || limit !== false && str.length > limit)
      throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
    const lowered = str.toLowerCase();
    if (str !== lowered && str !== str.toUpperCase())
      throw new Error(`String must be lowercase or uppercase`);
    str = lowered;
    const sepIndex = str.lastIndexOf("1");
    if (sepIndex === 0 || sepIndex === -1)
      throw new Error(`Letter "1" must be present between prefix and data only`);
    const prefix2 = str.slice(0, sepIndex);
    const _words2 = str.slice(sepIndex + 1);
    if (_words2.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const words = BECH_ALPHABET2.decode(_words2).slice(0, -6);
    const sum = bechChecksum2(prefix2, words, ENCODING_CONST);
    if (!_words2.endsWith(sum))
      throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
    return { prefix: prefix2, words };
  }
  const decodeUnsafe = unsafeWrapper2(decode2);
  function decodeToBytes(str) {
    const { prefix: prefix2, words } = decode2(str, false);
    return { prefix: prefix2, words, bytes: fromWords(words) };
  }
  return { encode, decode: decode2, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };
}
var bech322 = genBech322("bech32");
var bech32m2 = genBech322("bech32m");
var hex8 = chain2(radix22(4), alphabet2("0123456789abcdef"), join2(""), normalize3((s) => {
  if (typeof s !== "string" || s.length % 2)
    throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
  return s.toLowerCase();
}));

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/base32/helpers.js
init_shim();
function createDecode2({ coder, ipfs }, validate) {
  return (value, ipfsCompat) => {
    validate(value, ipfsCompat);
    return coder.decode(ipfs && ipfsCompat ? value.substring(1) : value);
  };
}
function createEncode2({ coder, ipfs }) {
  return (value, ipfsCompat) => {
    const out = coder.encode(u8aToU8a8(value));
    return ipfs && ipfsCompat ? `${ipfs}${out}` : out;
  };
}
function createIs2(validate) {
  return (value, ipfsCompat) => {
    try {
      return validate(value, ipfsCompat);
    } catch {
      return false;
    }
  };
}
function createValidate2({ chars: chars5, ipfs, type, withPadding }) {
  return (value, ipfsCompat) => {
    if (typeof value !== "string") {
      throw new Error(`Expected ${type} string input`);
    } else if (ipfs && ipfsCompat && !value.startsWith(ipfs)) {
      throw new Error(`Expected ipfs-compatible ${type} to start with '${ipfs}'`);
    }
    for (let i = ipfsCompat ? 1 : 0, count2 = value.length; i < count2; i++) {
      if (chars5.includes(value[i])) {
      } else if (withPadding && value[i] === "=") {
        if (i === count2 - 1) {
        } else if (value[i + 1] === "=") {
        } else {
          throw new Error(`Invalid ${type} padding sequence "${value[i]}${value[i + 1]}" at index ${i}`);
        }
      } else {
        throw new Error(`Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
      }
    }
    return true;
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/base58/bs58.js
var config5 = {
  chars: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
  coder: base582,
  ipfs: "z",
  type: "base58"
};
var base58Validate2 = createValidate2(config5);
var base58Decode2 = createDecode2(config5, base58Validate2);
var base58Encode2 = createEncode2(config5);
var isBase582 = createIs2(base58Validate2);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/checksum.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/sshash.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/blake2/asU8a.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/blake2b.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/_blake2.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/_assert.js
init_shim();
function number2(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error(`Wrong positive integer: ${n}`);
}
function bytes2(b, ...lengths) {
  if (!(b instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
function hash2(hash5) {
  if (typeof hash5 !== "function" || typeof hash5.create !== "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number2(hash5.outputLen);
  number2(hash5.blockLen);
}
function exists2(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function output2(out, instance) {
  bytes2(out);
  const min2 = instance.outputLen;
  if (out.length < min2) {
    throw new Error(`digestInto() expects output buffer of length at least ${min2}`);
  }
}

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/utils.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/crypto.js
init_shim();
var crypto2 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/utils.js
var u8a3 = (a) => a instanceof Uint8Array;
var u323 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
var createView2 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
var rotr2 = (word, shift) => word << 32 - shift | word >>> shift;
var isLE2 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE2)
  throw new Error("Non little-endian hardware is not supported");
var hexes3 = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function utf8ToBytes3(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes2(data) {
  if (typeof data === "string")
    data = utf8ToBytes3(data);
  if (!u8a3(data))
    throw new Error(`expected Uint8Array, got ${typeof data}`);
  return data;
}
function concatBytes3(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a3(a))
      throw new Error("Uint8Array expected");
    r.set(a, pad);
    pad += a.length;
  });
  return r;
}
var Hash2 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
var toStr2 = {}.toString;
function wrapConstructor2(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function wrapConstructorWithOpts2(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function wrapXOFConstructorWithOpts2(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function randomBytes2(bytesLength = 32) {
  if (crypto2 && typeof crypto2.getRandomValues === "function") {
    return crypto2.getRandomValues(new Uint8Array(bytesLength));
  }
  throw new Error("crypto.getRandomValues must be defined");
}

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/_blake2.js
var SIGMA2 = new Uint8Array([
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3,
  11,
  8,
  12,
  0,
  5,
  2,
  15,
  13,
  10,
  14,
  3,
  6,
  7,
  1,
  9,
  4,
  7,
  9,
  3,
  1,
  13,
  12,
  11,
  14,
  2,
  6,
  5,
  10,
  4,
  0,
  15,
  8,
  9,
  0,
  5,
  7,
  2,
  4,
  10,
  15,
  14,
  1,
  11,
  12,
  6,
  8,
  3,
  13,
  2,
  12,
  6,
  10,
  0,
  11,
  8,
  3,
  4,
  13,
  7,
  5,
  15,
  14,
  1,
  9,
  12,
  5,
  1,
  15,
  14,
  13,
  4,
  10,
  0,
  7,
  6,
  3,
  9,
  2,
  8,
  11,
  13,
  11,
  7,
  14,
  12,
  1,
  3,
  9,
  5,
  0,
  15,
  4,
  8,
  6,
  2,
  10,
  6,
  15,
  14,
  9,
  11,
  3,
  0,
  8,
  12,
  2,
  13,
  7,
  1,
  4,
  10,
  5,
  10,
  2,
  8,
  4,
  7,
  6,
  1,
  5,
  15,
  11,
  9,
  14,
  3,
  12,
  13,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3
]);
var BLAKE22 = class extends Hash2 {
  constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.length = 0;
    this.pos = 0;
    this.finished = false;
    this.destroyed = false;
    number2(blockLen);
    number2(outputLen);
    number2(keyLen);
    if (outputLen < 0 || outputLen > keyLen)
      throw new Error("outputLen bigger than keyLen");
    if (opts.key !== void 0 && (opts.key.length < 1 || opts.key.length > keyLen))
      throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
    if (opts.salt !== void 0 && opts.salt.length !== saltLen)
      throw new Error(`salt must be ${saltLen} byte long or undefined`);
    if (opts.personalization !== void 0 && opts.personalization.length !== persLen)
      throw new Error(`personalization must be ${persLen} byte long or undefined`);
    this.buffer32 = u323(this.buffer = new Uint8Array(blockLen));
  }
  update(data) {
    exists2(this);
    const { blockLen, buffer: buffer2, buffer32 } = this;
    data = toBytes2(data);
    const len = data.length;
    const offset = data.byteOffset;
    const buf = data.buffer;
    for (let pos = 0; pos < len; ) {
      if (this.pos === blockLen) {
        this.compress(buffer32, 0, false);
        this.pos = 0;
      }
      const take2 = Math.min(blockLen - this.pos, len - pos);
      const dataOffset = offset + pos;
      if (take2 === blockLen && !(dataOffset % 4) && pos + take2 < len) {
        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
          this.length += blockLen;
          this.compress(data32, pos32, false);
        }
        continue;
      }
      buffer2.set(data.subarray(pos, pos + take2), this.pos);
      this.pos += take2;
      this.length += take2;
      pos += take2;
    }
    return this;
  }
  digestInto(out) {
    exists2(this);
    output2(out, this);
    const { pos, buffer32 } = this;
    this.finished = true;
    this.buffer.subarray(pos).fill(0);
    this.compress(buffer32, 0, true);
    const out32 = u323(out);
    this.get().forEach((v, i) => out32[i] = v);
  }
  digest() {
    const { buffer: buffer2, outputLen } = this;
    this.digestInto(buffer2);
    const res = buffer2.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    const { buffer: buffer2, length, finished, destroyed, outputLen, pos } = this;
    to || (to = new this.constructor({ dkLen: outputLen }));
    to.set(...this.get());
    to.length = length;
    to.finished = finished;
    to.destroyed = destroyed;
    to.outputLen = outputLen;
    to.buffer.set(buffer2);
    to.pos = pos;
    return to;
  }
};

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/_u64.js
init_shim();
var U32_MASK642 = BigInt(2 ** 32 - 1);
var _32n3 = BigInt(32);
function fromBig2(n, le = false) {
  if (le)
    return { h: Number(n & U32_MASK642), l: Number(n >> _32n3 & U32_MASK642) };
  return { h: Number(n >> _32n3 & U32_MASK642) | 0, l: Number(n & U32_MASK642) | 0 };
}
function split2(lst, le = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0; i < lst.length; i++) {
    const { h, l: l19 } = fromBig2(lst[i], le);
    [Ah[i], Al[i]] = [h, l19];
  }
  return [Ah, Al];
}
var toBig2 = (h, l19) => BigInt(h >>> 0) << _32n3 | BigInt(l19 >>> 0);
var shrSH2 = (h, _l, s) => h >>> s;
var shrSL2 = (h, l19, s) => h << 32 - s | l19 >>> s;
var rotrSH2 = (h, l19, s) => h >>> s | l19 << 32 - s;
var rotrSL2 = (h, l19, s) => h << 32 - s | l19 >>> s;
var rotrBH2 = (h, l19, s) => h << 64 - s | l19 >>> s - 32;
var rotrBL2 = (h, l19, s) => h >>> s - 32 | l19 << 64 - s;
var rotr32H2 = (_h, l19) => l19;
var rotr32L2 = (h, _l) => h;
var rotlSH2 = (h, l19, s) => h << s | l19 >>> 32 - s;
var rotlSL2 = (h, l19, s) => l19 << s | h >>> 32 - s;
var rotlBH2 = (h, l19, s) => l19 << s - 32 | h >>> 64 - s;
var rotlBL2 = (h, l19, s) => h << s - 32 | l19 >>> 64 - s;
function add2(Ah, Al, Bh, Bl) {
  const l19 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l19 / 2 ** 32 | 0) | 0, l: l19 | 0 };
}
var add3L2 = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H2 = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L2 = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H2 = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L2 = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H2 = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
var u643 = {
  fromBig: fromBig2,
  split: split2,
  toBig: toBig2,
  shrSH: shrSH2,
  shrSL: shrSL2,
  rotrSH: rotrSH2,
  rotrSL: rotrSL2,
  rotrBH: rotrBH2,
  rotrBL: rotrBL2,
  rotr32H: rotr32H2,
  rotr32L: rotr32L2,
  rotlSH: rotlSH2,
  rotlSL: rotlSL2,
  rotlBH: rotlBH2,
  rotlBL: rotlBL2,
  add: add2,
  add3L: add3L2,
  add3H: add3H2,
  add4L: add4L2,
  add4H: add4H2,
  add5H: add5H2,
  add5L: add5L2
};
var u64_default2 = u643;

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/blake2b.js
var IV3 = new Uint32Array([
  4089235720,
  1779033703,
  2227873595,
  3144134277,
  4271175723,
  1013904242,
  1595750129,
  2773480762,
  2917565137,
  1359893119,
  725511199,
  2600822924,
  4215389547,
  528734635,
  327033209,
  1541459225
]);
var BUF2 = new Uint32Array(32);
function G12(a, b, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BUF2[2 * a], Ah = BUF2[2 * a + 1];
  let Bl = BUF2[2 * b], Bh = BUF2[2 * b + 1];
  let Cl = BUF2[2 * c], Ch = BUF2[2 * c + 1];
  let Dl = BUF2[2 * d], Dh = BUF2[2 * d + 1];
  let ll = u64_default2.add3L(Al, Bl, Xl);
  Ah = u64_default2.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64_default2.rotr32H(Dh, Dl), Dl: u64_default2.rotr32L(Dh, Dl) });
  ({ h: Ch, l: Cl } = u64_default2.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64_default2.rotrSH(Bh, Bl, 24), Bl: u64_default2.rotrSL(Bh, Bl, 24) });
  BUF2[2 * a] = Al, BUF2[2 * a + 1] = Ah;
  BUF2[2 * b] = Bl, BUF2[2 * b + 1] = Bh;
  BUF2[2 * c] = Cl, BUF2[2 * c + 1] = Ch;
  BUF2[2 * d] = Dl, BUF2[2 * d + 1] = Dh;
}
function G22(a, b, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BUF2[2 * a], Ah = BUF2[2 * a + 1];
  let Bl = BUF2[2 * b], Bh = BUF2[2 * b + 1];
  let Cl = BUF2[2 * c], Ch = BUF2[2 * c + 1];
  let Dl = BUF2[2 * d], Dh = BUF2[2 * d + 1];
  let ll = u64_default2.add3L(Al, Bl, Xl);
  Ah = u64_default2.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64_default2.rotrSH(Dh, Dl, 16), Dl: u64_default2.rotrSL(Dh, Dl, 16) });
  ({ h: Ch, l: Cl } = u64_default2.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64_default2.rotrBH(Bh, Bl, 63), Bl: u64_default2.rotrBL(Bh, Bl, 63) });
  BUF2[2 * a] = Al, BUF2[2 * a + 1] = Ah;
  BUF2[2 * b] = Bl, BUF2[2 * b + 1] = Bh;
  BUF2[2 * c] = Cl, BUF2[2 * c + 1] = Ch;
  BUF2[2 * d] = Dl, BUF2[2 * d + 1] = Dh;
}
var BLAKE2b2 = class extends BLAKE22 {
  constructor(opts = {}) {
    super(128, opts.dkLen === void 0 ? 64 : opts.dkLen, opts, 64, 16, 16);
    this.v0l = IV3[0] | 0;
    this.v0h = IV3[1] | 0;
    this.v1l = IV3[2] | 0;
    this.v1h = IV3[3] | 0;
    this.v2l = IV3[4] | 0;
    this.v2h = IV3[5] | 0;
    this.v3l = IV3[6] | 0;
    this.v3h = IV3[7] | 0;
    this.v4l = IV3[8] | 0;
    this.v4h = IV3[9] | 0;
    this.v5l = IV3[10] | 0;
    this.v5h = IV3[11] | 0;
    this.v6l = IV3[12] | 0;
    this.v6h = IV3[13] | 0;
    this.v7l = IV3[14] | 0;
    this.v7h = IV3[15] | 0;
    const keyLength = opts.key ? opts.key.length : 0;
    this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
    if (opts.salt) {
      const salt = u323(toBytes2(opts.salt));
      this.v4l ^= salt[0];
      this.v4h ^= salt[1];
      this.v5l ^= salt[2];
      this.v5h ^= salt[3];
    }
    if (opts.personalization) {
      const pers = u323(toBytes2(opts.personalization));
      this.v6l ^= pers[0];
      this.v6h ^= pers[1];
      this.v7l ^= pers[2];
      this.v7h ^= pers[3];
    }
    if (opts.key) {
      const tmp = new Uint8Array(this.blockLen);
      tmp.set(toBytes2(opts.key));
      this.update(tmp);
    }
  }
  // prettier-ignore
  get() {
    let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
    return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
  }
  // prettier-ignore
  set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
    this.v0l = v0l | 0;
    this.v0h = v0h | 0;
    this.v1l = v1l | 0;
    this.v1h = v1h | 0;
    this.v2l = v2l | 0;
    this.v2h = v2h | 0;
    this.v3l = v3l | 0;
    this.v3h = v3h | 0;
    this.v4l = v4l | 0;
    this.v4h = v4h | 0;
    this.v5l = v5l | 0;
    this.v5h = v5h | 0;
    this.v6l = v6l | 0;
    this.v6h = v6h | 0;
    this.v7l = v7l | 0;
    this.v7h = v7h | 0;
  }
  compress(msg, offset, isLast) {
    this.get().forEach((v, i) => BUF2[i] = v);
    BUF2.set(IV3, 16);
    let { h, l: l19 } = u64_default2.fromBig(BigInt(this.length));
    BUF2[24] = IV3[8] ^ l19;
    BUF2[25] = IV3[9] ^ h;
    if (isLast) {
      BUF2[28] = ~BUF2[28];
      BUF2[29] = ~BUF2[29];
    }
    let j = 0;
    const s = SIGMA2;
    for (let i = 0; i < 12; i++) {
      G12(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G22(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G12(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G22(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G12(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G22(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G12(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G22(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G12(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G22(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G12(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G22(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G12(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G22(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G12(3, 4, 9, 14, msg, offset + 2 * s[j++]);
      G22(3, 4, 9, 14, msg, offset + 2 * s[j++]);
    }
    this.v0l ^= BUF2[0] ^ BUF2[16];
    this.v0h ^= BUF2[1] ^ BUF2[17];
    this.v1l ^= BUF2[2] ^ BUF2[18];
    this.v1h ^= BUF2[3] ^ BUF2[19];
    this.v2l ^= BUF2[4] ^ BUF2[20];
    this.v2h ^= BUF2[5] ^ BUF2[21];
    this.v3l ^= BUF2[6] ^ BUF2[22];
    this.v3h ^= BUF2[7] ^ BUF2[23];
    this.v4l ^= BUF2[8] ^ BUF2[24];
    this.v4h ^= BUF2[9] ^ BUF2[25];
    this.v5l ^= BUF2[10] ^ BUF2[26];
    this.v5h ^= BUF2[11] ^ BUF2[27];
    this.v6l ^= BUF2[12] ^ BUF2[28];
    this.v6h ^= BUF2[13] ^ BUF2[29];
    this.v7l ^= BUF2[14] ^ BUF2[30];
    this.v7h ^= BUF2[15] ^ BUF2[31];
    BUF2.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer32.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var blake2b3 = wrapConstructorWithOpts2((opts) => new BLAKE2b2(opts));

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/helpers.js
init_shim();
function createAsHex2(fn) {
  return (...args) => u8aToHex8(fn(...args));
}
function createBitHasher2(bitLength, fn) {
  return (data, onlyJs) => fn(data, bitLength, onlyJs);
}
function createDualHasher2(wa, js) {
  return (value, bitLength = 256, onlyJs) => {
    const u8a9 = u8aToU8a8(value);
    return !hasBigInt8 || !onlyJs && isReady() ? wa[bitLength](u8a9) : js[bitLength](u8a9);
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/blake2/asU8a.js
function blake2AsU8a2(data, bitLength = 256, key, onlyJs) {
  const byteLength = Math.ceil(bitLength / 8);
  const u8a9 = u8aToU8a8(data);
  return !hasBigInt8 || !onlyJs && isReady() ? blake2b(u8a9, u8aToU8a8(key), byteLength) : key ? blake2b3(u8a9, { dkLen: byteLength, key }) : blake2b3(u8a9, { dkLen: byteLength });
}
var blake2AsHex2 = createAsHex2(blake2AsU8a2);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/sshash.js
var SS58_PREFIX2 = stringToU8a8("SS58PRE");
function sshash2(key) {
  return blake2AsU8a2(u8aConcat8(SS58_PREFIX2, key), 512);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/checksum.js
function checkAddressChecksum2(decoded) {
  const ss58Length = decoded[0] & 64 ? 2 : 1;
  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;
  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
  const length = decoded.length - (isPublicKey ? 2 : 1);
  const hash5 = sshash2(decoded.subarray(0, length));
  const isValid = (decoded[0] & 128) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash5[0] && decoded[decoded.length - 1] === hash5[1] : decoded[decoded.length - 1] === hash5[0]);
  return [isValid, length, ss58Length, ss58Decoded];
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/defaults.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/networks.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/defaults.js
var defaults2 = {
  allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
  // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
  allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
  allowedPrefix: availableNetworks.map(({ prefix: prefix2 }) => prefix2),
  prefix: 42
};

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/decode.js
function decodeAddress2(encoded, ignoreChecksum, ss58Format = -1) {
  if (!encoded) {
    throw new Error("Invalid empty address passed");
  }
  if (isU8a8(encoded) || isHex8(encoded)) {
    return u8aToU8a8(encoded);
  }
  try {
    const decoded = base58Decode2(encoded);
    if (!defaults2.allowedEncodedLengths.includes(decoded.length)) {
      throw new Error("Invalid decoded address length");
    }
    const [isValid, endPos, ss58Length, ss58Decoded] = checkAddressChecksum2(decoded);
    if (!isValid && !ignoreChecksum) {
      throw new Error("Invalid decoded address checksum");
    } else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
      throw new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
    }
    return decoded.slice(ss58Length, endPos);
  } catch (error) {
    throw new Error(`Decoding ${encoded}: ${error.message}`);
  }
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/check.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/derive.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/key/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/key/extractPath.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/key/DeriveJunction.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/bn.js
init_shim();
var BN_BE_256_OPTS2 = { bitLength: 256, isLe: false };

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/key/extractSuri.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/key/fromPath.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/key/hdkdEcdsa.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/deriveHard.js
init_shim();
var HDKD3 = compactAddLength8(stringToU8a8("Secp256k1HDKD"));
function secp256k1DeriveHard2(seed, chainCode) {
  if (!isU8a8(chainCode) || chainCode.length !== 32) {
    throw new Error("Invalid chainCode passed to derive");
  }
  return blake2AsU8a2(u8aConcat8(HDKD3, seed, chainCode), 256);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/pair/fromSeed.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/secp256k1.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/sha256.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/_sha2.js
init_shim();
function setBigUint642(view, byteOffset, value, isLE5) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE5);
  const _32n9 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n9 & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE5 ? 4 : 0;
  const l19 = isLE5 ? 0 : 4;
  view.setUint32(byteOffset + h, wh, isLE5);
  view.setUint32(byteOffset + l19, wl, isLE5);
}
var SHA22 = class extends Hash2 {
  constructor(blockLen, outputLen, padOffset, isLE5) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE5;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView2(this.buffer);
  }
  update(data) {
    exists2(this);
    const { view, buffer: buffer2, blockLen } = this;
    data = toBytes2(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take2 = Math.min(blockLen - this.pos, len - pos);
      if (take2 === blockLen) {
        const dataView = createView2(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer2.set(data.subarray(pos, pos + take2), this.pos);
      this.pos += take2;
      pos += take2;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    exists2(this);
    output2(out, this);
    this.finished = true;
    const { buffer: buffer2, view, blockLen, isLE: isLE5 } = this;
    let { pos } = this;
    buffer2[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i = pos; i < blockLen; i++)
      buffer2[i] = 0;
    setBigUint642(view, blockLen - 8, BigInt(this.length * 8), isLE5);
    this.process(view, 0);
    const oview = createView2(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i = 0; i < outLen; i++)
      oview.setUint32(4 * i, state[i], isLE5);
  }
  digest() {
    const { buffer: buffer2, outputLen } = this;
    this.digestInto(buffer2);
    const res = buffer2.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
    to.length = length;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length % blockLen)
      to.buffer.set(buffer2);
    return to;
  }
};

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/sha256.js
var Chi2 = (a, b, c) => a & b ^ ~a & c;
var Maj2 = (a, b, c) => a & b ^ a & c ^ b & c;
var SHA256_K2 = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var IV4 = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA256_W2 = new Uint32Array(64);
var SHA2562 = class extends SHA22 {
  constructor() {
    super(64, 32, 8, false);
    this.A = IV4[0] | 0;
    this.B = IV4[1] | 0;
    this.C = IV4[2] | 0;
    this.D = IV4[3] | 0;
    this.E = IV4[4] | 0;
    this.F = IV4[5] | 0;
    this.G = IV4[6] | 0;
    this.H = IV4[7] | 0;
  }
  get() {
    const { A, B, C, D, E, F, G, H } = this;
    return [A, B, C, D, E, F, G, H];
  }
  // prettier-ignore
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA256_W2[i] = view.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W2[i - 15];
      const W2 = SHA256_W2[i - 2];
      const s0 = rotr2(W15, 7) ^ rotr2(W15, 18) ^ W15 >>> 3;
      const s1 = rotr2(W2, 17) ^ rotr2(W2, 19) ^ W2 >>> 10;
      SHA256_W2[i] = s1 + SHA256_W2[i - 7] + s0 + SHA256_W2[i - 16] | 0;
    }
    let { A, B, C, D, E, F, G, H } = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = rotr2(E, 6) ^ rotr2(E, 11) ^ rotr2(E, 25);
      const T1 = H + sigma1 + Chi2(E, F, G) + SHA256_K2[i] + SHA256_W2[i] | 0;
      const sigma0 = rotr2(A, 2) ^ rotr2(A, 13) ^ rotr2(A, 22);
      const T2 = sigma0 + Maj2(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T1 | 0;
      D = C;
      C = B;
      B = A;
      A = T1 + T2 | 0;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    SHA256_W2.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
};
var SHA2242 = class extends SHA2562 {
  constructor() {
    super();
    this.A = 3238371032 | 0;
    this.B = 914150663 | 0;
    this.C = 812702999 | 0;
    this.D = 4144912697 | 0;
    this.E = 4290775857 | 0;
    this.F = 1750603025 | 0;
    this.G = 1694076839 | 0;
    this.H = 3204075428 | 0;
    this.outputLen = 28;
  }
};
var sha2563 = wrapConstructor2(() => new SHA2562());
var sha2242 = wrapConstructor2(() => new SHA2242());

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/abstract/modular.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/abstract/utils.js
var utils_exports2 = {};
__export(utils_exports2, {
  bitGet: () => bitGet2,
  bitLen: () => bitLen2,
  bitMask: () => bitMask2,
  bitSet: () => bitSet2,
  bytesToHex: () => bytesToHex2,
  bytesToNumberBE: () => bytesToNumberBE2,
  bytesToNumberLE: () => bytesToNumberLE2,
  concatBytes: () => concatBytes4,
  createHmacDrbg: () => createHmacDrbg2,
  ensureBytes: () => ensureBytes2,
  equalBytes: () => equalBytes2,
  hexToBytes: () => hexToBytes2,
  hexToNumber: () => hexToNumber11,
  numberToBytesBE: () => numberToBytesBE2,
  numberToBytesLE: () => numberToBytesLE2,
  numberToHexUnpadded: () => numberToHexUnpadded2,
  numberToVarBytesBE: () => numberToVarBytesBE2,
  utf8ToBytes: () => utf8ToBytes4,
  validateObject: () => validateObject2
});
init_shim();
var _0n20 = BigInt(0);
var _1n20 = BigInt(1);
var _2n17 = BigInt(2);
var u8a4 = (a) => a instanceof Uint8Array;
var hexes4 = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function bytesToHex2(bytes5) {
  if (!u8a4(bytes5))
    throw new Error("Uint8Array expected");
  let hex11 = "";
  for (let i = 0; i < bytes5.length; i++) {
    hex11 += hexes4[bytes5[i]];
  }
  return hex11;
}
function numberToHexUnpadded2(num) {
  const hex11 = num.toString(16);
  return hex11.length & 1 ? `0${hex11}` : hex11;
}
function hexToNumber11(hex11) {
  if (typeof hex11 !== "string")
    throw new Error("hex string expected, got " + typeof hex11);
  return BigInt(hex11 === "" ? "0" : `0x${hex11}`);
}
function hexToBytes2(hex11) {
  if (typeof hex11 !== "string")
    throw new Error("hex string expected, got " + typeof hex11);
  const len = hex11.length;
  if (len % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + len);
  const array = new Uint8Array(len / 2);
  for (let i = 0; i < array.length; i++) {
    const j = i * 2;
    const hexByte = hex11.slice(j, j + 2);
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte) || byte < 0)
      throw new Error("Invalid byte sequence");
    array[i] = byte;
  }
  return array;
}
function bytesToNumberBE2(bytes5) {
  return hexToNumber11(bytesToHex2(bytes5));
}
function bytesToNumberLE2(bytes5) {
  if (!u8a4(bytes5))
    throw new Error("Uint8Array expected");
  return hexToNumber11(bytesToHex2(Uint8Array.from(bytes5).reverse()));
}
function numberToBytesBE2(n, len) {
  return hexToBytes2(n.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE2(n, len) {
  return numberToBytesBE2(n, len).reverse();
}
function numberToVarBytesBE2(n) {
  return hexToBytes2(numberToHexUnpadded2(n));
}
function ensureBytes2(title, hex11, expectedLength) {
  let res;
  if (typeof hex11 === "string") {
    try {
      res = hexToBytes2(hex11);
    } catch (e) {
      throw new Error(`${title} must be valid hex string, got "${hex11}". Cause: ${e}`);
    }
  } else if (u8a4(hex11)) {
    res = Uint8Array.from(hex11);
  } else {
    throw new Error(`${title} must be hex string or Uint8Array`);
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
  return res;
}
function concatBytes4(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a4(a))
      throw new Error("Uint8Array expected");
    r.set(a, pad);
    pad += a.length;
  });
  return r;
}
function equalBytes2(b1, b2) {
  if (b1.length !== b2.length)
    return false;
  for (let i = 0; i < b1.length; i++)
    if (b1[i] !== b2[i])
      return false;
  return true;
}
function utf8ToBytes4(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function bitLen2(n) {
  let len;
  for (len = 0; n > _0n20; n >>= _1n20, len += 1)
    ;
  return len;
}
function bitGet2(n, pos) {
  return n >> BigInt(pos) & _1n20;
}
var bitSet2 = (n, pos, value) => {
  return n | (value ? _1n20 : _0n20) << BigInt(pos);
};
var bitMask2 = (n) => (_2n17 << BigInt(n - 1)) - _1n20;
var u8n2 = (data) => new Uint8Array(data);
var u8fr2 = (arr) => Uint8Array.from(arr);
function createHmacDrbg2(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  let v = u8n2(hashLen);
  let k = u8n2(hashLen);
  let i = 0;
  const reset = () => {
    v.fill(1);
    k.fill(0);
    i = 0;
  };
  const h = (...b) => hmacFn(k, v, ...b);
  const reseed = (seed = u8n2()) => {
    k = h(u8fr2([0]), seed);
    v = h();
    if (seed.length === 0)
      return;
    k = h(u8fr2([1]), seed);
    v = h();
  };
  const gen5 = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v = h();
      const sl = v.slice();
      out.push(sl);
      len += v.length;
    }
    return concatBytes4(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = void 0;
    while (!(res = pred(gen5())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
var validatorFns2 = {
  bigint: (val) => typeof val === "bigint",
  function: (val) => typeof val === "function",
  boolean: (val) => typeof val === "boolean",
  string: (val) => typeof val === "string",
  stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
  isSafeInteger: (val) => Number.isSafeInteger(val),
  array: (val) => Array.isArray(val),
  field: (val, object) => object.Fp.isValid(val),
  hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
function validateObject2(object, validators2, optValidators = {}) {
  const checkField = (fieldName, type, isOptional) => {
    const checkVal = validatorFns2[type];
    if (typeof checkVal !== "function")
      throw new Error(`Invalid validator "${type}", expected function`);
    const val = object[fieldName];
    if (isOptional && val === void 0)
      return;
    if (!checkVal(val, object)) {
      throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
    }
  };
  for (const [fieldName, type] of Object.entries(validators2))
    checkField(fieldName, type, false);
  for (const [fieldName, type] of Object.entries(optValidators))
    checkField(fieldName, type, true);
  return object;
}

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/abstract/modular.js
var _0n21 = BigInt(0);
var _1n21 = BigInt(1);
var _2n18 = BigInt(2);
var _3n12 = BigInt(3);
var _4n12 = BigInt(4);
var _5n12 = BigInt(5);
var _8n12 = BigInt(8);
var _9n11 = BigInt(9);
var _16n3 = BigInt(16);
function mod2(a, b) {
  const result = a % b;
  return result >= _0n21 ? result : b + result;
}
function pow3(num, power, modulo) {
  if (modulo <= _0n21 || power < _0n21)
    throw new Error("Expected power/modulo > 0");
  if (modulo === _1n21)
    return _0n21;
  let res = _1n21;
  while (power > _0n21) {
    if (power & _1n21)
      res = res * num % modulo;
    num = num * num % modulo;
    power >>= _1n21;
  }
  return res;
}
function pow22(x, power, modulo) {
  let res = x;
  while (power-- > _0n21) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert2(number5, modulo) {
  if (number5 === _0n21 || modulo <= _0n21) {
    throw new Error(`invert: expected positive integers, got n=${number5} mod=${modulo}`);
  }
  let a = mod2(number5, modulo);
  let b = modulo;
  let x = _0n21, y = _1n21, u = _1n21, v = _0n21;
  while (a !== _0n21) {
    const q = b / a;
    const r = b % a;
    const m = x - u * q;
    const n = y - v * q;
    b = a, a = r, x = u, y = v, u = m, v = n;
  }
  const gcd5 = b;
  if (gcd5 !== _1n21)
    throw new Error("invert: does not exist");
  return mod2(x, modulo);
}
function tonelliShanks2(P) {
  const legendreC = (P - _1n21) / _2n18;
  let Q, S, Z;
  for (Q = P - _1n21, S = 0; Q % _2n18 === _0n21; Q /= _2n18, S++)
    ;
  for (Z = _2n18; Z < P && pow3(Z, legendreC, P) !== P - _1n21; Z++)
    ;
  if (S === 1) {
    const p1div4 = (P + _1n21) / _4n12;
    return function tonelliFast(Fp9, n) {
      const root = Fp9.pow(n, p1div4);
      if (!Fp9.eql(Fp9.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  const Q1div2 = (Q + _1n21) / _2n18;
  return function tonelliSlow(Fp9, n) {
    if (Fp9.pow(n, legendreC) === Fp9.neg(Fp9.ONE))
      throw new Error("Cannot find square root");
    let r = S;
    let g = Fp9.pow(Fp9.mul(Fp9.ONE, Z), Q);
    let x = Fp9.pow(n, Q1div2);
    let b = Fp9.pow(n, Q);
    while (!Fp9.eql(b, Fp9.ONE)) {
      if (Fp9.eql(b, Fp9.ZERO))
        return Fp9.ZERO;
      let m = 1;
      for (let t2 = Fp9.sqr(b); m < r; m++) {
        if (Fp9.eql(t2, Fp9.ONE))
          break;
        t2 = Fp9.sqr(t2);
      }
      const ge5 = Fp9.pow(g, _1n21 << BigInt(r - m - 1));
      g = Fp9.sqr(ge5);
      x = Fp9.mul(x, ge5);
      b = Fp9.mul(b, g);
      r = m;
    }
    return x;
  };
}
function FpSqrt2(P) {
  if (P % _4n12 === _3n12) {
    const p1div4 = (P + _1n21) / _4n12;
    return function sqrt3mod4(Fp9, n) {
      const root = Fp9.pow(n, p1div4);
      if (!Fp9.eql(Fp9.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _8n12 === _5n12) {
    const c1 = (P - _5n12) / _8n12;
    return function sqrt5mod8(Fp9, n) {
      const n2 = Fp9.mul(n, _2n18);
      const v = Fp9.pow(n2, c1);
      const nv = Fp9.mul(n, v);
      const i = Fp9.mul(Fp9.mul(nv, _2n18), v);
      const root = Fp9.mul(nv, Fp9.sub(i, Fp9.ONE));
      if (!Fp9.eql(Fp9.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _16n3 === _9n11) {
  }
  return tonelliShanks2(P);
}
var isNegativeLE2 = (num, modulo) => (mod2(num, modulo) & _1n21) === _1n21;
var FIELD_FIELDS2 = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField2(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  };
  const opts = FIELD_FIELDS2.reduce((map2, val) => {
    map2[val] = "function";
    return map2;
  }, initial);
  return validateObject2(field, opts);
}
function FpPow2(f, num, power) {
  if (power < _0n21)
    throw new Error("Expected power > 0");
  if (power === _0n21)
    return f.ONE;
  if (power === _1n21)
    return num;
  let p = f.ONE;
  let d = num;
  while (power > _0n21) {
    if (power & _1n21)
      p = f.mul(p, d);
    d = f.sqr(d);
    power >>= _1n21;
  }
  return p;
}
function FpInvertBatch2(f, nums) {
  const tmp = new Array(nums.length);
  const lastMultiplied = nums.reduce((acc, num, i) => {
    if (f.is0(num))
      return acc;
    tmp[i] = acc;
    return f.mul(acc, num);
  }, f.ONE);
  const inverted = f.inv(lastMultiplied);
  nums.reduceRight((acc, num, i) => {
    if (f.is0(num))
      return acc;
    tmp[i] = f.mul(acc, tmp[i]);
    return f.mul(acc, num);
  }, inverted);
  return tmp;
}
function nLength2(n, nBitLength) {
  const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field2(ORDER, bitLen5, isLE5 = false, redef = {}) {
  if (ORDER <= _0n21)
    throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
  const { nBitLength: BITS, nByteLength: BYTES } = nLength2(ORDER, bitLen5);
  if (BYTES > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const sqrtP = FpSqrt2(ORDER);
  const f = Object.freeze({
    ORDER,
    BITS,
    BYTES,
    MASK: bitMask2(BITS),
    ZERO: _0n21,
    ONE: _1n21,
    create: (num) => mod2(num, ORDER),
    isValid: (num) => {
      if (typeof num !== "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
      return _0n21 <= num && num < ORDER;
    },
    is0: (num) => num === _0n21,
    isOdd: (num) => (num & _1n21) === _1n21,
    neg: (num) => mod2(-num, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num) => mod2(num * num, ORDER),
    add: (lhs, rhs) => mod2(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod2(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod2(lhs * rhs, ORDER),
    pow: (num, power) => FpPow2(f, num, power),
    div: (lhs, rhs) => mod2(lhs * invert2(rhs, ORDER), ORDER),
    // Same as above, but doesn't normalize
    sqrN: (num) => num * num,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num) => invert2(num, ORDER),
    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
    invertBatch: (lst) => FpInvertBatch2(f, lst),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (a, b, c) => c ? b : a,
    toBytes: (num) => isLE5 ? numberToBytesLE2(num, BYTES) : numberToBytesBE2(num, BYTES),
    fromBytes: (bytes5) => {
      if (bytes5.length !== BYTES)
        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes5.length}`);
      return isLE5 ? bytesToNumberLE2(bytes5) : bytesToNumberBE2(bytes5);
    }
  });
  return Object.freeze(f);
}
function FpSqrtEven2(Fp9, elm) {
  if (!Fp9.isOdd)
    throw new Error(`Field doesn't have isOdd`);
  const root = Fp9.sqrt(elm);
  return Fp9.isOdd(root) ? Fp9.neg(root) : root;
}
function getFieldBytesLength2(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength2(fieldOrder) {
  const length = getFieldBytesLength2(fieldOrder);
  return length + Math.ceil(length / 2);
}
function mapHashToField2(key, fieldOrder, isLE5 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength2(fieldOrder);
  const minLen = getMinHashLength2(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
  const num = isLE5 ? bytesToNumberBE2(key) : bytesToNumberLE2(key);
  const reduced = mod2(num, fieldOrder - _1n21) + _1n21;
  return isLE5 ? numberToBytesLE2(reduced, fieldLen) : numberToBytesBE2(reduced, fieldLen);
}

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/abstract/weierstrass.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/abstract/curve.js
init_shim();
var _0n22 = BigInt(0);
var _1n22 = BigInt(1);
function wNAF2(c, bits) {
  const constTimeNegate = (condition, item) => {
    const neg = item.negate();
    return condition ? neg : item;
  };
  const opts = (W) => {
    const windows = Math.ceil(bits / W) + 1;
    const windowSize = 2 ** (W - 1);
    return { windows, windowSize };
  };
  return {
    constTimeNegate,
    // non-const time multiplication ladder
    unsafeLadder(elm, n) {
      let p = c.ZERO;
      let d = elm;
      while (n > _0n22) {
        if (n & _1n22)
          p = p.add(d);
        d = d.double();
        n >>= _1n22;
      }
      return p;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(elm, W) {
      const { windows, windowSize } = opts(W);
      const points = [];
      let p = elm;
      let base = p;
      for (let window3 = 0; window3 < windows; window3++) {
        base = p;
        points.push(base);
        for (let i = 1; i < windowSize; i++) {
          base = base.add(p);
          points.push(base);
        }
        p = base.double();
      }
      return points;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(W, precomputes, n) {
      const { windows, windowSize } = opts(W);
      let p = c.ZERO;
      let f = c.BASE;
      const mask = BigInt(2 ** W - 1);
      const maxNumber = 2 ** W;
      const shiftBy = BigInt(W);
      for (let window3 = 0; window3 < windows; window3++) {
        const offset = window3 * windowSize;
        let wbits = Number(n & mask);
        n >>= shiftBy;
        if (wbits > windowSize) {
          wbits -= maxNumber;
          n += _1n22;
        }
        const offset1 = offset;
        const offset2 = offset + Math.abs(wbits) - 1;
        const cond1 = window3 % 2 !== 0;
        const cond2 = wbits < 0;
        if (wbits === 0) {
          f = f.add(constTimeNegate(cond1, precomputes[offset1]));
        } else {
          p = p.add(constTimeNegate(cond2, precomputes[offset2]));
        }
      }
      return { p, f };
    },
    wNAFCached(P, precomputesMap, n, transform) {
      const W = P._WINDOW_SIZE || 1;
      let comp = precomputesMap.get(P);
      if (!comp) {
        comp = this.precomputeWindow(P, W);
        if (W !== 1) {
          precomputesMap.set(P, transform(comp));
        }
      }
      return this.wNAF(W, comp, n);
    }
  };
}
function validateBasic2(curve) {
  validateField2(curve.Fp);
  validateObject2(curve, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  });
  return Object.freeze({
    ...nLength2(curve.n, curve.nBitLength),
    ...curve,
    ...{ p: curve.Fp.ORDER }
  });
}

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/abstract/weierstrass.js
function validatePointOpts2(curve) {
  const opts = validateBasic2(curve);
  validateObject2(opts, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo, Fp: Fp9, a } = opts;
  if (endo) {
    if (!Fp9.eql(a, Fp9.ZERO)) {
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    }
    if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
    }
  }
  return Object.freeze({ ...opts });
}
var { bytesToNumberBE: b2n2, hexToBytes: h2b2 } = utils_exports2;
var DER2 = {
  // asn.1 DER encoding utils
  Err: class DERErr2 extends Error {
    constructor(m = "") {
      super(m);
    }
  },
  _parseInt(data) {
    const { Err: E } = DER2;
    if (data.length < 2 || data[0] !== 2)
      throw new E("Invalid signature integer tag");
    const len = data[1];
    const res = data.subarray(2, len + 2);
    if (!len || res.length !== len)
      throw new E("Invalid signature integer: wrong length");
    if (res[0] & 128)
      throw new E("Invalid signature integer: negative");
    if (res[0] === 0 && !(res[1] & 128))
      throw new E("Invalid signature integer: unnecessary leading zero");
    return { d: b2n2(res), l: data.subarray(len + 2) };
  },
  toSig(hex11) {
    const { Err: E } = DER2;
    const data = typeof hex11 === "string" ? h2b2(hex11) : hex11;
    if (!(data instanceof Uint8Array))
      throw new Error("ui8a expected");
    let l19 = data.length;
    if (l19 < 2 || data[0] != 48)
      throw new E("Invalid signature tag");
    if (data[1] !== l19 - 2)
      throw new E("Invalid signature: incorrect length");
    const { d: r, l: sBytes } = DER2._parseInt(data.subarray(2));
    const { d: s, l: rBytesLeft } = DER2._parseInt(sBytes);
    if (rBytesLeft.length)
      throw new E("Invalid signature: left bytes after parsing");
    return { r, s };
  },
  hexFromSig(sig2) {
    const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
    const h = (num) => {
      const hex11 = num.toString(16);
      return hex11.length & 1 ? `0${hex11}` : hex11;
    };
    const s = slice(h(sig2.s));
    const r = slice(h(sig2.r));
    const shl = s.length / 2;
    const rhl = r.length / 2;
    const sl = h(shl);
    const rl = h(rhl);
    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
  }
};
var _0n23 = BigInt(0);
var _1n23 = BigInt(1);
var _2n19 = BigInt(2);
var _3n13 = BigInt(3);
var _4n13 = BigInt(4);
function weierstrassPoints2(opts) {
  const CURVE = validatePointOpts2(opts);
  const { Fp: Fp9 } = CURVE;
  const toBytes5 = CURVE.toBytes || ((_c, point, _isCompressed) => {
    const a = point.toAffine();
    return concatBytes4(Uint8Array.from([4]), Fp9.toBytes(a.x), Fp9.toBytes(a.y));
  });
  const fromBytes = CURVE.fromBytes || ((bytes5) => {
    const tail = bytes5.subarray(1);
    const x = Fp9.fromBytes(tail.subarray(0, Fp9.BYTES));
    const y = Fp9.fromBytes(tail.subarray(Fp9.BYTES, 2 * Fp9.BYTES));
    return { x, y };
  });
  function weierstrassEquation(x) {
    const { a, b } = CURVE;
    const x2 = Fp9.sqr(x);
    const x3 = Fp9.mul(x2, x);
    return Fp9.add(Fp9.add(x3, Fp9.mul(x, a)), b);
  }
  if (!Fp9.eql(Fp9.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
    throw new Error("bad generator point: equation left != right");
  function isWithinCurveOrder(num) {
    return typeof num === "bigint" && _0n23 < num && num < CURVE.n;
  }
  function assertGE(num) {
    if (!isWithinCurveOrder(num))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function normPrivateKeyToScalar(key) {
    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
    if (lengths && typeof key !== "bigint") {
      if (key instanceof Uint8Array)
        key = bytesToHex2(key);
      if (typeof key !== "string" || !lengths.includes(key.length))
        throw new Error("Invalid key");
      key = key.padStart(nByteLength * 2, "0");
    }
    let num;
    try {
      num = typeof key === "bigint" ? key : bytesToNumberBE2(ensureBytes2("private key", key, nByteLength));
    } catch (error) {
      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
    }
    if (wrapPrivateKey)
      num = mod2(num, n);
    assertGE(num);
    return num;
  }
  const pointPrecomputes = /* @__PURE__ */ new Map();
  function assertPrjPoint(other) {
    if (!(other instanceof Point5))
      throw new Error("ProjectivePoint expected");
  }
  class Point5 {
    constructor(px, py, pz) {
      this.px = px;
      this.py = py;
      this.pz = pz;
      if (px == null || !Fp9.isValid(px))
        throw new Error("x required");
      if (py == null || !Fp9.isValid(py))
        throw new Error("y required");
      if (pz == null || !Fp9.isValid(pz))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(p) {
      const { x, y } = p || {};
      if (!p || !Fp9.isValid(x) || !Fp9.isValid(y))
        throw new Error("invalid affine point");
      if (p instanceof Point5)
        throw new Error("projective point not allowed");
      const is0 = (i) => Fp9.eql(i, Fp9.ZERO);
      if (is0(x) && is0(y))
        return Point5.ZERO;
      return new Point5(x, y, Fp9.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(points) {
      const toInv = Fp9.invertBatch(points.map((p) => p.pz));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point5.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(hex11) {
      const P = Point5.fromAffine(fromBytes(ensureBytes2("pointHex", hex11)));
      P.assertValidity();
      return P;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(privateKey) {
      return Point5.BASE.multiply(normPrivateKeyToScalar(privateKey));
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (CURVE.allowInfinityPoint && !Fp9.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x, y } = this.toAffine();
      if (!Fp9.isValid(x) || !Fp9.isValid(y))
        throw new Error("bad point: x or y not FE");
      const left = Fp9.sqr(y);
      const right = weierstrassEquation(x);
      if (!Fp9.eql(left, right))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y } = this.toAffine();
      if (Fp9.isOdd)
        return !Fp9.isOdd(y);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      const U1 = Fp9.eql(Fp9.mul(X1, Z2), Fp9.mul(X2, Z1));
      const U2 = Fp9.eql(Fp9.mul(Y1, Z2), Fp9.mul(Y2, Z1));
      return U1 && U2;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new Point5(this.px, Fp9.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a, b } = CURVE;
      const b3 = Fp9.mul(b, _3n13);
      const { px: X1, py: Y1, pz: Z1 } = this;
      let X3 = Fp9.ZERO, Y3 = Fp9.ZERO, Z3 = Fp9.ZERO;
      let t0 = Fp9.mul(X1, X1);
      let t1 = Fp9.mul(Y1, Y1);
      let t2 = Fp9.mul(Z1, Z1);
      let t3 = Fp9.mul(X1, Y1);
      t3 = Fp9.add(t3, t3);
      Z3 = Fp9.mul(X1, Z1);
      Z3 = Fp9.add(Z3, Z3);
      X3 = Fp9.mul(a, Z3);
      Y3 = Fp9.mul(b3, t2);
      Y3 = Fp9.add(X3, Y3);
      X3 = Fp9.sub(t1, Y3);
      Y3 = Fp9.add(t1, Y3);
      Y3 = Fp9.mul(X3, Y3);
      X3 = Fp9.mul(t3, X3);
      Z3 = Fp9.mul(b3, Z3);
      t2 = Fp9.mul(a, t2);
      t3 = Fp9.sub(t0, t2);
      t3 = Fp9.mul(a, t3);
      t3 = Fp9.add(t3, Z3);
      Z3 = Fp9.add(t0, t0);
      t0 = Fp9.add(Z3, t0);
      t0 = Fp9.add(t0, t2);
      t0 = Fp9.mul(t0, t3);
      Y3 = Fp9.add(Y3, t0);
      t2 = Fp9.mul(Y1, Z1);
      t2 = Fp9.add(t2, t2);
      t0 = Fp9.mul(t2, t3);
      X3 = Fp9.sub(X3, t0);
      Z3 = Fp9.mul(t2, t1);
      Z3 = Fp9.add(Z3, Z3);
      Z3 = Fp9.add(Z3, Z3);
      return new Point5(X3, Y3, Z3);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      let X3 = Fp9.ZERO, Y3 = Fp9.ZERO, Z3 = Fp9.ZERO;
      const a = CURVE.a;
      const b3 = Fp9.mul(CURVE.b, _3n13);
      let t0 = Fp9.mul(X1, X2);
      let t1 = Fp9.mul(Y1, Y2);
      let t2 = Fp9.mul(Z1, Z2);
      let t3 = Fp9.add(X1, Y1);
      let t4 = Fp9.add(X2, Y2);
      t3 = Fp9.mul(t3, t4);
      t4 = Fp9.add(t0, t1);
      t3 = Fp9.sub(t3, t4);
      t4 = Fp9.add(X1, Z1);
      let t5 = Fp9.add(X2, Z2);
      t4 = Fp9.mul(t4, t5);
      t5 = Fp9.add(t0, t2);
      t4 = Fp9.sub(t4, t5);
      t5 = Fp9.add(Y1, Z1);
      X3 = Fp9.add(Y2, Z2);
      t5 = Fp9.mul(t5, X3);
      X3 = Fp9.add(t1, t2);
      t5 = Fp9.sub(t5, X3);
      Z3 = Fp9.mul(a, t4);
      X3 = Fp9.mul(b3, t2);
      Z3 = Fp9.add(X3, Z3);
      X3 = Fp9.sub(t1, Z3);
      Z3 = Fp9.add(t1, Z3);
      Y3 = Fp9.mul(X3, Z3);
      t1 = Fp9.add(t0, t0);
      t1 = Fp9.add(t1, t0);
      t2 = Fp9.mul(a, t2);
      t4 = Fp9.mul(b3, t4);
      t1 = Fp9.add(t1, t2);
      t2 = Fp9.sub(t0, t2);
      t2 = Fp9.mul(a, t2);
      t4 = Fp9.add(t4, t2);
      t0 = Fp9.mul(t1, t4);
      Y3 = Fp9.add(Y3, t0);
      t0 = Fp9.mul(t5, t4);
      X3 = Fp9.mul(t3, X3);
      X3 = Fp9.sub(X3, t0);
      t0 = Fp9.mul(t3, t1);
      Z3 = Fp9.mul(t5, Z3);
      Z3 = Fp9.add(Z3, t0);
      return new Point5(X3, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point5.ZERO);
    }
    wNAF(n) {
      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
        const toInv = Fp9.invertBatch(comp.map((p) => p.pz));
        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point5.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(n) {
      const I = Point5.ZERO;
      if (n === _0n23)
        return I;
      assertGE(n);
      if (n === _1n23)
        return this;
      const { endo } = CURVE;
      if (!endo)
        return wnaf.unsafeLadder(this, n);
      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
      let k1p = I;
      let k2p = I;
      let d = this;
      while (k1 > _0n23 || k2 > _0n23) {
        if (k1 & _1n23)
          k1p = k1p.add(d);
        if (k2 & _1n23)
          k2p = k2p.add(d);
        d = d.double();
        k1 >>= _1n23;
        k2 >>= _1n23;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new Point5(Fp9.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
      return k1p.add(k2p);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(scalar) {
      assertGE(scalar);
      let n = scalar;
      let point, fake;
      const { endo } = CURVE;
      if (endo) {
        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
        let { p: k1p, f: f1p } = this.wNAF(k1);
        let { p: k2p, f: f2p } = this.wNAF(k2);
        k1p = wnaf.constTimeNegate(k1neg, k1p);
        k2p = wnaf.constTimeNegate(k2neg, k2p);
        k2p = new Point5(Fp9.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p, f } = this.wNAF(n);
        point = p;
        fake = f;
      }
      return Point5.normalizeZ([point, fake])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(Q, a, b) {
      const G = Point5.BASE;
      const mul = (P, a2) => a2 === _0n23 || a2 === _1n23 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
      const sum = mul(this, a).add(mul(Q, b));
      return sum.is0() ? void 0 : sum;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(iz) {
      const { px: x, py: y, pz: z } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? Fp9.ONE : Fp9.inv(z);
      const ax = Fp9.mul(x, iz);
      const ay = Fp9.mul(y, iz);
      const zz = Fp9.mul(z, iz);
      if (is0)
        return { x: Fp9.ZERO, y: Fp9.ZERO };
      if (!Fp9.eql(zz, Fp9.ONE))
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    isTorsionFree() {
      const { h: cofactor, isTorsionFree } = CURVE;
      if (cofactor === _1n23)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point5, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: cofactor, clearCofactor } = CURVE;
      if (cofactor === _1n23)
        return this;
      if (clearCofactor)
        return clearCofactor(Point5, this);
      return this.multiplyUnsafe(CURVE.h);
    }
    toRawBytes(isCompressed = true) {
      this.assertValidity();
      return toBytes5(Point5, this, isCompressed);
    }
    toHex(isCompressed = true) {
      return bytesToHex2(this.toRawBytes(isCompressed));
    }
  }
  Point5.BASE = new Point5(CURVE.Gx, CURVE.Gy, Fp9.ONE);
  Point5.ZERO = new Point5(Fp9.ZERO, Fp9.ONE, Fp9.ZERO);
  const _bits = CURVE.nBitLength;
  const wnaf = wNAF2(Point5, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
  return {
    CURVE,
    ProjectivePoint: Point5,
    normPrivateKeyToScalar,
    weierstrassEquation,
    isWithinCurveOrder
  };
}
function validateOpts4(curve) {
  const opts = validateBasic2(curve);
  validateObject2(opts, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  });
  return Object.freeze({ lowS: true, ...opts });
}
function weierstrass2(curveDef) {
  const CURVE = validateOpts4(curveDef);
  const { Fp: Fp9, n: CURVE_ORDER } = CURVE;
  const compressedLen = Fp9.BYTES + 1;
  const uncompressedLen = 2 * Fp9.BYTES + 1;
  function isValidFieldElement(num) {
    return _0n23 < num && num < Fp9.ORDER;
  }
  function modN5(a) {
    return mod2(a, CURVE_ORDER);
  }
  function invN(a) {
    return invert2(a, CURVE_ORDER);
  }
  const { ProjectivePoint: Point5, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints2({
    ...CURVE,
    toBytes(_c, point, isCompressed) {
      const a = point.toAffine();
      const x = Fp9.toBytes(a.x);
      const cat = concatBytes4;
      if (isCompressed) {
        return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
      } else {
        return cat(Uint8Array.from([4]), x, Fp9.toBytes(a.y));
      }
    },
    fromBytes(bytes5) {
      const len = bytes5.length;
      const head = bytes5[0];
      const tail = bytes5.subarray(1);
      if (len === compressedLen && (head === 2 || head === 3)) {
        const x = bytesToNumberBE2(tail);
        if (!isValidFieldElement(x))
          throw new Error("Point is not on curve");
        const y2 = weierstrassEquation(x);
        let y = Fp9.sqrt(y2);
        const isYOdd = (y & _1n23) === _1n23;
        const isHeadOdd = (head & 1) === 1;
        if (isHeadOdd !== isYOdd)
          y = Fp9.neg(y);
        return { x, y };
      } else if (len === uncompressedLen && head === 4) {
        const x = Fp9.fromBytes(tail.subarray(0, Fp9.BYTES));
        const y = Fp9.fromBytes(tail.subarray(Fp9.BYTES, 2 * Fp9.BYTES));
        return { x, y };
      } else {
        throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
      }
    }
  });
  const numToNByteStr = (num) => bytesToHex2(numberToBytesBE2(num, CURVE.nByteLength));
  function isBiggerThanHalfOrder(number5) {
    const HALF = CURVE_ORDER >> _1n23;
    return number5 > HALF;
  }
  function normalizeS(s) {
    return isBiggerThanHalfOrder(s) ? modN5(-s) : s;
  }
  const slcNum = (b, from2, to) => bytesToNumberBE2(b.slice(from2, to));
  class Signature {
    constructor(r, s, recovery) {
      this.r = r;
      this.s = s;
      this.recovery = recovery;
      this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(hex11) {
      const l19 = CURVE.nByteLength;
      hex11 = ensureBytes2("compactSignature", hex11, l19 * 2);
      return new Signature(slcNum(hex11, 0, l19), slcNum(hex11, l19, 2 * l19));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(hex11) {
      const { r, s } = DER2.toSig(ensureBytes2("DER", hex11));
      return new Signature(r, s);
    }
    assertValidity() {
      if (!isWithinCurveOrder(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!isWithinCurveOrder(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(recovery) {
      return new Signature(this.r, this.s, recovery);
    }
    recoverPublicKey(msgHash) {
      const { r, s, recovery: rec } = this;
      const h = bits2int_modN(ensureBytes2("msgHash", msgHash));
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
      if (radj >= Fp9.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const prefix2 = (rec & 1) === 0 ? "02" : "03";
      const R = Point5.fromHex(prefix2 + numToNByteStr(radj));
      const ir = invN(radj);
      const u1 = modN5(-h * ir);
      const u2 = modN5(s * ir);
      const Q = Point5.BASE.multiplyAndAddUnsafe(R, u1, u2);
      if (!Q)
        throw new Error("point at infinify");
      Q.assertValidity();
      return Q;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, modN5(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes2(this.toDERHex());
    }
    toDERHex() {
      return DER2.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes2(this.toCompactHex());
    }
    toCompactHex() {
      return numToNByteStr(this.r) + numToNByteStr(this.s);
    }
  }
  const utils5 = {
    isValidPrivateKey(privateKey) {
      try {
        normPrivateKeyToScalar(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    normPrivateKeyToScalar,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const length = getMinHashLength2(CURVE.n);
      return mapHashToField2(CURVE.randomBytes(length), CURVE.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(windowSize = 8, point = Point5.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  function getPublicKey(privateKey, isCompressed = true) {
    return Point5.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    const arr = item instanceof Uint8Array;
    const str = typeof item === "string";
    const len = (arr || str) && item.length;
    if (arr)
      return len === compressedLen || len === uncompressedLen;
    if (str)
      return len === 2 * compressedLen || len === 2 * uncompressedLen;
    if (item instanceof Point5)
      return true;
    return false;
  }
  function getSharedSecret(privateA, publicB, isCompressed = true) {
    if (isProbPub(privateA))
      throw new Error("first arg must be private key");
    if (!isProbPub(publicB))
      throw new Error("second arg must be public key");
    const b = Point5.fromHex(publicB);
    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
  }
  const bits2int = CURVE.bits2int || function(bytes5) {
    const num = bytesToNumberBE2(bytes5);
    const delta = bytes5.length * 8 - CURVE.nBitLength;
    return delta > 0 ? num >> BigInt(delta) : num;
  };
  const bits2int_modN = CURVE.bits2int_modN || function(bytes5) {
    return modN5(bits2int(bytes5));
  };
  const ORDER_MASK = bitMask2(CURVE.nBitLength);
  function int2octets(num) {
    if (typeof num !== "bigint")
      throw new Error("bigint expected");
    if (!(_0n23 <= num && num < ORDER_MASK))
      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
    return numberToBytesBE2(num, CURVE.nByteLength);
  }
  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
    if (["recovered", "canonical"].some((k) => k in opts))
      throw new Error("sign() legacy options not supported");
    const { hash: hash5, randomBytes: randomBytes5 } = CURVE;
    let { lowS, prehash, extraEntropy: ent } = opts;
    if (lowS == null)
      lowS = true;
    msgHash = ensureBytes2("msgHash", msgHash);
    if (prehash)
      msgHash = ensureBytes2("prehashed msgHash", hash5(msgHash));
    const h1int = bits2int_modN(msgHash);
    const d = normPrivateKeyToScalar(privateKey);
    const seedArgs = [int2octets(d), int2octets(h1int)];
    if (ent != null) {
      const e = ent === true ? randomBytes5(Fp9.BYTES) : ent;
      seedArgs.push(ensureBytes2("extraEntropy", e));
    }
    const seed = concatBytes4(...seedArgs);
    const m = h1int;
    function k2sig(kBytes) {
      const k = bits2int(kBytes);
      if (!isWithinCurveOrder(k))
        return;
      const ik = invN(k);
      const q = Point5.BASE.multiply(k).toAffine();
      const r = modN5(q.x);
      if (r === _0n23)
        return;
      const s = modN5(ik * modN5(m + r * d));
      if (s === _0n23)
        return;
      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n23);
      let normS = s;
      if (lowS && isBiggerThanHalfOrder(s)) {
        normS = normalizeS(s);
        recovery ^= 1;
      }
      return new Signature(r, normS, recovery);
    }
    return { seed, k2sig };
  }
  const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
  const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
  function sign2(msgHash, privKey, opts = defaultSigOpts) {
    const { seed, k2sig } = prepSig(msgHash, privKey, opts);
    const C = CURVE;
    const drbg = createHmacDrbg2(C.hash.outputLen, C.nByteLength, C.hmac);
    return drbg(seed, k2sig);
  }
  Point5.BASE._setWindowSize(8);
  function verify(signature, msgHash, publicKey2, opts = defaultVerOpts) {
    var _a;
    const sg = signature;
    msgHash = ensureBytes2("msgHash", msgHash);
    publicKey2 = ensureBytes2("publicKey", publicKey2);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    const { lowS, prehash } = opts;
    let _sig = void 0;
    let P;
    try {
      if (typeof sg === "string" || sg instanceof Uint8Array) {
        try {
          _sig = Signature.fromDER(sg);
        } catch (derError) {
          if (!(derError instanceof DER2.Err))
            throw derError;
          _sig = Signature.fromCompact(sg);
        }
      } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
        const { r: r2, s: s2 } = sg;
        _sig = new Signature(r2, s2);
      } else {
        throw new Error("PARSE");
      }
      P = Point5.fromHex(publicKey2);
    } catch (error) {
      if (error.message === "PARSE")
        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
      return false;
    }
    if (lowS && _sig.hasHighS())
      return false;
    if (prehash)
      msgHash = CURVE.hash(msgHash);
    const { r, s } = _sig;
    const h = bits2int_modN(msgHash);
    const is = invN(s);
    const u1 = modN5(h * is);
    const u2 = modN5(r * is);
    const R = (_a = Point5.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a.toAffine();
    if (!R)
      return false;
    const v = modN5(R.x);
    return v === r;
  }
  return {
    CURVE,
    getPublicKey,
    getSharedSecret,
    sign: sign2,
    verify,
    ProjectivePoint: Point5,
    Signature,
    utils: utils5
  };
}
function SWUFpSqrtRatio2(Fp9, Z) {
  const q = Fp9.ORDER;
  let l19 = _0n23;
  for (let o = q - _1n23; o % _2n19 === _0n23; o /= _2n19)
    l19 += _1n23;
  const c1 = l19;
  const _2n_pow_c1_1 = _2n19 << c1 - _1n23 - _1n23;
  const _2n_pow_c1 = _2n_pow_c1_1 * _2n19;
  const c2 = (q - _1n23) / _2n_pow_c1;
  const c3 = (c2 - _1n23) / _2n19;
  const c4 = _2n_pow_c1 - _1n23;
  const c5 = _2n_pow_c1_1;
  const c6 = Fp9.pow(Z, c2);
  const c7 = Fp9.pow(Z, (c2 + _1n23) / _2n19);
  let sqrtRatio = (u, v) => {
    let tv1 = c6;
    let tv2 = Fp9.pow(v, c4);
    let tv3 = Fp9.sqr(tv2);
    tv3 = Fp9.mul(tv3, v);
    let tv5 = Fp9.mul(u, tv3);
    tv5 = Fp9.pow(tv5, c3);
    tv5 = Fp9.mul(tv5, tv2);
    tv2 = Fp9.mul(tv5, v);
    tv3 = Fp9.mul(tv5, u);
    let tv4 = Fp9.mul(tv3, tv2);
    tv5 = Fp9.pow(tv4, c5);
    let isQR = Fp9.eql(tv5, Fp9.ONE);
    tv2 = Fp9.mul(tv3, c7);
    tv5 = Fp9.mul(tv4, tv1);
    tv3 = Fp9.cmov(tv2, tv3, isQR);
    tv4 = Fp9.cmov(tv5, tv4, isQR);
    for (let i = c1; i > _1n23; i--) {
      let tv52 = i - _2n19;
      tv52 = _2n19 << tv52 - _1n23;
      let tvv5 = Fp9.pow(tv4, tv52);
      const e1 = Fp9.eql(tvv5, Fp9.ONE);
      tv2 = Fp9.mul(tv3, tv1);
      tv1 = Fp9.mul(tv1, tv1);
      tvv5 = Fp9.mul(tv4, tv1);
      tv3 = Fp9.cmov(tv2, tv3, e1);
      tv4 = Fp9.cmov(tvv5, tv4, e1);
    }
    return { isValid: isQR, value: tv3 };
  };
  if (Fp9.ORDER % _4n13 === _3n13) {
    const c12 = (Fp9.ORDER - _3n13) / _4n13;
    const c22 = Fp9.sqrt(Fp9.neg(Z));
    sqrtRatio = (u, v) => {
      let tv1 = Fp9.sqr(v);
      const tv2 = Fp9.mul(u, v);
      tv1 = Fp9.mul(tv1, tv2);
      let y1 = Fp9.pow(tv1, c12);
      y1 = Fp9.mul(y1, tv2);
      const y2 = Fp9.mul(y1, c22);
      const tv3 = Fp9.mul(Fp9.sqr(y1), v);
      const isQR = Fp9.eql(tv3, u);
      let y = Fp9.cmov(y2, y1, isQR);
      return { isValid: isQR, value: y };
    };
  }
  return sqrtRatio;
}
function mapToCurveSimpleSWU2(Fp9, opts) {
  validateField2(Fp9);
  if (!Fp9.isValid(opts.A) || !Fp9.isValid(opts.B) || !Fp9.isValid(opts.Z))
    throw new Error("mapToCurveSimpleSWU: invalid opts");
  const sqrtRatio = SWUFpSqrtRatio2(Fp9, opts.Z);
  if (!Fp9.isOdd)
    throw new Error("Fp.isOdd is not implemented!");
  return (u) => {
    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
    tv1 = Fp9.sqr(u);
    tv1 = Fp9.mul(tv1, opts.Z);
    tv2 = Fp9.sqr(tv1);
    tv2 = Fp9.add(tv2, tv1);
    tv3 = Fp9.add(tv2, Fp9.ONE);
    tv3 = Fp9.mul(tv3, opts.B);
    tv4 = Fp9.cmov(opts.Z, Fp9.neg(tv2), !Fp9.eql(tv2, Fp9.ZERO));
    tv4 = Fp9.mul(tv4, opts.A);
    tv2 = Fp9.sqr(tv3);
    tv6 = Fp9.sqr(tv4);
    tv5 = Fp9.mul(tv6, opts.A);
    tv2 = Fp9.add(tv2, tv5);
    tv2 = Fp9.mul(tv2, tv3);
    tv6 = Fp9.mul(tv6, tv4);
    tv5 = Fp9.mul(tv6, opts.B);
    tv2 = Fp9.add(tv2, tv5);
    x = Fp9.mul(tv1, tv3);
    const { isValid, value } = sqrtRatio(tv2, tv6);
    y = Fp9.mul(tv1, u);
    y = Fp9.mul(y, value);
    x = Fp9.cmov(x, tv3, isValid);
    y = Fp9.cmov(y, value, isValid);
    const e1 = Fp9.isOdd(u) === Fp9.isOdd(y);
    y = Fp9.cmov(Fp9.neg(y), y, e1);
    x = Fp9.div(x, tv4);
    return { x, y };
  };
}

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/abstract/hash-to-curve.js
init_shim();
function validateDST2(dst) {
  if (dst instanceof Uint8Array)
    return dst;
  if (typeof dst === "string")
    return utf8ToBytes4(dst);
  throw new Error("DST must be Uint8Array or string");
}
var os2ip2 = bytesToNumberBE2;
function i2osp2(value, length) {
  if (value < 0 || value >= 1 << 8 * length) {
    throw new Error(`bad I2OSP call: value=${value} length=${length}`);
  }
  const res = Array.from({ length }).fill(0);
  for (let i = length - 1; i >= 0; i--) {
    res[i] = value & 255;
    value >>>= 8;
  }
  return new Uint8Array(res);
}
function strxor2(a, b) {
  const arr = new Uint8Array(a.length);
  for (let i = 0; i < a.length; i++) {
    arr[i] = a[i] ^ b[i];
  }
  return arr;
}
function isBytes2(item) {
  if (!(item instanceof Uint8Array))
    throw new Error("Uint8Array expected");
}
function isNum2(item) {
  if (!Number.isSafeInteger(item))
    throw new Error("number expected");
}
function expand_message_xmd2(msg, DST, lenInBytes, H) {
  isBytes2(msg);
  isBytes2(DST);
  isNum2(lenInBytes);
  if (DST.length > 255)
    DST = H(concatBytes4(utf8ToBytes4("H2C-OVERSIZE-DST-"), DST));
  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
  const ell = Math.ceil(lenInBytes / b_in_bytes);
  if (ell > 255)
    throw new Error("Invalid xmd length");
  const DST_prime = concatBytes4(DST, i2osp2(DST.length, 1));
  const Z_pad = i2osp2(0, r_in_bytes);
  const l_i_b_str = i2osp2(lenInBytes, 2);
  const b = new Array(ell);
  const b_0 = H(concatBytes4(Z_pad, msg, l_i_b_str, i2osp2(0, 1), DST_prime));
  b[0] = H(concatBytes4(b_0, i2osp2(1, 1), DST_prime));
  for (let i = 1; i <= ell; i++) {
    const args = [strxor2(b_0, b[i - 1]), i2osp2(i + 1, 1), DST_prime];
    b[i] = H(concatBytes4(...args));
  }
  const pseudo_random_bytes = concatBytes4(...b);
  return pseudo_random_bytes.slice(0, lenInBytes);
}
function expand_message_xof2(msg, DST, lenInBytes, k, H) {
  isBytes2(msg);
  isBytes2(DST);
  isNum2(lenInBytes);
  if (DST.length > 255) {
    const dkLen = Math.ceil(2 * k / 8);
    DST = H.create({ dkLen }).update(utf8ToBytes4("H2C-OVERSIZE-DST-")).update(DST).digest();
  }
  if (lenInBytes > 65535 || DST.length > 255)
    throw new Error("expand_message_xof: invalid lenInBytes");
  return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp2(lenInBytes, 2)).update(DST).update(i2osp2(DST.length, 1)).digest();
}
function hash_to_field2(msg, count2, options) {
  validateObject2(options, {
    DST: "stringOrUint8Array",
    p: "bigint",
    m: "isSafeInteger",
    k: "isSafeInteger",
    hash: "hash"
  });
  const { p, k, m, hash: hash5, expand: expand3, DST: _DST } = options;
  isBytes2(msg);
  isNum2(count2);
  const DST = validateDST2(_DST);
  const log2p = p.toString(2).length;
  const L = Math.ceil((log2p + k) / 8);
  const len_in_bytes = count2 * m * L;
  let prb;
  if (expand3 === "xmd") {
    prb = expand_message_xmd2(msg, DST, len_in_bytes, hash5);
  } else if (expand3 === "xof") {
    prb = expand_message_xof2(msg, DST, len_in_bytes, k, hash5);
  } else if (expand3 === "_internal_pass") {
    prb = msg;
  } else {
    throw new Error('expand must be "xmd" or "xof"');
  }
  const u = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const e = new Array(m);
    for (let j = 0; j < m; j++) {
      const elm_offset = L * (j + i * m);
      const tv = prb.subarray(elm_offset, elm_offset + L);
      e[j] = mod2(os2ip2(tv), p);
    }
    u[i] = e;
  }
  return u;
}
function isogenyMap2(field, map2) {
  const COEFF = map2.map((i) => Array.from(i).reverse());
  return (x, y) => {
    const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
    x = field.div(xNum, xDen);
    y = field.mul(y, field.div(yNum, yDen));
    return { x, y };
  };
}
function createHasher2(Point5, mapToCurve, def) {
  if (typeof mapToCurve !== "function")
    throw new Error("mapToCurve() must be defined");
  return {
    // Encodes byte string to elliptic curve.
    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    hashToCurve(msg, options) {
      const u = hash_to_field2(msg, 2, { ...def, DST: def.DST, ...options });
      const u0 = Point5.fromAffine(mapToCurve(u[0]));
      const u1 = Point5.fromAffine(mapToCurve(u[1]));
      const P = u0.add(u1).clearCofactor();
      P.assertValidity();
      return P;
    },
    // Encodes byte string to elliptic curve.
    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    encodeToCurve(msg, options) {
      const u = hash_to_field2(msg, 1, { ...def, DST: def.encodeDST, ...options });
      const P = Point5.fromAffine(mapToCurve(u[0])).clearCofactor();
      P.assertValidity();
      return P;
    }
  };
}

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/_shortw_utils.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/hmac.js
init_shim();
var HMAC2 = class extends Hash2 {
  constructor(hash5, _key) {
    super();
    this.finished = false;
    this.destroyed = false;
    hash2(hash5);
    const key = toBytes2(_key);
    this.iHash = hash5.create();
    if (typeof this.iHash.update !== "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen;
    this.outputLen = this.iHash.outputLen;
    const blockLen = this.blockLen;
    const pad = new Uint8Array(blockLen);
    pad.set(key.length > blockLen ? hash5.create().update(key).digest() : key);
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54;
    this.iHash.update(pad);
    this.oHash = hash5.create();
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54 ^ 92;
    this.oHash.update(pad);
    pad.fill(0);
  }
  update(buf) {
    exists2(this);
    this.iHash.update(buf);
    return this;
  }
  digestInto(out) {
    exists2(this);
    bytes2(out, this.outputLen);
    this.finished = true;
    this.iHash.digestInto(out);
    this.oHash.update(out);
    this.oHash.digestInto(out);
    this.destroy();
  }
  digest() {
    const out = new Uint8Array(this.oHash.outputLen);
    this.digestInto(out);
    return out;
  }
  _cloneInto(to) {
    to || (to = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
    to = to;
    to.finished = finished;
    to.destroyed = destroyed;
    to.blockLen = blockLen;
    to.outputLen = outputLen;
    to.oHash = oHash._cloneInto(to.oHash);
    to.iHash = iHash._cloneInto(to.iHash);
    return to;
  }
  destroy() {
    this.destroyed = true;
    this.oHash.destroy();
    this.iHash.destroy();
  }
};
var hmac2 = (hash5, key, message) => new HMAC2(hash5, key).update(message).digest();
hmac2.create = (hash5, key) => new HMAC2(hash5, key);

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/_shortw_utils.js
function getHash2(hash5) {
  return {
    hash: hash5,
    hmac: (key, ...msgs) => hmac2(hash5, key, concatBytes3(...msgs)),
    randomBytes: randomBytes2
  };
}
function createCurve2(curveDef, defHash) {
  const create = (hash5) => weierstrass2({ ...curveDef, ...getHash2(hash5) });
  return Object.freeze({ ...create(defHash), create });
}

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/secp256k1.js
var secp256k1P2 = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
var secp256k1N2 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var _1n24 = BigInt(1);
var _2n20 = BigInt(2);
var divNearest2 = (a, b) => (a + b / _2n20) / b;
function sqrtMod2(y) {
  const P = secp256k1P2;
  const _3n19 = BigInt(3), _6n11 = BigInt(6), _11n5 = BigInt(11), _22n = BigInt(22);
  const _23n5 = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b2 = y * y * y % P;
  const b3 = b2 * b2 * y % P;
  const b6 = pow22(b3, _3n19, P) * b3 % P;
  const b9 = pow22(b6, _3n19, P) * b3 % P;
  const b11 = pow22(b9, _2n20, P) * b2 % P;
  const b22 = pow22(b11, _11n5, P) * b11 % P;
  const b44 = pow22(b22, _22n, P) * b22 % P;
  const b88 = pow22(b44, _44n, P) * b44 % P;
  const b176 = pow22(b88, _88n, P) * b88 % P;
  const b220 = pow22(b176, _44n, P) * b44 % P;
  const b223 = pow22(b220, _3n19, P) * b3 % P;
  const t1 = pow22(b223, _23n5, P) * b22 % P;
  const t2 = pow22(t1, _6n11, P) * b2 % P;
  const root = pow22(t2, _2n20, P);
  if (!Fp3.eql(Fp3.sqr(root), y))
    throw new Error("Cannot find square root");
  return root;
}
var Fp3 = Field2(secp256k1P2, void 0, void 0, { sqrt: sqrtMod2 });
var secp256k12 = createCurve2({
  a: BigInt(0),
  b: BigInt(7),
  Fp: Fp3,
  n: secp256k1N2,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: true,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (k) => {
      const n = secp256k1N2;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n24 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b2 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest2(b2 * k, n);
      const c2 = divNearest2(-b1 * k, n);
      let k1 = mod2(k - c1 * a1 - c2 * a2, n);
      let k2 = mod2(-c1 * b1 - c2 * b2, n);
      const k1neg = k1 > POW_2_128;
      const k2neg = k2 > POW_2_128;
      if (k1neg)
        k1 = n - k1;
      if (k2neg)
        k2 = n - k2;
      if (k1 > POW_2_128 || k2 > POW_2_128) {
        throw new Error("splitScalar: Endomorphism failed, k=" + k);
      }
      return { k1neg, k1, k2neg, k2 };
    }
  }
}, sha2563);
var _0n24 = BigInt(0);
var fe2 = (x) => typeof x === "bigint" && _0n24 < x && x < secp256k1P2;
var ge2 = (x) => typeof x === "bigint" && _0n24 < x && x < secp256k1N2;
var TAGGED_HASH_PREFIXES2 = {};
function taggedHash2(tag, ...messages) {
  let tagP = TAGGED_HASH_PREFIXES2[tag];
  if (tagP === void 0) {
    const tagH = sha2563(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
    tagP = concatBytes4(tagH, tagH);
    TAGGED_HASH_PREFIXES2[tag] = tagP;
  }
  return sha2563(concatBytes4(tagP, ...messages));
}
var pointToBytes2 = (point) => point.toRawBytes(true).slice(1);
var numTo32b2 = (n) => numberToBytesBE2(n, 32);
var modP2 = (x) => mod2(x, secp256k1P2);
var modN2 = (x) => mod2(x, secp256k1N2);
var Point2 = secp256k12.ProjectivePoint;
var GmulAdd2 = (Q, a, b) => Point2.BASE.multiplyAndAddUnsafe(Q, a, b);
function schnorrGetExtPubKey2(priv) {
  let d_ = secp256k12.utils.normPrivateKeyToScalar(priv);
  let p = Point2.fromPrivateKey(d_);
  const scalar = p.hasEvenY() ? d_ : modN2(-d_);
  return { scalar, bytes: pointToBytes2(p) };
}
function lift_x2(x) {
  if (!fe2(x))
    throw new Error("bad x: need 0 < x < p");
  const xx = modP2(x * x);
  const c = modP2(xx * x + BigInt(7));
  let y = sqrtMod2(c);
  if (y % _2n20 !== _0n24)
    y = modP2(-y);
  const p = new Point2(x, y, _1n24);
  p.assertValidity();
  return p;
}
function challenge2(...args) {
  return modN2(bytesToNumberBE2(taggedHash2("BIP0340/challenge", ...args)));
}
function schnorrGetPublicKey2(privateKey) {
  return schnorrGetExtPubKey2(privateKey).bytes;
}
function schnorrSign2(message, privateKey, auxRand = randomBytes2(32)) {
  const m = ensureBytes2("message", message);
  const { bytes: px, scalar: d } = schnorrGetExtPubKey2(privateKey);
  const a = ensureBytes2("auxRand", auxRand, 32);
  const t = numTo32b2(d ^ bytesToNumberBE2(taggedHash2("BIP0340/aux", a)));
  const rand = taggedHash2("BIP0340/nonce", t, px, m);
  const k_ = modN2(bytesToNumberBE2(rand));
  if (k_ === _0n24)
    throw new Error("sign failed: k is zero");
  const { bytes: rx, scalar: k } = schnorrGetExtPubKey2(k_);
  const e = challenge2(rx, px, m);
  const sig2 = new Uint8Array(64);
  sig2.set(rx, 0);
  sig2.set(numTo32b2(modN2(k + e * d)), 32);
  if (!schnorrVerify2(sig2, m, px))
    throw new Error("sign: Invalid signature produced");
  return sig2;
}
function schnorrVerify2(signature, message, publicKey2) {
  const sig2 = ensureBytes2("signature", signature, 64);
  const m = ensureBytes2("message", message);
  const pub = ensureBytes2("publicKey", publicKey2, 32);
  try {
    const P = lift_x2(bytesToNumberBE2(pub));
    const r = bytesToNumberBE2(sig2.subarray(0, 32));
    if (!fe2(r))
      return false;
    const s = bytesToNumberBE2(sig2.subarray(32, 64));
    if (!ge2(s))
      return false;
    const e = challenge2(numTo32b2(r), pointToBytes2(P), m);
    const R = GmulAdd2(P, s, modN2(-e));
    if (!R || !R.hasEvenY() || R.toAffine().x !== r)
      return false;
    return true;
  } catch (error) {
    return false;
  }
}
var schnorr2 = (() => ({
  getPublicKey: schnorrGetPublicKey2,
  sign: schnorrSign2,
  verify: schnorrVerify2,
  utils: {
    randomPrivateKey: secp256k12.utils.randomPrivateKey,
    lift_x: lift_x2,
    pointToBytes: pointToBytes2,
    numberToBytesBE: numberToBytesBE2,
    bytesToNumberBE: bytesToNumberBE2,
    taggedHash: taggedHash2,
    mod: mod2
  }
}))();
var isoMap2 = (() => isogenyMap2(Fp3, [
  // xNum
  [
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
    "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
    "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
  ],
  // xDen
  [
    "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
    "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
    "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
    "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
    "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
  ],
  // yDen
  [
    "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
    "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
    "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((i) => i.map((j) => BigInt(j)))))();
var mapSWU2 = (() => mapToCurveSimpleSWU2(Fp3, {
  A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
  B: BigInt("1771"),
  Z: Fp3.create(BigInt("-11"))
}))();
var htf3 = (() => createHasher2(secp256k12.ProjectivePoint, (scalars) => {
  const { x, y } = mapSWU2(Fp3.create(scalars[0]));
  return isoMap2(x, y);
}, {
  DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
  encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
  p: Fp3.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha2563
}))();
var hashToCurve3 = (() => htf3.hashToCurve)();
var encodeToCurve3 = (() => htf3.encodeToCurve)();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/pair/fromSeed.js
function secp256k1PairFromSeed2(seed, onlyJs) {
  if (seed.length !== 32) {
    throw new Error("Expected valid 32-byte private key as a seed");
  }
  if (!hasBigInt8 || !onlyJs && isReady()) {
    const full = secp256k1FromSeed(seed);
    const publicKey2 = full.slice(32);
    if (u8aEmpty8(publicKey2)) {
      throw new Error("Invalid publicKey generated from WASM interface");
    }
    return {
      publicKey: publicKey2,
      secretKey: full.slice(0, 32)
    };
  }
  return {
    publicKey: secp256k12.getPublicKey(seed, true),
    secretKey: seed
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/key/hdkdDerive.js
init_shim();
function createSeedDeriveFn2(fromSeed, derive2) {
  return (keypair, { chainCode, isHard }) => {
    if (!isHard) {
      throw new Error("A soft key was found in the path and is not supported");
    }
    return fromSeed(derive2(keypair.secretKey.subarray(0, 32), chainCode));
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/key/hdkdEcdsa.js
var keyHdkdEcdsa2 = createSeedDeriveFn2(secp256k1PairFromSeed2, secp256k1DeriveHard2);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/key/hdkdEd25519.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ed25519/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ed25519/deriveHard.js
init_shim();
var HDKD4 = compactAddLength8(stringToU8a8("Ed25519HDKD"));
function ed25519DeriveHard2(seed, chainCode) {
  if (!isU8a8(chainCode) || chainCode.length !== 32) {
    throw new Error("Invalid chainCode passed to derive");
  }
  return blake2AsU8a2(u8aConcat8(HDKD4, seed, chainCode));
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ed25519/pair/fromRandom.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/random/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/random/asNumber.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/random/asU8a.js
init_shim();
function randomAsU8a2(length = 32) {
  return getRandomValues(new Uint8Array(length));
}
var randomAsHex2 = createAsHex2(randomAsU8a2);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/random/asNumber.js
var BN_532 = new import_bn90.default(9007199254740991);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ed25519/pair/fromSeed.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/ed25519.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/sha512.js
init_shim();
var [SHA512_Kh2, SHA512_Kl2] = (() => u64_default2.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n) => BigInt(n))))();
var SHA512_W_H2 = new Uint32Array(80);
var SHA512_W_L2 = new Uint32Array(80);
var SHA5122 = class extends SHA22 {
  constructor() {
    super(128, 64, 16, false);
    this.Ah = 1779033703 | 0;
    this.Al = 4089235720 | 0;
    this.Bh = 3144134277 | 0;
    this.Bl = 2227873595 | 0;
    this.Ch = 1013904242 | 0;
    this.Cl = 4271175723 | 0;
    this.Dh = 2773480762 | 0;
    this.Dl = 1595750129 | 0;
    this.Eh = 1359893119 | 0;
    this.El = 2917565137 | 0;
    this.Fh = 2600822924 | 0;
    this.Fl = 725511199 | 0;
    this.Gh = 528734635 | 0;
    this.Gl = 4215389547 | 0;
    this.Hh = 1541459225 | 0;
    this.Hl = 327033209 | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4) {
      SHA512_W_H2[i] = view.getUint32(offset);
      SHA512_W_L2[i] = view.getUint32(offset += 4);
    }
    for (let i = 16; i < 80; i++) {
      const W15h = SHA512_W_H2[i - 15] | 0;
      const W15l = SHA512_W_L2[i - 15] | 0;
      const s0h = u64_default2.rotrSH(W15h, W15l, 1) ^ u64_default2.rotrSH(W15h, W15l, 8) ^ u64_default2.shrSH(W15h, W15l, 7);
      const s0l = u64_default2.rotrSL(W15h, W15l, 1) ^ u64_default2.rotrSL(W15h, W15l, 8) ^ u64_default2.shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H2[i - 2] | 0;
      const W2l = SHA512_W_L2[i - 2] | 0;
      const s1h = u64_default2.rotrSH(W2h, W2l, 19) ^ u64_default2.rotrBH(W2h, W2l, 61) ^ u64_default2.shrSH(W2h, W2l, 6);
      const s1l = u64_default2.rotrSL(W2h, W2l, 19) ^ u64_default2.rotrBL(W2h, W2l, 61) ^ u64_default2.shrSL(W2h, W2l, 6);
      const SUMl = u64_default2.add4L(s0l, s1l, SHA512_W_L2[i - 7], SHA512_W_L2[i - 16]);
      const SUMh = u64_default2.add4H(SUMl, s0h, s1h, SHA512_W_H2[i - 7], SHA512_W_H2[i - 16]);
      SHA512_W_H2[i] = SUMh | 0;
      SHA512_W_L2[i] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i = 0; i < 80; i++) {
      const sigma1h = u64_default2.rotrSH(Eh, El, 14) ^ u64_default2.rotrSH(Eh, El, 18) ^ u64_default2.rotrBH(Eh, El, 41);
      const sigma1l = u64_default2.rotrSL(Eh, El, 14) ^ u64_default2.rotrSL(Eh, El, 18) ^ u64_default2.rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = u64_default2.add5L(Hl, sigma1l, CHIl, SHA512_Kl2[i], SHA512_W_L2[i]);
      const T1h = u64_default2.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh2[i], SHA512_W_H2[i]);
      const T1l = T1ll | 0;
      const sigma0h = u64_default2.rotrSH(Ah, Al, 28) ^ u64_default2.rotrBH(Ah, Al, 34) ^ u64_default2.rotrBH(Ah, Al, 39);
      const sigma0l = u64_default2.rotrSL(Ah, Al, 28) ^ u64_default2.rotrBL(Ah, Al, 34) ^ u64_default2.rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = u64_default2.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = u64_default2.add3L(T1l, sigma0l, MAJl);
      Ah = u64_default2.add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = u64_default2.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = u64_default2.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = u64_default2.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = u64_default2.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = u64_default2.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = u64_default2.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = u64_default2.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = u64_default2.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    SHA512_W_H2.fill(0);
    SHA512_W_L2.fill(0);
  }
  destroy() {
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var SHA512_2242 = class extends SHA5122 {
  constructor() {
    super();
    this.Ah = 2352822216 | 0;
    this.Al = 424955298 | 0;
    this.Bh = 1944164710 | 0;
    this.Bl = 2312950998 | 0;
    this.Ch = 502970286 | 0;
    this.Cl = 855612546 | 0;
    this.Dh = 1738396948 | 0;
    this.Dl = 1479516111 | 0;
    this.Eh = 258812777 | 0;
    this.El = 2077511080 | 0;
    this.Fh = 2011393907 | 0;
    this.Fl = 79989058 | 0;
    this.Gh = 1067287976 | 0;
    this.Gl = 1780299464 | 0;
    this.Hh = 286451373 | 0;
    this.Hl = 2446758561 | 0;
    this.outputLen = 28;
  }
};
var SHA512_2562 = class extends SHA5122 {
  constructor() {
    super();
    this.Ah = 573645204 | 0;
    this.Al = 4230739756 | 0;
    this.Bh = 2673172387 | 0;
    this.Bl = 3360449730 | 0;
    this.Ch = 596883563 | 0;
    this.Cl = 1867755857 | 0;
    this.Dh = 2520282905 | 0;
    this.Dl = 1497426621 | 0;
    this.Eh = 2519219938 | 0;
    this.El = 2827943907 | 0;
    this.Fh = 3193839141 | 0;
    this.Fl = 1401305490 | 0;
    this.Gh = 721525244 | 0;
    this.Gl = 746961066 | 0;
    this.Hh = 246885852 | 0;
    this.Hl = 2177182882 | 0;
    this.outputLen = 32;
  }
};
var SHA3842 = class extends SHA5122 {
  constructor() {
    super();
    this.Ah = 3418070365 | 0;
    this.Al = 3238371032 | 0;
    this.Bh = 1654270250 | 0;
    this.Bl = 914150663 | 0;
    this.Ch = 2438529370 | 0;
    this.Cl = 812702999 | 0;
    this.Dh = 355462360 | 0;
    this.Dl = 4144912697 | 0;
    this.Eh = 1731405415 | 0;
    this.El = 4290775857 | 0;
    this.Fh = 2394180231 | 0;
    this.Fl = 1750603025 | 0;
    this.Gh = 3675008525 | 0;
    this.Gl = 1694076839 | 0;
    this.Hh = 1203062813 | 0;
    this.Hl = 3204075428 | 0;
    this.outputLen = 48;
  }
};
var sha5123 = wrapConstructor2(() => new SHA5122());
var sha512_2242 = wrapConstructor2(() => new SHA512_2242());
var sha512_2562 = wrapConstructor2(() => new SHA512_2562());
var sha3842 = wrapConstructor2(() => new SHA3842());

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/abstract/edwards.js
init_shim();
var _0n25 = BigInt(0);
var _1n25 = BigInt(1);
var _2n21 = BigInt(2);
var _8n13 = BigInt(8);
var VERIFY_DEFAULT2 = { zip215: true };
function validateOpts5(curve) {
  const opts = validateBasic2(curve);
  validateObject2(curve, {
    hash: "function",
    a: "bigint",
    d: "bigint",
    randomBytes: "function"
  }, {
    adjustScalarBytes: "function",
    domain: "function",
    uvRatio: "function",
    mapToCurve: "function"
  });
  return Object.freeze({ ...opts });
}
function twistedEdwards2(curveDef) {
  const CURVE = validateOpts5(curveDef);
  const { Fp: Fp9, n: CURVE_ORDER, prehash, hash: cHash, randomBytes: randomBytes5, nByteLength, h: cofactor } = CURVE;
  const MASK = _2n21 << BigInt(nByteLength * 8) - _1n25;
  const modP5 = Fp9.create;
  const uvRatio5 = CURVE.uvRatio || ((u, v) => {
    try {
      return { isValid: true, value: Fp9.sqrt(u * Fp9.inv(v)) };
    } catch (e) {
      return { isValid: false, value: _0n25 };
    }
  });
  const adjustScalarBytes5 = CURVE.adjustScalarBytes || ((bytes5) => bytes5);
  const domain = CURVE.domain || ((data, ctx, phflag) => {
    if (ctx.length || phflag)
      throw new Error("Contexts/pre-hash are not supported");
    return data;
  });
  const inBig = (n) => typeof n === "bigint" && _0n25 < n;
  const inRange = (n, max2) => inBig(n) && inBig(max2) && n < max2;
  const in0MaskRange = (n) => n === _0n25 || inRange(n, MASK);
  function assertInRange(n, max2) {
    if (inRange(n, max2))
      return n;
    throw new Error(`Expected valid scalar < ${max2}, got ${typeof n} ${n}`);
  }
  function assertGE0(n) {
    return n === _0n25 ? n : assertInRange(n, CURVE_ORDER);
  }
  const pointPrecomputes = /* @__PURE__ */ new Map();
  function isPoint(other) {
    if (!(other instanceof Point5))
      throw new Error("ExtendedPoint expected");
  }
  class Point5 {
    constructor(ex, ey, ez, et) {
      this.ex = ex;
      this.ey = ey;
      this.ez = ez;
      this.et = et;
      if (!in0MaskRange(ex))
        throw new Error("x required");
      if (!in0MaskRange(ey))
        throw new Error("y required");
      if (!in0MaskRange(ez))
        throw new Error("z required");
      if (!in0MaskRange(et))
        throw new Error("t required");
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(p) {
      if (p instanceof Point5)
        throw new Error("extended point not allowed");
      const { x, y } = p || {};
      if (!in0MaskRange(x) || !in0MaskRange(y))
        throw new Error("invalid affine point");
      return new Point5(x, y, _1n25, modP5(x * y));
    }
    static normalizeZ(points) {
      const toInv = Fp9.invertBatch(points.map((p) => p.ez));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point5.fromAffine);
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    // Not required for fromHex(), which always creates valid points.
    // Could be useful for fromAffine().
    assertValidity() {
      const { a, d } = CURVE;
      if (this.is0())
        throw new Error("bad point: ZERO");
      const { ex: X, ey: Y, ez: Z, et: T } = this;
      const X2 = modP5(X * X);
      const Y2 = modP5(Y * Y);
      const Z2 = modP5(Z * Z);
      const Z4 = modP5(Z2 * Z2);
      const aX2 = modP5(X2 * a);
      const left = modP5(Z2 * modP5(aX2 + Y2));
      const right = modP5(Z4 + modP5(d * modP5(X2 * Y2)));
      if (left !== right)
        throw new Error("bad point: equation left != right (1)");
      const XY = modP5(X * Y);
      const ZT = modP5(Z * T);
      if (XY !== ZT)
        throw new Error("bad point: equation left != right (2)");
    }
    // Compare one point to another.
    equals(other) {
      isPoint(other);
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const { ex: X2, ey: Y2, ez: Z2 } = other;
      const X1Z2 = modP5(X1 * Z2);
      const X2Z1 = modP5(X2 * Z1);
      const Y1Z2 = modP5(Y1 * Z2);
      const Y2Z1 = modP5(Y2 * Z1);
      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
    }
    is0() {
      return this.equals(Point5.ZERO);
    }
    negate() {
      return new Point5(modP5(-this.ex), this.ey, this.ez, modP5(-this.et));
    }
    // Fast algo for doubling Extended Point.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
    // Cost: 4M + 4S + 1*a + 6add + 1*2.
    double() {
      const { a } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const A = modP5(X1 * X1);
      const B = modP5(Y1 * Y1);
      const C = modP5(_2n21 * modP5(Z1 * Z1));
      const D = modP5(a * A);
      const x1y1 = X1 + Y1;
      const E = modP5(modP5(x1y1 * x1y1) - A - B);
      const G3 = D + B;
      const F = G3 - C;
      const H = D - B;
      const X3 = modP5(E * F);
      const Y3 = modP5(G3 * H);
      const T3 = modP5(E * H);
      const Z3 = modP5(F * G3);
      return new Point5(X3, Y3, Z3, T3);
    }
    // Fast algo for adding 2 Extended Points.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
    // Cost: 9M + 1*a + 1*d + 7add.
    add(other) {
      isPoint(other);
      const { a, d } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;
      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;
      if (a === BigInt(-1)) {
        const A2 = modP5((Y1 - X1) * (Y2 + X2));
        const B2 = modP5((Y1 + X1) * (Y2 - X2));
        const F2 = modP5(B2 - A2);
        if (F2 === _0n25)
          return this.double();
        const C2 = modP5(Z1 * _2n21 * T2);
        const D2 = modP5(T1 * _2n21 * Z2);
        const E2 = D2 + C2;
        const G4 = B2 + A2;
        const H2 = D2 - C2;
        const X32 = modP5(E2 * F2);
        const Y32 = modP5(G4 * H2);
        const T32 = modP5(E2 * H2);
        const Z32 = modP5(F2 * G4);
        return new Point5(X32, Y32, Z32, T32);
      }
      const A = modP5(X1 * X2);
      const B = modP5(Y1 * Y2);
      const C = modP5(T1 * d * T2);
      const D = modP5(Z1 * Z2);
      const E = modP5((X1 + Y1) * (X2 + Y2) - A - B);
      const F = D - C;
      const G3 = D + C;
      const H = modP5(B - a * A);
      const X3 = modP5(E * F);
      const Y3 = modP5(G3 * H);
      const T3 = modP5(E * H);
      const Z3 = modP5(F * G3);
      return new Point5(X3, Y3, Z3, T3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    wNAF(n) {
      return wnaf.wNAFCached(this, pointPrecomputes, n, Point5.normalizeZ);
    }
    // Constant-time multiplication.
    multiply(scalar) {
      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));
      return Point5.normalizeZ([p, f])[0];
    }
    // Non-constant-time multiplication. Uses double-and-add algorithm.
    // It's faster, but should only be used when you don't care about
    // an exposed private key e.g. sig verification.
    // Does NOT allow scalars higher than CURVE.n.
    multiplyUnsafe(scalar) {
      let n = assertGE0(scalar);
      if (n === _0n25)
        return I;
      if (this.equals(I) || n === _1n25)
        return this;
      if (this.equals(G))
        return this.wNAF(n).p;
      return wnaf.unsafeLadder(this, n);
    }
    // Checks if point is of small order.
    // If you add something to small order point, you will have "dirty"
    // point with torsion component.
    // Multiplies point by cofactor and checks if the result is 0.
    isSmallOrder() {
      return this.multiplyUnsafe(cofactor).is0();
    }
    // Multiplies point by curve order and checks if the result is 0.
    // Returns `false` is the point is dirty.
    isTorsionFree() {
      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
    }
    // Converts Extended point to default (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    toAffine(iz) {
      const { ex: x, ey: y, ez: z } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? _8n13 : Fp9.inv(z);
      const ax = modP5(x * iz);
      const ay = modP5(y * iz);
      const zz = modP5(z * iz);
      if (is0)
        return { x: _0n25, y: _1n25 };
      if (zz !== _1n25)
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    clearCofactor() {
      const { h: cofactor2 } = CURVE;
      if (cofactor2 === _1n25)
        return this;
      return this.multiplyUnsafe(cofactor2);
    }
    // Converts hash string or Uint8Array to Point.
    // Uses algo from RFC8032 5.1.3.
    static fromHex(hex11, zip215 = false) {
      const { d, a } = CURVE;
      const len = Fp9.BYTES;
      hex11 = ensureBytes2("pointHex", hex11, len);
      const normed = hex11.slice();
      const lastByte = hex11[len - 1];
      normed[len - 1] = lastByte & ~128;
      const y = bytesToNumberLE2(normed);
      if (y === _0n25) {
      } else {
        if (zip215)
          assertInRange(y, MASK);
        else
          assertInRange(y, Fp9.ORDER);
      }
      const y2 = modP5(y * y);
      const u = modP5(y2 - _1n25);
      const v = modP5(d * y2 - a);
      let { isValid, value: x } = uvRatio5(u, v);
      if (!isValid)
        throw new Error("Point.fromHex: invalid y coordinate");
      const isXOdd = (x & _1n25) === _1n25;
      const isLastByteOdd = (lastByte & 128) !== 0;
      if (!zip215 && x === _0n25 && isLastByteOdd)
        throw new Error("Point.fromHex: x=0 and x_0=1");
      if (isLastByteOdd !== isXOdd)
        x = modP5(-x);
      return Point5.fromAffine({ x, y });
    }
    static fromPrivateKey(privKey) {
      return getExtendedPublicKey(privKey).point;
    }
    toRawBytes() {
      const { x, y } = this.toAffine();
      const bytes5 = numberToBytesLE2(y, Fp9.BYTES);
      bytes5[bytes5.length - 1] |= x & _1n25 ? 128 : 0;
      return bytes5;
    }
    toHex() {
      return bytesToHex2(this.toRawBytes());
    }
  }
  Point5.BASE = new Point5(CURVE.Gx, CURVE.Gy, _1n25, modP5(CURVE.Gx * CURVE.Gy));
  Point5.ZERO = new Point5(_0n25, _1n25, _1n25, _0n25);
  const { BASE: G, ZERO: I } = Point5;
  const wnaf = wNAF2(Point5, nByteLength * 8);
  function modN5(a) {
    return mod2(a, CURVE_ORDER);
  }
  function modN_LE(hash5) {
    return modN5(bytesToNumberLE2(hash5));
  }
  function getExtendedPublicKey(key) {
    const len = nByteLength;
    key = ensureBytes2("private key", key, len);
    const hashed = ensureBytes2("hashed private key", cHash(key), 2 * len);
    const head = adjustScalarBytes5(hashed.slice(0, len));
    const prefix2 = hashed.slice(len, 2 * len);
    const scalar = modN_LE(head);
    const point = G.multiply(scalar);
    const pointBytes = point.toRawBytes();
    return { head, prefix: prefix2, scalar, point, pointBytes };
  }
  function getPublicKey(privKey) {
    return getExtendedPublicKey(privKey).pointBytes;
  }
  function hashDomainToScalar(context2 = new Uint8Array(), ...msgs) {
    const msg = concatBytes4(...msgs);
    return modN_LE(cHash(domain(msg, ensureBytes2("context", context2), !!prehash)));
  }
  function sign2(msg, privKey, options = {}) {
    msg = ensureBytes2("message", msg);
    if (prehash)
      msg = prehash(msg);
    const { prefix: prefix2, scalar, pointBytes } = getExtendedPublicKey(privKey);
    const r = hashDomainToScalar(options.context, prefix2, msg);
    const R = G.multiply(r).toRawBytes();
    const k = hashDomainToScalar(options.context, R, pointBytes, msg);
    const s = modN5(r + k * scalar);
    assertGE0(s);
    const res = concatBytes4(R, numberToBytesLE2(s, Fp9.BYTES));
    return ensureBytes2("result", res, nByteLength * 2);
  }
  const verifyOpts = VERIFY_DEFAULT2;
  function verify(sig2, msg, publicKey2, options = verifyOpts) {
    const { context: context2, zip215 } = options;
    const len = Fp9.BYTES;
    sig2 = ensureBytes2("signature", sig2, 2 * len);
    msg = ensureBytes2("message", msg);
    if (prehash)
      msg = prehash(msg);
    const s = bytesToNumberLE2(sig2.slice(len, 2 * len));
    let A, R, SB;
    try {
      A = Point5.fromHex(publicKey2, zip215);
      R = Point5.fromHex(sig2.slice(0, len), zip215);
      SB = G.multiplyUnsafe(s);
    } catch (error) {
      return false;
    }
    if (!zip215 && A.isSmallOrder())
      return false;
    const k = hashDomainToScalar(context2, R.toRawBytes(), A.toRawBytes(), msg);
    const RkA = R.add(A.multiplyUnsafe(k));
    return RkA.subtract(SB).clearCofactor().equals(Point5.ZERO);
  }
  G._setWindowSize(8);
  const utils5 = {
    getExtendedPublicKey,
    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.
    randomPrivateKey: () => randomBytes5(Fp9.BYTES),
    /**
     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
     * values. This slows down first getPublicKey() by milliseconds (see Speed section),
     * but allows to speed-up subsequent getPublicKey() calls up to 20x.
     * @param windowSize 2, 4, 8, 16
     */
    precompute(windowSize = 8, point = Point5.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  return {
    CURVE,
    getPublicKey,
    sign: sign2,
    verify,
    ExtendedPoint: Point5,
    utils: utils5
  };
}

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/abstract/montgomery.js
init_shim();
var _0n26 = BigInt(0);
var _1n26 = BigInt(1);
function validateOpts6(curve) {
  validateObject2(curve, {
    a: "bigint"
  }, {
    montgomeryBits: "isSafeInteger",
    nByteLength: "isSafeInteger",
    adjustScalarBytes: "function",
    domain: "function",
    powPminus2: "function",
    Gu: "bigint"
  });
  return Object.freeze({ ...curve });
}
function montgomery2(curveDef) {
  const CURVE = validateOpts6(curveDef);
  const { P } = CURVE;
  const modP5 = (n) => mod2(n, P);
  const montgomeryBits = CURVE.montgomeryBits;
  const montgomeryBytes = Math.ceil(montgomeryBits / 8);
  const fieldLen = CURVE.nByteLength;
  const adjustScalarBytes5 = CURVE.adjustScalarBytes || ((bytes5) => bytes5);
  const powPminus2 = CURVE.powPminus2 || ((x) => pow3(x, P - BigInt(2), P));
  function cswap(swap, x_2, x_3) {
    const dummy = modP5(swap * (x_2 - x_3));
    x_2 = modP5(x_2 - dummy);
    x_3 = modP5(x_3 + dummy);
    return [x_2, x_3];
  }
  function assertFieldElement(n) {
    if (typeof n === "bigint" && _0n26 <= n && n < P)
      return n;
    throw new Error("Expected valid scalar 0 < scalar < CURVE.P");
  }
  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);
  function montgomeryLadder(pointU, scalar) {
    const u = assertFieldElement(pointU);
    const k = assertFieldElement(scalar);
    const x_1 = u;
    let x_2 = _1n26;
    let z_2 = _0n26;
    let x_3 = u;
    let z_3 = _1n26;
    let swap = _0n26;
    let sw;
    for (let t = BigInt(montgomeryBits - 1); t >= _0n26; t--) {
      const k_t = k >> t & _1n26;
      swap ^= k_t;
      sw = cswap(swap, x_2, x_3);
      x_2 = sw[0];
      x_3 = sw[1];
      sw = cswap(swap, z_2, z_3);
      z_2 = sw[0];
      z_3 = sw[1];
      swap = k_t;
      const A = x_2 + z_2;
      const AA = modP5(A * A);
      const B = x_2 - z_2;
      const BB = modP5(B * B);
      const E = AA - BB;
      const C = x_3 + z_3;
      const D = x_3 - z_3;
      const DA = modP5(D * A);
      const CB = modP5(C * B);
      const dacb = DA + CB;
      const da_cb = DA - CB;
      x_3 = modP5(dacb * dacb);
      z_3 = modP5(x_1 * modP5(da_cb * da_cb));
      x_2 = modP5(AA * BB);
      z_2 = modP5(E * (AA + modP5(a24 * E)));
    }
    sw = cswap(swap, x_2, x_3);
    x_2 = sw[0];
    x_3 = sw[1];
    sw = cswap(swap, z_2, z_3);
    z_2 = sw[0];
    z_3 = sw[1];
    const z2 = powPminus2(z_2);
    return modP5(x_2 * z2);
  }
  function encodeUCoordinate(u) {
    return numberToBytesLE2(modP5(u), montgomeryBytes);
  }
  function decodeUCoordinate(uEnc) {
    const u = ensureBytes2("u coordinate", uEnc, montgomeryBytes);
    if (fieldLen === montgomeryBytes)
      u[fieldLen - 1] &= 127;
    return bytesToNumberLE2(u);
  }
  function decodeScalar(n) {
    const bytes5 = ensureBytes2("scalar", n);
    if (bytes5.length !== montgomeryBytes && bytes5.length !== fieldLen)
      throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${bytes5.length}`);
    return bytesToNumberLE2(adjustScalarBytes5(bytes5));
  }
  function scalarMult(scalar, u) {
    const pointU = decodeUCoordinate(u);
    const _scalar = decodeScalar(scalar);
    const pu = montgomeryLadder(pointU, _scalar);
    if (pu === _0n26)
      throw new Error("Invalid private or public key received");
    return encodeUCoordinate(pu);
  }
  const GuBytes = encodeUCoordinate(CURVE.Gu);
  function scalarMultBase(scalar) {
    return scalarMult(scalar, GuBytes);
  }
  return {
    scalarMult,
    scalarMultBase,
    getSharedSecret: (privateKey, publicKey2) => scalarMult(privateKey, publicKey2),
    getPublicKey: (privateKey) => scalarMultBase(privateKey),
    utils: { randomPrivateKey: () => CURVE.randomBytes(CURVE.nByteLength) },
    GuBytes
  };
}

// node_modules/@polkadot/types/node_modules/@noble/curves/esm/ed25519.js
var ED25519_P2 = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var ED25519_SQRT_M12 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
var _0n27 = BigInt(0);
var _1n27 = BigInt(1);
var _2n22 = BigInt(2);
var _5n13 = BigInt(5);
var _10n11 = BigInt(10);
var _20n2 = BigInt(20);
var _40n2 = BigInt(40);
var _80n2 = BigInt(80);
function ed25519_pow_2_252_32(x) {
  const P = ED25519_P2;
  const x2 = x * x % P;
  const b2 = x2 * x % P;
  const b4 = pow22(b2, _2n22, P) * b2 % P;
  const b5 = pow22(b4, _1n27, P) * x % P;
  const b10 = pow22(b5, _5n13, P) * b5 % P;
  const b20 = pow22(b10, _10n11, P) * b10 % P;
  const b40 = pow22(b20, _20n2, P) * b20 % P;
  const b80 = pow22(b40, _40n2, P) * b40 % P;
  const b160 = pow22(b80, _80n2, P) * b80 % P;
  const b240 = pow22(b160, _80n2, P) * b80 % P;
  const b250 = pow22(b240, _10n11, P) * b10 % P;
  const pow_p_5_8 = pow22(b250, _2n22, P) * x % P;
  return { pow_p_5_8, b2 };
}
function adjustScalarBytes2(bytes5) {
  bytes5[0] &= 248;
  bytes5[31] &= 127;
  bytes5[31] |= 64;
  return bytes5;
}
function uvRatio2(u, v) {
  const P = ED25519_P2;
  const v3 = mod2(v * v * v, P);
  const v7 = mod2(v3 * v3 * v, P);
  const pow6 = ed25519_pow_2_252_32(u * v7).pow_p_5_8;
  let x = mod2(u * v3 * pow6, P);
  const vx2 = mod2(v * x * x, P);
  const root1 = x;
  const root2 = mod2(x * ED25519_SQRT_M12, P);
  const useRoot1 = vx2 === u;
  const useRoot2 = vx2 === mod2(-u, P);
  const noRoot = vx2 === mod2(-u * ED25519_SQRT_M12, P);
  if (useRoot1)
    x = root1;
  if (useRoot2 || noRoot)
    x = root2;
  if (isNegativeLE2(x, P))
    x = mod2(-x, P);
  return { isValid: useRoot1 || useRoot2, value: x };
}
var Fp4 = Field2(ED25519_P2, void 0, true);
var ed25519Defaults2 = {
  // Param: a
  a: BigInt(-1),
  // d is equal to -121665/121666 over finite field.
  // Negative number is P - number, and division is invert(number, P)
  d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),
  // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n
  Fp: Fp4,
  // Subgroup order: how many points curve has
  // 2n**252n + 27742317777372353535851937790883648493n;
  n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),
  // Cofactor
  h: BigInt(8),
  // Base point (x, y) aka generator point
  Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),
  Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),
  hash: sha5123,
  randomBytes: randomBytes2,
  adjustScalarBytes: adjustScalarBytes2,
  // dom2
  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
  // Constant-time, u/√v
  uvRatio: uvRatio2
};
var ed255192 = twistedEdwards2(ed25519Defaults2);
function ed25519_domain2(data, ctx, phflag) {
  if (ctx.length > 255)
    throw new Error("Context is too big");
  return concatBytes3(utf8ToBytes3("SigEd25519 no Ed25519 collisions"), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);
}
var ed25519ctx2 = twistedEdwards2({
  ...ed25519Defaults2,
  domain: ed25519_domain2
});
var ed25519ph2 = twistedEdwards2({
  ...ed25519Defaults2,
  domain: ed25519_domain2,
  prehash: sha5123
});
var x255192 = (() => montgomery2({
  P: ED25519_P2,
  a: BigInt(486662),
  montgomeryBits: 255,
  nByteLength: 32,
  Gu: BigInt(9),
  powPminus2: (x) => {
    const P = ED25519_P2;
    const { pow_p_5_8, b2 } = ed25519_pow_2_252_32(x);
    return mod2(pow22(pow_p_5_8, BigInt(3), P) * b2, P);
  },
  adjustScalarBytes: adjustScalarBytes2,
  randomBytes: randomBytes2
}))();
var ELL2_C12 = (Fp4.ORDER + BigInt(3)) / BigInt(8);
var ELL2_C22 = Fp4.pow(_2n22, ELL2_C12);
var ELL2_C32 = Fp4.sqrt(Fp4.neg(Fp4.ONE));
var ELL2_C42 = (Fp4.ORDER - BigInt(5)) / BigInt(8);
var ELL2_J2 = BigInt(486662);
function map_to_curve_elligator2_curve255192(u) {
  let tv1 = Fp4.sqr(u);
  tv1 = Fp4.mul(tv1, _2n22);
  let xd = Fp4.add(tv1, Fp4.ONE);
  let x1n = Fp4.neg(ELL2_J2);
  let tv2 = Fp4.sqr(xd);
  let gxd = Fp4.mul(tv2, xd);
  let gx1 = Fp4.mul(tv1, ELL2_J2);
  gx1 = Fp4.mul(gx1, x1n);
  gx1 = Fp4.add(gx1, tv2);
  gx1 = Fp4.mul(gx1, x1n);
  let tv3 = Fp4.sqr(gxd);
  tv2 = Fp4.sqr(tv3);
  tv3 = Fp4.mul(tv3, gxd);
  tv3 = Fp4.mul(tv3, gx1);
  tv2 = Fp4.mul(tv2, tv3);
  let y11 = Fp4.pow(tv2, ELL2_C42);
  y11 = Fp4.mul(y11, tv3);
  let y12 = Fp4.mul(y11, ELL2_C32);
  tv2 = Fp4.sqr(y11);
  tv2 = Fp4.mul(tv2, gxd);
  let e1 = Fp4.eql(tv2, gx1);
  let y1 = Fp4.cmov(y12, y11, e1);
  let x2n = Fp4.mul(x1n, tv1);
  let y21 = Fp4.mul(y11, u);
  y21 = Fp4.mul(y21, ELL2_C22);
  let y22 = Fp4.mul(y21, ELL2_C32);
  let gx2 = Fp4.mul(gx1, tv1);
  tv2 = Fp4.sqr(y21);
  tv2 = Fp4.mul(tv2, gxd);
  let e2 = Fp4.eql(tv2, gx2);
  let y2 = Fp4.cmov(y22, y21, e2);
  tv2 = Fp4.sqr(y1);
  tv2 = Fp4.mul(tv2, gxd);
  let e3 = Fp4.eql(tv2, gx1);
  let xn = Fp4.cmov(x2n, x1n, e3);
  let y = Fp4.cmov(y2, y1, e3);
  let e4 = Fp4.isOdd(y);
  y = Fp4.cmov(y, Fp4.neg(y), e3 !== e4);
  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n27 };
}
var ELL2_C1_EDWARDS2 = FpSqrtEven2(Fp4, Fp4.neg(BigInt(486664)));
function map_to_curve_elligator2_edwards255192(u) {
  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve255192(u);
  let xn = Fp4.mul(xMn, yMd);
  xn = Fp4.mul(xn, ELL2_C1_EDWARDS2);
  let xd = Fp4.mul(xMd, yMn);
  let yn = Fp4.sub(xMn, xMd);
  let yd = Fp4.add(xMn, xMd);
  let tv1 = Fp4.mul(xd, yd);
  let e = Fp4.eql(tv1, Fp4.ZERO);
  xn = Fp4.cmov(xn, Fp4.ZERO, e);
  xd = Fp4.cmov(xd, Fp4.ONE, e);
  yn = Fp4.cmov(yn, Fp4.ONE, e);
  yd = Fp4.cmov(yd, Fp4.ONE, e);
  const inv = Fp4.invertBatch([xd, yd]);
  return { x: Fp4.mul(xn, inv[0]), y: Fp4.mul(yn, inv[1]) };
}
var htf4 = (() => createHasher2(ed255192.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards255192(scalars[0]), {
  DST: "edwards25519_XMD:SHA-512_ELL2_RO_",
  encodeDST: "edwards25519_XMD:SHA-512_ELL2_NU_",
  p: Fp4.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha5123
}))();
var hashToCurve4 = (() => htf4.hashToCurve)();
var encodeToCurve4 = (() => htf4.encodeToCurve)();
function assertRstPoint2(other) {
  if (!(other instanceof RistPoint2))
    throw new Error("RistrettoPoint expected");
}
var SQRT_M12 = ED25519_SQRT_M12;
var SQRT_AD_MINUS_ONE2 = BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235");
var INVSQRT_A_MINUS_D2 = BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578");
var ONE_MINUS_D_SQ2 = BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838");
var D_MINUS_ONE_SQ2 = BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
var invertSqrt2 = (number5) => uvRatio2(_1n27, number5);
var MAX_255B2 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var bytes255ToNumberLE2 = (bytes5) => ed255192.CURVE.Fp.create(bytesToNumberLE2(bytes5) & MAX_255B2);
function calcElligatorRistrettoMap2(r0) {
  const { d } = ed255192.CURVE;
  const P = ed255192.CURVE.Fp.ORDER;
  const mod5 = ed255192.CURVE.Fp.create;
  const r = mod5(SQRT_M12 * r0 * r0);
  const Ns = mod5((r + _1n27) * ONE_MINUS_D_SQ2);
  let c = BigInt(-1);
  const D = mod5((c - d * r) * mod5(r + d));
  let { isValid: Ns_D_is_sq, value: s } = uvRatio2(Ns, D);
  let s_ = mod5(s * r0);
  if (!isNegativeLE2(s_, P))
    s_ = mod5(-s_);
  if (!Ns_D_is_sq)
    s = s_;
  if (!Ns_D_is_sq)
    c = r;
  const Nt = mod5(c * (r - _1n27) * D_MINUS_ONE_SQ2 - D);
  const s2 = s * s;
  const W0 = mod5((s + s) * D);
  const W1 = mod5(Nt * SQRT_AD_MINUS_ONE2);
  const W2 = mod5(_1n27 - s2);
  const W3 = mod5(_1n27 + s2);
  return new ed255192.ExtendedPoint(mod5(W0 * W3), mod5(W2 * W1), mod5(W1 * W3), mod5(W0 * W2));
}
var RistPoint2 = class {
  // Private property to discourage combining ExtendedPoint + RistrettoPoint
  // Always use Ristretto encoding/decoding instead.
  constructor(ep) {
    this.ep = ep;
  }
  static fromAffine(ap) {
    return new RistPoint2(ed255192.ExtendedPoint.fromAffine(ap));
  }
  /**
   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.
   * The hash-to-group operation applies Elligator twice and adds the results.
   * **Note:** this is one-way map, there is no conversion from point to hash.
   * https://ristretto.group/formulas/elligator.html
   * @param hex 64-byte output of a hash function
   */
  static hashToCurve(hex11) {
    hex11 = ensureBytes2("ristrettoHash", hex11, 64);
    const r1 = bytes255ToNumberLE2(hex11.slice(0, 32));
    const R1 = calcElligatorRistrettoMap2(r1);
    const r2 = bytes255ToNumberLE2(hex11.slice(32, 64));
    const R2 = calcElligatorRistrettoMap2(r2);
    return new RistPoint2(R1.add(R2));
  }
  /**
   * Converts ristretto-encoded string to ristretto point.
   * https://ristretto.group/formulas/decoding.html
   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
   */
  static fromHex(hex11) {
    hex11 = ensureBytes2("ristrettoHex", hex11, 32);
    const { a, d } = ed255192.CURVE;
    const P = ed255192.CURVE.Fp.ORDER;
    const mod5 = ed255192.CURVE.Fp.create;
    const emsg = "RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint";
    const s = bytes255ToNumberLE2(hex11);
    if (!equalBytes2(numberToBytesLE2(s, 32), hex11) || isNegativeLE2(s, P))
      throw new Error(emsg);
    const s2 = mod5(s * s);
    const u1 = mod5(_1n27 + a * s2);
    const u2 = mod5(_1n27 - a * s2);
    const u1_2 = mod5(u1 * u1);
    const u2_2 = mod5(u2 * u2);
    const v = mod5(a * d * u1_2 - u2_2);
    const { isValid, value: I } = invertSqrt2(mod5(v * u2_2));
    const Dx = mod5(I * u2);
    const Dy = mod5(I * Dx * v);
    let x = mod5((s + s) * Dx);
    if (isNegativeLE2(x, P))
      x = mod5(-x);
    const y = mod5(u1 * Dy);
    const t = mod5(x * y);
    if (!isValid || isNegativeLE2(t, P) || y === _0n27)
      throw new Error(emsg);
    return new RistPoint2(new ed255192.ExtendedPoint(x, y, _1n27, t));
  }
  /**
   * Encodes ristretto point to Uint8Array.
   * https://ristretto.group/formulas/encoding.html
   */
  toRawBytes() {
    let { ex: x, ey: y, ez: z, et: t } = this.ep;
    const P = ed255192.CURVE.Fp.ORDER;
    const mod5 = ed255192.CURVE.Fp.create;
    const u1 = mod5(mod5(z + y) * mod5(z - y));
    const u2 = mod5(x * y);
    const u2sq = mod5(u2 * u2);
    const { value: invsqrt } = invertSqrt2(mod5(u1 * u2sq));
    const D1 = mod5(invsqrt * u1);
    const D2 = mod5(invsqrt * u2);
    const zInv = mod5(D1 * D2 * t);
    let D;
    if (isNegativeLE2(t * zInv, P)) {
      let _x = mod5(y * SQRT_M12);
      let _y = mod5(x * SQRT_M12);
      x = _x;
      y = _y;
      D = mod5(D1 * INVSQRT_A_MINUS_D2);
    } else {
      D = D2;
    }
    if (isNegativeLE2(x * zInv, P))
      y = mod5(-y);
    let s = mod5((z - y) * D);
    if (isNegativeLE2(s, P))
      s = mod5(-s);
    return numberToBytesLE2(s, 32);
  }
  toHex() {
    return bytesToHex2(this.toRawBytes());
  }
  toString() {
    return this.toHex();
  }
  // Compare one point to another.
  equals(other) {
    assertRstPoint2(other);
    const { ex: X1, ey: Y1 } = this.ep;
    const { ex: X2, ey: Y2 } = other.ep;
    const mod5 = ed255192.CURVE.Fp.create;
    const one = mod5(X1 * Y2) === mod5(Y1 * X2);
    const two = mod5(Y1 * Y2) === mod5(X1 * X2);
    return one || two;
  }
  add(other) {
    assertRstPoint2(other);
    return new RistPoint2(this.ep.add(other.ep));
  }
  subtract(other) {
    assertRstPoint2(other);
    return new RistPoint2(this.ep.subtract(other.ep));
  }
  multiply(scalar) {
    return new RistPoint2(this.ep.multiply(scalar));
  }
  multiplyUnsafe(scalar) {
    return new RistPoint2(this.ep.multiplyUnsafe(scalar));
  }
};
var RistrettoPoint2 = (() => {
  if (!RistPoint2.BASE)
    RistPoint2.BASE = new RistPoint2(ed255192.ExtendedPoint.BASE);
  if (!RistPoint2.ZERO)
    RistPoint2.ZERO = new RistPoint2(ed255192.ExtendedPoint.ZERO);
  return RistPoint2;
})();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ed25519/pair/fromSeed.js
function ed25519PairFromSeed2(seed, onlyJs) {
  if (!hasBigInt8 || !onlyJs && isReady()) {
    const full = ed25519KeypairFromSeed(seed);
    return {
      publicKey: full.slice(32),
      secretKey: full.slice(0, 64)
    };
  }
  const publicKey2 = ed255192.getPublicKey(seed);
  return {
    publicKey: publicKey2,
    secretKey: u8aConcatStrict8([seed, publicKey2])
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ed25519/pair/fromSecret.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ed25519/pair/fromString.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ed25519/sign.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ed25519/verify.js
init_shim();
function ed25519Verify3(message, signature, publicKey2, onlyJs) {
  const messageU8a = u8aToU8a8(message);
  const publicKeyU8a = u8aToU8a8(publicKey2);
  const signatureU8a = u8aToU8a8(signature);
  if (publicKeyU8a.length !== 32) {
    throw new Error(`Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);
  } else if (signatureU8a.length !== 64) {
    throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  }
  try {
    return !hasBigInt8 || !onlyJs && isReady() ? ed25519Verify(signatureU8a, messageU8a, publicKeyU8a) : ed255192.verify(signatureU8a, messageU8a, publicKeyU8a);
  } catch {
    return false;
  }
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/key/hdkdEd25519.js
var keyHdkdEd255192 = createSeedDeriveFn2(ed25519PairFromSeed2, ed25519DeriveHard2);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/key/hdkdSr25519.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/deriveHard.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/derive.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/pair/fromU8a.js
init_shim();
var SEC_LEN2 = 64;
var PUB_LEN2 = 32;
var TOT_LEN2 = SEC_LEN2 + PUB_LEN2;
function sr25519PairFromU8a2(full) {
  const fullU8a = u8aToU8a8(full);
  if (fullU8a.length !== TOT_LEN2) {
    throw new Error(`Expected keypair with ${TOT_LEN2} bytes, found ${fullU8a.length}`);
  }
  return {
    publicKey: fullU8a.slice(SEC_LEN2, TOT_LEN2),
    secretKey: fullU8a.slice(0, SEC_LEN2)
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/pair/toU8a.js
init_shim();
function sr25519KeypairToU8a2({ publicKey: publicKey2, secretKey }) {
  return u8aConcat8(secretKey, publicKey2).slice();
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/derive.js
function createDeriveFn2(derive2) {
  return (keypair, chainCode) => {
    if (!isU8a8(chainCode) || chainCode.length !== 32) {
      throw new Error("Invalid chainCode passed to derive");
    }
    return sr25519PairFromU8a2(derive2(sr25519KeypairToU8a2(keypair), chainCode));
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/deriveHard.js
var sr25519DeriveHard2 = createDeriveFn2(sr25519DeriveKeypairHard);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/deriveSoft.js
init_shim();
var sr25519DeriveSoft2 = createDeriveFn2(sr25519DeriveKeypairSoft);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/agreement.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/derivePublic.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/pair/fromSeed.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/sign.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/verify.js
init_shim();
function sr25519Verify3(message, signature, publicKey2) {
  const publicKeyU8a = u8aToU8a8(publicKey2);
  const signatureU8a = u8aToU8a8(signature);
  if (publicKeyU8a.length !== 32) {
    throw new Error(`Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
  } else if (signatureU8a.length !== 64) {
    throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  }
  return sr25519Verify(signatureU8a, u8aToU8a8(message), publicKeyU8a);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/vrfSign.js
init_shim();
var EMPTY_U8A3 = new Uint8Array();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sr25519/vrfVerify.js
init_shim();
var EMPTY_U8A4 = new Uint8Array();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/encode.js
init_shim();
function encodeAddress2(key, ss58Format = defaults2.prefix) {
  const u8a9 = decodeAddress2(key);
  if (ss58Format < 0 || ss58Format > 16383 || [46, 47].includes(ss58Format)) {
    throw new Error("Out of range ss58Format specified");
  } else if (!defaults2.allowedDecodedLengths.includes(u8a9.length)) {
    throw new Error(`Expected a valid key to convert, with length ${defaults2.allowedDecodedLengths.join(", ")}`);
  }
  const input = u8aConcat8(ss58Format < 64 ? [ss58Format] : [
    (ss58Format & 252) >> 2 | 64,
    ss58Format >> 8 | (ss58Format & 3) << 6
  ], u8a9);
  return base58Encode2(u8aConcat8(input, sshash2(input).subarray(0, [32, 33].includes(u8a9.length) ? 2 : 1)));
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/encodeDerived.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/keyDerived.js
init_shim();
var PREFIX3 = stringToU8a8("modlpy/utilisuba");

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/encodeMulti.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/keyMulti.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/util.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/keyMulti.js
var PREFIX4 = stringToU8a8("modlpy/utilisuba");

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/eq.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/evmToAddress.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/hasher.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/blake2/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/keccak/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/keccak/asU8a.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/sha3.js
init_shim();
var [SHA3_PI2, SHA3_ROTL2, _SHA3_IOTA2] = [[], [], []];
var _0n28 = BigInt(0);
var _1n28 = BigInt(1);
var _2n23 = BigInt(2);
var _7n12 = BigInt(7);
var _256n3 = BigInt(256);
var _0x71n2 = BigInt(113);
for (let round = 0, R = _1n28, x = 1, y = 0; round < 24; round++) {
  [x, y] = [y, (2 * x + 3 * y) % 5];
  SHA3_PI2.push(2 * (5 * y + x));
  SHA3_ROTL2.push((round + 1) * (round + 2) / 2 % 64);
  let t = _0n28;
  for (let j = 0; j < 7; j++) {
    R = (R << _1n28 ^ (R >> _7n12) * _0x71n2) % _256n3;
    if (R & _2n23)
      t ^= _1n28 << (_1n28 << BigInt(j)) - _1n28;
  }
  _SHA3_IOTA2.push(t);
}
var [SHA3_IOTA_H2, SHA3_IOTA_L2] = split2(_SHA3_IOTA2, true);
var rotlH2 = (h, l19, s) => s > 32 ? rotlBH2(h, l19, s) : rotlSH2(h, l19, s);
var rotlL2 = (h, l19, s) => s > 32 ? rotlBL2(h, l19, s) : rotlSL2(h, l19, s);
function keccakP2(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x = 0; x < 10; x++)
      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
    for (let x = 0; x < 10; x += 2) {
      const idx1 = (x + 8) % 10;
      const idx0 = (x + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH2(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL2(B0, B1, 1) ^ B[idx1 + 1];
      for (let y = 0; y < 50; y += 10) {
        s[x + y] ^= Th;
        s[x + y + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL2[t];
      const Th = rotlH2(curH, curL, shift);
      const Tl = rotlL2(curH, curL, shift);
      const PI = SHA3_PI2[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y = 0; y < 50; y += 10) {
      for (let x = 0; x < 10; x++)
        B[x] = s[y + x];
      for (let x = 0; x < 10; x++)
        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H2[round];
    s[1] ^= SHA3_IOTA_L2[round];
  }
  B.fill(0);
}
var Keccak2 = class extends Hash2 {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    number2(outputLen);
    if (0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200);
    this.state32 = u323(this.state);
  }
  keccak() {
    keccakP2(this.state32, this.rounds);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    exists2(this);
    const { blockLen, state } = this;
    data = toBytes2(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take2 = Math.min(blockLen - this.pos, len - pos);
      for (let i = 0; i < take2; i++)
        state[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state, suffix, pos, blockLen } = this;
    state[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    exists2(this, false);
    bytes2(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take2 = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take2), pos);
      this.posOut += take2;
      pos += take2;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes5) {
    number2(bytes5);
    return this.xofInto(new Uint8Array(bytes5));
  }
  digestInto(out) {
    output2(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    this.state.fill(0);
  }
  _cloneInto(to) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to || (to = new Keccak2(blockLen, suffix, outputLen, enableXOF, rounds));
    to.state32.set(this.state32);
    to.pos = this.pos;
    to.posOut = this.posOut;
    to.finished = this.finished;
    to.rounds = rounds;
    to.suffix = suffix;
    to.outputLen = outputLen;
    to.enableXOF = enableXOF;
    to.destroyed = this.destroyed;
    return to;
  }
};
var gen2 = (suffix, blockLen, outputLen) => wrapConstructor2(() => new Keccak2(blockLen, suffix, outputLen));
var sha3_2242 = gen2(6, 144, 224 / 8);
var sha3_2562 = gen2(6, 136, 256 / 8);
var sha3_3842 = gen2(6, 104, 384 / 8);
var sha3_5122 = gen2(6, 72, 512 / 8);
var keccak_2242 = gen2(1, 144, 224 / 8);
var keccak_2562 = gen2(1, 136, 256 / 8);
var keccak_3842 = gen2(1, 104, 384 / 8);
var keccak_5122 = gen2(1, 72, 512 / 8);
var genShake2 = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts2((opts = {}) => new Keccak2(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake1282 = genShake2(31, 168, 128 / 8);
var shake2562 = genShake2(31, 136, 256 / 8);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/keccak/asU8a.js
var keccakAsU8a2 = createDualHasher2({ 256: keccak256, 512: keccak512 }, { 256: keccak_2562, 512: keccak_5122 });
var keccak256AsU8a2 = createBitHasher2(256, keccakAsU8a2);
var keccak512AsU8a2 = createBitHasher2(512, keccakAsU8a2);
var keccakAsHex2 = createAsHex2(keccakAsU8a2);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/hasher.js
function hasher2(hashType, data, onlyJs) {
  return hashType === "keccak" ? keccakAsU8a2(data, void 0, onlyJs) : blake2AsU8a2(data, void 0, void 0, onlyJs);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/is.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/validate.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/sort.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/setSS58Format.js
init_shim();
var l11 = logger5("setSS58Format");

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/base32/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/base32/bs32.js
init_shim();
var chars2 = "abcdefghijklmnopqrstuvwxyz234567";
var config6 = {
  chars: chars2,
  coder: utils2.chain(
    // We define our own chain, the default base32 has padding
    utils2.radix2(5),
    utils2.alphabet(chars2),
    {
      decode: (input) => input.split(""),
      encode: (input) => input.join("")
    }
  ),
  ipfs: "b",
  type: "base32"
};
var base32Validate2 = createValidate2(config6);
var isBase322 = createIs2(base32Validate2);
var base32Decode2 = createDecode2(config6, base32Validate2);
var base32Encode2 = createEncode2(config6);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/base64/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/base64/bs64.js
init_shim();
var config7 = {
  chars: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  coder: base642,
  type: "base64",
  withPadding: true
};
var base64Validate2 = createValidate2(config7);
var isBase642 = createIs2(base64Validate2);
var base64Decode2 = createDecode2(config7, base64Validate2);
var base64Encode2 = createEncode2(config7);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/base64/pad.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/base64/trim.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ethereum/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ethereum/encode.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/compress.js
init_shim();
function secp256k1Compress3(publicKey2, onlyJs) {
  if (![33, 65].includes(publicKey2.length)) {
    throw new Error(`Invalid publicKey provided, received ${publicKey2.length} bytes input`);
  }
  if (publicKey2.length === 33) {
    return publicKey2;
  }
  return !hasBigInt8 || !onlyJs && isReady() ? secp256k1Compress(publicKey2) : secp256k12.ProjectivePoint.fromHex(publicKey2).toRawBytes(true);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/expand.js
init_shim();
function secp256k1Expand3(publicKey2, onlyJs) {
  if (![33, 65].includes(publicKey2.length)) {
    throw new Error(`Invalid publicKey provided, received ${publicKey2.length} bytes input`);
  }
  if (publicKey2.length === 65) {
    return publicKey2.subarray(1);
  }
  if (!hasBigInt8 || !onlyJs && isReady()) {
    return secp256k1Expand(publicKey2).subarray(1);
  }
  const { px, py } = secp256k12.ProjectivePoint.fromHex(publicKey2);
  return u8aConcat8(bnToU8a8(px, BN_BE_256_OPTS2), bnToU8a8(py, BN_BE_256_OPTS2));
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/recover.js
init_shim();
function secp256k1Recover3(msgHash, signature, recovery, hashType = "blake2", onlyJs) {
  const sig2 = u8aToU8a8(signature).subarray(0, 64);
  const msg = u8aToU8a8(msgHash);
  const publicKey2 = !hasBigInt8 || !onlyJs && isReady() ? secp256k1Recover(msg, sig2, recovery) : secp256k12.Signature.fromCompact(sig2).addRecoveryBit(recovery).recoverPublicKey(msg).toRawBytes();
  if (!publicKey2) {
    throw new Error("Unable to recover publicKey from signature");
  }
  return hashType === "keccak" ? secp256k1Expand3(publicKey2, onlyJs) : secp256k1Compress3(publicKey2, onlyJs);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/sign.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/tweakAdd.js
init_shim();
var N2 = "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141".replace(/ /g, "");
var N_BI2 = BigInt2(`0x${N2}`);
var N_BN2 = new import_bn90.default(N2, "hex");

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/verify.js
init_shim();
function secp256k1Verify2(msgHash, signature, address, hashType = "blake2", onlyJs) {
  const sig2 = u8aToU8a8(signature);
  if (sig2.length !== 65) {
    throw new Error(`Expected signature with 65 bytes, ${sig2.length} found instead`);
  }
  const publicKey2 = secp256k1Recover3(hasher2(hashType, msgHash), sig2, sig2[64], hashType, onlyJs);
  const signerAddr = hasher2(hashType, publicKey2, onlyJs);
  const inputAddr = u8aToU8a8(address);
  return u8aEq8(publicKey2, inputAddr) || (hashType === "keccak" ? u8aEq8(signerAddr.slice(-20), inputAddr.slice(-20)) : u8aEq8(signerAddr, inputAddr));
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ethereum/encode.js
function getH1602(u8a9) {
  if ([33, 65].includes(u8a9.length)) {
    u8a9 = keccakAsU8a2(secp256k1Expand3(u8a9));
  }
  return u8a9.slice(-20);
}
function ethereumEncode2(addressOrPublic) {
  if (!addressOrPublic) {
    return "0x";
  }
  const u8aAddress = u8aToU8a8(addressOrPublic);
  if (![20, 32, 33, 65].includes(u8aAddress.length)) {
    throw new Error(`Invalid address or publicKey provided, received ${u8aAddress.length} bytes input`);
  }
  const address = u8aToHex8(getH1602(u8aAddress), -1, false);
  const hash5 = u8aToHex8(keccakAsU8a2(address), -1, false);
  let result = "";
  for (let i = 0; i < 40; i++) {
    result = `${result}${parseInt(hash5[i], 16) > 7 ? address[i].toUpperCase() : address[i]}`;
  }
  return `0x${result}`;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ethereum/isAddress.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ethereum/isChecksum.js
init_shim();
function isInvalidChar(char, byte) {
  return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());
}
function isEthereumChecksum2(_address) {
  const address = _address.replace("0x", "");
  const hash5 = u8aToHex8(keccakAsU8a2(address.toLowerCase()), -1, false);
  for (let i = 0; i < 40; i++) {
    if (isInvalidChar(address[i], parseInt(hash5[i], 16))) {
      return false;
    }
  }
  return true;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ethereum/isAddress.js
function isEthereumAddress2(address) {
  if (!address || address.length !== 42 || !isHex8(address)) {
    return false;
  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
    return true;
  }
  return isEthereumChecksum2(address);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/hd/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/hd/ethereum/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/hmac/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/hmac/shaAsU8a.js
init_shim();
var JS_HASH2 = {
  256: sha2563,
  512: sha5123
};
var WA_MHAC2 = {
  256: hmacSha256,
  512: hmacSha512
};
function createSha2(bitLength) {
  return (key, data, onlyJs) => hmacShaAsU8a2(key, data, bitLength, onlyJs);
}
function hmacShaAsU8a2(key, data, bitLength = 256, onlyJs) {
  const u8aKey = u8aToU8a8(key);
  return !hasBigInt8 || !onlyJs && isReady() ? WA_MHAC2[bitLength](u8aKey, data) : hmac2(JS_HASH2[bitLength], u8aKey, data);
}
var hmacSha256AsU8a2 = createSha2(256);
var hmacSha512AsU8a2 = createSha2(512);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/hd/validatePath.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/hd/ethereum/index.js
var MASTER_SECRET2 = stringToU8a8("Bitcoin seed");

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/hd/ledger/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/mnemonic/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/mnemonic/generate.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/mnemonic/bip39.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/pbkdf2/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/pbkdf2/encode.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/pbkdf2.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sha/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/sha/asU8a.js
init_shim();
var shaAsU8a2 = createDualHasher2({ 256: sha256, 512: sha512 }, { 256: sha2563, 512: sha5123 });
var sha256AsU8a2 = createBitHasher2(256, shaAsU8a2);
var sha512AsU8a2 = createBitHasher2(512, shaAsU8a2);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/mnemonic/wordlists/en.js
init_shim();
var en_default2 = "abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo".split("|");

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/mnemonic/toEntropy.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/mnemonic/toLegacySeed.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/mnemonic/validate.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/mnemonic/toMiniSecret.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/hd/ledger/derivePrivate.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/hd/ledger/master.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/json/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/json/decrypt.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/json/decryptData.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/nacl/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/nacl/decrypt.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/nacl/tweetnacl.js
init_shim();
var sigma2 = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
var minusp2 = new Uint32Array([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252]);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/nacl/encrypt.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/scrypt/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/scrypt/encode.js
init_shim();

// node_modules/@polkadot/types/node_modules/@noble/hashes/esm/scrypt.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/scrypt/defaults.js
init_shim();
var DEFAULT_PARAMS2 = {
  N: 1 << 15,
  p: 1,
  r: 8
};

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/scrypt/fromU8a.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/scrypt/toU8a.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/json/constants.js
init_shim();
var SCRYPT_LENGTH2 = 32 + 3 * 4;

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/json/encrypt.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/json/encryptFormat.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/signature/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/signature/verify.js
init_shim();
var secp256k1VerifyHasher2 = (hashType) => (message, signature, publicKey2) => secp256k1Verify2(message, signature, publicKey2, hashType);
var VERIFIERS_ECDSA2 = [
  ["ecdsa", secp256k1VerifyHasher2("blake2")],
  ["ethereum", secp256k1VerifyHasher2("keccak")]
];
var VERIFIERS2 = [
  ["ed25519", ed25519Verify3],
  ["sr25519", sr25519Verify3],
  ...VERIFIERS_ECDSA2
];

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/xxhash/index.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/xxhash/asU8a.js
init_shim();

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/xxhash/xxhash64.js
init_shim();
var P64_12 = BigInt2("11400714785074694791");
var P64_22 = BigInt2("14029467366897019727");
var P64_32 = BigInt2("1609587929392839161");
var P64_42 = BigInt2("9650029242287828579");
var P64_52 = BigInt2("2870177450012600261");
var U642 = BigInt2("0xffffffffffffffff");
var _7n13 = BigInt2(7);
var _11n2 = BigInt2(11);
var _12n2 = BigInt2(12);
var _16n4 = BigInt2(16);
var _18n2 = BigInt2(18);
var _23n2 = BigInt2(23);
var _27n2 = BigInt2(27);
var _29n2 = BigInt2(29);
var _31n2 = BigInt2(31);
var _32n4 = BigInt2(32);
var _33n2 = BigInt2(33);
var _64n2 = BigInt2(64);
var _256n4 = BigInt2(256);
function rotl3(a, b) {
  const c = a & U642;
  return (c << b | c >> _64n2 - b) & U642;
}
function fromU8a2(u8a9, p, count2) {
  const bigints = new Array(count2);
  let offset = 0;
  for (let i = 0; i < count2; i++, offset += 2) {
    bigints[i] = BigInt2(u8a9[p + offset] | u8a9[p + 1 + offset] << 8);
  }
  let result = _0n17;
  for (let i = count2 - 1; i >= 0; i--) {
    result = (result << _16n4) + bigints[i];
  }
  return result;
}
function init2(seed, input) {
  const state = {
    seed,
    u8a: new Uint8Array(32),
    u8asize: 0,
    v1: seed + P64_12 + P64_22,
    v2: seed + P64_22,
    v3: seed,
    v4: seed - P64_12
  };
  if (input.length < 32) {
    state.u8a.set(input);
    state.u8asize = input.length;
    return state;
  }
  const limit = input.length - 32;
  let p = 0;
  if (limit >= 0) {
    const adjustV = (v) => P64_12 * rotl3(v + P64_22 * fromU8a2(input, p, 4), _31n2);
    do {
      state.v1 = adjustV(state.v1);
      p += 8;
      state.v2 = adjustV(state.v2);
      p += 8;
      state.v3 = adjustV(state.v3);
      p += 8;
      state.v4 = adjustV(state.v4);
      p += 8;
    } while (p <= limit);
  }
  if (p < input.length) {
    state.u8a.set(input.subarray(p, input.length));
    state.u8asize = input.length - p;
  }
  return state;
}
function xxhash642(input, initSeed) {
  const { seed, u8a: u8a9, u8asize, v1: v17, v2: v22, v3, v4: v411 } = init2(BigInt2(initSeed), input);
  let p = 0;
  let h64 = U642 & BigInt2(input.length) + (input.length >= 32 ? ((((rotl3(v17, _1n17) + rotl3(v22, _7n13) + rotl3(v3, _12n2) + rotl3(v411, _18n2) ^ P64_12 * rotl3(v17 * P64_22, _31n2)) * P64_12 + P64_42 ^ P64_12 * rotl3(v22 * P64_22, _31n2)) * P64_12 + P64_42 ^ P64_12 * rotl3(v3 * P64_22, _31n2)) * P64_12 + P64_42 ^ P64_12 * rotl3(v411 * P64_22, _31n2)) * P64_12 + P64_42 : seed + P64_52);
  while (p <= u8asize - 8) {
    h64 = U642 & P64_42 + P64_12 * rotl3(h64 ^ P64_12 * rotl3(P64_22 * fromU8a2(u8a9, p, 4), _31n2), _27n2);
    p += 8;
  }
  if (p + 4 <= u8asize) {
    h64 = U642 & P64_32 + P64_22 * rotl3(h64 ^ P64_12 * fromU8a2(u8a9, p, 2), _23n2);
    p += 4;
  }
  while (p < u8asize) {
    h64 = U642 & P64_12 * rotl3(h64 ^ P64_52 * BigInt2(u8a9[p++]), _11n2);
  }
  h64 = U642 & P64_22 * (h64 ^ h64 >> _33n2);
  h64 = U642 & P64_32 * (h64 ^ h64 >> _29n2);
  h64 = U642 & (h64 ^ h64 >> _32n4);
  const result = new Uint8Array(8);
  for (let i = 7; i >= 0; i--) {
    result[i] = Number(h64 % _256n4);
    h64 = h64 / _256n4;
  }
  return result;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/xxhash/asU8a.js
function xxhashAsU8a2(data, bitLength = 64, onlyJs) {
  const rounds = Math.ceil(bitLength / 64);
  const u8a9 = u8aToU8a8(data);
  if (!hasBigInt8 || !onlyJs && isReady()) {
    return twox(u8a9, rounds);
  }
  const result = new Uint8Array(rounds * 8);
  for (let seed = 0; seed < rounds; seed++) {
    result.set(xxhash642(u8a9, seed).reverse(), seed * 8);
  }
  return result;
}
var xxhashAsHex2 = createAsHex2(xxhashAsU8a2);

// node_modules/@polkadot/types/extrinsic/signedExtensions/index.js
init_shim();

// node_modules/@polkadot/types/extrinsic/signedExtensions/polkadot.js
init_shim();

// node_modules/@polkadot/types/extrinsic/signedExtensions/emptyCheck.js
init_shim();
var emptyCheck = {
  extrinsic: {},
  payload: {}
};

// node_modules/@polkadot/types/extrinsic/signedExtensions/polkadot.js
var polkadot = {
  LimitParathreadCommits: emptyCheck,
  OnlyStakingAndClaims: emptyCheck,
  PrevalidateAttests: emptyCheck,
  RestrictFunctionality: emptyCheck,
  TransactionCallFilter: emptyCheck,
  ValidateDoubleVoteReports: emptyCheck
};

// node_modules/@polkadot/types/extrinsic/signedExtensions/shell.js
init_shim();
var shell = {
  DisallowSigned: emptyCheck
};

// node_modules/@polkadot/types/extrinsic/signedExtensions/statemint.js
init_shim();
var statemint = {
  ChargeAssetTxPayment: {
    extrinsic: {
      tip: "Compact<Balance>",
      // eslint-disable-next-line sort-keys
      assetId: "Option<AssetId>"
    },
    payload: {}
  }
};

// node_modules/@polkadot/types/extrinsic/signedExtensions/substrate.js
init_shim();
var CheckMortality = {
  extrinsic: {
    era: "ExtrinsicEra"
  },
  payload: {
    blockHash: "Hash"
  }
};
var substrate = {
  ChargeTransactionPayment: {
    extrinsic: {
      tip: "Compact<Balance>"
    },
    payload: {}
  },
  CheckBlockGasLimit: emptyCheck,
  CheckEra: CheckMortality,
  CheckGenesis: {
    extrinsic: {},
    payload: {
      genesisHash: "Hash"
    }
  },
  CheckMortality,
  CheckNonZeroSender: emptyCheck,
  CheckNonce: {
    extrinsic: {
      nonce: "Compact<Index>"
    },
    payload: {}
  },
  CheckSpecVersion: {
    extrinsic: {},
    payload: {
      specVersion: "u32"
    }
  },
  CheckTxVersion: {
    extrinsic: {},
    payload: {
      transactionVersion: "u32"
    }
  },
  CheckVersion: {
    extrinsic: {},
    payload: {
      specVersion: "u32"
    }
  },
  CheckWeight: emptyCheck,
  LockStakingStatus: emptyCheck,
  ValidateEquivocationReport: emptyCheck
};

// node_modules/@polkadot/types/extrinsic/signedExtensions/index.js
var allExtensions = objectSpread7({}, substrate, polkadot, shell, statemint);
var fallbackExtensions = [
  "CheckVersion",
  "CheckGenesis",
  "CheckEra",
  "CheckNonce",
  "CheckWeight",
  "ChargeTransactionPayment",
  "CheckBlockGasLimit"
];
function findUnknownExtensions(extensions, userExtensions = {}) {
  const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
  return extensions.filter((k) => !names.includes(k));
}
function expandExtensionTypes(extensions, type, userExtensions = {}) {
  return extensions.map((k) => userExtensions[k] || allExtensions[k]).filter((info6) => !!info6).reduce((result, info6) => objectSpread7(result, info6[type]), {});
}

// node_modules/@polkadot/types/generic/Event.js
init_shim();
function decodeEvent(registry, value) {
  if (!(value == null ? void 0 : value.length)) {
    return { DataType: Null };
  }
  const index = value.subarray(0, 2);
  return {
    DataType: registry.findMetaEvent(index),
    value: {
      data: value.subarray(2),
      index
    }
  };
}
var GenericEventData = class extends Tuple {
  constructor(registry, value, meta, section2 = "<unknown>", method = "<unknown>") {
    const fields = (meta == null ? void 0 : meta.fields) || [];
    super(registry, fields.map(({ type }) => registry.createLookupType(type)), value);
    this.__internal__names = null;
    this.__internal__meta = meta;
    this.__internal__method = method;
    this.__internal__section = section2;
    this.__internal__typeDef = fields.map(({ type }) => registry.lookup.getTypeDef(type));
    const names = fields.map(({ name }) => registry.lookup.sanitizeField(name)[0]).filter((n) => !!n);
    if (names.length === fields.length) {
      this.__internal__names = names;
      objectProperties7(this, names, (_, i) => this[i]);
    }
  }
  /**
   * @description The wrapped [[EventMetadata]]
   */
  get meta() {
    return this.__internal__meta;
  }
  /**
   * @description The method as a string
   */
  get method() {
    return this.__internal__method;
  }
  /**
   * @description The field names (as available)
   */
  get names() {
    return this.__internal__names;
  }
  /**
   * @description The section as a string
   */
  get section() {
    return this.__internal__section;
  }
  /**
   * @description The [[TypeDef]] for this event
   */
  get typeDef() {
    return this.__internal__typeDef;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    if (this.__internal__names !== null) {
      const json = {};
      for (let i = 0, count2 = this.__internal__names.length; i < count2; i++) {
        json[this.__internal__names[i]] = this[i].toHuman(isExtended);
      }
      return json;
    }
    return super.toHuman(isExtended);
  }
};
var GenericEvent = class extends Struct {
  // Currently we _only_ decode from Uint8Array, since we expect it to
  // be used via EventRecord
  constructor(registry, _value) {
    const { DataType, value } = decodeEvent(registry, _value);
    super(registry, {
      index: "EventId",
      // eslint-disable-next-line sort-keys
      data: DataType
    }, value);
  }
  /**
   * @description The wrapped [[EventData]]
   */
  get data() {
    return this.getT("data");
  }
  /**
   * @description The [[EventId]], identifying the raw event
   */
  get index() {
    return this.getT("index");
  }
  /**
   * @description The [[EventMetadata]] with the documentation
   */
  get meta() {
    return this.data.meta;
  }
  /**
   * @description The method string identifying the event
   */
  get method() {
    return this.data.method;
  }
  /**
   * @description The section string identifying the event
   */
  get section() {
    return this.data.section;
  }
  /**
   * @description The [[TypeDef]] for the event
   */
  get typeDef() {
    return this.data.typeDef;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExpanded) {
    return objectSpread7({
      method: this.method,
      section: this.section
    }, isExpanded ? { docs: this.meta.docs.map((d) => d.toString()) } : null, super.toHuman(isExpanded));
  }
};

// node_modules/@polkadot/types/index.types.js
var index_types_exports = {};
__export(index_types_exports, {
  BitVec: () => BitVec,
  Bool: () => bool,
  Bytes: () => Bytes,
  Data: () => Data,
  F32: () => f32,
  F64: () => f64,
  GenericAccountId: () => GenericAccountId,
  GenericAccountId32: () => GenericAccountId,
  GenericAccountId33: () => GenericAccountId33,
  GenericAccountIndex: () => GenericAccountIndex,
  GenericAddress: () => GenericMultiAddress,
  GenericBlock: () => GenericBlock,
  GenericCall: () => GenericCall,
  GenericChainProperties: () => GenericChainProperties,
  GenericConsensusEngineId: () => GenericConsensusEngineId,
  GenericEthereumAccountId: () => GenericEthereumAccountId,
  GenericEthereumLookupSource: () => GenericEthereumLookupSource,
  GenericEvent: () => GenericEvent,
  GenericEventData: () => GenericEventData,
  GenericExtrinsic: () => GenericExtrinsic,
  GenericExtrinsicEra: () => GenericExtrinsicEra,
  GenericExtrinsicPayload: () => GenericExtrinsicPayload,
  GenericExtrinsicPayloadUnknown: () => GenericExtrinsicPayloadUnknown,
  GenericExtrinsicPayloadV4: () => GenericExtrinsicPayloadV4,
  GenericExtrinsicSignatureV4: () => GenericExtrinsicSignatureV4,
  GenericExtrinsicUnknown: () => GenericExtrinsicUnknown,
  GenericExtrinsicV4: () => GenericExtrinsicV4,
  GenericImmortalEra: () => ImmortalEra,
  GenericLookupSource: () => GenericLookupSource,
  GenericMortalEra: () => MortalEra,
  GenericMultiAddress: () => GenericMultiAddress,
  GenericSignerPayload: () => GenericSignerPayload,
  GenericVote: () => GenericVote,
  I128: () => i128,
  I16: () => i16,
  I256: () => i256,
  I32: () => i32,
  I64: () => i64,
  I8: () => i8,
  ISize: () => isize,
  Null: () => Null,
  OptionBool: () => OptionBool,
  StorageKey: () => StorageKey,
  Text: () => Text,
  Type: () => Type,
  U128: () => u128,
  U16: () => u16,
  U256: () => u256,
  U32: () => u322,
  U64: () => u642,
  U8: () => u8,
  USize: () => usize,
  bool: () => bool,
  f32: () => f32,
  f64: () => f64,
  i128: () => i128,
  i16: () => i16,
  i256: () => i256,
  i32: () => i32,
  i64: () => i64,
  i8: () => i8,
  isize: () => isize,
  u128: () => u128,
  u16: () => u16,
  u256: () => u256,
  u32: () => u322,
  u64: () => u642,
  u8: () => u8,
  usize: () => usize
});
init_shim();

// node_modules/@polkadot/types/extrinsic/index.js
init_shim();

// node_modules/@polkadot/types/extrinsic/Extrinsic.js
init_shim();

// node_modules/@polkadot/types/extrinsic/v4/Extrinsic.js
init_shim();
var EXTRINSIC_VERSION = 4;
var GenericExtrinsicV4 = class extends Struct {
  constructor(registry, value, { isSigned } = {}) {
    super(registry, {
      signature: "ExtrinsicSignatureV4",
      // eslint-disable-next-line sort-keys
      method: "Call"
    }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
  }
  /** @internal */
  static decodeExtrinsic(registry, value, isSigned = false) {
    if (value instanceof GenericExtrinsicV4) {
      return value;
    } else if (value instanceof registry.createClassUnsafe("Call")) {
      return { method: value };
    } else if (isU8a8(value)) {
      const signature = registry.createTypeUnsafe("ExtrinsicSignatureV4", [value, { isSigned }]);
      const method = registry.createTypeUnsafe("Call", [value.subarray(signature.encodedLength)]);
      return {
        method,
        signature
      };
    }
    return value || {};
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description The [[Call]] this extrinsic wraps
   */
  get method() {
    return this.getT("method");
  }
  /**
   * @description The [[ExtrinsicSignatureV4]]
   */
  get signature() {
    return this.getT("signature");
  }
  /**
   * @description The version for the signature
   */
  get version() {
    return EXTRINSIC_VERSION;
  }
  /**
   * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
   */
  addSignature(signer, signature, payload) {
    this.signature.addSignature(signer, signature, payload);
    return this;
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */
  sign(account3, options) {
    this.signature.sign(this.method, account3, options);
    return this;
  }
  /**
   * @describe Adds a fake signature to the extrinsic
   */
  signFake(signer, options) {
    this.signature.signFake(this.method, signer, options);
    return this;
  }
};

// node_modules/@polkadot/types/extrinsic/constants.js
init_shim();
var BIT_SIGNED = 128;
var BIT_UNSIGNED = 0;
var EMPTY_U8A5 = new Uint8Array();
var DEFAULT_VERSION = 4;
var IMMORTAL_ERA = new Uint8Array([0]);
var UNMASK_VERSION = 127;

// node_modules/@polkadot/types/extrinsic/Extrinsic.js
var VERSIONS = [
  "ExtrinsicUnknown",
  "ExtrinsicUnknown",
  "ExtrinsicUnknown",
  "ExtrinsicUnknown",
  "ExtrinsicV4"
];
function newFromValue(registry, value, version) {
  if (value instanceof GenericExtrinsic) {
    return value.unwrap();
  }
  const isSigned = (version & BIT_SIGNED) === BIT_SIGNED;
  const type = VERSIONS[version & UNMASK_VERSION] || VERSIONS[0];
  return registry.createTypeUnsafe(type, [value, { isSigned, version }]);
}
function decodeExtrinsic(registry, value, version = DEFAULT_VERSION) {
  if (isU8a8(value) || Array.isArray(value) || isHex8(value)) {
    return decodeU8a3(registry, u8aToU8a8(value), version);
  } else if (value instanceof registry.createClassUnsafe("Call")) {
    return newFromValue(registry, { method: value }, version);
  }
  return newFromValue(registry, value, version);
}
function decodeU8a3(registry, value, version) {
  if (!value.length) {
    return newFromValue(registry, new Uint8Array(), version);
  }
  const [offset, length] = compactFromU8a7(value);
  const total = offset + length.toNumber();
  if (total > value.length) {
    throw new Error(`Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
  }
  const data = value.subarray(offset, total);
  return newFromValue(registry, data.subarray(1), data[0]);
}
var ExtrinsicBase = class extends AbstractBase {
  constructor(registry, value, initialU8aLength) {
    super(registry, value, initialU8aLength);
    const signKeys = Object.keys(registry.getSignedExtensionTypes());
    const getter = (key) => this.inner.signature[key];
    for (let i = 0, count2 = signKeys.length; i < count2; i++) {
      objectProperty7(this, signKeys[i], getter);
    }
  }
  /**
   * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
   */
  get args() {
    return this.method.args;
  }
  /**
   * @description The argument definitions, compatible with [[Call]]
   */
  get argsDef() {
    return this.method.argsDef;
  }
  /**
   * @description The actual `[sectionIndex, methodIndex]` as used in the Call
   */
  get callIndex() {
    return this.method.callIndex;
  }
  /**
   * @description The actual data for the Call
   */
  get data() {
    return this.method.data;
  }
  /**
   * @description The era for this extrinsic
   */
  get era() {
    return this.inner.signature.era;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description `true` id the extrinsic is signed
   */
  get isSigned() {
    return this.inner.signature.isSigned;
  }
  /**
   * @description The length of the actual data, excluding prefix
   */
  get length() {
    return this.toU8a(true).length;
  }
  /**
   * @description The [[FunctionMetadataLatest]] that describes the extrinsic
   */
  get meta() {
    return this.method.meta;
  }
  /**
   * @description The [[Call]] this extrinsic wraps
   */
  get method() {
    return this.inner.method;
  }
  /**
   * @description The nonce for this extrinsic
   */
  get nonce() {
    return this.inner.signature.nonce;
  }
  /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */
  get signature() {
    return this.inner.signature.signature;
  }
  /**
   * @description The [[Address]] that signed
   */
  get signer() {
    return this.inner.signature.signer;
  }
  /**
   * @description Forwards compat
   */
  get tip() {
    return this.inner.signature.tip;
  }
  /**
   * @description Returns the raw transaction version (not flagged with signing information)
  */
  get type() {
    return this.inner.version;
  }
  get inner() {
    return this.unwrap();
  }
  /**
   * @description Returns the encoded version flag
  */
  get version() {
    return this.type | (this.isSigned ? BIT_SIGNED : BIT_UNSIGNED);
  }
  /**
   * @description Checks if the source matches this in type
   */
  is(other) {
    return this.method.is(other);
  }
  unwrap() {
    return super.unwrap();
  }
};
var GenericExtrinsic = class extends ExtrinsicBase {
  constructor(registry, value, { version } = {}) {
    super(registry, decodeExtrinsic(registry, value, version));
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    if (!this.__internal__hashCache) {
      this.__internal__hashCache = super.hash;
    }
    return this.__internal__hashCache;
  }
  /**
   * @description Injects an already-generated signature into the extrinsic
   */
  addSignature(signer, signature, payload) {
    this.inner.addSignature(signer, signature, payload);
    this.__internal__hashCache = void 0;
    return this;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const encoded = u8aConcat8(...this.toU8aInner());
    return {
      inner: this.isSigned ? this.inner.inspect().inner : this.inner.method.inspect().inner,
      outer: [compactToU8a7(encoded.length), new Uint8Array([this.version])]
    };
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */
  sign(account3, options) {
    this.inner.sign(account3, options);
    this.__internal__hashCache = void 0;
    return this;
  }
  /**
   * @describe Adds a fake signature to the extrinsic
   */
  signFake(signer, options) {
    this.inner.signFake(signer, options);
    this.__internal__hashCache = void 0;
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex(isBare) {
    return u8aToHex8(this.toU8a(isBare));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExpanded) {
    return objectSpread7({}, {
      isSigned: this.isSigned,
      method: this.method.toHuman(isExpanded)
    }, this.isSigned ? {
      era: this.era.toHuman(isExpanded),
      nonce: this.nonce.toHuman(isExpanded),
      signature: this.signature.toHex(),
      signer: this.signer.toHuman(isExpanded),
      tip: this.tip.toHuman(isExpanded)
    } : null);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Extrinsic";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value is not length-prefixed
   */
  toU8a(isBare) {
    const encoded = u8aConcat8(...this.toU8aInner());
    return isBare ? encoded : compactAddLength8(encoded);
  }
  toU8aInner() {
    return [
      new Uint8Array([this.version]),
      this.inner.toU8a()
    ];
  }
};
GenericExtrinsic.LATEST_EXTRINSIC_VERSION = EXTRINSIC_VERSION;

// node_modules/@polkadot/types/extrinsic/ExtrinsicEra.js
init_shim();
function getTrailingZeros(period) {
  const binary = period.toString(2);
  let index = 0;
  while (binary[binary.length - 1 - index] === "0") {
    index++;
  }
  return index;
}
function decodeMortalEra(registry, value) {
  if (isU8a8(value) || isHex8(value) || Array.isArray(value)) {
    return decodeMortalU8a(registry, u8aToU8a8(value));
  } else if (!value) {
    return [new u642(registry), new u642(registry)];
  } else if (isObject7(value)) {
    return decodeMortalObject(registry, value);
  }
  throw new Error("Invalid data passed to Mortal era");
}
function decodeMortalObject(registry, value) {
  const { current, period } = value;
  let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
  calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
  const phase = current % calPeriod;
  const quantizeFactor = Math.max(calPeriod >> 12, 1);
  const quantizedPhase = phase / quantizeFactor * quantizeFactor;
  return [new u642(registry, calPeriod), new u642(registry, quantizedPhase)];
}
function decodeMortalU8a(registry, value) {
  if (value.length === 0) {
    return [new u642(registry), new u642(registry)];
  }
  const first2 = u8aToBn7(value.subarray(0, 1)).toNumber();
  const second = u8aToBn7(value.subarray(1, 2)).toNumber();
  const encoded = first2 + (second << 8);
  const period = 2 << encoded % (1 << 4);
  const quantizeFactor = Math.max(period >> 12, 1);
  const phase = (encoded >> 4) * quantizeFactor;
  if (period < 4 || phase >= period) {
    throw new Error("Invalid data passed to Mortal era");
  }
  return [new u642(registry, period), new u642(registry, phase)];
}
function decodeExtrinsicEra(value = new Uint8Array()) {
  if (isU8a8(value)) {
    return !value.length || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);
  } else if (!value) {
    return new Uint8Array([0]);
  } else if (value instanceof GenericExtrinsicEra) {
    return decodeExtrinsicEra(value.toU8a());
  } else if (isHex8(value)) {
    return decodeExtrinsicEra(hexToU8a8(value));
  } else if (isObject7(value)) {
    const entries = Object.entries(value).map(([k, v]) => [k.toLowerCase(), v]);
    const mortal = entries.find(([k]) => k.toLowerCase() === "mortalera");
    const immortal = entries.find(([k]) => k.toLowerCase() === "immortalera");
    return mortal ? { MortalEra: mortal[1] } : immortal ? { ImmortalEra: immortal[1] } : { MortalEra: value };
  }
  throw new Error("Invalid data passed to Era");
}
var ImmortalEra = class extends Raw {
  constructor(registry, _value) {
    super(registry, IMMORTAL_ERA);
  }
};
var MortalEra = class extends Tuple {
  constructor(registry, value) {
    super(registry, {
      period: u642,
      phase: u642
    }, decodeMortalEra(registry, value));
  }
  /**
   * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
   */
  get encodedLength() {
    return 2 | 0;
  }
  /**
   * @description The period of this Mortal wraps as a [[U64]]
   */
  get period() {
    return this[0];
  }
  /**
   * @description The phase of this Mortal wraps as a [[U64]]
   */
  get phase() {
    return this[1];
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return {
      period: formatNumber7(this.period),
      phase: formatNumber7(this.phase)
    };
  }
  /**
   * @description Returns a JSON representation of the actual value
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   * Period and phase are encoded:
   *   - The period of validity from the block hash found in the signing material.
   *   - The phase in the period that this transaction's lifetime begins (and, importantly,
   *     implies which block hash is included in the signature material). If the `period` is
   *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
   *     `period` is.
   */
  toU8a(_isBare) {
    const period = this.period.toNumber();
    const encoded = Math.min(15, Math.max(1, getTrailingZeros(period) - 1)) + (this.phase.toNumber() / Math.max(period >> 12, 1) << 4);
    return new Uint8Array([
      encoded & 255,
      encoded >> 8
    ]);
  }
  /**
   * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
   */
  birth(current) {
    const phase = this.phase.toNumber();
    const period = this.period.toNumber();
    return ~~((Math.max(bnToBn7(current).toNumber(), phase) - phase) / period) * period + phase;
  }
  /**
   * @description Get the block number of the first block at which the era has ended.
   */
  death(current) {
    return this.birth(current) + this.period.toNumber();
  }
};
var GenericExtrinsicEra = class extends Enum {
  constructor(registry, value) {
    super(registry, {
      ImmortalEra,
      MortalEra
    }, decodeExtrinsicEra(value));
  }
  /**
   * @description Override the encoded length method
   */
  get encodedLength() {
    return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
  }
  /**
   * @description Returns the item as a [[ImmortalEra]]
   */
  get asImmortalEra() {
    if (!this.isImmortalEra) {
      throw new Error(`Cannot convert '${this.type}' via asImmortalEra`);
    }
    return this.inner;
  }
  /**
   * @description Returns the item as a [[MortalEra]]
   */
  get asMortalEra() {
    if (!this.isMortalEra) {
      throw new Error(`Cannot convert '${this.type}' via asMortalEra`);
    }
    return this.inner;
  }
  /**
   * @description `true` if Immortal
   */
  get isImmortalEra() {
    return this.index === 0;
  }
  /**
   * @description `true` if Mortal
   */
  get isMortalEra() {
    return this.index > 0;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
  }
};

// node_modules/@polkadot/types/extrinsic/ExtrinsicPayload.js
init_shim();
var VERSIONS2 = [
  "ExtrinsicPayloadUnknown",
  "ExtrinsicPayloadUnknown",
  "ExtrinsicPayloadUnknown",
  "ExtrinsicPayloadUnknown",
  "ExtrinsicPayloadV4"
];
function decodeExtrinsicPayload(registry, value, version = DEFAULT_VERSION) {
  if (value instanceof GenericExtrinsicPayload) {
    return value.unwrap();
  }
  return registry.createTypeUnsafe(VERSIONS2[version] || VERSIONS2[0], [value, { version }]);
}
var GenericExtrinsicPayload = class extends AbstractBase {
  constructor(registry, value, { version } = {}) {
    super(registry, decodeExtrinsicPayload(registry, value, version));
  }
  /**
   * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
   */
  get blockHash() {
    return this.inner.blockHash;
  }
  /**
   * @description The [[ExtrinsicEra]]
   */
  get era() {
    return this.inner.era;
  }
  /**
   * @description The genesis block [[BlockHash]] the signature applies to
   */
  get genesisHash() {
    return this.inner.genesisHash || this.registry.createTypeUnsafe("Hash", []);
  }
  /**
   * @description The [[Bytes]] contained in the payload
   */
  get method() {
    return this.inner.method;
  }
  /**
   * @description The [[Index]]
   */
  get nonce() {
    return this.inner.nonce;
  }
  /**
   * @description The specVersion as a [[u32]] for this payload
   */
  get specVersion() {
    return this.inner.specVersion || this.registry.createTypeUnsafe("u32", []);
  }
  /**
   * @description The [[Balance]]
   */
  get tip() {
    return this.inner.tip || this.registry.createTypeUnsafe("Compact<Balance>", []);
  }
  /**
   * @description The transaction version as a [[u32]] for this payload
   */
  get transactionVersion() {
    return this.inner.transactionVersion || this.registry.createTypeUnsafe("u32", []);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.inner.eq(other);
  }
  /**
   * @description Sign the payload with the keypair
   */
  sign(signerPair) {
    const signature = this.inner.sign(signerPair);
    return {
      signature: u8aToHex8(signature)
    };
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    return this.inner.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "ExtrinsicPayload";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.toHex();
  }
  /**
   * @description Returns a serialized u8a form
   */
  toU8a(isBare) {
    return super.toU8a(isBare ? { method: true } : false);
  }
};

// node_modules/@polkadot/types/extrinsic/ExtrinsicPayloadUnknown.js
init_shim();
var GenericExtrinsicPayloadUnknown = class extends Struct {
  constructor(registry, _value, { version = 0 } = {}) {
    super(registry, {});
    throw new Error(`Unsupported extrinsic payload version ${version}`);
  }
};

// node_modules/@polkadot/types/extrinsic/ExtrinsicUnknown.js
init_shim();
var GenericExtrinsicUnknown = class extends Struct {
  constructor(registry, _value, { isSigned = false, version = 0 } = {}) {
    super(registry, {});
    throw new Error(`Unsupported ${isSigned ? "" : "un"}signed extrinsic version ${version & UNMASK_VERSION}`);
  }
};

// node_modules/@polkadot/types/extrinsic/SignerPayload.js
init_shim();
var knownTypes = {
  address: "Address",
  blockHash: "Hash",
  blockNumber: "BlockNumber",
  era: "ExtrinsicEra",
  genesisHash: "Hash",
  method: "Call",
  nonce: "Compact<Index>",
  runtimeVersion: "RuntimeVersion",
  signedExtensions: "Vec<Text>",
  tip: "Compact<Balance>",
  version: "u8"
};
var GenericSignerPayload = class extends Struct {
  constructor(registry, value) {
    const extensionTypes = objectSpread7({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
    super(registry, objectSpread7({}, extensionTypes, knownTypes), value);
    this.__internal__extraTypes = {};
    const getter = (key) => this.get(key);
    for (const [key, type] of Object.entries(extensionTypes)) {
      if (!knownTypes[key]) {
        this.__internal__extraTypes[key] = type;
      }
      objectProperty7(this, key, getter);
    }
  }
  get address() {
    return this.getT("address");
  }
  get blockHash() {
    return this.getT("blockHash");
  }
  get blockNumber() {
    return this.getT("blockNumber");
  }
  get era() {
    return this.getT("era");
  }
  get genesisHash() {
    return this.getT("genesisHash");
  }
  get method() {
    return this.getT("method");
  }
  get nonce() {
    return this.getT("nonce");
  }
  get runtimeVersion() {
    return this.getT("runtimeVersion");
  }
  get signedExtensions() {
    return this.getT("signedExtensions");
  }
  get tip() {
    return this.getT("tip");
  }
  get version() {
    return this.getT("version");
  }
  /**
   * @description Creates an representation of the structure as an ISignerPayload JSON
   */
  toPayload() {
    const result = {};
    const keys2 = Object.keys(this.__internal__extraTypes);
    for (let i = 0, count2 = keys2.length; i < count2; i++) {
      const key = keys2[i];
      const value = this.getT(key);
      if (!(value instanceof Option) || value.isSome) {
        result[key] = value.toJSON();
      }
    }
    return objectSpread7(result, {
      // the known defaults as managed explicitly and has different
      // formatting in cases, e.g. we mostly expose a hex format here
      address: this.address.toString(),
      blockHash: this.blockHash.toHex(),
      blockNumber: this.blockNumber.toHex(),
      era: this.era.toHex(),
      genesisHash: this.genesisHash.toHex(),
      method: this.method.toHex(),
      nonce: this.nonce.toHex(),
      signedExtensions: this.signedExtensions.map((e) => e.toString()),
      specVersion: this.runtimeVersion.specVersion.toHex(),
      tip: this.tip.toHex(),
      transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
      version: this.version.toNumber()
    });
  }
  /**
   * @description Creates a representation of the payload in raw Exrinsic form
   */
  toRaw() {
    const payload = this.toPayload();
    const data = u8aToHex8(this.registry.createTypeUnsafe("ExtrinsicPayload", [payload, { version: payload.version }]).toU8a({ method: true }));
    return {
      address: payload.address,
      data,
      type: "payload"
    };
  }
};

// node_modules/@polkadot/types/extrinsic/v4/index.js
init_shim();

// node_modules/@polkadot/types/extrinsic/v4/ExtrinsicPayload.js
init_shim();

// node_modules/@polkadot/types/extrinsic/util.js
init_shim();
function sign(registry, signerPair, u8a9, options) {
  const encoded = u8a9.length > 256 ? registry.hash(u8a9) : u8a9;
  return signerPair.sign(encoded, options);
}

// node_modules/@polkadot/types/extrinsic/v4/ExtrinsicPayload.js
var GenericExtrinsicPayloadV4 = class extends Struct {
  constructor(registry, value) {
    super(registry, objectSpread7({ method: "Bytes" }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
    this.__internal__signOptions = {
      withType: registry.createTypeUnsafe("ExtrinsicSignature", []) instanceof Enum
    };
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return super.inspect({ method: true });
  }
  /**
   * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
   */
  get blockHash() {
    return this.getT("blockHash");
  }
  /**
   * @description The [[ExtrinsicEra]]
   */
  get era() {
    return this.getT("era");
  }
  /**
   * @description The genesis [[BlockHash]] the signature applies to (mortal/immortal)
   */
  get genesisHash() {
    return this.getT("genesisHash");
  }
  /**
   * @description The [[Bytes]] contained in the payload
   */
  get method() {
    return this.getT("method");
  }
  /**
   * @description The [[Index]]
   */
  get nonce() {
    return this.getT("nonce");
  }
  /**
   * @description The specVersion for this signature
   */
  get specVersion() {
    return this.getT("specVersion");
  }
  /**
   * @description The tip [[Balance]]
   */
  get tip() {
    return this.getT("tip");
  }
  /**
   * @description The transactionVersion for this signature
   */
  get transactionVersion() {
    return this.getT("transactionVersion");
  }
  /**
   * @description The (optional) asset id for this signature for chains that support transaction fees in assets
   */
  get assetId() {
    return this.getT("assetId");
  }
  /**
   * @description Sign the payload with the keypair
   */
  sign(signerPair) {
    return sign(this.registry, signerPair, this.toU8a({ method: true }), this.__internal__signOptions);
  }
};

// node_modules/@polkadot/types/extrinsic/v4/ExtrinsicSignature.js
init_shim();
var FAKE_SIGNATURE = new Uint8Array(256).fill(1);
function toAddress(registry, address) {
  return registry.createTypeUnsafe("Address", [isU8a8(address) ? u8aToHex8(address) : address]);
}
var GenericExtrinsicSignatureV4 = class extends Struct {
  constructor(registry, value, { isSigned } = {}) {
    const signTypes = registry.getSignedExtensionTypes();
    super(registry, objectSpread7(
      // eslint-disable-next-line sort-keys
      { signer: "Address", signature: "ExtrinsicSignature" },
      signTypes
    ), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
    this.__internal__signKeys = Object.keys(signTypes);
    objectProperties7(this, this.__internal__signKeys, (k) => this.get(k));
  }
  /** @internal */
  static decodeExtrinsicSignature(value, isSigned = false) {
    if (!value) {
      return EMPTY_U8A5;
    } else if (value instanceof GenericExtrinsicSignatureV4) {
      return value;
    }
    return isSigned ? value : EMPTY_U8A5;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.isSigned ? super.encodedLength : 0;
  }
  /**
   * @description `true` if the signature is valid
   */
  get isSigned() {
    return !this.signature.isEmpty;
  }
  /**
   * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
   */
  get era() {
    return this.getT("era");
  }
  /**
   * @description The [[Index]] for the signature
   */
  get nonce() {
    return this.getT("nonce");
  }
  /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */
  get signature() {
    return this.multiSignature.value || this.multiSignature;
  }
  /**
   * @description The raw [[ExtrinsicSignature]]
   */
  get multiSignature() {
    return this.getT("signature");
  }
  /**
   * @description The [[Address]] that signed
   */
  get signer() {
    return this.getT("signer");
  }
  /**
   * @description The [[Balance]] tip
   */
  get tip() {
    return this.getT("tip");
  }
  _injectSignature(signer, signature, payload) {
    for (let i = 0, count2 = this.__internal__signKeys.length; i < count2; i++) {
      const k = this.__internal__signKeys[i];
      const v = payload.get(k);
      if (!isUndefined7(v)) {
        this.set(k, v);
      }
    }
    this.set("signer", signer);
    this.set("signature", signature);
    return this;
  }
  /**
   * @description Adds a raw signature
   */
  addSignature(signer, signature, payload) {
    return this._injectSignature(toAddress(this.registry, signer), this.registry.createTypeUnsafe("ExtrinsicSignature", [signature]), new GenericExtrinsicPayloadV4(this.registry, payload));
  }
  /**
   * @description Creates a payload from the supplied options
   */
  createPayload(method, options) {
    const { era, runtimeVersion: { specVersion, transactionVersion } } = options;
    return new GenericExtrinsicPayloadV4(this.registry, objectSpread7({}, options, {
      era: era || IMMORTAL_ERA,
      method: method.toHex(),
      specVersion,
      transactionVersion
    }));
  }
  /**
   * @description Generate a payload and applies the signature from a keypair
   */
  sign(method, account3, options) {
    if (!(account3 == null ? void 0 : account3.addressRaw)) {
      throw new Error(`Expected a valid keypair for signing, found ${stringify7(account3)}`);
    }
    const payload = this.createPayload(method, options);
    return this._injectSignature(toAddress(this.registry, account3.addressRaw), this.registry.createTypeUnsafe("ExtrinsicSignature", [payload.sign(account3)]), payload);
  }
  /**
   * @description Generate a payload and applies a fake signature
   */
  signFake(method, address, options) {
    if (!address) {
      throw new Error(`Expected a valid address for signing, found ${stringify7(address)}`);
    }
    const payload = this.createPayload(method, options);
    return this._injectSignature(toAddress(this.registry, address), this.registry.createTypeUnsafe("ExtrinsicSignature", [FAKE_SIGNATURE]), payload);
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return this.isSigned ? super.toU8a(isBare) : EMPTY_U8A5;
  }
};

// node_modules/@polkadot/types/generic/index.js
init_shim();

// node_modules/@polkadot/types/generic/AccountId.js
init_shim();
function decodeAccountId(value) {
  if (isU8a8(value) || Array.isArray(value)) {
    return u8aToU8a8(value);
  } else if (!value) {
    return new Uint8Array();
  } else if (isHex8(value)) {
    return hexToU8a8(value);
  } else if (isString8(value)) {
    return decodeAddress2(value.toString());
  }
  throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
}
var BaseAccountId = class extends U8aFixed {
  constructor(registry, allowedBits = 256 | 264, value) {
    const decoded = decodeAccountId(value);
    const decodedBits = decoded.length * 8;
    if (decodedBits < allowedBits && decoded.some((b) => b)) {
      throw new Error(`Invalid AccountId provided, expected ${allowedBits >> 3} bytes, found ${decoded.length}`);
    }
    super(registry, decoded, allowedBits);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return super.eq(decodeAccountId(other));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toString();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return encodeAddress2(this, this.registry.chainSS58);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "AccountId";
  }
};
var GenericAccountId = class extends BaseAccountId {
  constructor(registry, value) {
    super(registry, 256, value);
  }
};
var GenericAccountId33 = class extends BaseAccountId {
  constructor(registry, value) {
    super(registry, 264, value);
  }
};

// node_modules/@polkadot/types/generic/AccountIndex.js
init_shim();
var PREFIX_1BYTE = 239;
var PREFIX_2BYTE = 252;
var PREFIX_4BYTE = 253;
var PREFIX_8BYTE = 254;
var MAX_1BYTE = new import_bn90.default(PREFIX_1BYTE);
var MAX_2BYTE = new import_bn90.default(1).shln(16);
var MAX_4BYTE = new import_bn90.default(1).shln(32);
function decodeAccountIndex(value) {
  if (value instanceof GenericAccountIndex) {
    return value.toBn();
  } else if (isBn7(value) || isNumber8(value) || isHex8(value) || isU8a8(value) || isBigInt7(value)) {
    return value;
  }
  return decodeAccountIndex(decodeAddress2(value));
}
var GenericAccountIndex = class extends u322 {
  constructor(registry, value = new import_bn90.default(0)) {
    super(registry, decodeAccountIndex(value));
  }
  static calcLength(_value) {
    const value = bnToBn7(_value);
    if (value.lte(MAX_1BYTE)) {
      return 1;
    } else if (value.lt(MAX_2BYTE)) {
      return 2;
    } else if (value.lt(MAX_4BYTE)) {
      return 4;
    }
    return 8;
  }
  static readLength(input) {
    const first2 = input[0];
    if (first2 === PREFIX_2BYTE) {
      return [1, 2];
    } else if (first2 === PREFIX_4BYTE) {
      return [1, 4];
    } else if (first2 === PREFIX_8BYTE) {
      return [1, 8];
    }
    return [0, 1];
  }
  static writeLength(input) {
    switch (input.length) {
      case 2:
        return new Uint8Array([PREFIX_2BYTE]);
      case 4:
        return new Uint8Array([PREFIX_4BYTE]);
      case 8:
        return new Uint8Array([PREFIX_8BYTE]);
      default:
        return new Uint8Array([]);
    }
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (isBn7(other) || isNumber8(other)) {
      return super.eq(other);
    }
    return super.eq(this.registry.createTypeUnsafe("AccountIndex", [other]));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toString();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    const length = GenericAccountIndex.calcLength(this);
    return encodeAddress2(this.toU8a().subarray(0, length), this.registry.chainSS58);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "AccountIndex";
  }
};

// node_modules/@polkadot/types/generic/Block.js
init_shim();
var GenericBlock = class extends Struct {
  constructor(registry, value) {
    super(registry, {
      header: "Header",
      // eslint-disable-next-line sort-keys
      extrinsics: "Vec<Extrinsic>"
    }, value);
  }
  /**
   * @description Encodes a content [[Hash]] for the block
   */
  get contentHash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description The [[Extrinsic]] contained in the block
   */
  get extrinsics() {
    return this.getT("extrinsics");
  }
  /**
   * @description Block/header [[Hash]]
   */
  get hash() {
    return this.header.hash;
  }
  /**
   * @description The [[Header]] of the block
   */
  get header() {
    return this.getT("header");
  }
};

// node_modules/@polkadot/types/generic/Call.js
init_shim();
function getArgsDef(registry, meta) {
  return meta.fields.reduce((result, { name, type }, index) => {
    result[name.unwrapOr(`param${index}`).toString()] = registry.createLookupType(type);
    return result;
  }, {});
}
function decodeCallViaObject(registry, value, _meta) {
  const { args, callIndex } = value;
  const lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex;
  const meta = _meta || registry.findMetaCall(lookupIndex).meta;
  return {
    args,
    argsDef: getArgsDef(registry, meta),
    callIndex,
    meta
  };
}
function decodeCallViaU8a(registry, value, _meta) {
  const callIndex = registry.firstCallIndex.slice();
  callIndex.set(value.subarray(0, 2), 0);
  const meta = _meta || registry.findMetaCall(callIndex).meta;
  return {
    args: value.subarray(2),
    argsDef: getArgsDef(registry, meta),
    callIndex,
    meta
  };
}
function decodeCall(registry, value = new Uint8Array(), _meta) {
  if (isU8a8(value) || isHex8(value)) {
    return decodeCallViaU8a(registry, u8aToU8a8(value), _meta);
  } else if (isObject7(value) && value.callIndex && value.args) {
    return decodeCallViaObject(registry, value, _meta);
  }
  throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
}
var GenericCallIndex = class extends U8aFixed {
  constructor(registry, value) {
    super(registry, value, 16);
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toHex();
  }
};
var GenericCall = class extends Struct {
  constructor(registry, value, meta) {
    const decoded = decodeCall(registry, value, meta);
    try {
      super(registry, {
        callIndex: GenericCallIndex,
        // eslint-disable-next-line sort-keys
        args: Struct.with(decoded.argsDef)
      }, decoded);
    } catch (error) {
      let method = "unknown.unknown";
      try {
        const c = registry.findMetaCall(decoded.callIndex);
        method = `${c.section}.${c.method}`;
      } catch {
      }
      throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
    }
    this._meta = decoded.meta;
  }
  /**
   * @description The arguments for the function call
   */
  get args() {
    return [...this.getT("args").values()];
  }
  /**
   * @description The argument definitions
   */
  get argsDef() {
    return getArgsDef(this.registry, this.meta);
  }
  /**
   * @description The argument entries
   */
  get argsEntries() {
    return [...this.getT("args").entries()];
  }
  /**
   * @description The encoded `[sectionIndex, methodIndex]` identifier
   */
  get callIndex() {
    return this.getT("callIndex").toU8a();
  }
  /**
   * @description The encoded data
   */
  get data() {
    return this.getT("args").toU8a();
  }
  /**
   * @description The [[FunctionMetadata]]
   */
  get meta() {
    return this._meta;
  }
  /**
   * @description Returns the name of the method
   */
  get method() {
    return this.registry.findMetaCall(this.callIndex).method;
  }
  /**
   * @description Returns the module containing the method
   */
  get section() {
    return this.registry.findMetaCall(this.callIndex).section;
  }
  /**
   * @description Checks if the source matches this in type
   */
  is(other) {
    return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExpanded) {
    let call;
    try {
      call = this.registry.findMetaCall(this.callIndex);
    } catch {
    }
    return objectSpread7({
      args: this.argsEntries.reduce((args, [n, a]) => objectSpread7(args, { [n]: a.toHuman(isExpanded) }), {}),
      method: call == null ? void 0 : call.method,
      section: call == null ? void 0 : call.section
    }, isExpanded && call ? { docs: call.meta.docs.map((d) => d.toString()) } : null);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Call";
  }
};

// node_modules/@polkadot/types/generic/ChainProperties.js
init_shim();
function createValue(registry, type, value, asArray = true) {
  if (value && isFunction9(value.unwrapOrDefault)) {
    return value;
  }
  return registry.createTypeUnsafe(type, [
    asArray ? isNull7(value) || isUndefined7(value) ? null : Array.isArray(value) ? value : [value] : value
  ]);
}
function decodeValue(registry, key, value) {
  return key === "ss58Format" ? createValue(registry, "Option<u32>", value, false) : key === "tokenDecimals" ? createValue(registry, "Option<Vec<u32>>", value) : key === "tokenSymbol" ? createValue(registry, "Option<Vec<Text>>", value) : key === "isEthereum" ? createValue(registry, "Bool", value, false) : value;
}
function decode(registry, value) {
  return (
    // allow decoding from a map as well (ourselves)
    (value && isFunction9(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all3, [key, value2]) => {
      all3[key] = decodeValue(registry, key, value2);
      return all3;
    }, {
      isEthereum: registry.createTypeUnsafe("Bool", []),
      ss58Format: registry.createTypeUnsafe("Option<u32>", []),
      tokenDecimals: registry.createTypeUnsafe("Option<Vec<u32>>", []),
      tokenSymbol: registry.createTypeUnsafe("Option<Vec<Text>>", [])
    })
  );
}
var GenericChainProperties = class extends Json {
  constructor(registry, value) {
    super(registry, decode(registry, value));
  }
  /**
   * @description The chain uses Ethereum addresses
   */
  get isEthereum() {
    return this.getT("isEthereum");
  }
  /**
   * @description The chain ss58Format
   */
  get ss58Format() {
    return this.getT("ss58Format");
  }
  /**
   * @description The decimals for each of the tokens
   */
  get tokenDecimals() {
    return this.getT("tokenDecimals");
  }
  /**
   * @description The symbols for the tokens
   */
  get tokenSymbol() {
    return this.getT("tokenSymbol");
  }
};

// node_modules/@polkadot/types/generic/ConsensusEngineId.js
init_shim();
var CID_AURA = stringToU8a8("aura");
var CID_BABE = stringToU8a8("BABE");
var CID_GRPA = stringToU8a8("FRNK");
var CID_POW = stringToU8a8("pow_");
var CID_NMBS = stringToU8a8("nmbs");
function getAuraAuthor(registry, bytes5, sessionValidators) {
  return sessionValidators[registry.createTypeUnsafe("RawAuraPreDigest", [bytes5.toU8a(true)]).slotNumber.mod(new import_bn90.default(sessionValidators.length)).toNumber()];
}
function getBabeAuthor(registry, bytes5, sessionValidators) {
  const digest = registry.createTypeUnsafe("RawBabePreDigestCompat", [bytes5.toU8a(true)]);
  return sessionValidators[digest.value.toNumber()];
}
function getBytesAsAuthor(registry, bytes5) {
  return registry.createTypeUnsafe("AccountId", [bytes5]);
}
var GenericConsensusEngineId = class extends U8aFixed {
  constructor(registry, value) {
    super(registry, isNumber8(value) ? bnToU8a8(value, { isLe: false }) : value, 32);
  }
  /**
   * @description `true` if the engine matches aura
   */
  get isAura() {
    return this.eq(CID_AURA);
  }
  /**
   * @description `true` is the engine matches babe
   */
  get isBabe() {
    return this.eq(CID_BABE);
  }
  /**
   * @description `true` is the engine matches grandpa
   */
  get isGrandpa() {
    return this.eq(CID_GRPA);
  }
  /**
   * @description `true` is the engine matches pow
   */
  get isPow() {
    return this.eq(CID_POW);
  }
  /**
   * @description `true` is the engine matches nimbus
   */
  get isNimbus() {
    return this.eq(CID_NMBS);
  }
  /**
   * @description From the input bytes, decode into an author
   */
  extractAuthor(bytes5, sessionValidators) {
    if (sessionValidators == null ? void 0 : sessionValidators.length) {
      if (this.isAura) {
        return getAuraAuthor(this.registry, bytes5, sessionValidators);
      } else if (this.isBabe) {
        return getBabeAuthor(this.registry, bytes5, sessionValidators);
      }
    }
    if (this.isPow || this.isNimbus) {
      return getBytesAsAuthor(this.registry, bytes5);
    }
    return void 0;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toString();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "ConsensusEngineId";
  }
  /**
   * @description Override the default toString to return a 4-byte string
   */
  toString() {
    return this.isAscii ? u8aToString8(this) : u8aToHex8(this);
  }
};

// node_modules/@polkadot/types/generic/LookupSource.js
init_shim();
var ACCOUNT_ID_PREFIX = new Uint8Array([255]);
function decodeString(registry, value) {
  const decoded = decodeAddress2(value);
  return decoded.length === 32 ? registry.createTypeUnsafe("AccountId", [decoded]) : registry.createTypeUnsafe("AccountIndex", [u8aToBn7(decoded)]);
}
function decodeU8a4(registry, value) {
  if (value.length === 32) {
    return registry.createTypeUnsafe("AccountId", [value]);
  } else if (value[0] === 255) {
    return registry.createTypeUnsafe("AccountId", [value.subarray(1)]);
  }
  const [offset, length] = GenericAccountIndex.readLength(value);
  return registry.createTypeUnsafe("AccountIndex", [u8aToBn7(value.subarray(offset, offset + length))]);
}
function decodeAddressOrIndex(registry, value) {
  return value instanceof GenericLookupSource ? value.inner : value instanceof GenericAccountId || value instanceof GenericAccountIndex ? value : isBn7(value) || isNumber8(value) || isBigInt7(value) ? registry.createTypeUnsafe("AccountIndex", [value]) : Array.isArray(value) || isHex8(value) || isU8a8(value) ? decodeU8a4(registry, u8aToU8a8(value)) : decodeString(registry, value);
}
var GenericLookupSource = class extends AbstractBase {
  constructor(registry, value = new Uint8Array()) {
    super(registry, decodeAddressOrIndex(registry, value));
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    const rawLength = this._rawLength;
    return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
    (rawLength > 1 ? 1 : 0);
  }
  /**
   * @description The length of the raw value, either AccountIndex or AccountId
   */
  get _rawLength() {
    return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const value = this.inner.toU8a().subarray(0, this._rawLength);
    return {
      outer: [
        new Uint8Array(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(value) : ACCOUNT_ID_PREFIX),
        value
      ]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex8(this.toU8a());
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Address";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = this.inner.toU8a().subarray(0, this._rawLength);
    return isBare ? encoded : u8aConcat8(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
  }
};

// node_modules/@polkadot/types/generic/MultiAddress.js
init_shim();
function decodeU8a5(registry, u8a9) {
  if ([0, 32].includes(u8a9.length)) {
    return { Id: u8a9 };
  } else if (u8a9.length === 20) {
    return { Address20: u8a9 };
  } else if (u8a9.length <= 8) {
    return { Index: registry.createTypeUnsafe("AccountIndex", [u8a9]).toNumber() };
  }
  return u8a9;
}
function decodeMultiAny(registry, value) {
  if (value instanceof GenericAccountId) {
    return { Id: value };
  } else if (isU8a8(value)) {
    return decodeU8a5(registry, value);
  } else if (value instanceof GenericMultiAddress) {
    return value;
  } else if (value instanceof GenericAccountIndex || isBn7(value) || isNumber8(value)) {
    return { Index: isNumber8(value) ? value : value.toNumber() };
  } else if (isString8(value)) {
    return decodeU8a5(registry, decodeAddress2(value.toString()));
  }
  return value;
}
var GenericMultiAddress = class extends Enum {
  constructor(registry, value) {
    super(registry, {
      Id: "AccountId",
      Index: "Compact<AccountIndex>",
      Raw: "Bytes",
      // eslint-disable-next-line sort-keys
      Address32: "H256",
      // eslint-disable-next-line sort-keys
      Address20: "H160"
    }, decodeMultiAny(registry, value));
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const { inner, outer = [] } = this.inner.inspect();
    return {
      inner,
      outer: [new Uint8Array([this.index]), ...outer]
    };
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.value.toString();
  }
};

// node_modules/@polkadot/types/generic/Vote.js
init_shim();
var AYE_BITS = 128;
var NAY_BITS = 0;
var CON_MASK = 127;
var DEF_CONV = 0;
function decodeVoteBool(value) {
  return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);
}
function decodeVoteU8a(value) {
  return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);
}
function decodeVoteType(registry, value) {
  return new Uint8Array([
    (new bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS) | registry.createTypeUnsafe("Conviction", [value.conviction || DEF_CONV]).index
  ]);
}
function decodeVote(registry, value) {
  if (isU8a8(value)) {
    return decodeVoteU8a(value);
  } else if (isUndefined7(value) || value instanceof Boolean || isBoolean7(value)) {
    return decodeVoteBool(new bool(registry, value).isTrue);
  } else if (isNumber8(value)) {
    return decodeVoteBool(value < 0);
  }
  return decodeVoteType(registry, value);
}
var GenericVote = class extends U8aFixed {
  constructor(registry, value) {
    const decoded = decodeVote(registry, value);
    super(registry, decoded, 8);
    this.__internal__aye = (decoded[0] & AYE_BITS) === AYE_BITS;
    this.__internal__conviction = this.registry.createTypeUnsafe("Conviction", [decoded[0] & CON_MASK]);
  }
  /**
   * @description returns a V2 conviction
   */
  get conviction() {
    return this.__internal__conviction;
  }
  /**
   * @description true if the wrapped value is a positive vote
   */
  get isAye() {
    return this.__internal__aye;
  }
  /**
   * @description true if the wrapped value is a negative vote
   */
  get isNay() {
    return !this.isAye;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExpanded) {
    return {
      conviction: this.conviction.toHuman(isExpanded),
      vote: this.isAye ? "Aye" : "Nay"
    };
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return {
      aye: this.isAye,
      conviction: this.conviction.toPrimitive()
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Vote";
  }
};

// node_modules/@polkadot/types/ethereum/index.js
init_shim();

// node_modules/@polkadot/types/ethereum/AccountId.js
init_shim();
function decodeAccountId2(value) {
  if (isU8a8(value) || Array.isArray(value)) {
    return u8aToU8a8(value);
  } else if (isHex8(value) || isEthereumAddress2(value.toString())) {
    return hexToU8a8(value.toString());
  } else if (isString8(value)) {
    return u8aToU8a8(value);
  }
  return value;
}
var GenericEthereumAccountId = class extends U8aFixed {
  constructor(registry, value = new Uint8Array()) {
    super(registry, decodeAccountId2(value), 160);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return !!other && super.eq(decodeAccountId2(other));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toString();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return ethereumEncode2(this);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "AccountId";
  }
};

// node_modules/@polkadot/types/ethereum/LookupSource.js
init_shim();
var ACCOUNT_ID_PREFIX2 = new Uint8Array([255]);
function decodeString2(registry, value) {
  const decoded = decodeAddress2(value);
  return decoded.length === 20 ? registry.createTypeUnsafe("EthereumAccountId", [decoded]) : registry.createTypeUnsafe("AccountIndex", [u8aToBn7(decoded)]);
}
function decodeU8a6(registry, value) {
  if (value.length === 20) {
    return registry.createTypeUnsafe("EthereumAccountId", [value]);
  } else if (value[0] === 255) {
    return registry.createTypeUnsafe("EthereumAccountId", [value.subarray(1)]);
  }
  const [offset, length] = GenericAccountIndex.readLength(value);
  return registry.createTypeUnsafe("AccountIndex", [u8aToBn7(value.subarray(offset, offset + length))]);
}
function decodeAddressOrIndex2(registry, value) {
  return value instanceof GenericEthereumLookupSource ? value.inner : value instanceof GenericEthereumAccountId || value instanceof GenericAccountIndex ? value : isU8a8(value) || Array.isArray(value) || isHex8(value) ? decodeU8a6(registry, u8aToU8a8(value)) : isBn7(value) || isNumber8(value) || isBigInt7(value) ? registry.createTypeUnsafe("AccountIndex", [value]) : decodeString2(registry, value);
}
var GenericEthereumLookupSource = class extends AbstractBase {
  constructor(registry, value = new Uint8Array()) {
    super(registry, decodeAddressOrIndex2(registry, value));
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    const rawLength = this._rawLength;
    return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
    (rawLength > 1 ? 1 : 0);
  }
  /**
   * @description The length of the raw value, either AccountIndex or AccountId
   */
  get _rawLength() {
    return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex8(this.toU8a());
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Address";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = this.inner.toU8a().subarray(0, this._rawLength);
    return isBare ? encoded : u8aConcat8(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX2, encoded);
  }
};

// node_modules/@polkadot/types/primitive/index.js
init_shim();

// node_modules/@polkadot/types/primitive/Data.js
init_shim();
function decodeDataU8a(registry, value) {
  const indicator = value[0];
  if (!indicator) {
    return [void 0, void 0];
  } else if (indicator >= 1 && indicator <= 33) {
    const length = indicator - 1;
    const data = value.subarray(1, length + 1);
    return [registry.createTypeUnsafe("Raw", [data]), 1];
  } else if (indicator >= 34 && indicator <= 37) {
    return [value.subarray(1, 32 + 1), indicator - 32];
  }
  throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
}
function decodeData(registry, value) {
  if (isU8a8(value) || isString8(value)) {
    return decodeDataU8a(registry, u8aToU8a8(value));
  } else if (!value) {
    return [void 0, void 0];
  }
  return [value, void 0];
}
var Data = class extends Enum {
  constructor(registry, value) {
    super(registry, {
      None: "Null",
      Raw: "Bytes",
      // eslint-disable-next-line sort-keys
      BlakeTwo256: "H256",
      Sha256: "H256",
      // eslint-disable-next-line sort-keys
      Keccak256: "H256",
      ShaThree256: "H256"
      // 5
    }, ...decodeData(registry, value));
    if (this.isRaw && this.asRaw.length > 32) {
      throw new Error("Data.Raw values are limited to a maximum length of 32 bytes");
    }
  }
  get asBlakeTwo256() {
    return this.value;
  }
  get asKeccak256() {
    return this.value;
  }
  get asRaw() {
    return this.value;
  }
  get asSha256() {
    return this.value;
  }
  get asShaThree256() {
    return this.value;
  }
  get isBlakeTwo256() {
    return this.index === 2;
  }
  get isKeccak256() {
    return this.index === 4;
  }
  get isNone() {
    return this.index === 0;
  }
  get isRaw() {
    return this.index === 1;
  }
  get isSha256() {
    return this.index === 3;
  }
  get isShaThree256() {
    return this.index === 5;
  }
  /**
   * @description The encoded length
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a() {
    if (this.index === 0) {
      return new Uint8Array(1);
    } else if (this.index === 1) {
      const data = this.value.toU8a(true);
      const length = Math.min(data.length, 32);
      const u8a10 = new Uint8Array(length + 1);
      u8a10.set([length + 1], 0);
      u8a10.set(data.subarray(0, length), 1);
      return u8a10;
    }
    const u8a9 = new Uint8Array(33);
    u8a9.set([this.index + 32], 0);
    u8a9.set(this.value.toU8a(), 1);
    return u8a9;
  }
};

// node_modules/@polkadot/types/primitive/StorageKey.js
init_shim();
var HASHER_MAP = {
  // opaque
  Blake2_128: [16, false],
  Blake2_128Concat: [16, true],
  Blake2_256: [32, false],
  Identity: [0, true],
  Twox128: [16, false],
  Twox256: [32, false],
  Twox64Concat: [8, true]
};
function decodeStorageKey(value) {
  if (isU8a8(value) || !value || isString8(value)) {
    return { key: value };
  } else if (value instanceof StorageKey) {
    return {
      key: value,
      method: value.method,
      section: value.section
    };
  } else if (isFunction9(value)) {
    return {
      key: value(),
      method: value.method,
      section: value.section
    };
  } else if (Array.isArray(value)) {
    const [fn, args = []] = value;
    if (!isFunction9(fn)) {
      throw new Error("Expected function input for key construction");
    }
    if (fn.meta && fn.meta.type.isMap) {
      const map2 = fn.meta.type.asMap;
      if (!Array.isArray(args) || args.length !== map2.hashers.length) {
        throw new Error(`Expected an array of ${map2.hashers.length} values as params to a Map query`);
      }
    }
    return {
      key: fn(...args),
      method: fn.method,
      section: fn.section
    };
  }
  throw new Error(`Unable to convert input ${value} to StorageKey`);
}
function decodeHashers(registry, value, hashers) {
  let offset = 32;
  const count2 = hashers.length;
  const result = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const [hasher5, type] = hashers[i];
    const [hashLen, canDecode] = HASHER_MAP[hasher5.type];
    const decoded = canDecode ? registry.createTypeUnsafe(getSiName(registry.lookup, type), [value.subarray(offset + hashLen)]) : registry.createTypeUnsafe("Raw", [value.subarray(offset, offset + hashLen)]);
    offset += hashLen + (canDecode ? decoded.encodedLength : 0);
    result[i] = decoded;
  }
  return result;
}
function decodeArgsFromMeta(registry, value, meta) {
  if (!meta || !meta.type.isMap) {
    return [];
  }
  const { hashers, key } = meta.type.asMap;
  const keys2 = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
  return decodeHashers(registry, value, hashers.map((h, i) => [h, keys2[i]]));
}
function getMeta(value) {
  if (value instanceof StorageKey) {
    return value.meta;
  } else if (isFunction9(value)) {
    return value.meta;
  } else if (Array.isArray(value)) {
    const [fn] = value;
    return fn.meta;
  }
  return void 0;
}
function getType(registry, value) {
  if (value instanceof StorageKey) {
    return value.outputType;
  } else if (isFunction9(value)) {
    return unwrapStorageType(registry, value.meta.type);
  } else if (Array.isArray(value)) {
    const [fn] = value;
    if (fn.meta) {
      return unwrapStorageType(registry, fn.meta.type);
    }
  }
  return "Raw";
}
var StorageKey = class extends Bytes {
  constructor(registry, value, override = {}) {
    const { key, method, section: section2 } = decodeStorageKey(value);
    super(registry, key);
    this.__internal__outputType = getType(registry, value);
    this.setMeta(getMeta(value), override.section || section2, override.method || method);
  }
  /**
   * @description Return the decoded arguments (applicable to map with decodable values)
   */
  get args() {
    return this.__internal__args;
  }
  /**
   * @description The metadata or `undefined` when not available
   */
  get meta() {
    return this.__internal__meta;
  }
  /**
   * @description The key method or `undefined` when not specified
   */
  get method() {
    return this.__internal__method;
  }
  /**
   * @description The output type
   */
  get outputType() {
    return this.__internal__outputType;
  }
  /**
   * @description The key section or `undefined` when not specified
   */
  get section() {
    return this.__internal__section;
  }
  is(key) {
    return key.section === this.section && key.method === this.method;
  }
  /**
   * @description Sets the meta for this key
   */
  setMeta(meta, section2, method) {
    this.__internal__meta = meta;
    this.__internal__method = method || this.__internal__method;
    this.__internal__section = section2 || this.__internal__section;
    if (meta) {
      this.__internal__outputType = unwrapStorageType(this.registry, meta.type);
    }
    try {
      this.__internal__args = decodeArgsFromMeta(this.registry, this.toU8a(true), meta);
    } catch {
    }
    return this;
  }
  /**
   * @description Returns the Human representation for this type
   */
  toHuman() {
    return this.__internal__args.length ? this.__internal__args.map((a) => a.toHuman()) : super.toHuman();
  }
  /**
   * @description Returns the raw type for this
   */
  toRawType() {
    return "StorageKey";
  }
};

// node_modules/@polkadot/types/metadata/decorate/extrinsics/index.js
init_shim();

// node_modules/@polkadot/types/metadata/decorate/util.js
init_shim();
function convert(fn) {
  return ({ name }) => fn(name);
}
var objectNameToCamel = convert(stringCamelCase8);
var objectNameToString = convert((n) => n.toString());

// node_modules/@polkadot/types/metadata/decorate/extrinsics/createUnchecked.js
init_shim();
function isTx(tx, callIndex) {
  return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
}
function createUnchecked(registry, section2, callIndex, callMetadata) {
  const expectedArgs = callMetadata.fields;
  const funcName = stringCamelCase8(callMetadata.name);
  const extrinsicFn = (...args) => {
    if (expectedArgs.length !== args.length) {
      throw new Error(`Extrinsic ${section2}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
    }
    return registry.createTypeUnsafe("Call", [{ args, callIndex }, callMetadata]);
  };
  extrinsicFn.is = (tx) => isTx(tx, callIndex);
  extrinsicFn.callIndex = callIndex;
  extrinsicFn.meta = callMetadata;
  extrinsicFn.method = funcName;
  extrinsicFn.section = section2;
  extrinsicFn.toJSON = () => callMetadata.toJSON();
  return extrinsicFn;
}

// node_modules/@polkadot/types/metadata/decorate/extrinsics/index.js
function filterCallsSome({ calls }) {
  return calls.isSome;
}
function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
  const { fields, index } = variant;
  const count2 = fields.length;
  const args = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const { name, type, typeName } = fields[i];
    args[i] = objectSpread7({
      name: stringCamelCase8(name.unwrapOr(`param${i}`)),
      type: getSiName(lookup, type)
    }, typeName.isSome ? { typeName: typeName.unwrap() } : null);
  }
  return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createTypeUnsafe("FunctionMetadataLatest", [objectSpread7({ args }, variant)]));
}
function decorateExtrinsics(registry, { lookup, pallets }, version) {
  const result = {};
  const filtered = pallets.filter(filterCallsSome);
  for (let i = 0, count2 = filtered.length; i < count2; i++) {
    const { calls, index, name } = filtered[i];
    const sectionName = stringCamelCase8(name);
    const sectionIndex = version >= 12 ? index.toNumber() : i;
    lazyMethod4(result, sectionName, () => lazyVariants(lookup, calls.unwrap(), objectNameToCamel, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
  }
  return result;
}

// node_modules/@polkadot/types/metadata/decorate/index.js
init_shim();

// node_modules/@polkadot/types/metadata/Metadata.js
init_shim();

// node_modules/@polkadot/types/metadata/MetadataVersioned.js
init_shim();

// node_modules/@polkadot/types/metadata/v9/toV10.js
init_shim();
function createStorageHasher(registry, hasher5) {
  if (hasher5.toNumber() >= 2) {
    return registry.createTypeUnsafe("StorageHasherV10", [hasher5.toNumber() + 1]);
  }
  return registry.createTypeUnsafe("StorageHasherV10", [hasher5]);
}
function createStorageType(registry, entryType) {
  if (entryType.isMap) {
    return [objectSpread7({}, entryType.asMap, {
      hasher: createStorageHasher(registry, entryType.asMap.hasher)
    }), 1];
  }
  if (entryType.isDoubleMap) {
    return [objectSpread7({}, entryType.asDoubleMap, {
      hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
      key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
    }), 2];
  }
  return [entryType.asPlain, 0];
}
function convertModule(registry, mod5) {
  const storage = mod5.storage.unwrapOr(null);
  return registry.createTypeUnsafe("ModuleMetadataV10", [objectSpread7({}, mod5, {
    storage: storage ? objectSpread7({}, storage, {
      items: storage.items.map((item) => objectSpread7({}, item, {
        type: registry.createTypeUnsafe("StorageEntryTypeV10", createStorageType(registry, item.type))
      }))
    }) : null
  })]);
}
function toV10(registry, { modules }) {
  return registry.createTypeUnsafe("MetadataV10", [{
    modules: modules.map((mod5) => convertModule(registry, mod5))
  }]);
}

// node_modules/@polkadot/types/metadata/v10/toV11.js
init_shim();
function toV11(registry, { modules }) {
  return registry.createTypeUnsafe("MetadataV11", [{
    // This is new in V11, pass V0 here - something non-existing, telling the API to use
    // the fallback for this information (on-chain detection)
    extrinsic: {
      signedExtensions: [],
      version: 0
    },
    modules
  }]);
}

// node_modules/@polkadot/types/metadata/v11/toV12.js
init_shim();
function toV12(registry, { extrinsic, modules }) {
  return registry.createTypeUnsafe("MetadataV12", [{
    extrinsic,
    modules: modules.map((mod5) => registry.createTypeUnsafe("ModuleMetadataV12", [objectSpread7({}, mod5, { index: 255 })]))
  }]);
}

// node_modules/@polkadot/types/metadata/v12/toV13.js
init_shim();
function toV13(registry, v122) {
  return registry.createTypeUnsafe("MetadataV13", [v122]);
}

// node_modules/@polkadot/types/metadata/v13/toV14.js
init_shim();

// node_modules/@polkadot/types/interfaces/alias.js
init_shim();
var typesAlias = {
  assets: {
    Approval: "AssetApproval",
    ApprovalKey: "AssetApprovalKey",
    Balance: "TAssetBalance",
    DestroyWitness: "AssetDestroyWitness"
  },
  babe: {
    EquivocationProof: "BabeEquivocationProof"
  },
  balances: {
    Status: "BalanceStatus"
  },
  beefy: {
    AuthorityId: "BeefyId"
  },
  contracts: {
    StorageKey: "ContractStorageKey"
  },
  electionProviderMultiPhase: {
    Phase: "ElectionPhase"
  },
  ethereum: {
    Block: "EthBlock",
    Header: "EthHeader",
    Receipt: "EthReceipt",
    Transaction: "EthTransaction",
    TransactionStatus: "EthTransactionStatus"
  },
  evm: {
    Account: "EvmAccount",
    Log: "EvmLog",
    Vicinity: "EvmVicinity"
  },
  grandpa: {
    Equivocation: "GrandpaEquivocation",
    EquivocationProof: "GrandpaEquivocationProof"
  },
  identity: {
    Judgement: "IdentityJudgement"
  },
  inclusion: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  paraDisputes: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  paraInclusion: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  paraScheduler: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  paraShared: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  parachains: {
    Id: "ParaId"
  },
  parasDisputes: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  parasInclusion: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  parasScheduler: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  parasShared: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  proposeParachain: {
    Proposal: "ParachainProposal"
  },
  proxy: {
    Announcement: "ProxyAnnouncement"
  },
  scheduler: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  shared: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  society: {
    Judgement: "SocietyJudgement",
    Vote: "SocietyVote"
  },
  staking: {
    Compact: "CompactAssignments"
  },
  treasury: {
    Proposal: "TreasuryProposal"
  },
  xcm: {
    AssetId: "XcmAssetId"
  },
  xcmPallet: {
    AssetId: "XcmAssetId"
  }
};
function getAliasTypes({ knownTypes: knownTypes2 }, section2) {
  var _a;
  return {
    ...typesAlias[section2] ?? {},
    ...((_a = knownTypes2.typesAlias) == null ? void 0 : _a[section2]) ?? {}
  };
}

// node_modules/@polkadot/types/metadata/v13/toV14.js
var BOXES = [["<", ">"], ["<", ","], [",", ">"], ["(", ")"], ["(", ","], [",", ","], [",", ")"]];
function compatType(specs, _type) {
  const type = _type.toString();
  const index = specs.findIndex(({ def }) => def.HistoricMetaCompat === type);
  if (index !== -1) {
    return index;
  }
  return specs.push({
    def: {
      HistoricMetaCompat: type
    }
  }) - 1;
}
function compatTypes(specs, ...types6) {
  for (let i = 0, count2 = types6.length; i < count2; i++) {
    compatType(specs, types6[i]);
  }
}
function makeTupleType(specs, entries) {
  return specs.push({
    def: {
      Tuple: entries
    }
  }) - 1;
}
function makeVariantType(modName, variantType, specs, variants) {
  return specs.push({
    def: {
      Variant: { variants }
    },
    path: [`pallet_${modName.toString()}`, "pallet", variantType]
  }) - 1;
}
function registerOriginCaller(registry, modules, metaVersion) {
  registry.register({
    OriginCaller: {
      _enum: modules.map((mod5, index) => [
        mod5.name.toString(),
        metaVersion >= 12 ? mod5.index.toNumber() : index
      ]).sort((a, b) => a[1] - b[1]).reduce((result, [name, index]) => {
        for (let i = Object.keys(result).length; i < index; i++) {
          result[`Empty${i}`] = "Null";
        }
        result[name] = knownOrigins[name] || "Null";
        return result;
      }, {})
    }
  });
}
function setTypeOverride(sectionTypes, types6) {
  types6.forEach((type) => {
    const override = Object.keys(sectionTypes).find((aliased) => type.eq(aliased));
    if (override) {
      type.setOverride(sectionTypes[override]);
    } else {
      const orig = type.toString();
      const alias2 = Object.entries(sectionTypes).reduce((result, [src, dst]) => BOXES.reduce((result2, [a, z]) => result2.replace(`${a}${src}${z}`, `${a}${dst}${z}`), result), orig);
      if (orig !== alias2) {
        type.setOverride(alias2);
      }
    }
  });
}
function convertCalls(specs, registry, modName, calls, sectionTypes) {
  const variants = calls.map(({ args, docs, name }, index) => {
    setTypeOverride(sectionTypes, args.map(({ type }) => type));
    return registry.createTypeUnsafe("SiVariant", [{
      docs,
      fields: args.map(({ name: name2, type }) => registry.createTypeUnsafe("SiField", [{ name: name2, type: compatType(specs, type) }])),
      index,
      name
    }]);
  });
  return registry.createTypeUnsafe("PalletCallMetadataV14", [{
    type: makeVariantType(modName, "Call", specs, variants)
  }]);
}
function convertConstants(specs, registry, constants, sectionTypes) {
  return constants.map(({ docs, name, type, value }) => {
    setTypeOverride(sectionTypes, [type]);
    return registry.createTypeUnsafe("PalletConstantMetadataV14", [{
      docs,
      name,
      type: compatType(specs, type),
      value
    }]);
  });
}
function convertErrors(specs, registry, modName, errors, _sectionTypes) {
  const variants = errors.map(({ docs, name }, index) => registry.createTypeUnsafe("SiVariant", [{
    docs,
    fields: [],
    index,
    name
  }]));
  return registry.createTypeUnsafe("PalletErrorMetadataV14", [{
    type: makeVariantType(modName, "Error", specs, variants)
  }]);
}
function convertEvents(specs, registry, modName, events2, sectionTypes) {
  const variants = events2.map(({ args, docs, name }, index) => {
    setTypeOverride(sectionTypes, args);
    return registry.createTypeUnsafe("SiVariant", [{
      docs,
      fields: args.map((t) => registry.createTypeUnsafe("SiField", [{ type: compatType(specs, t) }])),
      index,
      name
    }]);
  });
  return registry.createTypeUnsafe("PalletEventMetadataV14", [{
    type: makeVariantType(modName, "Event", specs, variants)
  }]);
}
function createMapEntry(specs, registry, sectionTypes, { hashers, isLinked, isOptional, keys: keys2, value }) {
  setTypeOverride(sectionTypes, [value, ...Array.isArray(keys2) ? keys2 : [keys2]]);
  return registry.createTypeUnsafe("StorageEntryTypeV14", [{
    Map: {
      hashers,
      key: hashers.length === 1 ? compatType(specs, keys2[0]) : makeTupleType(specs, keys2.map((t) => compatType(specs, t))),
      value: isLinked ? compatType(specs, `(${isOptional ? `Option<${value.toString()}>` : value.toString()}, Linkage<${keys2[0].toString()}>)`) : compatType(specs, value)
    }
  }]);
}
function convertStorage(specs, registry, { items, prefix: prefix2 }, sectionTypes) {
  return registry.createTypeUnsafe("PalletStorageMetadataV14", [{
    items: items.map(({ docs, fallback, modifier, name, type }) => {
      let entryType;
      if (type.isPlain) {
        const plain = type.asPlain;
        setTypeOverride(sectionTypes, [plain]);
        entryType = registry.createTypeUnsafe("StorageEntryTypeV14", [{
          Plain: compatType(specs, plain)
        }]);
      } else if (type.isMap) {
        const map2 = type.asMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: [map2.hasher],
          isLinked: map2.linked.isTrue,
          isOptional: modifier.isOptional,
          keys: [map2.key],
          value: map2.value
        });
      } else if (type.isDoubleMap) {
        const dm = type.asDoubleMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: [dm.hasher, dm.key2Hasher],
          isLinked: false,
          isOptional: modifier.isOptional,
          keys: [dm.key1, dm.key2],
          value: dm.value
        });
      } else {
        const nm = type.asNMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: nm.hashers,
          isLinked: false,
          isOptional: modifier.isOptional,
          keys: nm.keyVec,
          value: nm.value
        });
      }
      return registry.createTypeUnsafe("StorageEntryMetadataV14", [{
        docs,
        fallback,
        modifier,
        name,
        type: entryType
      }]);
    }),
    prefix: prefix2
  }]);
}
function convertExtrinsic(registry, { signedExtensions, version }) {
  return registry.createTypeUnsafe("ExtrinsicMetadataV14", [{
    signedExtensions: signedExtensions.map((identifier) => ({
      identifier,
      type: 0
      // we don't map the fields at all
    })),
    type: 0,
    version
  }]);
}
function createPallet(specs, registry, mod5, { calls, constants, errors, events: events2, storage }) {
  const sectionTypes = getAliasTypes(registry, stringCamelCase8(mod5.name));
  return registry.createTypeUnsafe("PalletMetadataV14", [{
    calls: calls && convertCalls(specs, registry, mod5.name, calls, sectionTypes),
    constants: convertConstants(specs, registry, constants, sectionTypes),
    errors: errors && convertErrors(specs, registry, mod5.name, errors, sectionTypes),
    events: events2 && convertEvents(specs, registry, mod5.name, events2, sectionTypes),
    index: mod5.index,
    name: mod5.name,
    storage: storage && convertStorage(specs, registry, storage, sectionTypes)
  }]);
}
function toV14(registry, v132, metaVersion) {
  const specs = [];
  compatTypes(specs, "Null", "u8", "u16", "u32", "u64");
  registerOriginCaller(registry, v132.modules, metaVersion);
  const extrinsic = convertExtrinsic(registry, v132.extrinsic);
  const pallets = v132.modules.map((mod5) => createPallet(specs, registry, mod5, {
    calls: mod5.calls.unwrapOr(null),
    constants: mod5.constants,
    errors: mod5.errors.length ? mod5.errors : null,
    events: mod5.events.unwrapOr(null),
    storage: mod5.storage.unwrapOr(null)
  }));
  return registry.createTypeUnsafe("MetadataV14", [{
    extrinsic,
    lookup: {
      types: specs.map((type, id) => registry.createTypeUnsafe("PortableType", [{ id, type }]))
    },
    pallets
  }]);
}

// node_modules/@polkadot/types/metadata/v14/toV15.js
init_shim();
function toV15(registry, v142, _) {
  var _a;
  const unchecked = v142.lookup.paramTypes.SpRuntimeUncheckedExtrinsic;
  return registry.createTypeUnsafe("MetadataV15", [
    objectSpread7({}, v142, {
      extrinsic: registry.createTypeUnsafe("ExtrinsicMetadataV15", [
        objectSpread7({}, v142.extrinsic, {
          addressType: unchecked == null ? void 0 : unchecked[0].type.unwrapOr(0),
          callType: unchecked == null ? void 0 : unchecked[1].type.unwrapOr(0),
          extraType: unchecked == null ? void 0 : unchecked[3].type.unwrapOr(0),
          signatureType: unchecked == null ? void 0 : unchecked[2].type.unwrapOr(0)
        })
      ]),
      outerEnums: registry.createTypeUnsafe("OuterEnums15", [{
        // FIXME We need to extract & add the errorType in here
        // (these doesn't seem to be an esay way to detect & extract it)
        callType: unchecked == null ? void 0 : unchecked[1].type.unwrapOr(0),
        eventType: (_a = v142.lookup.paramTypes.FrameSystemEventRecord) == null ? void 0 : _a[0].type.unwrapOr(0)
      }])
    })
  ]);
}

// node_modules/@polkadot/types/metadata/v15/toLatest.js
init_shim();
function toLatest(_registry, v152, _metaVersion) {
  return v152;
}

// node_modules/@polkadot/types/metadata/MagicNumber.js
init_shim();
var MAGIC_NUMBER = 1635018093;
var MagicNumber = class extends u322 {
  constructor(registry, value) {
    super(registry, value);
    if (!this.isEmpty && !this.eq(MAGIC_NUMBER)) {
      throw new Error(`MagicNumber mismatch: expected ${registry.createTypeUnsafe("u32", [MAGIC_NUMBER]).toHex()}, found ${this.toHex()}`);
    }
  }
};

// node_modules/@polkadot/types/metadata/versions.js
init_shim();
var KNOWN_VERSIONS = [15, 14, 13, 12, 11, 10, 9];
var LATEST_VERSION = KNOWN_VERSIONS[0];
var TO_CALLS_VERSION = 14;

// node_modules/@polkadot/types/metadata/MetadataVersioned.js
var MetadataVersioned = class extends Struct {
  constructor(registry, value) {
    super(registry, {
      magicNumber: MagicNumber,
      metadata: "MetadataAll"
    }, value);
    this.__internal__converted = /* @__PURE__ */ new Map();
    this.__internal__assertVersion = (version) => {
      if (this.version > version) {
        throw new Error(`Cannot convert metadata from version ${this.version} to ${version}`);
      }
      return this.version === version;
    };
    this.__internal__getVersion = (version, fromPrev) => {
      if (version !== "latest" && this.__internal__assertVersion(version)) {
        const asCurr = `asV${version}`;
        return this.__internal__metadata()[asCurr];
      }
      if (!this.__internal__converted.has(version)) {
        const asPrev = version === "latest" ? `asV${LATEST_VERSION}` : `asV${version - 1}`;
        this.__internal__converted.set(version, fromPrev(this.registry, this[asPrev], this.version));
      }
      return this.__internal__converted.get(version);
    };
    this.__internal__metadata = () => {
      return this.getT("metadata");
    };
  }
  /**
   * @description Returns the wrapped metadata as a limited calls-only (latest) version
   */
  get asCallsOnly() {
    return new MetadataVersioned(this.registry, {
      magicNumber: this.magicNumber,
      metadata: this.registry.createTypeUnsafe("MetadataAll", [toCallsOnly(this.registry, this.asLatest), TO_CALLS_VERSION])
    });
  }
  /**
   * @description Returns the wrapped metadata as a V9 object
   */
  get asV9() {
    this.__internal__assertVersion(9);
    return this.__internal__metadata().asV9;
  }
  /**
   * @description Returns the wrapped values as a V10 object
   */
  get asV10() {
    return this.__internal__getVersion(10, toV10);
  }
  /**
   * @description Returns the wrapped values as a V11 object
   */
  get asV11() {
    return this.__internal__getVersion(11, toV11);
  }
  /**
   * @description Returns the wrapped values as a V12 object
   */
  get asV12() {
    return this.__internal__getVersion(12, toV12);
  }
  /**
   * @description Returns the wrapped values as a V13 object
   */
  get asV13() {
    return this.__internal__getVersion(13, toV13);
  }
  /**
   * @description Returns the wrapped values as a V14 object
   */
  get asV14() {
    return this.__internal__getVersion(14, toV14);
  }
  /**
   * @description Returns the wrapped values as a V14 object
   */
  get asV15() {
    return this.__internal__getVersion(15, toV15);
  }
  /**
   * @description Returns the wrapped values as a latest version object
   */
  get asLatest() {
    return this.__internal__getVersion("latest", toLatest);
  }
  /**
   * @description The magicNumber for the Metadata (known constant)
   */
  get magicNumber() {
    return this.getT("magicNumber");
  }
  /**
   * @description the metadata version this structure represents
   */
  get version() {
    return this.__internal__metadata().index;
  }
  getUniqTypes(throwError2) {
    return getUniqTypes(this.registry, this.asLatest, throwError2);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    this.asLatest;
    return super.toJSON();
  }
};

// node_modules/@polkadot/types/metadata/Metadata.js
var EMPTY_METADATA = new Uint8Array([109, 101, 116, 97, 9]);
var VERSION_IDX = EMPTY_METADATA.length - 1;
function decodeU8a7(registry, u8a9) {
  if (u8a9.length === 0) {
    return EMPTY_METADATA;
  } else if (u8a9[VERSION_IDX] === 9) {
    try {
      return new MetadataVersioned(registry, u8a9);
    } catch {
      u8a9[VERSION_IDX] = 10;
    }
  }
  return u8a9;
}
var Metadata = class extends MetadataVersioned {
  constructor(registry, value) {
    super(registry, isU8a8(value) || isString8(value) ? decodeU8a7(registry, u8aToU8a8(value)) : value);
  }
};

// node_modules/@polkadot/types/metadata/decorate/constants/index.js
init_shim();
function decorateConstants(registry, { pallets }, _version) {
  const result = {};
  for (let i = 0, count2 = pallets.length; i < count2; i++) {
    const { constants, name } = pallets[i];
    if (!constants.isEmpty) {
      lazyMethod4(result, stringCamelCase8(name), () => lazyMethods3({}, constants, (constant) => {
        const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [hexToU8a8(constant.value.toHex())]);
        codec.meta = constant;
        return codec;
      }, objectNameToCamel));
    }
  }
  return result;
}

// node_modules/@polkadot/types/metadata/decorate/errors/index.js
init_shim();
function variantToMeta(lookup, variant) {
  return objectSpread7({ args: variant.fields.map(({ type }) => lookup.getTypeDef(type).type) }, variant);
}
function decorateErrors(registry, { lookup, pallets }, version) {
  const result = {};
  for (let i = 0, count2 = pallets.length; i < count2; i++) {
    const { errors, index, name } = pallets[i];
    if (errors.isSome) {
      const sectionIndex = version >= 12 ? index.toNumber() : i;
      lazyMethod4(result, stringCamelCase8(name), () => lazyVariants(lookup, errors.unwrap(), objectNameToString, (variant) => ({
        // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
        is: (errorMod) => isCodec7(errorMod) && isCodec7(errorMod.index) && errorMod.index.eq(sectionIndex) && (isU8a8(errorMod.error) ? errorMod.error[0] === variant.index.toNumber() : isCodec7(errorMod.error) && errorMod.error.eq(variant.index)),
        meta: registry.createTypeUnsafe("ErrorMetadataLatest", [variantToMeta(lookup, variant)])
      })));
    }
  }
  return result;
}

// node_modules/@polkadot/types/metadata/decorate/events/index.js
init_shim();
function filterEventsSome({ events: events2 }) {
  return events2.isSome;
}
function decorateEvents(registry, { lookup, pallets }, version) {
  const result = {};
  const filtered = pallets.filter(filterEventsSome);
  for (let i = 0, count2 = filtered.length; i < count2; i++) {
    const { events: events2, index, name } = filtered[i];
    const sectionIndex = version >= 12 ? index.toNumber() : i;
    lazyMethod4(result, stringCamelCase8(name), () => lazyVariants(lookup, events2.unwrap(), objectNameToString, (variant) => ({
      // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
      is: (eventRecord) => isCodec7(eventRecord) && isU8a8(eventRecord.index) && sectionIndex === eventRecord.index[0] && variant.index.eq(eventRecord.index[1]),
      meta: registry.createTypeUnsafe("EventMetadataLatest", [variantToMeta(lookup, variant)])
    })));
  }
  return result;
}

// node_modules/@polkadot/types/metadata/decorate/storage/index.js
init_shim();

// node_modules/@polkadot/types/metadata/decorate/storage/createFunction.js
init_shim();

// node_modules/@polkadot/types/metadata/decorate/storage/getHasher.js
init_shim();
var DEFAULT_FN = (data) => xxhashAsU8a2(data, 128);
var HASHERS = {
  Blake2_128: (data) => (
    // eslint-disable-line camelcase
    blake2AsU8a2(data, 128)
  ),
  Blake2_128Concat: (data) => (
    // eslint-disable-line camelcase
    u8aConcat8(blake2AsU8a2(data, 128), u8aToU8a8(data))
  ),
  Blake2_256: (data) => (
    // eslint-disable-line camelcase
    blake2AsU8a2(data, 256)
  ),
  Identity: (data) => u8aToU8a8(data),
  Twox128: (data) => xxhashAsU8a2(data, 128),
  Twox256: (data) => xxhashAsU8a2(data, 256),
  Twox64Concat: (data) => u8aConcat8(xxhashAsU8a2(data, 64), u8aToU8a8(data))
};
function getHasher(hasher5) {
  return HASHERS[hasher5.type] || DEFAULT_FN;
}

// node_modules/@polkadot/types/metadata/decorate/storage/createFunction.js
var NO_RAW_ARGS = {
  args: [],
  hashers: [],
  keys: []
};
function filterDefined(a) {
  return !isUndefined7(a);
}
function assertArgs({ method, section: section2 }, { args, keys: keys2 }) {
  if (!Array.isArray(args)) {
    throw new Error(`Call to ${stringCamelCase8(section2 || "unknown")}.${stringCamelCase8(method || "unknown")} needs ${keys2.length} arguments`);
  } else if (args.filter(filterDefined).length !== keys2.length) {
    throw new Error(`Call to ${stringCamelCase8(section2 || "unknown")}.${stringCamelCase8(method || "unknown")} needs ${keys2.length} arguments, found [${args.join(", ")}]`);
  }
}
function createKeyRawParts(registry, itemFn, { args, hashers, keys: keys2 }) {
  const count2 = keys2.length;
  const extra = new Array(count2);
  for (let i = 0; i < count2; i++) {
    extra[i] = getHasher(hashers[i])(registry.createTypeUnsafe(registry.createLookupType(keys2[i]), [args[i]]).toU8a());
  }
  return [
    [
      xxhashAsU8a2(itemFn.prefix, 128),
      xxhashAsU8a2(itemFn.method, 128)
    ],
    extra
  ];
}
function createKeyInspect(registry, itemFn, args) {
  assertArgs(itemFn, args);
  const { meta } = itemFn;
  const [prefix2, extra] = createKeyRawParts(registry, itemFn, args);
  let types6 = [];
  if (meta.type.isMap) {
    const { hashers, key } = meta.type.asMap;
    types6 = hashers.length === 1 ? [`${hashers[0].type}(${getSiName(registry.lookup, key)})`] : registry.lookup.getSiType(key).def.asTuple.map((k, i) => `${hashers[i].type}(${getSiName(registry.lookup, k)})`);
  }
  const names = ["module", "method"].concat(...args.args.map((_, i) => types6[i]));
  return {
    inner: prefix2.concat(...extra).map((v, i) => ({ name: names[i], outer: [v] }))
  };
}
function createKeyRaw(registry, itemFn, args) {
  const [prefix2, extra] = createKeyRawParts(registry, itemFn, args);
  return u8aConcat8(...prefix2, ...extra);
}
function createKey(registry, itemFn, args) {
  assertArgs(itemFn, args);
  return compactAddLength8(createKeyRaw(registry, itemFn, args));
}
function createStorageInspect(registry, itemFn, options) {
  const { meta: { type } } = itemFn;
  return (...args) => {
    if (type.isPlain) {
      return options.skipHashing ? { inner: [], name: "wellKnown", outer: [u8aToU8a8(options.key)] } : createKeyInspect(registry, itemFn, NO_RAW_ARGS);
    }
    const { hashers, key } = type.asMap;
    return hashers.length === 1 ? createKeyInspect(registry, itemFn, { args, hashers, keys: [key] }) : createKeyInspect(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
  };
}
function createStorageFn(registry, itemFn, options) {
  const { meta: { type } } = itemFn;
  let cacheKey = null;
  return (...args) => {
    if (type.isPlain) {
      if (!cacheKey) {
        cacheKey = options.skipHashing ? compactAddLength8(u8aToU8a8(options.key)) : createKey(registry, itemFn, NO_RAW_ARGS);
      }
      return cacheKey;
    }
    const { hashers, key } = type.asMap;
    return hashers.length === 1 ? createKey(registry, itemFn, { args, hashers, keys: [key] }) : createKey(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
  };
}
function createWithMeta(registry, itemFn, options) {
  const { meta, method, prefix: prefix2, section: section2 } = itemFn;
  const storageFn = createStorageFn(registry, itemFn, options);
  storageFn.inspect = createStorageInspect(registry, itemFn, options);
  storageFn.meta = meta;
  storageFn.method = stringCamelCase8(method);
  storageFn.prefix = prefix2;
  storageFn.section = section2;
  storageFn.toJSON = () => objectSpread7({ storage: { method, prefix: prefix2, section: section2 } }, meta.toJSON());
  return storageFn;
}
function extendHeadMeta(registry, { meta: { docs, name, type }, section: section2 }, { method }, iterFn) {
  const meta = registry.createTypeUnsafe("StorageEntryMetadataLatest", [{
    docs,
    fallback: registry.createTypeUnsafe("Bytes", []),
    modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", [1]),
    name,
    type: registry.createTypeUnsafe("StorageEntryTypeLatest", [type.asMap.key, 0])
  }]);
  iterFn.meta = meta;
  const fn = (...args) => registry.createTypeUnsafe("StorageKey", [iterFn(...args), { method, section: section2 }]);
  fn.meta = meta;
  return fn;
}
function extendPrefixedMap(registry, itemFn, storageFn) {
  const { meta: { type }, method, section: section2 } = itemFn;
  storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
    if (args.length && (type.isPlain || args.length >= type.asMap.hashers.length)) {
      throw new Error(`Iteration of ${stringCamelCase8(section2 || "unknown")}.${stringCamelCase8(method || "unknown")} needs arguments to be at least one less than the full arguments, found [${args.join(", ")}]`);
    }
    if (args.length) {
      if (type.isMap) {
        const { hashers, key } = type.asMap;
        const keysVec = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
        return new Raw(registry, createKeyRaw(registry, itemFn, { args, hashers: hashers.slice(0, args.length), keys: keysVec.slice(0, args.length) }));
      }
    }
    return new Raw(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
  });
  return storageFn;
}
function createFunction(registry, itemFn, options) {
  const { meta: { type } } = itemFn;
  const storageFn = createWithMeta(registry, itemFn, options);
  if (type.isMap) {
    extendPrefixedMap(registry, itemFn, storageFn);
  }
  storageFn.keyPrefix = (...args) => storageFn.iterKey && storageFn.iterKey(...args) || compactStripLength7(storageFn())[1];
  return storageFn;
}

// node_modules/@polkadot/types/metadata/decorate/storage/getStorage.js
init_shim();

// node_modules/@polkadot/types/metadata/decorate/storage/substrate.js
init_shim();

// node_modules/@polkadot/types/metadata/decorate/storage/util.js
init_shim();
function findSiPrimitive(registry, _prim) {
  const prim = _prim.toLowerCase();
  return registry.lookup.types.find((t) => t.type.def.isPrimitive && t.type.def.asPrimitive.toString().toLowerCase() === prim || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim);
}
function findSiType(registry, orig) {
  let portable = findSiPrimitive(registry, orig);
  if (!portable && orig === "Bytes") {
    const u82 = findSiPrimitive(registry, "u8");
    if (u82) {
      portable = registry.lookup.types.find((t) => t.type.def.isSequence && t.type.def.asSequence.type.eq(u82.id) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(orig));
    }
  }
  if (!portable) {
    console.warn(`Unable to map ${orig} to a lookup index`);
  }
  return portable;
}
function createRuntimeFunction({ method, prefix: prefix2, section: section2 }, key, { docs, type }) {
  return (registry) => {
    var _a;
    return createFunction(registry, {
      meta: registry.createTypeUnsafe("StorageEntryMetadataLatest", [{
        docs: registry.createTypeUnsafe("Vec<Text>", [[docs]]),
        modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", ["Required"]),
        name: registry.createTypeUnsafe("Text", [method]),
        toJSON: () => key,
        type: registry.createTypeUnsafe("StorageEntryTypeLatest", [{ Plain: ((_a = findSiType(registry, type)) == null ? void 0 : _a.id) || 0 }])
      }]),
      method,
      prefix: prefix2,
      section: section2
    }, { key, skipHashing: true });
  };
}

// node_modules/@polkadot/types/metadata/decorate/storage/substrate.js
var prefix = "Substrate";
var section = "substrate";
function createSubstrateFn(method, key, meta) {
  return createRuntimeFunction({ method, prefix, section }, key, meta);
}
var substrate2 = {
  changesTrieConfig: createSubstrateFn("changesTrieConfig", ":changes_trie", {
    docs: "Changes trie configuration is stored under this key.",
    type: "u32"
  }),
  childStorageKeyPrefix: createSubstrateFn("childStorageKeyPrefix", ":child_storage:", {
    docs: "Prefix of child storage keys.",
    type: "u32"
  }),
  code: createSubstrateFn("code", ":code", {
    docs: "Wasm code of the runtime.",
    type: "Bytes"
  }),
  extrinsicIndex: createSubstrateFn("extrinsicIndex", ":extrinsic_index", {
    docs: "Current extrinsic index (u32) is stored under this key.",
    type: "u32"
  }),
  heapPages: createSubstrateFn("heapPages", ":heappages", {
    docs: "Number of wasm linear memory pages required for execution of the runtime.",
    type: "u64"
  })
};

// node_modules/@polkadot/types/metadata/decorate/storage/getStorage.js
function getStorage(registry) {
  const storage = {};
  const entries = Object.entries(substrate2);
  for (let e = 0, count2 = entries.length; e < count2; e++) {
    storage[entries[e][0]] = entries[e][1](registry);
  }
  return { substrate: storage };
}

// node_modules/@polkadot/types/metadata/decorate/storage/index.js
var VERSION_NAME = "palletVersion";
var VERSION_KEY = ":__STORAGE_VERSION__:";
var VERSION_DOCS = { docs: "Returns the current pallet version from storage", type: "u16" };
function decorateStorage(registry, { pallets }, _metaVersion) {
  const result = getStorage(registry);
  for (let i = 0, count2 = pallets.length; i < count2; i++) {
    const { name, storage } = pallets[i];
    if (storage.isSome) {
      const section2 = stringCamelCase8(name);
      const { items, prefix: _prefix } = storage.unwrap();
      const prefix2 = _prefix.toString();
      lazyMethod4(result, section2, () => lazyMethods3({
        palletVersion: createRuntimeFunction({ method: VERSION_NAME, prefix: prefix2, section: section2 }, createKeyRaw(registry, { method: VERSION_KEY, prefix: name.toString() }, NO_RAW_ARGS), VERSION_DOCS)(registry)
      }, items, (meta) => createFunction(registry, { meta, method: meta.name.toString(), prefix: prefix2, section: section2 }, {}), objectNameToCamel));
    }
  }
  return result;
}

// node_modules/@polkadot/types/metadata/decorate/index.js
function expandMetadata(registry, metadata) {
  if (!(metadata instanceof Metadata)) {
    throw new Error("You need to pass a valid Metadata instance to Decorated");
  }
  const latest2 = metadata.asLatest;
  const version = metadata.version;
  return {
    consts: decorateConstants(registry, latest2, version),
    errors: decorateErrors(registry, latest2, version),
    events: decorateEvents(registry, latest2, version),
    query: decorateStorage(registry, latest2, version),
    registry,
    tx: decorateExtrinsics(registry, latest2, version)
  };
}

// node_modules/@polkadot/types/create/registry.js
var DEFAULT_FIRST_CALL_IDX = new Uint8Array(2);
var l12 = logger5("registry");
function sortDecimalStrings(a, b) {
  return parseInt(a, 10) - parseInt(b, 10);
}
function valueToString(v) {
  return v.toString();
}
function getFieldArgs(lookup, fields) {
  const count2 = fields.length;
  const args = new Array(count2);
  for (let i = 0; i < count2; i++) {
    args[i] = lookup.getTypeDef(fields[i].type).type;
  }
  return args;
}
function clearRecord(record) {
  const keys2 = Object.keys(record);
  for (let i = 0, count2 = keys2.length; i < count2; i++) {
    delete record[keys2[i]];
  }
}
function getVariantStringIdx({ index }) {
  return index.toString();
}
function injectErrors(_, { lookup, pallets }, version, result) {
  clearRecord(result);
  for (let i = 0, count2 = pallets.length; i < count2; i++) {
    const { errors, index, name } = pallets[i];
    if (errors.isSome) {
      const sectionName = stringCamelCase8(name);
      lazyMethod4(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, errors.unwrap(), getVariantStringIdx, ({ docs, fields, index: index2, name: name2 }) => ({
        args: getFieldArgs(lookup, fields),
        docs: docs.map(valueToString),
        fields,
        index: index2.toNumber(),
        method: name2.toString(),
        name: name2.toString(),
        section: sectionName
      })));
    }
  }
}
function injectEvents(registry, { lookup, pallets }, version, result) {
  const filtered = pallets.filter(filterEventsSome);
  clearRecord(result);
  for (let i = 0, count2 = filtered.length; i < count2; i++) {
    const { events: events2, index, name } = filtered[i];
    lazyMethod4(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, events2.unwrap(), getVariantStringIdx, (variant) => {
      const meta = registry.createType("EventMetadataLatest", objectSpread7({}, variant, { args: getFieldArgs(lookup, variant.fields) }));
      return class extends GenericEventData {
        constructor(registry2, value) {
          super(registry2, value, meta, stringCamelCase8(name), variant.name.toString());
        }
      };
    }));
  }
}
function injectExtrinsics(registry, { lookup, pallets }, version, result, mapping2) {
  const filtered = pallets.filter(filterCallsSome);
  clearRecord(result);
  clearRecord(mapping2);
  for (let i = 0, count2 = filtered.length; i < count2; i++) {
    const { calls, index, name } = filtered[i];
    const sectionIndex = version >= 12 ? index.toNumber() : i;
    const sectionName = stringCamelCase8(name);
    const allCalls = calls.unwrap();
    lazyMethod4(result, sectionIndex, () => lazyVariants(lookup, allCalls, getVariantStringIdx, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
    const { path } = registry.lookup.getSiType(allCalls.type);
    const palletIdx = path.findIndex((v) => v.eq("pallet"));
    if (palletIdx !== -1) {
      const name2 = stringCamelCase8(path.slice(0, palletIdx).map((p, i2) => i2 === 0 ? p.replace(/^(frame|pallet)_/, "") : p).join(" "));
      if (!mapping2[name2]) {
        mapping2[name2] = [sectionName];
      } else {
        mapping2[name2].push(sectionName);
      }
    }
  }
}
function extractProperties(registry, metadata) {
  const original = registry.getChainProperties();
  const constants = decorateConstants(registry, metadata.asLatest, metadata.version);
  const ss58Format = constants["system"] && (constants["system"]["sS58Prefix"] || constants["system"]["ss58Prefix"]);
  if (!ss58Format) {
    return original;
  }
  const { isEthereum, tokenDecimals, tokenSymbol } = original || {};
  return registry.createTypeUnsafe("ChainProperties", [{ isEthereum, ss58Format, tokenDecimals, tokenSymbol }]);
}
var TypeRegistry = class {
  constructor(createdAtHash) {
    this.__internal__classes = /* @__PURE__ */ new Map();
    this.__internal__definitions = /* @__PURE__ */ new Map();
    this.__internal__firstCallIndex = null;
    this.__internal__hasher = blake2AsU8a2;
    this.__internal__knownTypes = {};
    this.__internal__metadataVersion = 0;
    this.__internal__signedExtensions = fallbackExtensions;
    this.__internal__unknownTypes = /* @__PURE__ */ new Map();
    this.__internal__metadataCalls = {};
    this.__internal__metadataErrors = {};
    this.__internal__metadataEvents = {};
    this.__internal__moduleMap = {};
    this.__internal__registerObject = (obj) => {
      const entries = Object.entries(obj);
      for (let e = 0, count2 = entries.length; e < count2; e++) {
        const [name, type] = entries[e];
        if (isFunction9(type)) {
          this.__internal__classes.set(name, type);
        } else {
          const def = isString8(type) ? type : stringify7(type);
          if (name === def) {
            throw new Error(`Unable to register circular ${name} === ${def}`);
          }
          if (this.__internal__classes.has(name)) {
            this.__internal__classes.delete(name);
          }
          this.__internal__definitions.set(name, def);
        }
      }
    };
    this.__internal__registerLookup = (lookup) => {
      this.setLookup(lookup);
      let Weight = null;
      if (this.hasType("SpWeightsWeightV2Weight")) {
        const weightv2 = this.createType("SpWeightsWeightV2Weight");
        Weight = weightv2.refTime && weightv2.proofSize ? "SpWeightsWeightV2Weight" : "WeightV1";
      } else if (!isBn7(this.createType("Weight"))) {
        Weight = "WeightV1";
      }
      if (Weight) {
        this.register({ Weight });
      }
    };
    this.__internal__knownDefaults = objectSpread7({ Json, Metadata, PortableRegistry, Raw }, index_types_exports);
    this.__internal__knownDefaultsEntries = Object.entries(this.__internal__knownDefaults);
    this.__internal__knownDefinitions = definitions_exports;
    const allKnown = Object.values(this.__internal__knownDefinitions);
    for (let i = 0, count2 = allKnown.length; i < count2; i++) {
      this.register(allKnown[i].types);
    }
    if (createdAtHash) {
      this.createdAtHash = this.createType("BlockHash", createdAtHash);
    }
  }
  get chainDecimals() {
    var _a;
    if ((_a = this.__internal__chainProperties) == null ? void 0 : _a.tokenDecimals.isSome) {
      const allDecimals = this.__internal__chainProperties.tokenDecimals.unwrap();
      if (allDecimals.length) {
        return allDecimals.map((b) => b.toNumber());
      }
    }
    return [12];
  }
  get chainIsEthereum() {
    var _a;
    return ((_a = this.__internal__chainProperties) == null ? void 0 : _a.isEthereum.isTrue) || false;
  }
  get chainSS58() {
    var _a;
    return ((_a = this.__internal__chainProperties) == null ? void 0 : _a.ss58Format.isSome) ? this.__internal__chainProperties.ss58Format.unwrap().toNumber() : void 0;
  }
  get chainTokens() {
    var _a;
    if ((_a = this.__internal__chainProperties) == null ? void 0 : _a.tokenSymbol.isSome) {
      const allTokens = this.__internal__chainProperties.tokenSymbol.unwrap();
      if (allTokens.length) {
        return allTokens.map(valueToString);
      }
    }
    return [formatBalance7.getDefaults().unit];
  }
  get firstCallIndex() {
    return this.__internal__firstCallIndex || DEFAULT_FIRST_CALL_IDX;
  }
  /**
   * @description Returns true if the type is in a Compat format
   */
  isLookupType(value) {
    return /Lookup\d+$/.test(value);
  }
  /**
   * @description Creates a lookup string from the supplied id
   */
  createLookupType(lookupId) {
    return `Lookup${typeof lookupId === "number" ? lookupId : lookupId.toNumber()}`;
  }
  get knownTypes() {
    return this.__internal__knownTypes;
  }
  get lookup() {
    return assertReturn3(this.__internal__lookup, "PortableRegistry has not been set on this registry");
  }
  get metadata() {
    return assertReturn3(this.__internal__metadata, "Metadata has not been set on this registry");
  }
  get unknownTypes() {
    return [...this.__internal__unknownTypes.keys()];
  }
  get signedExtensions() {
    return this.__internal__signedExtensions;
  }
  clearCache() {
    this.__internal__classes = /* @__PURE__ */ new Map();
  }
  /**
   * @describe Creates an instance of the class
   */
  createClass(type) {
    return createClassUnsafe(this, type);
  }
  /**
   * @describe Creates an instance of the class
   */
  createClassUnsafe(type) {
    return createClassUnsafe(this, type);
  }
  /**
   * @description Creates an instance of a type as registered
   */
  createType(type, ...params) {
    return createTypeUnsafe(this, type, params);
  }
  /**
   * @description Creates an instance of a type as registered
   */
  createTypeUnsafe(type, params, options) {
    return createTypeUnsafe(this, type, params, options);
  }
  // find a specific call
  findMetaCall(callIndex) {
    const [section2, method] = [callIndex[0], callIndex[1]];
    return assertReturn3(this.__internal__metadataCalls[`${section2}`] && this.__internal__metadataCalls[`${section2}`][`${method}`], () => `findMetaCall: Unable to find Call with index [${section2}, ${method}]/[${callIndex.toString()}]`);
  }
  // finds an error
  findMetaError(errorIndex) {
    const [section2, method] = isU8a8(errorIndex) ? [errorIndex[0], errorIndex[1]] : [
      errorIndex.index.toNumber(),
      isU8a8(errorIndex.error) ? errorIndex.error[0] : errorIndex.error.toNumber()
    ];
    return assertReturn3(this.__internal__metadataErrors[`${section2}`] && this.__internal__metadataErrors[`${section2}`][`${method}`], () => `findMetaError: Unable to find Error with index [${section2}, ${method}]/[${errorIndex.toString()}]`);
  }
  findMetaEvent(eventIndex) {
    const [section2, method] = [eventIndex[0], eventIndex[1]];
    return assertReturn3(this.__internal__metadataEvents[`${section2}`] && this.__internal__metadataEvents[`${section2}`][`${method}`], () => `findMetaEvent: Unable to find Event with index [${section2}, ${method}]/[${eventIndex.toString()}]`);
  }
  get(name, withUnknown, knownTypeDef) {
    return this.getUnsafe(name, withUnknown, knownTypeDef);
  }
  getUnsafe(name, withUnknown, knownTypeDef) {
    let Type2 = this.__internal__classes.get(name) || this.__internal__knownDefaults[name];
    if (!Type2) {
      const definition = this.__internal__definitions.get(name);
      let BaseType;
      if (definition) {
        BaseType = createClassUnsafe(this, definition);
      } else if (knownTypeDef) {
        BaseType = constructTypeClass(this, knownTypeDef);
      } else if (withUnknown) {
        l12.warn(`Unable to resolve type ${name}, it will fail on construction`);
        this.__internal__unknownTypes.set(name, true);
        BaseType = DoNotConstruct.with(name);
      }
      if (BaseType) {
        Type2 = class extends BaseType {
        };
        this.__internal__classes.set(name, Type2);
        if (knownTypeDef && isNumber8(knownTypeDef.lookupIndex)) {
          this.__internal__classes.set(this.createLookupType(knownTypeDef.lookupIndex), Type2);
        }
      }
    }
    return Type2;
  }
  getChainProperties() {
    return this.__internal__chainProperties;
  }
  getClassName(Type2) {
    const names = [];
    for (const [name, Clazz] of this.__internal__knownDefaultsEntries) {
      if (Type2 === Clazz) {
        names.push(name);
      }
    }
    for (const [name, Clazz] of this.__internal__classes.entries()) {
      if (Type2 === Clazz) {
        names.push(name);
      }
    }
    return names.length ? names.sort().reverse()[0] : void 0;
  }
  getDefinition(typeName) {
    return this.__internal__definitions.get(typeName);
  }
  getModuleInstances(specName, moduleName) {
    var _a, _b, _c, _d, _e;
    return ((_e = (_d = (_c = (_b = (_a = this.__internal__knownTypes) == null ? void 0 : _a.typesBundle) == null ? void 0 : _b.spec) == null ? void 0 : _c[specName.toString()]) == null ? void 0 : _d.instances) == null ? void 0 : _e[moduleName]) || this.__internal__moduleMap[moduleName];
  }
  getOrThrow(name) {
    const Clazz = this.get(name);
    if (!Clazz) {
      throw new Error(`type ${name} not found`);
    }
    return Clazz;
  }
  getOrUnknown(name) {
    return this.get(name, true);
  }
  getSignedExtensionExtra() {
    return expandExtensionTypes(this.__internal__signedExtensions, "payload", this.__internal__userExtensions);
  }
  getSignedExtensionTypes() {
    return expandExtensionTypes(this.__internal__signedExtensions, "extrinsic", this.__internal__userExtensions);
  }
  hasClass(name) {
    return this.__internal__classes.has(name) || !!this.__internal__knownDefaults[name];
  }
  hasDef(name) {
    return this.__internal__definitions.has(name);
  }
  hasType(name) {
    return !this.__internal__unknownTypes.get(name) && (this.hasClass(name) || this.hasDef(name));
  }
  hash(data) {
    return this.createType("CodecHash", this.__internal__hasher(data));
  }
  // eslint-disable-next-line no-dupe-class-members
  register(arg1, arg2) {
    if (isFunction9(arg1)) {
      this.__internal__classes.set(arg1.name, arg1);
    } else if (isString8(arg1)) {
      if (!isFunction9(arg2)) {
        throw new Error(`Expected class definition passed to '${arg1}' registration`);
      } else if (arg1 === arg2.toString()) {
        throw new Error(`Unable to register circular ${arg1} === ${arg1}`);
      }
      this.__internal__classes.set(arg1, arg2);
    } else {
      this.__internal__registerObject(arg1);
    }
  }
  // sets the chain properties
  setChainProperties(properties) {
    if (properties) {
      this.__internal__chainProperties = properties;
    }
  }
  setHasher(hasher5) {
    this.__internal__hasher = hasher5 || blake2AsU8a2;
  }
  setKnownTypes(knownTypes2) {
    this.__internal__knownTypes = knownTypes2;
  }
  setLookup(lookup) {
    this.__internal__lookup = lookup;
    lookup.register();
  }
  // sets the metadata
  setMetadata(metadata, signedExtensions, userExtensions, noInitWarn) {
    this.__internal__metadata = metadata.asLatest;
    this.__internal__metadataVersion = metadata.version;
    this.__internal__firstCallIndex = null;
    this.__internal__registerLookup(this.__internal__metadata.lookup);
    injectExtrinsics(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataCalls, this.__internal__moduleMap);
    injectErrors(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataErrors);
    injectEvents(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataEvents);
    const [defSection] = Object.keys(this.__internal__metadataCalls).sort(sortDecimalStrings);
    if (defSection) {
      const [defMethod] = Object.keys(this.__internal__metadataCalls[defSection]).sort(sortDecimalStrings);
      if (defMethod) {
        this.__internal__firstCallIndex = new Uint8Array([parseInt(defSection, 10), parseInt(defMethod, 10)]);
      }
    }
    this.setSignedExtensions(signedExtensions || (this.__internal__metadata.extrinsic.version.gt(BN_ZERO7) ? this.__internal__metadata.extrinsic.signedExtensions.map(({ identifier }) => identifier.toString()) : fallbackExtensions), userExtensions, noInitWarn);
    this.setChainProperties(extractProperties(this, metadata));
  }
  // sets the available signed extensions
  setSignedExtensions(signedExtensions = fallbackExtensions, userExtensions, noInitWarn) {
    this.__internal__signedExtensions = signedExtensions;
    this.__internal__userExtensions = userExtensions;
    if (!noInitWarn) {
      const unknown = findUnknownExtensions(this.__internal__signedExtensions, this.__internal__userExtensions);
      if (unknown.length) {
        l12.warn(`Unknown signed extensions ${unknown.join(", ")} found, treating them as no-effect`);
      }
    }
  }
};

// node_modules/@polkadot/types/metadata/index.js
init_shim();

// node_modules/@polkadot/rpc-core/util/index.js
init_shim();

// node_modules/@polkadot/rpc-core/util/drr.js
init_shim();

// node_modules/@polkadot/rpc-core/util/refCountDelay.js
init_shim();
function refCountDelay(delay2 = 1750) {
  return (source) => {
    let [state, refCount2, connection, scheduler] = [0, 0, Subscription.EMPTY, Subscription.EMPTY];
    return new Observable((ob) => {
      source.subscribe(ob);
      if (refCount2++ === 0) {
        if (state === 1) {
          scheduler.unsubscribe();
        } else {
          connection = source.connect();
        }
        state = 3;
      }
      return () => {
        if (--refCount2 === 0) {
          if (state === 2) {
            state = 0;
            scheduler.unsubscribe();
          } else {
            state = 1;
            scheduler = asapScheduler.schedule(() => {
              state = 0;
              connection.unsubscribe();
            }, delay2);
          }
        }
      };
    });
  };
}

// node_modules/@polkadot/rpc-core/util/drr.js
function CMP(a, b) {
  return stringify6({ t: a }) === stringify6({ t: b });
}
function ERR(error) {
  throw error;
}
function NOOP() {
}
function drr({ delay: delay2, skipChange = false, skipTimeout = false } = {}) {
  return (source$) => source$.pipe(
    catchError(ERR),
    skipChange ? tap(NOOP) : distinctUntilChanged(CMP),
    // eslint-disable-next-line deprecation/deprecation
    publishReplay(1),
    skipTimeout ? refCount() : refCountDelay(delay2)
  );
}

// node_modules/@polkadot/rpc-core/util/memo.js
init_shim();
function memo(instanceId, inner) {
  const options = { getInstanceId: () => instanceId };
  const cached = memoize((...params) => new Observable((observer) => {
    const subscription = inner(...params).subscribe(observer);
    return () => {
      cached.unmemoize(...params);
      subscription.unsubscribe();
    };
  }).pipe(drr()), options);
  return cached;
}

// node_modules/@polkadot/rpc-core/bundle.js
var l13 = logger4("rpc-core");
var EMPTY_META = {
  fallback: void 0,
  modifier: { isOptional: true },
  type: {
    asMap: { linked: { isTrue: false } },
    isMap: false
  }
};
function logErrorMessage(method, { noErrorLog, params, type }, error) {
  if (noErrorLog) {
    return;
  }
  l13.error(`${method}(${params.map(({ isOptional, name, type: type2 }) => `${name}${isOptional ? "?" : ""}: ${type2}`).join(", ")}): ${type}:: ${error.message}`);
}
function isTreatAsHex(key) {
  return ["0x3a636f6465"].includes(key.toHex());
}
var RpcCore = class {
  /**
   * @constructor
   * Default constructor for the core RPC handler
   * @param  {ProviderInterface} provider An API provider using any of the supported providers (HTTP, SC or WebSocket)
   */
  constructor(instanceId, registry, { isPedantic = true, provider, userRpc = {} }) {
    this.__internal__storageCache = /* @__PURE__ */ new Map();
    this.__internal__storageCacheHits = 0;
    this.__internal__storageCacheSize = 0;
    this.mapping = /* @__PURE__ */ new Map();
    this.sections = [];
    if (!provider || !isFunction8(provider.send)) {
      throw new Error("Expected Provider to API create");
    }
    this.__internal__instanceId = instanceId;
    this.__internal__isPedantic = isPedantic;
    this.__internal__registryDefault = registry;
    this.provider = provider;
    const sectionNames = Object.keys(jsonrpc_default);
    this.sections.push(...sectionNames);
    this.addUserInterfaces(userRpc);
  }
  /**
   * @description Returns the connected status of a provider
   */
  get isConnected() {
    return this.provider.isConnected;
  }
  /**
   * @description Manually connect from the attached provider
   */
  connect() {
    return this.provider.connect();
  }
  /**
   * @description Manually disconnect from the attached provider
   */
  disconnect() {
    return this.provider.disconnect();
  }
  /**
   * @description Returns the underlying core stats, including those from teh provider
   */
  get stats() {
    const stats = this.provider.stats;
    return stats ? {
      ...stats,
      core: {
        cacheHits: this.__internal__storageCacheHits,
        cacheSize: this.__internal__storageCacheSize
      }
    } : void 0;
  }
  /**
   * @description Sets a registry swap (typically from Api)
   */
  setRegistrySwap(registrySwap) {
    this.__internal__getBlockRegistry = memoize(registrySwap, {
      getInstanceId: () => this.__internal__instanceId
    });
  }
  /**
   * @description Sets a function to resolve block hash from block number
   */
  setResolveBlockHash(resolveBlockHash) {
    this.__internal__getBlockHash = memoize(resolveBlockHash, {
      getInstanceId: () => this.__internal__instanceId
    });
  }
  addUserInterfaces(userRpc) {
    this.sections.push(...Object.keys(userRpc).filter((k) => !this.sections.includes(k)));
    for (let s = 0, scount = this.sections.length; s < scount; s++) {
      const section2 = this.sections[s];
      const defs = objectSpread6({}, jsonrpc_default[section2], userRpc[section2]);
      const methods = Object.keys(defs);
      for (let m = 0, mcount = methods.length; m < mcount; m++) {
        const method = methods[m];
        const def = defs[method];
        const jsonrpc2 = def.endpoint || `${section2}_${method}`;
        if (!this.mapping.has(jsonrpc2)) {
          const isSubscription2 = !!def.pubsub;
          if (!this[section2]) {
            this[section2] = {};
          }
          this.mapping.set(jsonrpc2, objectSpread6({}, def, { isSubscription: isSubscription2, jsonrpc: jsonrpc2, method, section: section2 }));
          lazyMethod3(this[section2], method, () => isSubscription2 ? this._createMethodSubscribe(section2, method, def) : this._createMethodSend(section2, method, def));
        }
      }
    }
  }
  _memomize(creator, def) {
    const memoOpts = { getInstanceId: () => this.__internal__instanceId };
    const memoized = memoize(creator(true), memoOpts);
    memoized.raw = memoize(creator(false), memoOpts);
    memoized.meta = def;
    return memoized;
  }
  _formatResult(isScale, registry, blockHash, method, def, params, result) {
    return isScale ? this._formatOutput(registry, blockHash, method, def, params, result) : result;
  }
  _createMethodSend(section2, method, def) {
    const rpcName = def.endpoint || `${section2}_${method}`;
    const hashIndex = def.params.findIndex(({ isHistoric }) => isHistoric);
    let memoized = null;
    const callWithRegistry = async (isScale, values) => {
      var _a;
      const blockId = hashIndex === -1 ? null : values[hashIndex];
      const blockHash = blockId && def.params[hashIndex].type === "BlockNumber" ? await ((_a = this.__internal__getBlockHash) == null ? void 0 : _a.call(this, blockId)) : blockId;
      const { registry } = isScale && blockHash && this.__internal__getBlockRegistry ? await this.__internal__getBlockRegistry(u8aToU8a7(blockHash)) : { registry: this.__internal__registryDefault };
      const params = this._formatParams(registry, null, def, values);
      const result = await this.provider.send(rpcName, params.map((p) => p.toJSON()), !!blockHash);
      return this._formatResult(isScale, registry, blockHash, method, def, params, result);
    };
    const creator = (isScale) => (...values) => {
      const isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
      return new Observable((observer) => {
        callWithRegistry(isScale, values).then((value) => {
          observer.next(value);
          observer.complete();
        }).catch((error) => {
          logErrorMessage(method, def, error);
          observer.error(error);
          observer.complete();
        });
        return () => {
          if (isScale) {
            memoized == null ? void 0 : memoized.unmemoize(...values);
          } else {
            memoized == null ? void 0 : memoized.raw.unmemoize(...values);
          }
        };
      }).pipe(
        // eslint-disable-next-line deprecation/deprecation
        publishReplay(1),
        // create a Replay(1)
        isDelayed ? refCountDelay() : refCount()
      );
    };
    memoized = this._memomize(creator, def);
    return memoized;
  }
  // create a subscriptor, it subscribes once and resolves with the id as subscribe
  _createSubscriber({ paramsJson, subName, subType, update }, errorHandler) {
    return new Promise((resolve, reject) => {
      this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch((error) => {
        errorHandler(error);
        reject(error);
      });
    });
  }
  _createMethodSubscribe(section2, method, def) {
    const [updateType, subMethod, unsubMethod] = def.pubsub;
    const subName = `${section2}_${subMethod}`;
    const unsubName = `${section2}_${unsubMethod}`;
    const subType = `${section2}_${updateType}`;
    let memoized = null;
    const creator = (isScale) => (...values) => {
      return new Observable((observer) => {
        let subscriptionPromise = Promise.resolve(null);
        const registry = this.__internal__registryDefault;
        const errorHandler = (error) => {
          logErrorMessage(method, def, error);
          observer.error(error);
        };
        try {
          const params = this._formatParams(registry, null, def, values);
          const update = (error, result) => {
            if (error) {
              logErrorMessage(method, def, error);
              return;
            }
            try {
              observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
            } catch (error2) {
              observer.error(error2);
            }
          };
          subscriptionPromise = this._createSubscriber({ paramsJson: params.map((p) => p.toJSON()), subName, subType, update }, errorHandler);
        } catch (error) {
          errorHandler(error);
        }
        return () => {
          if (isScale) {
            memoized == null ? void 0 : memoized.unmemoize(...values);
          } else {
            memoized == null ? void 0 : memoized.raw.unmemoize(...values);
          }
          subscriptionPromise.then((subscriptionId) => isNull6(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch((error) => logErrorMessage(method, def, error));
        };
      }).pipe(drr());
    };
    memoized = this._memomize(creator, def);
    return memoized;
  }
  _formatParams(registry, blockHash, def, inputs) {
    const count2 = inputs.length;
    const reqCount = def.params.filter(({ isOptional }) => !isOptional).length;
    if (count2 < reqCount || count2 > def.params.length) {
      throw new Error(`Expected ${def.params.length} parameters${reqCount === def.params.length ? "" : ` (${def.params.length - reqCount} optional)`}, ${count2} found instead`);
    }
    const params = new Array(count2);
    for (let i = 0; i < count2; i++) {
      params[i] = registry.createTypeUnsafe(def.params[i].type, [inputs[i]], { blockHash });
    }
    return params;
  }
  _formatOutput(registry, blockHash, method, rpc19, params, result) {
    if (rpc19.type === "StorageData") {
      const key = params[0];
      return this._formatStorageData(registry, blockHash, key, result);
    } else if (rpc19.type === "StorageChangeSet") {
      const keys2 = params[0];
      return keys2 ? this._formatStorageSet(registry, result.block, keys2, result.changes) : registry.createType("StorageChangeSet", result);
    } else if (rpc19.type === "Vec<StorageChangeSet>") {
      const jsonSet = result;
      const count2 = jsonSet.length;
      const mapped = new Array(count2);
      for (let i = 0; i < count2; i++) {
        const { block, changes } = jsonSet[i];
        mapped[i] = [
          registry.createType("BlockHash", block),
          this._formatStorageSet(registry, block, params[0], changes)
        ];
      }
      return method === "queryStorageAt" ? mapped[0][1] : mapped;
    }
    return registry.createTypeUnsafe(rpc19.type, [result], { blockHash });
  }
  _formatStorageData(registry, blockHash, key, value) {
    const isEmpty2 = isNull6(value);
    const input = isEmpty2 ? null : isTreatAsHex(key) ? value : u8aToU8a7(value);
    return this._newType(registry, blockHash, key, input, isEmpty2);
  }
  _formatStorageSet(registry, blockHash, keys2, changes) {
    const count2 = keys2.length;
    const withCache = count2 !== 1;
    const values = new Array(count2);
    for (let i = 0; i < count2; i++) {
      values[i] = this._formatStorageSetEntry(registry, blockHash, keys2[i], changes, withCache, i);
    }
    return values;
  }
  _formatStorageSetEntry(registry, blockHash, key, changes, withCache, entryIndex) {
    const hexKey = key.toHex();
    const found = changes.find(([key2]) => key2 === hexKey);
    const isNotFound = isUndefined6(found);
    if (isNotFound && withCache) {
      const cached = this.__internal__storageCache.get(hexKey);
      if (cached) {
        this.__internal__storageCacheHits++;
        return cached;
      }
    }
    const value = isNotFound ? null : found[1];
    const isEmpty2 = isNull6(value);
    const input = isEmpty2 || isTreatAsHex(key) ? value : u8aToU8a7(value);
    const codec = this._newType(registry, blockHash, key, input, isEmpty2, entryIndex);
    this.__internal__storageCache.set(hexKey, codec);
    this.__internal__storageCacheSize++;
    return codec;
  }
  _newType(registry, blockHash, key, input, isEmpty2, entryIndex = -1) {
    const type = key.outputType || "Raw";
    const meta = key.meta || EMPTY_META;
    const entryNum = entryIndex === -1 ? "" : ` entry ${entryIndex}:`;
    try {
      return registry.createTypeUnsafe(type, [
        isEmpty2 ? meta.fallback ? type.includes("Linkage<") ? u8aConcat7(hexToU8a7(meta.fallback.toHex()), new Uint8Array(2)) : hexToU8a7(meta.fallback.toHex()) : void 0 : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [input], { blockHash, isPedantic: this.__internal__isPedantic }) : input
      ], { blockHash, isFallback: isEmpty2 && !!meta.fallback, isOptional: meta.modifier.isOptional, isPedantic: this.__internal__isPedantic && !meta.modifier.isOptional });
    } catch (error) {
      throw new Error(`Unable to decode storage ${key.section || "unknown"}.${key.method || "unknown"}:${entryNum}: ${error.message}`);
    }
  }
};

// node_modules/@polkadot/api-derive/util/approvalFlagsToBools.js
init_shim();

// node_modules/@polkadot/api-derive/util/blockNumber.js
init_shim();
function unwrapBlockNumber(hdr) {
  return isCompact5(hdr.number) ? hdr.number.unwrap() : hdr.number;
}

// node_modules/@polkadot/api-derive/util/cache.js
init_shim();

// node_modules/@polkadot/api-derive/util/cacheImpl.js
init_shim();
var deriveNoopCache = {
  del: () => void 0,
  forEach: () => void 0,
  get: () => void 0,
  set: (_, value) => value
};

// node_modules/@polkadot/api-derive/util/cache.js
var CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1e3);
var deriveCache;
function wrapCache(keyStart, cache) {
  return {
    del: (partial) => cache.del(`${keyStart}${partial}`),
    forEach: cache.forEach,
    get: (partial) => {
      const key = `${keyStart}${partial}`;
      const cached = cache.get(key);
      if (cached) {
        cached.x = Date.now();
        cache.set(key, cached);
        return cached.v;
      }
      return void 0;
    },
    set: (partial, v) => {
      cache.set(`${keyStart}${partial}`, { v, x: Date.now() });
    }
  };
}
function clearCache(cache) {
  const now = Date.now();
  const all3 = [];
  cache.forEach((key, { x }) => {
    now - x > CHACHE_EXPIRY && all3.push(key);
  });
  all3.forEach((key) => cache.del(key));
}
function setDeriveCache(prefix2 = "", cache) {
  deriveCache = cache ? wrapCache(`derive:${prefix2}:`, cache) : deriveNoopCache;
  if (cache) {
    clearCache(cache);
  }
}
setDeriveCache();

// node_modules/@polkadot/api-derive/util/first.js
init_shim();
function firstObservable(obs) {
  return obs.pipe(map(([a]) => a));
}
function firstMemo(fn) {
  return (instanceId, api) => memo(instanceId, (...args) => firstObservable(fn(api, ...args)));
}

// node_modules/@polkadot/api-derive/util/lazy.js
init_shim();
function lazyDeriveSection(result, section2, getKeys2, creator) {
  lazyMethod2(result, section2, () => lazyMethods2({}, getKeys2(section2), (method) => creator(section2, method)));
}

// node_modules/@polkadot/api-derive/derive.js
init_shim();

// node_modules/@polkadot/api-derive/accounts/index.js
var accounts_exports = {};
__export(accounts_exports, {
  _flags: () => _flags,
  _identity: () => _identity,
  accountId: () => accountId,
  flags: () => flags,
  hasIdentity: () => hasIdentity,
  hasIdentityMulti: () => hasIdentityMulti,
  idAndIndex: () => idAndIndex,
  idToIndex: () => idToIndex,
  identity: () => identity4,
  indexToId: () => indexToId,
  indexes: () => indexes,
  info: () => info
});
init_shim();

// node_modules/@polkadot/api-derive/accounts/accountId.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/detectPackage.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/detectOther.js
init_shim();
var detectOther_default23 = [packageInfo28, packageInfo33, packageInfo];

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/packageInfo.js
init_shim();
var packageInfo49 = { name: "@polkadot/util-crypto", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/detectPackage.js
detectPackage6(packageInfo49, null, detectOther_default23);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/bundle.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/bundleInit.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/crypto.js
init_shim();
function cryptoWaitReady3() {
  return waitReady().then(() => {
    if (!isReady()) {
      throw new Error("Unable to initialize @polkadot/util-crypto");
    }
    return true;
  }).catch(() => false);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/bundleInit.js
cryptoWaitReady3().catch(() => {
});

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/addressToEvm.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/decode.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/base58/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/base58/bs58.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@scure/base/lib/esm/index.js
init_shim();
function assertNumber3(n) {
  if (!Number.isSafeInteger(n))
    throw new Error(`Wrong integer: ${n}`);
}
function chain3(...args) {
  const wrap = (a, b) => (c) => a(b(c));
  const encode = Array.from(args).reverse().reduce((acc, i) => acc ? wrap(acc, i.encode) : i.encode, void 0);
  const decode2 = args.reduce((acc, i) => acc ? wrap(acc, i.decode) : i.decode, void 0);
  return { encode, decode: decode2 };
}
function alphabet3(alphabet5) {
  return {
    encode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return digits.map((i) => {
        assertNumber3(i);
        if (i < 0 || i >= alphabet5.length)
          throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet5.length})`);
        return alphabet5[i];
      });
    },
    decode: (input) => {
      if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
        throw new Error("alphabet.decode input should be array of strings");
      return input.map((letter) => {
        if (typeof letter !== "string")
          throw new Error(`alphabet.decode: not string element=${letter}`);
        const index = alphabet5.indexOf(letter);
        if (index === -1)
          throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet5}`);
        return index;
      });
    }
  };
}
function join3(separator = "") {
  if (typeof separator !== "string")
    throw new Error("join separator should be string");
  return {
    encode: (from2) => {
      if (!Array.isArray(from2) || from2.length && typeof from2[0] !== "string")
        throw new Error("join.encode input should be array of strings");
      for (let i of from2)
        if (typeof i !== "string")
          throw new Error(`join.encode: non-string input=${i}`);
      return from2.join(separator);
    },
    decode: (to) => {
      if (typeof to !== "string")
        throw new Error("join.decode input should be string");
      return to.split(separator);
    }
  };
}
function padding3(bits, chr = "=") {
  assertNumber3(bits);
  if (typeof chr !== "string")
    throw new Error("padding chr should be string");
  return {
    encode(data) {
      if (!Array.isArray(data) || data.length && typeof data[0] !== "string")
        throw new Error("padding.encode input should be array of strings");
      for (let i of data)
        if (typeof i !== "string")
          throw new Error(`padding.encode: non-string input=${i}`);
      while (data.length * bits % 8)
        data.push(chr);
      return data;
    },
    decode(input) {
      if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
        throw new Error("padding.encode input should be array of strings");
      for (let i of input)
        if (typeof i !== "string")
          throw new Error(`padding.decode: non-string input=${i}`);
      let end = input.length;
      if (end * bits % 8)
        throw new Error("Invalid padding: string should have whole number of bytes");
      for (; end > 0 && input[end - 1] === chr; end--) {
        if (!((end - 1) * bits % 8))
          throw new Error("Invalid padding: string has too much padding");
      }
      return input.slice(0, end);
    }
  };
}
function normalize4(fn) {
  if (typeof fn !== "function")
    throw new Error("normalize fn should be function");
  return { encode: (from2) => from2, decode: (to) => fn(to) };
}
function convertRadix4(data, from2, to) {
  if (from2 < 2)
    throw new Error(`convertRadix: wrong from=${from2}, base cannot be less than 2`);
  if (to < 2)
    throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
  if (!Array.isArray(data))
    throw new Error("convertRadix: data should be array");
  if (!data.length)
    return [];
  let pos = 0;
  const res = [];
  const digits = Array.from(data);
  digits.forEach((d) => {
    assertNumber3(d);
    if (d < 0 || d >= from2)
      throw new Error(`Wrong integer: ${d}`);
  });
  while (true) {
    let carry = 0;
    let done = true;
    for (let i = pos; i < digits.length; i++) {
      const digit = digits[i];
      const digitBase = from2 * carry + digit;
      if (!Number.isSafeInteger(digitBase) || from2 * carry / from2 !== carry || digitBase - digit !== from2 * carry) {
        throw new Error("convertRadix: carry overflow");
      }
      carry = digitBase % to;
      const rounded = Math.floor(digitBase / to);
      digits[i] = rounded;
      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
        throw new Error("convertRadix: carry overflow");
      if (!done)
        continue;
      else if (!rounded)
        pos = i;
      else
        done = false;
    }
    res.push(carry);
    if (done)
      break;
  }
  for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
    res.push(0);
  return res.reverse();
}
var gcd3 = (
  /* @__NO_SIDE_EFFECTS__ */
  (a, b) => !b ? a : gcd3(b, a % b)
);
var radix2carry3 = (
  /*@__NO_SIDE_EFFECTS__ */
  (from2, to) => from2 + (to - gcd3(from2, to))
);
function convertRadix23(data, from2, to, padding5) {
  if (!Array.isArray(data))
    throw new Error("convertRadix2: data should be array");
  if (from2 <= 0 || from2 > 32)
    throw new Error(`convertRadix2: wrong from=${from2}`);
  if (to <= 0 || to > 32)
    throw new Error(`convertRadix2: wrong to=${to}`);
  if (radix2carry3(from2, to) > 32) {
    throw new Error(`convertRadix2: carry overflow from=${from2} to=${to} carryBits=${radix2carry3(from2, to)}`);
  }
  let carry = 0;
  let pos = 0;
  const mask = 2 ** to - 1;
  const res = [];
  for (const n of data) {
    assertNumber3(n);
    if (n >= 2 ** from2)
      throw new Error(`convertRadix2: invalid data word=${n} from=${from2}`);
    carry = carry << from2 | n;
    if (pos + from2 > 32)
      throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from2}`);
    pos += from2;
    for (; pos >= to; pos -= to)
      res.push((carry >> pos - to & mask) >>> 0);
    carry &= 2 ** pos - 1;
  }
  carry = carry << to - pos & mask;
  if (!padding5 && pos >= from2)
    throw new Error("Excess padding");
  if (!padding5 && carry)
    throw new Error(`Non-zero padding: ${carry}`);
  if (padding5 && pos > 0)
    res.push(carry >>> 0);
  return res;
}
function radix4(num) {
  assertNumber3(num);
  return {
    encode: (bytes5) => {
      if (!(bytes5 instanceof Uint8Array))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix4(Array.from(bytes5), 2 ** 8, num);
    },
    decode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("radix.decode input should be array of strings");
      return Uint8Array.from(convertRadix4(digits, num, 2 ** 8));
    }
  };
}
function radix23(bits, revPadding = false) {
  assertNumber3(bits);
  if (bits <= 0 || bits > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (radix2carry3(8, bits) > 32 || radix2carry3(bits, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (bytes5) => {
      if (!(bytes5 instanceof Uint8Array))
        throw new Error("radix2.encode input should be Uint8Array");
      return convertRadix23(Array.from(bytes5), 8, bits, !revPadding);
    },
    decode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("radix2.decode input should be array of strings");
      return Uint8Array.from(convertRadix23(digits, bits, 8, revPadding));
    }
  };
}
function unsafeWrapper3(fn) {
  if (typeof fn !== "function")
    throw new Error("unsafeWrapper fn should be function");
  return function(...args) {
    try {
      return fn.apply(null, args);
    } catch (e) {
    }
  };
}
function checksum3(len, fn) {
  assertNumber3(len);
  if (typeof fn !== "function")
    throw new Error("checksum fn should be function");
  return {
    encode(data) {
      if (!(data instanceof Uint8Array))
        throw new Error("checksum.encode: input should be Uint8Array");
      const checksum5 = fn(data).slice(0, len);
      const res = new Uint8Array(data.length + len);
      res.set(data);
      res.set(checksum5, data.length);
      return res;
    },
    decode(data) {
      if (!(data instanceof Uint8Array))
        throw new Error("checksum.decode: input should be Uint8Array");
      const payload = data.slice(0, -len);
      const newChecksum = fn(payload).slice(0, len);
      const oldChecksum = data.slice(-len);
      for (let i = 0; i < len; i++)
        if (newChecksum[i] !== oldChecksum[i])
          throw new Error("Invalid checksum");
      return payload;
    }
  };
}
var utils3 = { alphabet: alphabet3, chain: chain3, checksum: checksum3, radix: radix4, radix2: radix23, join: join3, padding: padding3 };
var base163 = chain3(radix23(4), alphabet3("0123456789ABCDEF"), join3(""));
var base323 = chain3(radix23(5), alphabet3("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding3(5), join3(""));
var base32hex3 = chain3(radix23(5), alphabet3("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding3(5), join3(""));
var base32crockford3 = chain3(radix23(5), alphabet3("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join3(""), normalize4((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
var base643 = chain3(radix23(6), alphabet3("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding3(6), join3(""));
var base64url3 = chain3(radix23(6), alphabet3("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding3(6), join3(""));
var base64urlnopad3 = chain3(radix23(6), alphabet3("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join3(""));
var genBase583 = (abc) => chain3(radix4(58), alphabet3(abc), join3(""));
var base583 = genBase583("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var base58flickr3 = genBase583("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
var base58xrp3 = genBase583("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
var BECH_ALPHABET3 = chain3(alphabet3("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join3(""));
var POLYMOD_GENERATORS3 = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod3(pre) {
  const b = pre >> 25;
  let chk = (pre & 33554431) << 5;
  for (let i = 0; i < POLYMOD_GENERATORS3.length; i++) {
    if ((b >> i & 1) === 1)
      chk ^= POLYMOD_GENERATORS3[i];
  }
  return chk;
}
function bechChecksum3(prefix2, words, encodingConst = 1) {
  const len = prefix2.length;
  let chk = 1;
  for (let i = 0; i < len; i++) {
    const c = prefix2.charCodeAt(i);
    if (c < 33 || c > 126)
      throw new Error(`Invalid prefix (${prefix2})`);
    chk = bech32Polymod3(chk) ^ c >> 5;
  }
  chk = bech32Polymod3(chk);
  for (let i = 0; i < len; i++)
    chk = bech32Polymod3(chk) ^ prefix2.charCodeAt(i) & 31;
  for (let v of words)
    chk = bech32Polymod3(chk) ^ v;
  for (let i = 0; i < 6; i++)
    chk = bech32Polymod3(chk);
  chk ^= encodingConst;
  return BECH_ALPHABET3.encode(convertRadix23([chk % 2 ** 30], 30, 5, false));
}
function genBech323(encoding) {
  const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
  const _words = radix23(5);
  const fromWords = _words.decode;
  const toWords = _words.encode;
  const fromWordsUnsafe = unsafeWrapper3(fromWords);
  function encode(prefix2, words, limit = 90) {
    if (typeof prefix2 !== "string")
      throw new Error(`bech32.encode prefix should be string, not ${typeof prefix2}`);
    if (!Array.isArray(words) || words.length && typeof words[0] !== "number")
      throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
    const actualLength = prefix2.length + 7 + words.length;
    if (limit !== false && actualLength > limit)
      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
    const lowered = prefix2.toLowerCase();
    const sum = bechChecksum3(lowered, words, ENCODING_CONST);
    return `${lowered}1${BECH_ALPHABET3.encode(words)}${sum}`;
  }
  function decode2(str, limit = 90) {
    if (typeof str !== "string")
      throw new Error(`bech32.decode input should be string, not ${typeof str}`);
    if (str.length < 8 || limit !== false && str.length > limit)
      throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
    const lowered = str.toLowerCase();
    if (str !== lowered && str !== str.toUpperCase())
      throw new Error(`String must be lowercase or uppercase`);
    str = lowered;
    const sepIndex = str.lastIndexOf("1");
    if (sepIndex === 0 || sepIndex === -1)
      throw new Error(`Letter "1" must be present between prefix and data only`);
    const prefix2 = str.slice(0, sepIndex);
    const _words2 = str.slice(sepIndex + 1);
    if (_words2.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const words = BECH_ALPHABET3.decode(_words2).slice(0, -6);
    const sum = bechChecksum3(prefix2, words, ENCODING_CONST);
    if (!_words2.endsWith(sum))
      throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
    return { prefix: prefix2, words };
  }
  const decodeUnsafe = unsafeWrapper3(decode2);
  function decodeToBytes(str) {
    const { prefix: prefix2, words } = decode2(str, false);
    return { prefix: prefix2, words, bytes: fromWords(words) };
  }
  return { encode, decode: decode2, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };
}
var bech323 = genBech323("bech32");
var bech32m3 = genBech323("bech32m");
var hex9 = chain3(radix23(4), alphabet3("0123456789abcdef"), join3(""), normalize4((s) => {
  if (typeof s !== "string" || s.length % 2)
    throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
  return s.toLowerCase();
}));

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/base32/helpers.js
init_shim();
function createDecode3({ coder, ipfs }, validate) {
  return (value, ipfsCompat) => {
    validate(value, ipfsCompat);
    return coder.decode(ipfs && ipfsCompat ? value.substring(1) : value);
  };
}
function createEncode3({ coder, ipfs }) {
  return (value, ipfsCompat) => {
    const out = coder.encode(u8aToU8a6(value));
    return ipfs && ipfsCompat ? `${ipfs}${out}` : out;
  };
}
function createIs3(validate) {
  return (value, ipfsCompat) => {
    try {
      return validate(value, ipfsCompat);
    } catch {
      return false;
    }
  };
}
function createValidate3({ chars: chars5, ipfs, type, withPadding }) {
  return (value, ipfsCompat) => {
    if (typeof value !== "string") {
      throw new Error(`Expected ${type} string input`);
    } else if (ipfs && ipfsCompat && !value.startsWith(ipfs)) {
      throw new Error(`Expected ipfs-compatible ${type} to start with '${ipfs}'`);
    }
    for (let i = ipfsCompat ? 1 : 0, count2 = value.length; i < count2; i++) {
      if (chars5.includes(value[i])) {
      } else if (withPadding && value[i] === "=") {
        if (i === count2 - 1) {
        } else if (value[i + 1] === "=") {
        } else {
          throw new Error(`Invalid ${type} padding sequence "${value[i]}${value[i + 1]}" at index ${i}`);
        }
      } else {
        throw new Error(`Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
      }
    }
    return true;
  };
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/base58/bs58.js
var config8 = {
  chars: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
  coder: base583,
  ipfs: "z",
  type: "base58"
};
var base58Validate3 = createValidate3(config8);
var base58Decode3 = createDecode3(config8, base58Validate3);
var base58Encode3 = createEncode3(config8);
var isBase583 = createIs3(base58Validate3);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/checksum.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/sshash.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/blake2/asU8a.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/blake2b.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/_blake2.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/_assert.js
init_shim();
function number3(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error(`Wrong positive integer: ${n}`);
}
function bytes3(b, ...lengths) {
  if (!(b instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
function hash3(hash5) {
  if (typeof hash5 !== "function" || typeof hash5.create !== "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number3(hash5.outputLen);
  number3(hash5.blockLen);
}
function exists3(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function output3(out, instance) {
  bytes3(out);
  const min2 = instance.outputLen;
  if (out.length < min2) {
    throw new Error(`digestInto() expects output buffer of length at least ${min2}`);
  }
}

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/utils.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/crypto.js
init_shim();
var crypto3 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/utils.js
var u8a5 = (a) => a instanceof Uint8Array;
var u324 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
var createView3 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
var rotr3 = (word, shift) => word << 32 - shift | word >>> shift;
var isLE3 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE3)
  throw new Error("Non little-endian hardware is not supported");
var hexes5 = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function utf8ToBytes5(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes3(data) {
  if (typeof data === "string")
    data = utf8ToBytes5(data);
  if (!u8a5(data))
    throw new Error(`expected Uint8Array, got ${typeof data}`);
  return data;
}
function concatBytes5(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a5(a))
      throw new Error("Uint8Array expected");
    r.set(a, pad);
    pad += a.length;
  });
  return r;
}
var Hash3 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
var toStr3 = {}.toString;
function wrapConstructor3(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes3(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function wrapConstructorWithOpts3(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes3(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function wrapXOFConstructorWithOpts3(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes3(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function randomBytes3(bytesLength = 32) {
  if (crypto3 && typeof crypto3.getRandomValues === "function") {
    return crypto3.getRandomValues(new Uint8Array(bytesLength));
  }
  throw new Error("crypto.getRandomValues must be defined");
}

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/_blake2.js
var SIGMA3 = new Uint8Array([
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3,
  11,
  8,
  12,
  0,
  5,
  2,
  15,
  13,
  10,
  14,
  3,
  6,
  7,
  1,
  9,
  4,
  7,
  9,
  3,
  1,
  13,
  12,
  11,
  14,
  2,
  6,
  5,
  10,
  4,
  0,
  15,
  8,
  9,
  0,
  5,
  7,
  2,
  4,
  10,
  15,
  14,
  1,
  11,
  12,
  6,
  8,
  3,
  13,
  2,
  12,
  6,
  10,
  0,
  11,
  8,
  3,
  4,
  13,
  7,
  5,
  15,
  14,
  1,
  9,
  12,
  5,
  1,
  15,
  14,
  13,
  4,
  10,
  0,
  7,
  6,
  3,
  9,
  2,
  8,
  11,
  13,
  11,
  7,
  14,
  12,
  1,
  3,
  9,
  5,
  0,
  15,
  4,
  8,
  6,
  2,
  10,
  6,
  15,
  14,
  9,
  11,
  3,
  0,
  8,
  12,
  2,
  13,
  7,
  1,
  4,
  10,
  5,
  10,
  2,
  8,
  4,
  7,
  6,
  1,
  5,
  15,
  11,
  9,
  14,
  3,
  12,
  13,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3
]);
var BLAKE23 = class extends Hash3 {
  constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.length = 0;
    this.pos = 0;
    this.finished = false;
    this.destroyed = false;
    number3(blockLen);
    number3(outputLen);
    number3(keyLen);
    if (outputLen < 0 || outputLen > keyLen)
      throw new Error("outputLen bigger than keyLen");
    if (opts.key !== void 0 && (opts.key.length < 1 || opts.key.length > keyLen))
      throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
    if (opts.salt !== void 0 && opts.salt.length !== saltLen)
      throw new Error(`salt must be ${saltLen} byte long or undefined`);
    if (opts.personalization !== void 0 && opts.personalization.length !== persLen)
      throw new Error(`personalization must be ${persLen} byte long or undefined`);
    this.buffer32 = u324(this.buffer = new Uint8Array(blockLen));
  }
  update(data) {
    exists3(this);
    const { blockLen, buffer: buffer2, buffer32 } = this;
    data = toBytes3(data);
    const len = data.length;
    const offset = data.byteOffset;
    const buf = data.buffer;
    for (let pos = 0; pos < len; ) {
      if (this.pos === blockLen) {
        this.compress(buffer32, 0, false);
        this.pos = 0;
      }
      const take2 = Math.min(blockLen - this.pos, len - pos);
      const dataOffset = offset + pos;
      if (take2 === blockLen && !(dataOffset % 4) && pos + take2 < len) {
        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
          this.length += blockLen;
          this.compress(data32, pos32, false);
        }
        continue;
      }
      buffer2.set(data.subarray(pos, pos + take2), this.pos);
      this.pos += take2;
      this.length += take2;
      pos += take2;
    }
    return this;
  }
  digestInto(out) {
    exists3(this);
    output3(out, this);
    const { pos, buffer32 } = this;
    this.finished = true;
    this.buffer.subarray(pos).fill(0);
    this.compress(buffer32, 0, true);
    const out32 = u324(out);
    this.get().forEach((v, i) => out32[i] = v);
  }
  digest() {
    const { buffer: buffer2, outputLen } = this;
    this.digestInto(buffer2);
    const res = buffer2.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    const { buffer: buffer2, length, finished, destroyed, outputLen, pos } = this;
    to || (to = new this.constructor({ dkLen: outputLen }));
    to.set(...this.get());
    to.length = length;
    to.finished = finished;
    to.destroyed = destroyed;
    to.outputLen = outputLen;
    to.buffer.set(buffer2);
    to.pos = pos;
    return to;
  }
};

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/_u64.js
init_shim();
var U32_MASK643 = BigInt(2 ** 32 - 1);
var _32n5 = BigInt(32);
function fromBig3(n, le = false) {
  if (le)
    return { h: Number(n & U32_MASK643), l: Number(n >> _32n5 & U32_MASK643) };
  return { h: Number(n >> _32n5 & U32_MASK643) | 0, l: Number(n & U32_MASK643) | 0 };
}
function split3(lst, le = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0; i < lst.length; i++) {
    const { h, l: l19 } = fromBig3(lst[i], le);
    [Ah[i], Al[i]] = [h, l19];
  }
  return [Ah, Al];
}
var toBig3 = (h, l19) => BigInt(h >>> 0) << _32n5 | BigInt(l19 >>> 0);
var shrSH3 = (h, _l, s) => h >>> s;
var shrSL3 = (h, l19, s) => h << 32 - s | l19 >>> s;
var rotrSH3 = (h, l19, s) => h >>> s | l19 << 32 - s;
var rotrSL3 = (h, l19, s) => h << 32 - s | l19 >>> s;
var rotrBH3 = (h, l19, s) => h << 64 - s | l19 >>> s - 32;
var rotrBL3 = (h, l19, s) => h >>> s - 32 | l19 << 64 - s;
var rotr32H3 = (_h, l19) => l19;
var rotr32L3 = (h, _l) => h;
var rotlSH3 = (h, l19, s) => h << s | l19 >>> 32 - s;
var rotlSL3 = (h, l19, s) => l19 << s | h >>> 32 - s;
var rotlBH3 = (h, l19, s) => l19 << s - 32 | h >>> 64 - s;
var rotlBL3 = (h, l19, s) => h << s - 32 | l19 >>> 64 - s;
function add3(Ah, Al, Bh, Bl) {
  const l19 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l19 / 2 ** 32 | 0) | 0, l: l19 | 0 };
}
var add3L3 = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H3 = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L3 = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H3 = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L3 = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H3 = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
var u644 = {
  fromBig: fromBig3,
  split: split3,
  toBig: toBig3,
  shrSH: shrSH3,
  shrSL: shrSL3,
  rotrSH: rotrSH3,
  rotrSL: rotrSL3,
  rotrBH: rotrBH3,
  rotrBL: rotrBL3,
  rotr32H: rotr32H3,
  rotr32L: rotr32L3,
  rotlSH: rotlSH3,
  rotlSL: rotlSL3,
  rotlBH: rotlBH3,
  rotlBL: rotlBL3,
  add: add3,
  add3L: add3L3,
  add3H: add3H3,
  add4L: add4L3,
  add4H: add4H3,
  add5H: add5H3,
  add5L: add5L3
};
var u64_default3 = u644;

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/blake2b.js
var IV5 = new Uint32Array([
  4089235720,
  1779033703,
  2227873595,
  3144134277,
  4271175723,
  1013904242,
  1595750129,
  2773480762,
  2917565137,
  1359893119,
  725511199,
  2600822924,
  4215389547,
  528734635,
  327033209,
  1541459225
]);
var BUF3 = new Uint32Array(32);
function G13(a, b, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BUF3[2 * a], Ah = BUF3[2 * a + 1];
  let Bl = BUF3[2 * b], Bh = BUF3[2 * b + 1];
  let Cl = BUF3[2 * c], Ch = BUF3[2 * c + 1];
  let Dl = BUF3[2 * d], Dh = BUF3[2 * d + 1];
  let ll = u64_default3.add3L(Al, Bl, Xl);
  Ah = u64_default3.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64_default3.rotr32H(Dh, Dl), Dl: u64_default3.rotr32L(Dh, Dl) });
  ({ h: Ch, l: Cl } = u64_default3.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64_default3.rotrSH(Bh, Bl, 24), Bl: u64_default3.rotrSL(Bh, Bl, 24) });
  BUF3[2 * a] = Al, BUF3[2 * a + 1] = Ah;
  BUF3[2 * b] = Bl, BUF3[2 * b + 1] = Bh;
  BUF3[2 * c] = Cl, BUF3[2 * c + 1] = Ch;
  BUF3[2 * d] = Dl, BUF3[2 * d + 1] = Dh;
}
function G23(a, b, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BUF3[2 * a], Ah = BUF3[2 * a + 1];
  let Bl = BUF3[2 * b], Bh = BUF3[2 * b + 1];
  let Cl = BUF3[2 * c], Ch = BUF3[2 * c + 1];
  let Dl = BUF3[2 * d], Dh = BUF3[2 * d + 1];
  let ll = u64_default3.add3L(Al, Bl, Xl);
  Ah = u64_default3.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64_default3.rotrSH(Dh, Dl, 16), Dl: u64_default3.rotrSL(Dh, Dl, 16) });
  ({ h: Ch, l: Cl } = u64_default3.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64_default3.rotrBH(Bh, Bl, 63), Bl: u64_default3.rotrBL(Bh, Bl, 63) });
  BUF3[2 * a] = Al, BUF3[2 * a + 1] = Ah;
  BUF3[2 * b] = Bl, BUF3[2 * b + 1] = Bh;
  BUF3[2 * c] = Cl, BUF3[2 * c + 1] = Ch;
  BUF3[2 * d] = Dl, BUF3[2 * d + 1] = Dh;
}
var BLAKE2b3 = class extends BLAKE23 {
  constructor(opts = {}) {
    super(128, opts.dkLen === void 0 ? 64 : opts.dkLen, opts, 64, 16, 16);
    this.v0l = IV5[0] | 0;
    this.v0h = IV5[1] | 0;
    this.v1l = IV5[2] | 0;
    this.v1h = IV5[3] | 0;
    this.v2l = IV5[4] | 0;
    this.v2h = IV5[5] | 0;
    this.v3l = IV5[6] | 0;
    this.v3h = IV5[7] | 0;
    this.v4l = IV5[8] | 0;
    this.v4h = IV5[9] | 0;
    this.v5l = IV5[10] | 0;
    this.v5h = IV5[11] | 0;
    this.v6l = IV5[12] | 0;
    this.v6h = IV5[13] | 0;
    this.v7l = IV5[14] | 0;
    this.v7h = IV5[15] | 0;
    const keyLength = opts.key ? opts.key.length : 0;
    this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
    if (opts.salt) {
      const salt = u324(toBytes3(opts.salt));
      this.v4l ^= salt[0];
      this.v4h ^= salt[1];
      this.v5l ^= salt[2];
      this.v5h ^= salt[3];
    }
    if (opts.personalization) {
      const pers = u324(toBytes3(opts.personalization));
      this.v6l ^= pers[0];
      this.v6h ^= pers[1];
      this.v7l ^= pers[2];
      this.v7h ^= pers[3];
    }
    if (opts.key) {
      const tmp = new Uint8Array(this.blockLen);
      tmp.set(toBytes3(opts.key));
      this.update(tmp);
    }
  }
  // prettier-ignore
  get() {
    let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
    return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
  }
  // prettier-ignore
  set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
    this.v0l = v0l | 0;
    this.v0h = v0h | 0;
    this.v1l = v1l | 0;
    this.v1h = v1h | 0;
    this.v2l = v2l | 0;
    this.v2h = v2h | 0;
    this.v3l = v3l | 0;
    this.v3h = v3h | 0;
    this.v4l = v4l | 0;
    this.v4h = v4h | 0;
    this.v5l = v5l | 0;
    this.v5h = v5h | 0;
    this.v6l = v6l | 0;
    this.v6h = v6h | 0;
    this.v7l = v7l | 0;
    this.v7h = v7h | 0;
  }
  compress(msg, offset, isLast) {
    this.get().forEach((v, i) => BUF3[i] = v);
    BUF3.set(IV5, 16);
    let { h, l: l19 } = u64_default3.fromBig(BigInt(this.length));
    BUF3[24] = IV5[8] ^ l19;
    BUF3[25] = IV5[9] ^ h;
    if (isLast) {
      BUF3[28] = ~BUF3[28];
      BUF3[29] = ~BUF3[29];
    }
    let j = 0;
    const s = SIGMA3;
    for (let i = 0; i < 12; i++) {
      G13(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G23(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G13(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G23(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G13(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G23(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G13(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G23(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G13(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G23(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G13(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G23(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G13(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G23(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G13(3, 4, 9, 14, msg, offset + 2 * s[j++]);
      G23(3, 4, 9, 14, msg, offset + 2 * s[j++]);
    }
    this.v0l ^= BUF3[0] ^ BUF3[16];
    this.v0h ^= BUF3[1] ^ BUF3[17];
    this.v1l ^= BUF3[2] ^ BUF3[18];
    this.v1h ^= BUF3[3] ^ BUF3[19];
    this.v2l ^= BUF3[4] ^ BUF3[20];
    this.v2h ^= BUF3[5] ^ BUF3[21];
    this.v3l ^= BUF3[6] ^ BUF3[22];
    this.v3h ^= BUF3[7] ^ BUF3[23];
    this.v4l ^= BUF3[8] ^ BUF3[24];
    this.v4h ^= BUF3[9] ^ BUF3[25];
    this.v5l ^= BUF3[10] ^ BUF3[26];
    this.v5h ^= BUF3[11] ^ BUF3[27];
    this.v6l ^= BUF3[12] ^ BUF3[28];
    this.v6h ^= BUF3[13] ^ BUF3[29];
    this.v7l ^= BUF3[14] ^ BUF3[30];
    this.v7h ^= BUF3[15] ^ BUF3[31];
    BUF3.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer32.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var blake2b4 = wrapConstructorWithOpts3((opts) => new BLAKE2b3(opts));

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/helpers.js
init_shim();
function createAsHex3(fn) {
  return (...args) => u8aToHex6(fn(...args));
}
function createBitHasher3(bitLength, fn) {
  return (data, onlyJs) => fn(data, bitLength, onlyJs);
}
function createDualHasher3(wa, js) {
  return (value, bitLength = 256, onlyJs) => {
    const u8a9 = u8aToU8a6(value);
    return !hasBigInt6 || !onlyJs && isReady() ? wa[bitLength](u8a9) : js[bitLength](u8a9);
  };
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/blake2/asU8a.js
function blake2AsU8a3(data, bitLength = 256, key, onlyJs) {
  const byteLength = Math.ceil(bitLength / 8);
  const u8a9 = u8aToU8a6(data);
  return !hasBigInt6 || !onlyJs && isReady() ? blake2b(u8a9, u8aToU8a6(key), byteLength) : key ? blake2b4(u8a9, { dkLen: byteLength, key }) : blake2b4(u8a9, { dkLen: byteLength });
}
var blake2AsHex3 = createAsHex3(blake2AsU8a3);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/sshash.js
var SS58_PREFIX3 = stringToU8a6("SS58PRE");
function sshash3(key) {
  return blake2AsU8a3(u8aConcat6(SS58_PREFIX3, key), 512);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/checksum.js
function checkAddressChecksum3(decoded) {
  const ss58Length = decoded[0] & 64 ? 2 : 1;
  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;
  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
  const length = decoded.length - (isPublicKey ? 2 : 1);
  const hash5 = sshash3(decoded.subarray(0, length));
  const isValid = (decoded[0] & 128) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash5[0] && decoded[decoded.length - 1] === hash5[1] : decoded[decoded.length - 1] === hash5[0]);
  return [isValid, length, ss58Length, ss58Decoded];
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/defaults.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/networks.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/defaults.js
var defaults3 = {
  allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
  // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
  allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
  allowedPrefix: availableNetworks.map(({ prefix: prefix2 }) => prefix2),
  prefix: 42
};

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/decode.js
function decodeAddress3(encoded, ignoreChecksum, ss58Format = -1) {
  if (!encoded) {
    throw new Error("Invalid empty address passed");
  }
  if (isU8a6(encoded) || isHex6(encoded)) {
    return u8aToU8a6(encoded);
  }
  try {
    const decoded = base58Decode3(encoded);
    if (!defaults3.allowedEncodedLengths.includes(decoded.length)) {
      throw new Error("Invalid decoded address length");
    }
    const [isValid, endPos, ss58Length, ss58Decoded] = checkAddressChecksum3(decoded);
    if (!isValid && !ignoreChecksum) {
      throw new Error("Invalid decoded address checksum");
    } else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
      throw new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
    }
    return decoded.slice(ss58Length, endPos);
  } catch (error) {
    throw new Error(`Decoding ${encoded}: ${error.message}`);
  }
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/check.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/derive.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/key/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/key/extractPath.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/key/DeriveJunction.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/bn.js
init_shim();
var BN_BE_256_OPTS3 = { bitLength: 256, isLe: false };

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/key/extractSuri.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/key/fromPath.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/key/hdkdEcdsa.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/secp256k1/deriveHard.js
init_shim();
var HDKD5 = compactAddLength6(stringToU8a6("Secp256k1HDKD"));
function secp256k1DeriveHard3(seed, chainCode) {
  if (!isU8a6(chainCode) || chainCode.length !== 32) {
    throw new Error("Invalid chainCode passed to derive");
  }
  return blake2AsU8a3(u8aConcat6(HDKD5, seed, chainCode), 256);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/secp256k1/pair/fromSeed.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/secp256k1.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/sha256.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/_sha2.js
init_shim();
function setBigUint643(view, byteOffset, value, isLE5) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE5);
  const _32n9 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n9 & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE5 ? 4 : 0;
  const l19 = isLE5 ? 0 : 4;
  view.setUint32(byteOffset + h, wh, isLE5);
  view.setUint32(byteOffset + l19, wl, isLE5);
}
var SHA23 = class extends Hash3 {
  constructor(blockLen, outputLen, padOffset, isLE5) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE5;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView3(this.buffer);
  }
  update(data) {
    exists3(this);
    const { view, buffer: buffer2, blockLen } = this;
    data = toBytes3(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take2 = Math.min(blockLen - this.pos, len - pos);
      if (take2 === blockLen) {
        const dataView = createView3(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer2.set(data.subarray(pos, pos + take2), this.pos);
      this.pos += take2;
      pos += take2;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    exists3(this);
    output3(out, this);
    this.finished = true;
    const { buffer: buffer2, view, blockLen, isLE: isLE5 } = this;
    let { pos } = this;
    buffer2[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i = pos; i < blockLen; i++)
      buffer2[i] = 0;
    setBigUint643(view, blockLen - 8, BigInt(this.length * 8), isLE5);
    this.process(view, 0);
    const oview = createView3(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i = 0; i < outLen; i++)
      oview.setUint32(4 * i, state[i], isLE5);
  }
  digest() {
    const { buffer: buffer2, outputLen } = this;
    this.digestInto(buffer2);
    const res = buffer2.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
    to.length = length;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length % blockLen)
      to.buffer.set(buffer2);
    return to;
  }
};

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/sha256.js
var Chi3 = (a, b, c) => a & b ^ ~a & c;
var Maj3 = (a, b, c) => a & b ^ a & c ^ b & c;
var SHA256_K3 = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var IV6 = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA256_W3 = new Uint32Array(64);
var SHA2563 = class extends SHA23 {
  constructor() {
    super(64, 32, 8, false);
    this.A = IV6[0] | 0;
    this.B = IV6[1] | 0;
    this.C = IV6[2] | 0;
    this.D = IV6[3] | 0;
    this.E = IV6[4] | 0;
    this.F = IV6[5] | 0;
    this.G = IV6[6] | 0;
    this.H = IV6[7] | 0;
  }
  get() {
    const { A, B, C, D, E, F, G, H } = this;
    return [A, B, C, D, E, F, G, H];
  }
  // prettier-ignore
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA256_W3[i] = view.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W3[i - 15];
      const W2 = SHA256_W3[i - 2];
      const s0 = rotr3(W15, 7) ^ rotr3(W15, 18) ^ W15 >>> 3;
      const s1 = rotr3(W2, 17) ^ rotr3(W2, 19) ^ W2 >>> 10;
      SHA256_W3[i] = s1 + SHA256_W3[i - 7] + s0 + SHA256_W3[i - 16] | 0;
    }
    let { A, B, C, D, E, F, G, H } = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = rotr3(E, 6) ^ rotr3(E, 11) ^ rotr3(E, 25);
      const T1 = H + sigma1 + Chi3(E, F, G) + SHA256_K3[i] + SHA256_W3[i] | 0;
      const sigma0 = rotr3(A, 2) ^ rotr3(A, 13) ^ rotr3(A, 22);
      const T2 = sigma0 + Maj3(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T1 | 0;
      D = C;
      C = B;
      B = A;
      A = T1 + T2 | 0;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    SHA256_W3.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
};
var SHA2243 = class extends SHA2563 {
  constructor() {
    super();
    this.A = 3238371032 | 0;
    this.B = 914150663 | 0;
    this.C = 812702999 | 0;
    this.D = 4144912697 | 0;
    this.E = 4290775857 | 0;
    this.F = 1750603025 | 0;
    this.G = 1694076839 | 0;
    this.H = 3204075428 | 0;
    this.outputLen = 28;
  }
};
var sha2564 = wrapConstructor3(() => new SHA2563());
var sha2243 = wrapConstructor3(() => new SHA2243());

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/abstract/modular.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/abstract/utils.js
var utils_exports3 = {};
__export(utils_exports3, {
  bitGet: () => bitGet3,
  bitLen: () => bitLen3,
  bitMask: () => bitMask3,
  bitSet: () => bitSet3,
  bytesToHex: () => bytesToHex3,
  bytesToNumberBE: () => bytesToNumberBE3,
  bytesToNumberLE: () => bytesToNumberLE3,
  concatBytes: () => concatBytes6,
  createHmacDrbg: () => createHmacDrbg3,
  ensureBytes: () => ensureBytes3,
  equalBytes: () => equalBytes3,
  hexToBytes: () => hexToBytes3,
  hexToNumber: () => hexToNumber12,
  numberToBytesBE: () => numberToBytesBE3,
  numberToBytesLE: () => numberToBytesLE3,
  numberToHexUnpadded: () => numberToHexUnpadded3,
  numberToVarBytesBE: () => numberToVarBytesBE3,
  utf8ToBytes: () => utf8ToBytes6,
  validateObject: () => validateObject3
});
init_shim();
var _0n29 = BigInt(0);
var _1n29 = BigInt(1);
var _2n24 = BigInt(2);
var u8a6 = (a) => a instanceof Uint8Array;
var hexes6 = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function bytesToHex3(bytes5) {
  if (!u8a6(bytes5))
    throw new Error("Uint8Array expected");
  let hex11 = "";
  for (let i = 0; i < bytes5.length; i++) {
    hex11 += hexes6[bytes5[i]];
  }
  return hex11;
}
function numberToHexUnpadded3(num) {
  const hex11 = num.toString(16);
  return hex11.length & 1 ? `0${hex11}` : hex11;
}
function hexToNumber12(hex11) {
  if (typeof hex11 !== "string")
    throw new Error("hex string expected, got " + typeof hex11);
  return BigInt(hex11 === "" ? "0" : `0x${hex11}`);
}
function hexToBytes3(hex11) {
  if (typeof hex11 !== "string")
    throw new Error("hex string expected, got " + typeof hex11);
  const len = hex11.length;
  if (len % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + len);
  const array = new Uint8Array(len / 2);
  for (let i = 0; i < array.length; i++) {
    const j = i * 2;
    const hexByte = hex11.slice(j, j + 2);
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte) || byte < 0)
      throw new Error("Invalid byte sequence");
    array[i] = byte;
  }
  return array;
}
function bytesToNumberBE3(bytes5) {
  return hexToNumber12(bytesToHex3(bytes5));
}
function bytesToNumberLE3(bytes5) {
  if (!u8a6(bytes5))
    throw new Error("Uint8Array expected");
  return hexToNumber12(bytesToHex3(Uint8Array.from(bytes5).reverse()));
}
function numberToBytesBE3(n, len) {
  return hexToBytes3(n.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE3(n, len) {
  return numberToBytesBE3(n, len).reverse();
}
function numberToVarBytesBE3(n) {
  return hexToBytes3(numberToHexUnpadded3(n));
}
function ensureBytes3(title, hex11, expectedLength) {
  let res;
  if (typeof hex11 === "string") {
    try {
      res = hexToBytes3(hex11);
    } catch (e) {
      throw new Error(`${title} must be valid hex string, got "${hex11}". Cause: ${e}`);
    }
  } else if (u8a6(hex11)) {
    res = Uint8Array.from(hex11);
  } else {
    throw new Error(`${title} must be hex string or Uint8Array`);
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
  return res;
}
function concatBytes6(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a6(a))
      throw new Error("Uint8Array expected");
    r.set(a, pad);
    pad += a.length;
  });
  return r;
}
function equalBytes3(b1, b2) {
  if (b1.length !== b2.length)
    return false;
  for (let i = 0; i < b1.length; i++)
    if (b1[i] !== b2[i])
      return false;
  return true;
}
function utf8ToBytes6(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function bitLen3(n) {
  let len;
  for (len = 0; n > _0n29; n >>= _1n29, len += 1)
    ;
  return len;
}
function bitGet3(n, pos) {
  return n >> BigInt(pos) & _1n29;
}
var bitSet3 = (n, pos, value) => {
  return n | (value ? _1n29 : _0n29) << BigInt(pos);
};
var bitMask3 = (n) => (_2n24 << BigInt(n - 1)) - _1n29;
var u8n3 = (data) => new Uint8Array(data);
var u8fr3 = (arr) => Uint8Array.from(arr);
function createHmacDrbg3(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  let v = u8n3(hashLen);
  let k = u8n3(hashLen);
  let i = 0;
  const reset = () => {
    v.fill(1);
    k.fill(0);
    i = 0;
  };
  const h = (...b) => hmacFn(k, v, ...b);
  const reseed = (seed = u8n3()) => {
    k = h(u8fr3([0]), seed);
    v = h();
    if (seed.length === 0)
      return;
    k = h(u8fr3([1]), seed);
    v = h();
  };
  const gen5 = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v = h();
      const sl = v.slice();
      out.push(sl);
      len += v.length;
    }
    return concatBytes6(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = void 0;
    while (!(res = pred(gen5())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
var validatorFns3 = {
  bigint: (val) => typeof val === "bigint",
  function: (val) => typeof val === "function",
  boolean: (val) => typeof val === "boolean",
  string: (val) => typeof val === "string",
  stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
  isSafeInteger: (val) => Number.isSafeInteger(val),
  array: (val) => Array.isArray(val),
  field: (val, object) => object.Fp.isValid(val),
  hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
function validateObject3(object, validators2, optValidators = {}) {
  const checkField = (fieldName, type, isOptional) => {
    const checkVal = validatorFns3[type];
    if (typeof checkVal !== "function")
      throw new Error(`Invalid validator "${type}", expected function`);
    const val = object[fieldName];
    if (isOptional && val === void 0)
      return;
    if (!checkVal(val, object)) {
      throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
    }
  };
  for (const [fieldName, type] of Object.entries(validators2))
    checkField(fieldName, type, false);
  for (const [fieldName, type] of Object.entries(optValidators))
    checkField(fieldName, type, true);
  return object;
}

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/abstract/modular.js
var _0n30 = BigInt(0);
var _1n30 = BigInt(1);
var _2n25 = BigInt(2);
var _3n14 = BigInt(3);
var _4n14 = BigInt(4);
var _5n14 = BigInt(5);
var _8n14 = BigInt(8);
var _9n12 = BigInt(9);
var _16n5 = BigInt(16);
function mod3(a, b) {
  const result = a % b;
  return result >= _0n30 ? result : b + result;
}
function pow4(num, power, modulo) {
  if (modulo <= _0n30 || power < _0n30)
    throw new Error("Expected power/modulo > 0");
  if (modulo === _1n30)
    return _0n30;
  let res = _1n30;
  while (power > _0n30) {
    if (power & _1n30)
      res = res * num % modulo;
    num = num * num % modulo;
    power >>= _1n30;
  }
  return res;
}
function pow23(x, power, modulo) {
  let res = x;
  while (power-- > _0n30) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert3(number5, modulo) {
  if (number5 === _0n30 || modulo <= _0n30) {
    throw new Error(`invert: expected positive integers, got n=${number5} mod=${modulo}`);
  }
  let a = mod3(number5, modulo);
  let b = modulo;
  let x = _0n30, y = _1n30, u = _1n30, v = _0n30;
  while (a !== _0n30) {
    const q = b / a;
    const r = b % a;
    const m = x - u * q;
    const n = y - v * q;
    b = a, a = r, x = u, y = v, u = m, v = n;
  }
  const gcd5 = b;
  if (gcd5 !== _1n30)
    throw new Error("invert: does not exist");
  return mod3(x, modulo);
}
function tonelliShanks3(P) {
  const legendreC = (P - _1n30) / _2n25;
  let Q, S, Z;
  for (Q = P - _1n30, S = 0; Q % _2n25 === _0n30; Q /= _2n25, S++)
    ;
  for (Z = _2n25; Z < P && pow4(Z, legendreC, P) !== P - _1n30; Z++)
    ;
  if (S === 1) {
    const p1div4 = (P + _1n30) / _4n14;
    return function tonelliFast(Fp9, n) {
      const root = Fp9.pow(n, p1div4);
      if (!Fp9.eql(Fp9.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  const Q1div2 = (Q + _1n30) / _2n25;
  return function tonelliSlow(Fp9, n) {
    if (Fp9.pow(n, legendreC) === Fp9.neg(Fp9.ONE))
      throw new Error("Cannot find square root");
    let r = S;
    let g = Fp9.pow(Fp9.mul(Fp9.ONE, Z), Q);
    let x = Fp9.pow(n, Q1div2);
    let b = Fp9.pow(n, Q);
    while (!Fp9.eql(b, Fp9.ONE)) {
      if (Fp9.eql(b, Fp9.ZERO))
        return Fp9.ZERO;
      let m = 1;
      for (let t2 = Fp9.sqr(b); m < r; m++) {
        if (Fp9.eql(t2, Fp9.ONE))
          break;
        t2 = Fp9.sqr(t2);
      }
      const ge5 = Fp9.pow(g, _1n30 << BigInt(r - m - 1));
      g = Fp9.sqr(ge5);
      x = Fp9.mul(x, ge5);
      b = Fp9.mul(b, g);
      r = m;
    }
    return x;
  };
}
function FpSqrt3(P) {
  if (P % _4n14 === _3n14) {
    const p1div4 = (P + _1n30) / _4n14;
    return function sqrt3mod4(Fp9, n) {
      const root = Fp9.pow(n, p1div4);
      if (!Fp9.eql(Fp9.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _8n14 === _5n14) {
    const c1 = (P - _5n14) / _8n14;
    return function sqrt5mod8(Fp9, n) {
      const n2 = Fp9.mul(n, _2n25);
      const v = Fp9.pow(n2, c1);
      const nv = Fp9.mul(n, v);
      const i = Fp9.mul(Fp9.mul(nv, _2n25), v);
      const root = Fp9.mul(nv, Fp9.sub(i, Fp9.ONE));
      if (!Fp9.eql(Fp9.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _16n5 === _9n12) {
  }
  return tonelliShanks3(P);
}
var isNegativeLE3 = (num, modulo) => (mod3(num, modulo) & _1n30) === _1n30;
var FIELD_FIELDS3 = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField3(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  };
  const opts = FIELD_FIELDS3.reduce((map2, val) => {
    map2[val] = "function";
    return map2;
  }, initial);
  return validateObject3(field, opts);
}
function FpPow3(f, num, power) {
  if (power < _0n30)
    throw new Error("Expected power > 0");
  if (power === _0n30)
    return f.ONE;
  if (power === _1n30)
    return num;
  let p = f.ONE;
  let d = num;
  while (power > _0n30) {
    if (power & _1n30)
      p = f.mul(p, d);
    d = f.sqr(d);
    power >>= _1n30;
  }
  return p;
}
function FpInvertBatch3(f, nums) {
  const tmp = new Array(nums.length);
  const lastMultiplied = nums.reduce((acc, num, i) => {
    if (f.is0(num))
      return acc;
    tmp[i] = acc;
    return f.mul(acc, num);
  }, f.ONE);
  const inverted = f.inv(lastMultiplied);
  nums.reduceRight((acc, num, i) => {
    if (f.is0(num))
      return acc;
    tmp[i] = f.mul(acc, tmp[i]);
    return f.mul(acc, num);
  }, inverted);
  return tmp;
}
function nLength3(n, nBitLength) {
  const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field3(ORDER, bitLen5, isLE5 = false, redef = {}) {
  if (ORDER <= _0n30)
    throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
  const { nBitLength: BITS, nByteLength: BYTES } = nLength3(ORDER, bitLen5);
  if (BYTES > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const sqrtP = FpSqrt3(ORDER);
  const f = Object.freeze({
    ORDER,
    BITS,
    BYTES,
    MASK: bitMask3(BITS),
    ZERO: _0n30,
    ONE: _1n30,
    create: (num) => mod3(num, ORDER),
    isValid: (num) => {
      if (typeof num !== "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
      return _0n30 <= num && num < ORDER;
    },
    is0: (num) => num === _0n30,
    isOdd: (num) => (num & _1n30) === _1n30,
    neg: (num) => mod3(-num, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num) => mod3(num * num, ORDER),
    add: (lhs, rhs) => mod3(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod3(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod3(lhs * rhs, ORDER),
    pow: (num, power) => FpPow3(f, num, power),
    div: (lhs, rhs) => mod3(lhs * invert3(rhs, ORDER), ORDER),
    // Same as above, but doesn't normalize
    sqrN: (num) => num * num,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num) => invert3(num, ORDER),
    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
    invertBatch: (lst) => FpInvertBatch3(f, lst),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (a, b, c) => c ? b : a,
    toBytes: (num) => isLE5 ? numberToBytesLE3(num, BYTES) : numberToBytesBE3(num, BYTES),
    fromBytes: (bytes5) => {
      if (bytes5.length !== BYTES)
        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes5.length}`);
      return isLE5 ? bytesToNumberLE3(bytes5) : bytesToNumberBE3(bytes5);
    }
  });
  return Object.freeze(f);
}
function FpSqrtEven3(Fp9, elm) {
  if (!Fp9.isOdd)
    throw new Error(`Field doesn't have isOdd`);
  const root = Fp9.sqrt(elm);
  return Fp9.isOdd(root) ? Fp9.neg(root) : root;
}
function getFieldBytesLength3(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength3(fieldOrder) {
  const length = getFieldBytesLength3(fieldOrder);
  return length + Math.ceil(length / 2);
}
function mapHashToField3(key, fieldOrder, isLE5 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength3(fieldOrder);
  const minLen = getMinHashLength3(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
  const num = isLE5 ? bytesToNumberBE3(key) : bytesToNumberLE3(key);
  const reduced = mod3(num, fieldOrder - _1n30) + _1n30;
  return isLE5 ? numberToBytesLE3(reduced, fieldLen) : numberToBytesBE3(reduced, fieldLen);
}

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/abstract/weierstrass.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/abstract/curve.js
init_shim();
var _0n31 = BigInt(0);
var _1n31 = BigInt(1);
function wNAF3(c, bits) {
  const constTimeNegate = (condition, item) => {
    const neg = item.negate();
    return condition ? neg : item;
  };
  const opts = (W) => {
    const windows = Math.ceil(bits / W) + 1;
    const windowSize = 2 ** (W - 1);
    return { windows, windowSize };
  };
  return {
    constTimeNegate,
    // non-const time multiplication ladder
    unsafeLadder(elm, n) {
      let p = c.ZERO;
      let d = elm;
      while (n > _0n31) {
        if (n & _1n31)
          p = p.add(d);
        d = d.double();
        n >>= _1n31;
      }
      return p;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(elm, W) {
      const { windows, windowSize } = opts(W);
      const points = [];
      let p = elm;
      let base = p;
      for (let window3 = 0; window3 < windows; window3++) {
        base = p;
        points.push(base);
        for (let i = 1; i < windowSize; i++) {
          base = base.add(p);
          points.push(base);
        }
        p = base.double();
      }
      return points;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(W, precomputes, n) {
      const { windows, windowSize } = opts(W);
      let p = c.ZERO;
      let f = c.BASE;
      const mask = BigInt(2 ** W - 1);
      const maxNumber = 2 ** W;
      const shiftBy = BigInt(W);
      for (let window3 = 0; window3 < windows; window3++) {
        const offset = window3 * windowSize;
        let wbits = Number(n & mask);
        n >>= shiftBy;
        if (wbits > windowSize) {
          wbits -= maxNumber;
          n += _1n31;
        }
        const offset1 = offset;
        const offset2 = offset + Math.abs(wbits) - 1;
        const cond1 = window3 % 2 !== 0;
        const cond2 = wbits < 0;
        if (wbits === 0) {
          f = f.add(constTimeNegate(cond1, precomputes[offset1]));
        } else {
          p = p.add(constTimeNegate(cond2, precomputes[offset2]));
        }
      }
      return { p, f };
    },
    wNAFCached(P, precomputesMap, n, transform) {
      const W = P._WINDOW_SIZE || 1;
      let comp = precomputesMap.get(P);
      if (!comp) {
        comp = this.precomputeWindow(P, W);
        if (W !== 1) {
          precomputesMap.set(P, transform(comp));
        }
      }
      return this.wNAF(W, comp, n);
    }
  };
}
function validateBasic3(curve) {
  validateField3(curve.Fp);
  validateObject3(curve, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  });
  return Object.freeze({
    ...nLength3(curve.n, curve.nBitLength),
    ...curve,
    ...{ p: curve.Fp.ORDER }
  });
}

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/abstract/weierstrass.js
function validatePointOpts3(curve) {
  const opts = validateBasic3(curve);
  validateObject3(opts, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo, Fp: Fp9, a } = opts;
  if (endo) {
    if (!Fp9.eql(a, Fp9.ZERO)) {
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    }
    if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
    }
  }
  return Object.freeze({ ...opts });
}
var { bytesToNumberBE: b2n3, hexToBytes: h2b3 } = utils_exports3;
var DER3 = {
  // asn.1 DER encoding utils
  Err: class DERErr3 extends Error {
    constructor(m = "") {
      super(m);
    }
  },
  _parseInt(data) {
    const { Err: E } = DER3;
    if (data.length < 2 || data[0] !== 2)
      throw new E("Invalid signature integer tag");
    const len = data[1];
    const res = data.subarray(2, len + 2);
    if (!len || res.length !== len)
      throw new E("Invalid signature integer: wrong length");
    if (res[0] & 128)
      throw new E("Invalid signature integer: negative");
    if (res[0] === 0 && !(res[1] & 128))
      throw new E("Invalid signature integer: unnecessary leading zero");
    return { d: b2n3(res), l: data.subarray(len + 2) };
  },
  toSig(hex11) {
    const { Err: E } = DER3;
    const data = typeof hex11 === "string" ? h2b3(hex11) : hex11;
    if (!(data instanceof Uint8Array))
      throw new Error("ui8a expected");
    let l19 = data.length;
    if (l19 < 2 || data[0] != 48)
      throw new E("Invalid signature tag");
    if (data[1] !== l19 - 2)
      throw new E("Invalid signature: incorrect length");
    const { d: r, l: sBytes } = DER3._parseInt(data.subarray(2));
    const { d: s, l: rBytesLeft } = DER3._parseInt(sBytes);
    if (rBytesLeft.length)
      throw new E("Invalid signature: left bytes after parsing");
    return { r, s };
  },
  hexFromSig(sig2) {
    const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
    const h = (num) => {
      const hex11 = num.toString(16);
      return hex11.length & 1 ? `0${hex11}` : hex11;
    };
    const s = slice(h(sig2.s));
    const r = slice(h(sig2.r));
    const shl = s.length / 2;
    const rhl = r.length / 2;
    const sl = h(shl);
    const rl = h(rhl);
    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
  }
};
var _0n32 = BigInt(0);
var _1n32 = BigInt(1);
var _2n26 = BigInt(2);
var _3n15 = BigInt(3);
var _4n15 = BigInt(4);
function weierstrassPoints3(opts) {
  const CURVE = validatePointOpts3(opts);
  const { Fp: Fp9 } = CURVE;
  const toBytes5 = CURVE.toBytes || ((_c, point, _isCompressed) => {
    const a = point.toAffine();
    return concatBytes6(Uint8Array.from([4]), Fp9.toBytes(a.x), Fp9.toBytes(a.y));
  });
  const fromBytes = CURVE.fromBytes || ((bytes5) => {
    const tail = bytes5.subarray(1);
    const x = Fp9.fromBytes(tail.subarray(0, Fp9.BYTES));
    const y = Fp9.fromBytes(tail.subarray(Fp9.BYTES, 2 * Fp9.BYTES));
    return { x, y };
  });
  function weierstrassEquation(x) {
    const { a, b } = CURVE;
    const x2 = Fp9.sqr(x);
    const x3 = Fp9.mul(x2, x);
    return Fp9.add(Fp9.add(x3, Fp9.mul(x, a)), b);
  }
  if (!Fp9.eql(Fp9.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
    throw new Error("bad generator point: equation left != right");
  function isWithinCurveOrder(num) {
    return typeof num === "bigint" && _0n32 < num && num < CURVE.n;
  }
  function assertGE(num) {
    if (!isWithinCurveOrder(num))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function normPrivateKeyToScalar(key) {
    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
    if (lengths && typeof key !== "bigint") {
      if (key instanceof Uint8Array)
        key = bytesToHex3(key);
      if (typeof key !== "string" || !lengths.includes(key.length))
        throw new Error("Invalid key");
      key = key.padStart(nByteLength * 2, "0");
    }
    let num;
    try {
      num = typeof key === "bigint" ? key : bytesToNumberBE3(ensureBytes3("private key", key, nByteLength));
    } catch (error) {
      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
    }
    if (wrapPrivateKey)
      num = mod3(num, n);
    assertGE(num);
    return num;
  }
  const pointPrecomputes = /* @__PURE__ */ new Map();
  function assertPrjPoint(other) {
    if (!(other instanceof Point5))
      throw new Error("ProjectivePoint expected");
  }
  class Point5 {
    constructor(px, py, pz) {
      this.px = px;
      this.py = py;
      this.pz = pz;
      if (px == null || !Fp9.isValid(px))
        throw new Error("x required");
      if (py == null || !Fp9.isValid(py))
        throw new Error("y required");
      if (pz == null || !Fp9.isValid(pz))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(p) {
      const { x, y } = p || {};
      if (!p || !Fp9.isValid(x) || !Fp9.isValid(y))
        throw new Error("invalid affine point");
      if (p instanceof Point5)
        throw new Error("projective point not allowed");
      const is0 = (i) => Fp9.eql(i, Fp9.ZERO);
      if (is0(x) && is0(y))
        return Point5.ZERO;
      return new Point5(x, y, Fp9.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(points) {
      const toInv = Fp9.invertBatch(points.map((p) => p.pz));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point5.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(hex11) {
      const P = Point5.fromAffine(fromBytes(ensureBytes3("pointHex", hex11)));
      P.assertValidity();
      return P;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(privateKey) {
      return Point5.BASE.multiply(normPrivateKeyToScalar(privateKey));
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (CURVE.allowInfinityPoint && !Fp9.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x, y } = this.toAffine();
      if (!Fp9.isValid(x) || !Fp9.isValid(y))
        throw new Error("bad point: x or y not FE");
      const left = Fp9.sqr(y);
      const right = weierstrassEquation(x);
      if (!Fp9.eql(left, right))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y } = this.toAffine();
      if (Fp9.isOdd)
        return !Fp9.isOdd(y);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      const U1 = Fp9.eql(Fp9.mul(X1, Z2), Fp9.mul(X2, Z1));
      const U2 = Fp9.eql(Fp9.mul(Y1, Z2), Fp9.mul(Y2, Z1));
      return U1 && U2;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new Point5(this.px, Fp9.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a, b } = CURVE;
      const b3 = Fp9.mul(b, _3n15);
      const { px: X1, py: Y1, pz: Z1 } = this;
      let X3 = Fp9.ZERO, Y3 = Fp9.ZERO, Z3 = Fp9.ZERO;
      let t0 = Fp9.mul(X1, X1);
      let t1 = Fp9.mul(Y1, Y1);
      let t2 = Fp9.mul(Z1, Z1);
      let t3 = Fp9.mul(X1, Y1);
      t3 = Fp9.add(t3, t3);
      Z3 = Fp9.mul(X1, Z1);
      Z3 = Fp9.add(Z3, Z3);
      X3 = Fp9.mul(a, Z3);
      Y3 = Fp9.mul(b3, t2);
      Y3 = Fp9.add(X3, Y3);
      X3 = Fp9.sub(t1, Y3);
      Y3 = Fp9.add(t1, Y3);
      Y3 = Fp9.mul(X3, Y3);
      X3 = Fp9.mul(t3, X3);
      Z3 = Fp9.mul(b3, Z3);
      t2 = Fp9.mul(a, t2);
      t3 = Fp9.sub(t0, t2);
      t3 = Fp9.mul(a, t3);
      t3 = Fp9.add(t3, Z3);
      Z3 = Fp9.add(t0, t0);
      t0 = Fp9.add(Z3, t0);
      t0 = Fp9.add(t0, t2);
      t0 = Fp9.mul(t0, t3);
      Y3 = Fp9.add(Y3, t0);
      t2 = Fp9.mul(Y1, Z1);
      t2 = Fp9.add(t2, t2);
      t0 = Fp9.mul(t2, t3);
      X3 = Fp9.sub(X3, t0);
      Z3 = Fp9.mul(t2, t1);
      Z3 = Fp9.add(Z3, Z3);
      Z3 = Fp9.add(Z3, Z3);
      return new Point5(X3, Y3, Z3);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      let X3 = Fp9.ZERO, Y3 = Fp9.ZERO, Z3 = Fp9.ZERO;
      const a = CURVE.a;
      const b3 = Fp9.mul(CURVE.b, _3n15);
      let t0 = Fp9.mul(X1, X2);
      let t1 = Fp9.mul(Y1, Y2);
      let t2 = Fp9.mul(Z1, Z2);
      let t3 = Fp9.add(X1, Y1);
      let t4 = Fp9.add(X2, Y2);
      t3 = Fp9.mul(t3, t4);
      t4 = Fp9.add(t0, t1);
      t3 = Fp9.sub(t3, t4);
      t4 = Fp9.add(X1, Z1);
      let t5 = Fp9.add(X2, Z2);
      t4 = Fp9.mul(t4, t5);
      t5 = Fp9.add(t0, t2);
      t4 = Fp9.sub(t4, t5);
      t5 = Fp9.add(Y1, Z1);
      X3 = Fp9.add(Y2, Z2);
      t5 = Fp9.mul(t5, X3);
      X3 = Fp9.add(t1, t2);
      t5 = Fp9.sub(t5, X3);
      Z3 = Fp9.mul(a, t4);
      X3 = Fp9.mul(b3, t2);
      Z3 = Fp9.add(X3, Z3);
      X3 = Fp9.sub(t1, Z3);
      Z3 = Fp9.add(t1, Z3);
      Y3 = Fp9.mul(X3, Z3);
      t1 = Fp9.add(t0, t0);
      t1 = Fp9.add(t1, t0);
      t2 = Fp9.mul(a, t2);
      t4 = Fp9.mul(b3, t4);
      t1 = Fp9.add(t1, t2);
      t2 = Fp9.sub(t0, t2);
      t2 = Fp9.mul(a, t2);
      t4 = Fp9.add(t4, t2);
      t0 = Fp9.mul(t1, t4);
      Y3 = Fp9.add(Y3, t0);
      t0 = Fp9.mul(t5, t4);
      X3 = Fp9.mul(t3, X3);
      X3 = Fp9.sub(X3, t0);
      t0 = Fp9.mul(t3, t1);
      Z3 = Fp9.mul(t5, Z3);
      Z3 = Fp9.add(Z3, t0);
      return new Point5(X3, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point5.ZERO);
    }
    wNAF(n) {
      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
        const toInv = Fp9.invertBatch(comp.map((p) => p.pz));
        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point5.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(n) {
      const I = Point5.ZERO;
      if (n === _0n32)
        return I;
      assertGE(n);
      if (n === _1n32)
        return this;
      const { endo } = CURVE;
      if (!endo)
        return wnaf.unsafeLadder(this, n);
      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
      let k1p = I;
      let k2p = I;
      let d = this;
      while (k1 > _0n32 || k2 > _0n32) {
        if (k1 & _1n32)
          k1p = k1p.add(d);
        if (k2 & _1n32)
          k2p = k2p.add(d);
        d = d.double();
        k1 >>= _1n32;
        k2 >>= _1n32;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new Point5(Fp9.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
      return k1p.add(k2p);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(scalar) {
      assertGE(scalar);
      let n = scalar;
      let point, fake;
      const { endo } = CURVE;
      if (endo) {
        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
        let { p: k1p, f: f1p } = this.wNAF(k1);
        let { p: k2p, f: f2p } = this.wNAF(k2);
        k1p = wnaf.constTimeNegate(k1neg, k1p);
        k2p = wnaf.constTimeNegate(k2neg, k2p);
        k2p = new Point5(Fp9.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p, f } = this.wNAF(n);
        point = p;
        fake = f;
      }
      return Point5.normalizeZ([point, fake])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(Q, a, b) {
      const G = Point5.BASE;
      const mul = (P, a2) => a2 === _0n32 || a2 === _1n32 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
      const sum = mul(this, a).add(mul(Q, b));
      return sum.is0() ? void 0 : sum;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(iz) {
      const { px: x, py: y, pz: z } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? Fp9.ONE : Fp9.inv(z);
      const ax = Fp9.mul(x, iz);
      const ay = Fp9.mul(y, iz);
      const zz = Fp9.mul(z, iz);
      if (is0)
        return { x: Fp9.ZERO, y: Fp9.ZERO };
      if (!Fp9.eql(zz, Fp9.ONE))
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    isTorsionFree() {
      const { h: cofactor, isTorsionFree } = CURVE;
      if (cofactor === _1n32)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point5, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: cofactor, clearCofactor } = CURVE;
      if (cofactor === _1n32)
        return this;
      if (clearCofactor)
        return clearCofactor(Point5, this);
      return this.multiplyUnsafe(CURVE.h);
    }
    toRawBytes(isCompressed = true) {
      this.assertValidity();
      return toBytes5(Point5, this, isCompressed);
    }
    toHex(isCompressed = true) {
      return bytesToHex3(this.toRawBytes(isCompressed));
    }
  }
  Point5.BASE = new Point5(CURVE.Gx, CURVE.Gy, Fp9.ONE);
  Point5.ZERO = new Point5(Fp9.ZERO, Fp9.ONE, Fp9.ZERO);
  const _bits = CURVE.nBitLength;
  const wnaf = wNAF3(Point5, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
  return {
    CURVE,
    ProjectivePoint: Point5,
    normPrivateKeyToScalar,
    weierstrassEquation,
    isWithinCurveOrder
  };
}
function validateOpts7(curve) {
  const opts = validateBasic3(curve);
  validateObject3(opts, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  });
  return Object.freeze({ lowS: true, ...opts });
}
function weierstrass3(curveDef) {
  const CURVE = validateOpts7(curveDef);
  const { Fp: Fp9, n: CURVE_ORDER } = CURVE;
  const compressedLen = Fp9.BYTES + 1;
  const uncompressedLen = 2 * Fp9.BYTES + 1;
  function isValidFieldElement(num) {
    return _0n32 < num && num < Fp9.ORDER;
  }
  function modN5(a) {
    return mod3(a, CURVE_ORDER);
  }
  function invN(a) {
    return invert3(a, CURVE_ORDER);
  }
  const { ProjectivePoint: Point5, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints3({
    ...CURVE,
    toBytes(_c, point, isCompressed) {
      const a = point.toAffine();
      const x = Fp9.toBytes(a.x);
      const cat = concatBytes6;
      if (isCompressed) {
        return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
      } else {
        return cat(Uint8Array.from([4]), x, Fp9.toBytes(a.y));
      }
    },
    fromBytes(bytes5) {
      const len = bytes5.length;
      const head = bytes5[0];
      const tail = bytes5.subarray(1);
      if (len === compressedLen && (head === 2 || head === 3)) {
        const x = bytesToNumberBE3(tail);
        if (!isValidFieldElement(x))
          throw new Error("Point is not on curve");
        const y2 = weierstrassEquation(x);
        let y = Fp9.sqrt(y2);
        const isYOdd = (y & _1n32) === _1n32;
        const isHeadOdd = (head & 1) === 1;
        if (isHeadOdd !== isYOdd)
          y = Fp9.neg(y);
        return { x, y };
      } else if (len === uncompressedLen && head === 4) {
        const x = Fp9.fromBytes(tail.subarray(0, Fp9.BYTES));
        const y = Fp9.fromBytes(tail.subarray(Fp9.BYTES, 2 * Fp9.BYTES));
        return { x, y };
      } else {
        throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
      }
    }
  });
  const numToNByteStr = (num) => bytesToHex3(numberToBytesBE3(num, CURVE.nByteLength));
  function isBiggerThanHalfOrder(number5) {
    const HALF = CURVE_ORDER >> _1n32;
    return number5 > HALF;
  }
  function normalizeS(s) {
    return isBiggerThanHalfOrder(s) ? modN5(-s) : s;
  }
  const slcNum = (b, from2, to) => bytesToNumberBE3(b.slice(from2, to));
  class Signature {
    constructor(r, s, recovery) {
      this.r = r;
      this.s = s;
      this.recovery = recovery;
      this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(hex11) {
      const l19 = CURVE.nByteLength;
      hex11 = ensureBytes3("compactSignature", hex11, l19 * 2);
      return new Signature(slcNum(hex11, 0, l19), slcNum(hex11, l19, 2 * l19));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(hex11) {
      const { r, s } = DER3.toSig(ensureBytes3("DER", hex11));
      return new Signature(r, s);
    }
    assertValidity() {
      if (!isWithinCurveOrder(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!isWithinCurveOrder(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(recovery) {
      return new Signature(this.r, this.s, recovery);
    }
    recoverPublicKey(msgHash) {
      const { r, s, recovery: rec } = this;
      const h = bits2int_modN(ensureBytes3("msgHash", msgHash));
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
      if (radj >= Fp9.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const prefix2 = (rec & 1) === 0 ? "02" : "03";
      const R = Point5.fromHex(prefix2 + numToNByteStr(radj));
      const ir = invN(radj);
      const u1 = modN5(-h * ir);
      const u2 = modN5(s * ir);
      const Q = Point5.BASE.multiplyAndAddUnsafe(R, u1, u2);
      if (!Q)
        throw new Error("point at infinify");
      Q.assertValidity();
      return Q;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, modN5(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes3(this.toDERHex());
    }
    toDERHex() {
      return DER3.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes3(this.toCompactHex());
    }
    toCompactHex() {
      return numToNByteStr(this.r) + numToNByteStr(this.s);
    }
  }
  const utils5 = {
    isValidPrivateKey(privateKey) {
      try {
        normPrivateKeyToScalar(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    normPrivateKeyToScalar,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const length = getMinHashLength3(CURVE.n);
      return mapHashToField3(CURVE.randomBytes(length), CURVE.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(windowSize = 8, point = Point5.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  function getPublicKey(privateKey, isCompressed = true) {
    return Point5.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    const arr = item instanceof Uint8Array;
    const str = typeof item === "string";
    const len = (arr || str) && item.length;
    if (arr)
      return len === compressedLen || len === uncompressedLen;
    if (str)
      return len === 2 * compressedLen || len === 2 * uncompressedLen;
    if (item instanceof Point5)
      return true;
    return false;
  }
  function getSharedSecret(privateA, publicB, isCompressed = true) {
    if (isProbPub(privateA))
      throw new Error("first arg must be private key");
    if (!isProbPub(publicB))
      throw new Error("second arg must be public key");
    const b = Point5.fromHex(publicB);
    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
  }
  const bits2int = CURVE.bits2int || function(bytes5) {
    const num = bytesToNumberBE3(bytes5);
    const delta = bytes5.length * 8 - CURVE.nBitLength;
    return delta > 0 ? num >> BigInt(delta) : num;
  };
  const bits2int_modN = CURVE.bits2int_modN || function(bytes5) {
    return modN5(bits2int(bytes5));
  };
  const ORDER_MASK = bitMask3(CURVE.nBitLength);
  function int2octets(num) {
    if (typeof num !== "bigint")
      throw new Error("bigint expected");
    if (!(_0n32 <= num && num < ORDER_MASK))
      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
    return numberToBytesBE3(num, CURVE.nByteLength);
  }
  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
    if (["recovered", "canonical"].some((k) => k in opts))
      throw new Error("sign() legacy options not supported");
    const { hash: hash5, randomBytes: randomBytes5 } = CURVE;
    let { lowS, prehash, extraEntropy: ent } = opts;
    if (lowS == null)
      lowS = true;
    msgHash = ensureBytes3("msgHash", msgHash);
    if (prehash)
      msgHash = ensureBytes3("prehashed msgHash", hash5(msgHash));
    const h1int = bits2int_modN(msgHash);
    const d = normPrivateKeyToScalar(privateKey);
    const seedArgs = [int2octets(d), int2octets(h1int)];
    if (ent != null) {
      const e = ent === true ? randomBytes5(Fp9.BYTES) : ent;
      seedArgs.push(ensureBytes3("extraEntropy", e));
    }
    const seed = concatBytes6(...seedArgs);
    const m = h1int;
    function k2sig(kBytes) {
      const k = bits2int(kBytes);
      if (!isWithinCurveOrder(k))
        return;
      const ik = invN(k);
      const q = Point5.BASE.multiply(k).toAffine();
      const r = modN5(q.x);
      if (r === _0n32)
        return;
      const s = modN5(ik * modN5(m + r * d));
      if (s === _0n32)
        return;
      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n32);
      let normS = s;
      if (lowS && isBiggerThanHalfOrder(s)) {
        normS = normalizeS(s);
        recovery ^= 1;
      }
      return new Signature(r, normS, recovery);
    }
    return { seed, k2sig };
  }
  const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
  const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
  function sign2(msgHash, privKey, opts = defaultSigOpts) {
    const { seed, k2sig } = prepSig(msgHash, privKey, opts);
    const C = CURVE;
    const drbg = createHmacDrbg3(C.hash.outputLen, C.nByteLength, C.hmac);
    return drbg(seed, k2sig);
  }
  Point5.BASE._setWindowSize(8);
  function verify(signature, msgHash, publicKey2, opts = defaultVerOpts) {
    var _a;
    const sg = signature;
    msgHash = ensureBytes3("msgHash", msgHash);
    publicKey2 = ensureBytes3("publicKey", publicKey2);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    const { lowS, prehash } = opts;
    let _sig = void 0;
    let P;
    try {
      if (typeof sg === "string" || sg instanceof Uint8Array) {
        try {
          _sig = Signature.fromDER(sg);
        } catch (derError) {
          if (!(derError instanceof DER3.Err))
            throw derError;
          _sig = Signature.fromCompact(sg);
        }
      } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
        const { r: r2, s: s2 } = sg;
        _sig = new Signature(r2, s2);
      } else {
        throw new Error("PARSE");
      }
      P = Point5.fromHex(publicKey2);
    } catch (error) {
      if (error.message === "PARSE")
        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
      return false;
    }
    if (lowS && _sig.hasHighS())
      return false;
    if (prehash)
      msgHash = CURVE.hash(msgHash);
    const { r, s } = _sig;
    const h = bits2int_modN(msgHash);
    const is = invN(s);
    const u1 = modN5(h * is);
    const u2 = modN5(r * is);
    const R = (_a = Point5.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a.toAffine();
    if (!R)
      return false;
    const v = modN5(R.x);
    return v === r;
  }
  return {
    CURVE,
    getPublicKey,
    getSharedSecret,
    sign: sign2,
    verify,
    ProjectivePoint: Point5,
    Signature,
    utils: utils5
  };
}
function SWUFpSqrtRatio3(Fp9, Z) {
  const q = Fp9.ORDER;
  let l19 = _0n32;
  for (let o = q - _1n32; o % _2n26 === _0n32; o /= _2n26)
    l19 += _1n32;
  const c1 = l19;
  const _2n_pow_c1_1 = _2n26 << c1 - _1n32 - _1n32;
  const _2n_pow_c1 = _2n_pow_c1_1 * _2n26;
  const c2 = (q - _1n32) / _2n_pow_c1;
  const c3 = (c2 - _1n32) / _2n26;
  const c4 = _2n_pow_c1 - _1n32;
  const c5 = _2n_pow_c1_1;
  const c6 = Fp9.pow(Z, c2);
  const c7 = Fp9.pow(Z, (c2 + _1n32) / _2n26);
  let sqrtRatio = (u, v) => {
    let tv1 = c6;
    let tv2 = Fp9.pow(v, c4);
    let tv3 = Fp9.sqr(tv2);
    tv3 = Fp9.mul(tv3, v);
    let tv5 = Fp9.mul(u, tv3);
    tv5 = Fp9.pow(tv5, c3);
    tv5 = Fp9.mul(tv5, tv2);
    tv2 = Fp9.mul(tv5, v);
    tv3 = Fp9.mul(tv5, u);
    let tv4 = Fp9.mul(tv3, tv2);
    tv5 = Fp9.pow(tv4, c5);
    let isQR = Fp9.eql(tv5, Fp9.ONE);
    tv2 = Fp9.mul(tv3, c7);
    tv5 = Fp9.mul(tv4, tv1);
    tv3 = Fp9.cmov(tv2, tv3, isQR);
    tv4 = Fp9.cmov(tv5, tv4, isQR);
    for (let i = c1; i > _1n32; i--) {
      let tv52 = i - _2n26;
      tv52 = _2n26 << tv52 - _1n32;
      let tvv5 = Fp9.pow(tv4, tv52);
      const e1 = Fp9.eql(tvv5, Fp9.ONE);
      tv2 = Fp9.mul(tv3, tv1);
      tv1 = Fp9.mul(tv1, tv1);
      tvv5 = Fp9.mul(tv4, tv1);
      tv3 = Fp9.cmov(tv2, tv3, e1);
      tv4 = Fp9.cmov(tvv5, tv4, e1);
    }
    return { isValid: isQR, value: tv3 };
  };
  if (Fp9.ORDER % _4n15 === _3n15) {
    const c12 = (Fp9.ORDER - _3n15) / _4n15;
    const c22 = Fp9.sqrt(Fp9.neg(Z));
    sqrtRatio = (u, v) => {
      let tv1 = Fp9.sqr(v);
      const tv2 = Fp9.mul(u, v);
      tv1 = Fp9.mul(tv1, tv2);
      let y1 = Fp9.pow(tv1, c12);
      y1 = Fp9.mul(y1, tv2);
      const y2 = Fp9.mul(y1, c22);
      const tv3 = Fp9.mul(Fp9.sqr(y1), v);
      const isQR = Fp9.eql(tv3, u);
      let y = Fp9.cmov(y2, y1, isQR);
      return { isValid: isQR, value: y };
    };
  }
  return sqrtRatio;
}
function mapToCurveSimpleSWU3(Fp9, opts) {
  validateField3(Fp9);
  if (!Fp9.isValid(opts.A) || !Fp9.isValid(opts.B) || !Fp9.isValid(opts.Z))
    throw new Error("mapToCurveSimpleSWU: invalid opts");
  const sqrtRatio = SWUFpSqrtRatio3(Fp9, opts.Z);
  if (!Fp9.isOdd)
    throw new Error("Fp.isOdd is not implemented!");
  return (u) => {
    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
    tv1 = Fp9.sqr(u);
    tv1 = Fp9.mul(tv1, opts.Z);
    tv2 = Fp9.sqr(tv1);
    tv2 = Fp9.add(tv2, tv1);
    tv3 = Fp9.add(tv2, Fp9.ONE);
    tv3 = Fp9.mul(tv3, opts.B);
    tv4 = Fp9.cmov(opts.Z, Fp9.neg(tv2), !Fp9.eql(tv2, Fp9.ZERO));
    tv4 = Fp9.mul(tv4, opts.A);
    tv2 = Fp9.sqr(tv3);
    tv6 = Fp9.sqr(tv4);
    tv5 = Fp9.mul(tv6, opts.A);
    tv2 = Fp9.add(tv2, tv5);
    tv2 = Fp9.mul(tv2, tv3);
    tv6 = Fp9.mul(tv6, tv4);
    tv5 = Fp9.mul(tv6, opts.B);
    tv2 = Fp9.add(tv2, tv5);
    x = Fp9.mul(tv1, tv3);
    const { isValid, value } = sqrtRatio(tv2, tv6);
    y = Fp9.mul(tv1, u);
    y = Fp9.mul(y, value);
    x = Fp9.cmov(x, tv3, isValid);
    y = Fp9.cmov(y, value, isValid);
    const e1 = Fp9.isOdd(u) === Fp9.isOdd(y);
    y = Fp9.cmov(Fp9.neg(y), y, e1);
    x = Fp9.div(x, tv4);
    return { x, y };
  };
}

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/abstract/hash-to-curve.js
init_shim();
function validateDST3(dst) {
  if (dst instanceof Uint8Array)
    return dst;
  if (typeof dst === "string")
    return utf8ToBytes6(dst);
  throw new Error("DST must be Uint8Array or string");
}
var os2ip3 = bytesToNumberBE3;
function i2osp3(value, length) {
  if (value < 0 || value >= 1 << 8 * length) {
    throw new Error(`bad I2OSP call: value=${value} length=${length}`);
  }
  const res = Array.from({ length }).fill(0);
  for (let i = length - 1; i >= 0; i--) {
    res[i] = value & 255;
    value >>>= 8;
  }
  return new Uint8Array(res);
}
function strxor3(a, b) {
  const arr = new Uint8Array(a.length);
  for (let i = 0; i < a.length; i++) {
    arr[i] = a[i] ^ b[i];
  }
  return arr;
}
function isBytes3(item) {
  if (!(item instanceof Uint8Array))
    throw new Error("Uint8Array expected");
}
function isNum3(item) {
  if (!Number.isSafeInteger(item))
    throw new Error("number expected");
}
function expand_message_xmd3(msg, DST, lenInBytes, H) {
  isBytes3(msg);
  isBytes3(DST);
  isNum3(lenInBytes);
  if (DST.length > 255)
    DST = H(concatBytes6(utf8ToBytes6("H2C-OVERSIZE-DST-"), DST));
  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
  const ell = Math.ceil(lenInBytes / b_in_bytes);
  if (ell > 255)
    throw new Error("Invalid xmd length");
  const DST_prime = concatBytes6(DST, i2osp3(DST.length, 1));
  const Z_pad = i2osp3(0, r_in_bytes);
  const l_i_b_str = i2osp3(lenInBytes, 2);
  const b = new Array(ell);
  const b_0 = H(concatBytes6(Z_pad, msg, l_i_b_str, i2osp3(0, 1), DST_prime));
  b[0] = H(concatBytes6(b_0, i2osp3(1, 1), DST_prime));
  for (let i = 1; i <= ell; i++) {
    const args = [strxor3(b_0, b[i - 1]), i2osp3(i + 1, 1), DST_prime];
    b[i] = H(concatBytes6(...args));
  }
  const pseudo_random_bytes = concatBytes6(...b);
  return pseudo_random_bytes.slice(0, lenInBytes);
}
function expand_message_xof3(msg, DST, lenInBytes, k, H) {
  isBytes3(msg);
  isBytes3(DST);
  isNum3(lenInBytes);
  if (DST.length > 255) {
    const dkLen = Math.ceil(2 * k / 8);
    DST = H.create({ dkLen }).update(utf8ToBytes6("H2C-OVERSIZE-DST-")).update(DST).digest();
  }
  if (lenInBytes > 65535 || DST.length > 255)
    throw new Error("expand_message_xof: invalid lenInBytes");
  return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp3(lenInBytes, 2)).update(DST).update(i2osp3(DST.length, 1)).digest();
}
function hash_to_field3(msg, count2, options) {
  validateObject3(options, {
    DST: "stringOrUint8Array",
    p: "bigint",
    m: "isSafeInteger",
    k: "isSafeInteger",
    hash: "hash"
  });
  const { p, k, m, hash: hash5, expand: expand3, DST: _DST } = options;
  isBytes3(msg);
  isNum3(count2);
  const DST = validateDST3(_DST);
  const log2p = p.toString(2).length;
  const L = Math.ceil((log2p + k) / 8);
  const len_in_bytes = count2 * m * L;
  let prb;
  if (expand3 === "xmd") {
    prb = expand_message_xmd3(msg, DST, len_in_bytes, hash5);
  } else if (expand3 === "xof") {
    prb = expand_message_xof3(msg, DST, len_in_bytes, k, hash5);
  } else if (expand3 === "_internal_pass") {
    prb = msg;
  } else {
    throw new Error('expand must be "xmd" or "xof"');
  }
  const u = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const e = new Array(m);
    for (let j = 0; j < m; j++) {
      const elm_offset = L * (j + i * m);
      const tv = prb.subarray(elm_offset, elm_offset + L);
      e[j] = mod3(os2ip3(tv), p);
    }
    u[i] = e;
  }
  return u;
}
function isogenyMap3(field, map2) {
  const COEFF = map2.map((i) => Array.from(i).reverse());
  return (x, y) => {
    const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
    x = field.div(xNum, xDen);
    y = field.mul(y, field.div(yNum, yDen));
    return { x, y };
  };
}
function createHasher3(Point5, mapToCurve, def) {
  if (typeof mapToCurve !== "function")
    throw new Error("mapToCurve() must be defined");
  return {
    // Encodes byte string to elliptic curve.
    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    hashToCurve(msg, options) {
      const u = hash_to_field3(msg, 2, { ...def, DST: def.DST, ...options });
      const u0 = Point5.fromAffine(mapToCurve(u[0]));
      const u1 = Point5.fromAffine(mapToCurve(u[1]));
      const P = u0.add(u1).clearCofactor();
      P.assertValidity();
      return P;
    },
    // Encodes byte string to elliptic curve.
    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    encodeToCurve(msg, options) {
      const u = hash_to_field3(msg, 1, { ...def, DST: def.encodeDST, ...options });
      const P = Point5.fromAffine(mapToCurve(u[0])).clearCofactor();
      P.assertValidity();
      return P;
    }
  };
}

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/_shortw_utils.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/hmac.js
init_shim();
var HMAC3 = class extends Hash3 {
  constructor(hash5, _key) {
    super();
    this.finished = false;
    this.destroyed = false;
    hash3(hash5);
    const key = toBytes3(_key);
    this.iHash = hash5.create();
    if (typeof this.iHash.update !== "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen;
    this.outputLen = this.iHash.outputLen;
    const blockLen = this.blockLen;
    const pad = new Uint8Array(blockLen);
    pad.set(key.length > blockLen ? hash5.create().update(key).digest() : key);
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54;
    this.iHash.update(pad);
    this.oHash = hash5.create();
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54 ^ 92;
    this.oHash.update(pad);
    pad.fill(0);
  }
  update(buf) {
    exists3(this);
    this.iHash.update(buf);
    return this;
  }
  digestInto(out) {
    exists3(this);
    bytes3(out, this.outputLen);
    this.finished = true;
    this.iHash.digestInto(out);
    this.oHash.update(out);
    this.oHash.digestInto(out);
    this.destroy();
  }
  digest() {
    const out = new Uint8Array(this.oHash.outputLen);
    this.digestInto(out);
    return out;
  }
  _cloneInto(to) {
    to || (to = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
    to = to;
    to.finished = finished;
    to.destroyed = destroyed;
    to.blockLen = blockLen;
    to.outputLen = outputLen;
    to.oHash = oHash._cloneInto(to.oHash);
    to.iHash = iHash._cloneInto(to.iHash);
    return to;
  }
  destroy() {
    this.destroyed = true;
    this.oHash.destroy();
    this.iHash.destroy();
  }
};
var hmac3 = (hash5, key, message) => new HMAC3(hash5, key).update(message).digest();
hmac3.create = (hash5, key) => new HMAC3(hash5, key);

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/_shortw_utils.js
function getHash3(hash5) {
  return {
    hash: hash5,
    hmac: (key, ...msgs) => hmac3(hash5, key, concatBytes5(...msgs)),
    randomBytes: randomBytes3
  };
}
function createCurve3(curveDef, defHash) {
  const create = (hash5) => weierstrass3({ ...curveDef, ...getHash3(hash5) });
  return Object.freeze({ ...create(defHash), create });
}

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/secp256k1.js
var secp256k1P3 = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
var secp256k1N3 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var _1n33 = BigInt(1);
var _2n27 = BigInt(2);
var divNearest3 = (a, b) => (a + b / _2n27) / b;
function sqrtMod3(y) {
  const P = secp256k1P3;
  const _3n19 = BigInt(3), _6n11 = BigInt(6), _11n5 = BigInt(11), _22n = BigInt(22);
  const _23n5 = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b2 = y * y * y % P;
  const b3 = b2 * b2 * y % P;
  const b6 = pow23(b3, _3n19, P) * b3 % P;
  const b9 = pow23(b6, _3n19, P) * b3 % P;
  const b11 = pow23(b9, _2n27, P) * b2 % P;
  const b22 = pow23(b11, _11n5, P) * b11 % P;
  const b44 = pow23(b22, _22n, P) * b22 % P;
  const b88 = pow23(b44, _44n, P) * b44 % P;
  const b176 = pow23(b88, _88n, P) * b88 % P;
  const b220 = pow23(b176, _44n, P) * b44 % P;
  const b223 = pow23(b220, _3n19, P) * b3 % P;
  const t1 = pow23(b223, _23n5, P) * b22 % P;
  const t2 = pow23(t1, _6n11, P) * b2 % P;
  const root = pow23(t2, _2n27, P);
  if (!Fp5.eql(Fp5.sqr(root), y))
    throw new Error("Cannot find square root");
  return root;
}
var Fp5 = Field3(secp256k1P3, void 0, void 0, { sqrt: sqrtMod3 });
var secp256k13 = createCurve3({
  a: BigInt(0),
  b: BigInt(7),
  Fp: Fp5,
  n: secp256k1N3,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: true,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (k) => {
      const n = secp256k1N3;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n33 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b2 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest3(b2 * k, n);
      const c2 = divNearest3(-b1 * k, n);
      let k1 = mod3(k - c1 * a1 - c2 * a2, n);
      let k2 = mod3(-c1 * b1 - c2 * b2, n);
      const k1neg = k1 > POW_2_128;
      const k2neg = k2 > POW_2_128;
      if (k1neg)
        k1 = n - k1;
      if (k2neg)
        k2 = n - k2;
      if (k1 > POW_2_128 || k2 > POW_2_128) {
        throw new Error("splitScalar: Endomorphism failed, k=" + k);
      }
      return { k1neg, k1, k2neg, k2 };
    }
  }
}, sha2564);
var _0n33 = BigInt(0);
var fe3 = (x) => typeof x === "bigint" && _0n33 < x && x < secp256k1P3;
var ge3 = (x) => typeof x === "bigint" && _0n33 < x && x < secp256k1N3;
var TAGGED_HASH_PREFIXES3 = {};
function taggedHash3(tag, ...messages) {
  let tagP = TAGGED_HASH_PREFIXES3[tag];
  if (tagP === void 0) {
    const tagH = sha2564(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
    tagP = concatBytes6(tagH, tagH);
    TAGGED_HASH_PREFIXES3[tag] = tagP;
  }
  return sha2564(concatBytes6(tagP, ...messages));
}
var pointToBytes3 = (point) => point.toRawBytes(true).slice(1);
var numTo32b3 = (n) => numberToBytesBE3(n, 32);
var modP3 = (x) => mod3(x, secp256k1P3);
var modN3 = (x) => mod3(x, secp256k1N3);
var Point3 = secp256k13.ProjectivePoint;
var GmulAdd3 = (Q, a, b) => Point3.BASE.multiplyAndAddUnsafe(Q, a, b);
function schnorrGetExtPubKey3(priv) {
  let d_ = secp256k13.utils.normPrivateKeyToScalar(priv);
  let p = Point3.fromPrivateKey(d_);
  const scalar = p.hasEvenY() ? d_ : modN3(-d_);
  return { scalar, bytes: pointToBytes3(p) };
}
function lift_x3(x) {
  if (!fe3(x))
    throw new Error("bad x: need 0 < x < p");
  const xx = modP3(x * x);
  const c = modP3(xx * x + BigInt(7));
  let y = sqrtMod3(c);
  if (y % _2n27 !== _0n33)
    y = modP3(-y);
  const p = new Point3(x, y, _1n33);
  p.assertValidity();
  return p;
}
function challenge3(...args) {
  return modN3(bytesToNumberBE3(taggedHash3("BIP0340/challenge", ...args)));
}
function schnorrGetPublicKey3(privateKey) {
  return schnorrGetExtPubKey3(privateKey).bytes;
}
function schnorrSign3(message, privateKey, auxRand = randomBytes3(32)) {
  const m = ensureBytes3("message", message);
  const { bytes: px, scalar: d } = schnorrGetExtPubKey3(privateKey);
  const a = ensureBytes3("auxRand", auxRand, 32);
  const t = numTo32b3(d ^ bytesToNumberBE3(taggedHash3("BIP0340/aux", a)));
  const rand = taggedHash3("BIP0340/nonce", t, px, m);
  const k_ = modN3(bytesToNumberBE3(rand));
  if (k_ === _0n33)
    throw new Error("sign failed: k is zero");
  const { bytes: rx, scalar: k } = schnorrGetExtPubKey3(k_);
  const e = challenge3(rx, px, m);
  const sig2 = new Uint8Array(64);
  sig2.set(rx, 0);
  sig2.set(numTo32b3(modN3(k + e * d)), 32);
  if (!schnorrVerify3(sig2, m, px))
    throw new Error("sign: Invalid signature produced");
  return sig2;
}
function schnorrVerify3(signature, message, publicKey2) {
  const sig2 = ensureBytes3("signature", signature, 64);
  const m = ensureBytes3("message", message);
  const pub = ensureBytes3("publicKey", publicKey2, 32);
  try {
    const P = lift_x3(bytesToNumberBE3(pub));
    const r = bytesToNumberBE3(sig2.subarray(0, 32));
    if (!fe3(r))
      return false;
    const s = bytesToNumberBE3(sig2.subarray(32, 64));
    if (!ge3(s))
      return false;
    const e = challenge3(numTo32b3(r), pointToBytes3(P), m);
    const R = GmulAdd3(P, s, modN3(-e));
    if (!R || !R.hasEvenY() || R.toAffine().x !== r)
      return false;
    return true;
  } catch (error) {
    return false;
  }
}
var schnorr3 = (() => ({
  getPublicKey: schnorrGetPublicKey3,
  sign: schnorrSign3,
  verify: schnorrVerify3,
  utils: {
    randomPrivateKey: secp256k13.utils.randomPrivateKey,
    lift_x: lift_x3,
    pointToBytes: pointToBytes3,
    numberToBytesBE: numberToBytesBE3,
    bytesToNumberBE: bytesToNumberBE3,
    taggedHash: taggedHash3,
    mod: mod3
  }
}))();
var isoMap3 = (() => isogenyMap3(Fp5, [
  // xNum
  [
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
    "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
    "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
  ],
  // xDen
  [
    "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
    "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
    "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
    "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
    "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
  ],
  // yDen
  [
    "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
    "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
    "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((i) => i.map((j) => BigInt(j)))))();
var mapSWU3 = (() => mapToCurveSimpleSWU3(Fp5, {
  A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
  B: BigInt("1771"),
  Z: Fp5.create(BigInt("-11"))
}))();
var htf5 = (() => createHasher3(secp256k13.ProjectivePoint, (scalars) => {
  const { x, y } = mapSWU3(Fp5.create(scalars[0]));
  return isoMap3(x, y);
}, {
  DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
  encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
  p: Fp5.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha2564
}))();
var hashToCurve5 = (() => htf5.hashToCurve)();
var encodeToCurve5 = (() => htf5.encodeToCurve)();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/secp256k1/pair/fromSeed.js
function secp256k1PairFromSeed3(seed, onlyJs) {
  if (seed.length !== 32) {
    throw new Error("Expected valid 32-byte private key as a seed");
  }
  if (!hasBigInt6 || !onlyJs && isReady()) {
    const full = secp256k1FromSeed(seed);
    const publicKey2 = full.slice(32);
    if (u8aEmpty6(publicKey2)) {
      throw new Error("Invalid publicKey generated from WASM interface");
    }
    return {
      publicKey: publicKey2,
      secretKey: full.slice(0, 32)
    };
  }
  return {
    publicKey: secp256k13.getPublicKey(seed, true),
    secretKey: seed
  };
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/key/hdkdDerive.js
init_shim();
function createSeedDeriveFn3(fromSeed, derive2) {
  return (keypair, { chainCode, isHard }) => {
    if (!isHard) {
      throw new Error("A soft key was found in the path and is not supported");
    }
    return fromSeed(derive2(keypair.secretKey.subarray(0, 32), chainCode));
  };
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/key/hdkdEcdsa.js
var keyHdkdEcdsa3 = createSeedDeriveFn3(secp256k1PairFromSeed3, secp256k1DeriveHard3);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/key/hdkdEd25519.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/ed25519/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/ed25519/deriveHard.js
init_shim();
var HDKD6 = compactAddLength6(stringToU8a6("Ed25519HDKD"));
function ed25519DeriveHard3(seed, chainCode) {
  if (!isU8a6(chainCode) || chainCode.length !== 32) {
    throw new Error("Invalid chainCode passed to derive");
  }
  return blake2AsU8a3(u8aConcat6(HDKD6, seed, chainCode));
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/ed25519/pair/fromRandom.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/random/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/random/asNumber.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/random/asU8a.js
init_shim();
function randomAsU8a3(length = 32) {
  return getRandomValues(new Uint8Array(length));
}
var randomAsHex3 = createAsHex3(randomAsU8a3);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/random/asNumber.js
var BN_533 = new import_bn64.default(9007199254740991);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/ed25519/pair/fromSeed.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/ed25519.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/sha512.js
init_shim();
var [SHA512_Kh3, SHA512_Kl3] = (() => u64_default3.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n) => BigInt(n))))();
var SHA512_W_H3 = new Uint32Array(80);
var SHA512_W_L3 = new Uint32Array(80);
var SHA5123 = class extends SHA23 {
  constructor() {
    super(128, 64, 16, false);
    this.Ah = 1779033703 | 0;
    this.Al = 4089235720 | 0;
    this.Bh = 3144134277 | 0;
    this.Bl = 2227873595 | 0;
    this.Ch = 1013904242 | 0;
    this.Cl = 4271175723 | 0;
    this.Dh = 2773480762 | 0;
    this.Dl = 1595750129 | 0;
    this.Eh = 1359893119 | 0;
    this.El = 2917565137 | 0;
    this.Fh = 2600822924 | 0;
    this.Fl = 725511199 | 0;
    this.Gh = 528734635 | 0;
    this.Gl = 4215389547 | 0;
    this.Hh = 1541459225 | 0;
    this.Hl = 327033209 | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4) {
      SHA512_W_H3[i] = view.getUint32(offset);
      SHA512_W_L3[i] = view.getUint32(offset += 4);
    }
    for (let i = 16; i < 80; i++) {
      const W15h = SHA512_W_H3[i - 15] | 0;
      const W15l = SHA512_W_L3[i - 15] | 0;
      const s0h = u64_default3.rotrSH(W15h, W15l, 1) ^ u64_default3.rotrSH(W15h, W15l, 8) ^ u64_default3.shrSH(W15h, W15l, 7);
      const s0l = u64_default3.rotrSL(W15h, W15l, 1) ^ u64_default3.rotrSL(W15h, W15l, 8) ^ u64_default3.shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H3[i - 2] | 0;
      const W2l = SHA512_W_L3[i - 2] | 0;
      const s1h = u64_default3.rotrSH(W2h, W2l, 19) ^ u64_default3.rotrBH(W2h, W2l, 61) ^ u64_default3.shrSH(W2h, W2l, 6);
      const s1l = u64_default3.rotrSL(W2h, W2l, 19) ^ u64_default3.rotrBL(W2h, W2l, 61) ^ u64_default3.shrSL(W2h, W2l, 6);
      const SUMl = u64_default3.add4L(s0l, s1l, SHA512_W_L3[i - 7], SHA512_W_L3[i - 16]);
      const SUMh = u64_default3.add4H(SUMl, s0h, s1h, SHA512_W_H3[i - 7], SHA512_W_H3[i - 16]);
      SHA512_W_H3[i] = SUMh | 0;
      SHA512_W_L3[i] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i = 0; i < 80; i++) {
      const sigma1h = u64_default3.rotrSH(Eh, El, 14) ^ u64_default3.rotrSH(Eh, El, 18) ^ u64_default3.rotrBH(Eh, El, 41);
      const sigma1l = u64_default3.rotrSL(Eh, El, 14) ^ u64_default3.rotrSL(Eh, El, 18) ^ u64_default3.rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = u64_default3.add5L(Hl, sigma1l, CHIl, SHA512_Kl3[i], SHA512_W_L3[i]);
      const T1h = u64_default3.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh3[i], SHA512_W_H3[i]);
      const T1l = T1ll | 0;
      const sigma0h = u64_default3.rotrSH(Ah, Al, 28) ^ u64_default3.rotrBH(Ah, Al, 34) ^ u64_default3.rotrBH(Ah, Al, 39);
      const sigma0l = u64_default3.rotrSL(Ah, Al, 28) ^ u64_default3.rotrBL(Ah, Al, 34) ^ u64_default3.rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = u64_default3.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = u64_default3.add3L(T1l, sigma0l, MAJl);
      Ah = u64_default3.add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = u64_default3.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = u64_default3.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = u64_default3.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = u64_default3.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = u64_default3.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = u64_default3.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = u64_default3.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = u64_default3.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    SHA512_W_H3.fill(0);
    SHA512_W_L3.fill(0);
  }
  destroy() {
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var SHA512_2243 = class extends SHA5123 {
  constructor() {
    super();
    this.Ah = 2352822216 | 0;
    this.Al = 424955298 | 0;
    this.Bh = 1944164710 | 0;
    this.Bl = 2312950998 | 0;
    this.Ch = 502970286 | 0;
    this.Cl = 855612546 | 0;
    this.Dh = 1738396948 | 0;
    this.Dl = 1479516111 | 0;
    this.Eh = 258812777 | 0;
    this.El = 2077511080 | 0;
    this.Fh = 2011393907 | 0;
    this.Fl = 79989058 | 0;
    this.Gh = 1067287976 | 0;
    this.Gl = 1780299464 | 0;
    this.Hh = 286451373 | 0;
    this.Hl = 2446758561 | 0;
    this.outputLen = 28;
  }
};
var SHA512_2563 = class extends SHA5123 {
  constructor() {
    super();
    this.Ah = 573645204 | 0;
    this.Al = 4230739756 | 0;
    this.Bh = 2673172387 | 0;
    this.Bl = 3360449730 | 0;
    this.Ch = 596883563 | 0;
    this.Cl = 1867755857 | 0;
    this.Dh = 2520282905 | 0;
    this.Dl = 1497426621 | 0;
    this.Eh = 2519219938 | 0;
    this.El = 2827943907 | 0;
    this.Fh = 3193839141 | 0;
    this.Fl = 1401305490 | 0;
    this.Gh = 721525244 | 0;
    this.Gl = 746961066 | 0;
    this.Hh = 246885852 | 0;
    this.Hl = 2177182882 | 0;
    this.outputLen = 32;
  }
};
var SHA3843 = class extends SHA5123 {
  constructor() {
    super();
    this.Ah = 3418070365 | 0;
    this.Al = 3238371032 | 0;
    this.Bh = 1654270250 | 0;
    this.Bl = 914150663 | 0;
    this.Ch = 2438529370 | 0;
    this.Cl = 812702999 | 0;
    this.Dh = 355462360 | 0;
    this.Dl = 4144912697 | 0;
    this.Eh = 1731405415 | 0;
    this.El = 4290775857 | 0;
    this.Fh = 2394180231 | 0;
    this.Fl = 1750603025 | 0;
    this.Gh = 3675008525 | 0;
    this.Gl = 1694076839 | 0;
    this.Hh = 1203062813 | 0;
    this.Hl = 3204075428 | 0;
    this.outputLen = 48;
  }
};
var sha5124 = wrapConstructor3(() => new SHA5123());
var sha512_2243 = wrapConstructor3(() => new SHA512_2243());
var sha512_2563 = wrapConstructor3(() => new SHA512_2563());
var sha3843 = wrapConstructor3(() => new SHA3843());

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/abstract/edwards.js
init_shim();
var _0n34 = BigInt(0);
var _1n34 = BigInt(1);
var _2n28 = BigInt(2);
var _8n15 = BigInt(8);
var VERIFY_DEFAULT3 = { zip215: true };
function validateOpts8(curve) {
  const opts = validateBasic3(curve);
  validateObject3(curve, {
    hash: "function",
    a: "bigint",
    d: "bigint",
    randomBytes: "function"
  }, {
    adjustScalarBytes: "function",
    domain: "function",
    uvRatio: "function",
    mapToCurve: "function"
  });
  return Object.freeze({ ...opts });
}
function twistedEdwards3(curveDef) {
  const CURVE = validateOpts8(curveDef);
  const { Fp: Fp9, n: CURVE_ORDER, prehash, hash: cHash, randomBytes: randomBytes5, nByteLength, h: cofactor } = CURVE;
  const MASK = _2n28 << BigInt(nByteLength * 8) - _1n34;
  const modP5 = Fp9.create;
  const uvRatio5 = CURVE.uvRatio || ((u, v) => {
    try {
      return { isValid: true, value: Fp9.sqrt(u * Fp9.inv(v)) };
    } catch (e) {
      return { isValid: false, value: _0n34 };
    }
  });
  const adjustScalarBytes5 = CURVE.adjustScalarBytes || ((bytes5) => bytes5);
  const domain = CURVE.domain || ((data, ctx, phflag) => {
    if (ctx.length || phflag)
      throw new Error("Contexts/pre-hash are not supported");
    return data;
  });
  const inBig = (n) => typeof n === "bigint" && _0n34 < n;
  const inRange = (n, max2) => inBig(n) && inBig(max2) && n < max2;
  const in0MaskRange = (n) => n === _0n34 || inRange(n, MASK);
  function assertInRange(n, max2) {
    if (inRange(n, max2))
      return n;
    throw new Error(`Expected valid scalar < ${max2}, got ${typeof n} ${n}`);
  }
  function assertGE0(n) {
    return n === _0n34 ? n : assertInRange(n, CURVE_ORDER);
  }
  const pointPrecomputes = /* @__PURE__ */ new Map();
  function isPoint(other) {
    if (!(other instanceof Point5))
      throw new Error("ExtendedPoint expected");
  }
  class Point5 {
    constructor(ex, ey, ez, et) {
      this.ex = ex;
      this.ey = ey;
      this.ez = ez;
      this.et = et;
      if (!in0MaskRange(ex))
        throw new Error("x required");
      if (!in0MaskRange(ey))
        throw new Error("y required");
      if (!in0MaskRange(ez))
        throw new Error("z required");
      if (!in0MaskRange(et))
        throw new Error("t required");
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(p) {
      if (p instanceof Point5)
        throw new Error("extended point not allowed");
      const { x, y } = p || {};
      if (!in0MaskRange(x) || !in0MaskRange(y))
        throw new Error("invalid affine point");
      return new Point5(x, y, _1n34, modP5(x * y));
    }
    static normalizeZ(points) {
      const toInv = Fp9.invertBatch(points.map((p) => p.ez));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point5.fromAffine);
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    // Not required for fromHex(), which always creates valid points.
    // Could be useful for fromAffine().
    assertValidity() {
      const { a, d } = CURVE;
      if (this.is0())
        throw new Error("bad point: ZERO");
      const { ex: X, ey: Y, ez: Z, et: T } = this;
      const X2 = modP5(X * X);
      const Y2 = modP5(Y * Y);
      const Z2 = modP5(Z * Z);
      const Z4 = modP5(Z2 * Z2);
      const aX2 = modP5(X2 * a);
      const left = modP5(Z2 * modP5(aX2 + Y2));
      const right = modP5(Z4 + modP5(d * modP5(X2 * Y2)));
      if (left !== right)
        throw new Error("bad point: equation left != right (1)");
      const XY = modP5(X * Y);
      const ZT = modP5(Z * T);
      if (XY !== ZT)
        throw new Error("bad point: equation left != right (2)");
    }
    // Compare one point to another.
    equals(other) {
      isPoint(other);
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const { ex: X2, ey: Y2, ez: Z2 } = other;
      const X1Z2 = modP5(X1 * Z2);
      const X2Z1 = modP5(X2 * Z1);
      const Y1Z2 = modP5(Y1 * Z2);
      const Y2Z1 = modP5(Y2 * Z1);
      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
    }
    is0() {
      return this.equals(Point5.ZERO);
    }
    negate() {
      return new Point5(modP5(-this.ex), this.ey, this.ez, modP5(-this.et));
    }
    // Fast algo for doubling Extended Point.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
    // Cost: 4M + 4S + 1*a + 6add + 1*2.
    double() {
      const { a } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const A = modP5(X1 * X1);
      const B = modP5(Y1 * Y1);
      const C = modP5(_2n28 * modP5(Z1 * Z1));
      const D = modP5(a * A);
      const x1y1 = X1 + Y1;
      const E = modP5(modP5(x1y1 * x1y1) - A - B);
      const G3 = D + B;
      const F = G3 - C;
      const H = D - B;
      const X3 = modP5(E * F);
      const Y3 = modP5(G3 * H);
      const T3 = modP5(E * H);
      const Z3 = modP5(F * G3);
      return new Point5(X3, Y3, Z3, T3);
    }
    // Fast algo for adding 2 Extended Points.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
    // Cost: 9M + 1*a + 1*d + 7add.
    add(other) {
      isPoint(other);
      const { a, d } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;
      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;
      if (a === BigInt(-1)) {
        const A2 = modP5((Y1 - X1) * (Y2 + X2));
        const B2 = modP5((Y1 + X1) * (Y2 - X2));
        const F2 = modP5(B2 - A2);
        if (F2 === _0n34)
          return this.double();
        const C2 = modP5(Z1 * _2n28 * T2);
        const D2 = modP5(T1 * _2n28 * Z2);
        const E2 = D2 + C2;
        const G4 = B2 + A2;
        const H2 = D2 - C2;
        const X32 = modP5(E2 * F2);
        const Y32 = modP5(G4 * H2);
        const T32 = modP5(E2 * H2);
        const Z32 = modP5(F2 * G4);
        return new Point5(X32, Y32, Z32, T32);
      }
      const A = modP5(X1 * X2);
      const B = modP5(Y1 * Y2);
      const C = modP5(T1 * d * T2);
      const D = modP5(Z1 * Z2);
      const E = modP5((X1 + Y1) * (X2 + Y2) - A - B);
      const F = D - C;
      const G3 = D + C;
      const H = modP5(B - a * A);
      const X3 = modP5(E * F);
      const Y3 = modP5(G3 * H);
      const T3 = modP5(E * H);
      const Z3 = modP5(F * G3);
      return new Point5(X3, Y3, Z3, T3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    wNAF(n) {
      return wnaf.wNAFCached(this, pointPrecomputes, n, Point5.normalizeZ);
    }
    // Constant-time multiplication.
    multiply(scalar) {
      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));
      return Point5.normalizeZ([p, f])[0];
    }
    // Non-constant-time multiplication. Uses double-and-add algorithm.
    // It's faster, but should only be used when you don't care about
    // an exposed private key e.g. sig verification.
    // Does NOT allow scalars higher than CURVE.n.
    multiplyUnsafe(scalar) {
      let n = assertGE0(scalar);
      if (n === _0n34)
        return I;
      if (this.equals(I) || n === _1n34)
        return this;
      if (this.equals(G))
        return this.wNAF(n).p;
      return wnaf.unsafeLadder(this, n);
    }
    // Checks if point is of small order.
    // If you add something to small order point, you will have "dirty"
    // point with torsion component.
    // Multiplies point by cofactor and checks if the result is 0.
    isSmallOrder() {
      return this.multiplyUnsafe(cofactor).is0();
    }
    // Multiplies point by curve order and checks if the result is 0.
    // Returns `false` is the point is dirty.
    isTorsionFree() {
      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
    }
    // Converts Extended point to default (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    toAffine(iz) {
      const { ex: x, ey: y, ez: z } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? _8n15 : Fp9.inv(z);
      const ax = modP5(x * iz);
      const ay = modP5(y * iz);
      const zz = modP5(z * iz);
      if (is0)
        return { x: _0n34, y: _1n34 };
      if (zz !== _1n34)
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    clearCofactor() {
      const { h: cofactor2 } = CURVE;
      if (cofactor2 === _1n34)
        return this;
      return this.multiplyUnsafe(cofactor2);
    }
    // Converts hash string or Uint8Array to Point.
    // Uses algo from RFC8032 5.1.3.
    static fromHex(hex11, zip215 = false) {
      const { d, a } = CURVE;
      const len = Fp9.BYTES;
      hex11 = ensureBytes3("pointHex", hex11, len);
      const normed = hex11.slice();
      const lastByte = hex11[len - 1];
      normed[len - 1] = lastByte & ~128;
      const y = bytesToNumberLE3(normed);
      if (y === _0n34) {
      } else {
        if (zip215)
          assertInRange(y, MASK);
        else
          assertInRange(y, Fp9.ORDER);
      }
      const y2 = modP5(y * y);
      const u = modP5(y2 - _1n34);
      const v = modP5(d * y2 - a);
      let { isValid, value: x } = uvRatio5(u, v);
      if (!isValid)
        throw new Error("Point.fromHex: invalid y coordinate");
      const isXOdd = (x & _1n34) === _1n34;
      const isLastByteOdd = (lastByte & 128) !== 0;
      if (!zip215 && x === _0n34 && isLastByteOdd)
        throw new Error("Point.fromHex: x=0 and x_0=1");
      if (isLastByteOdd !== isXOdd)
        x = modP5(-x);
      return Point5.fromAffine({ x, y });
    }
    static fromPrivateKey(privKey) {
      return getExtendedPublicKey(privKey).point;
    }
    toRawBytes() {
      const { x, y } = this.toAffine();
      const bytes5 = numberToBytesLE3(y, Fp9.BYTES);
      bytes5[bytes5.length - 1] |= x & _1n34 ? 128 : 0;
      return bytes5;
    }
    toHex() {
      return bytesToHex3(this.toRawBytes());
    }
  }
  Point5.BASE = new Point5(CURVE.Gx, CURVE.Gy, _1n34, modP5(CURVE.Gx * CURVE.Gy));
  Point5.ZERO = new Point5(_0n34, _1n34, _1n34, _0n34);
  const { BASE: G, ZERO: I } = Point5;
  const wnaf = wNAF3(Point5, nByteLength * 8);
  function modN5(a) {
    return mod3(a, CURVE_ORDER);
  }
  function modN_LE(hash5) {
    return modN5(bytesToNumberLE3(hash5));
  }
  function getExtendedPublicKey(key) {
    const len = nByteLength;
    key = ensureBytes3("private key", key, len);
    const hashed = ensureBytes3("hashed private key", cHash(key), 2 * len);
    const head = adjustScalarBytes5(hashed.slice(0, len));
    const prefix2 = hashed.slice(len, 2 * len);
    const scalar = modN_LE(head);
    const point = G.multiply(scalar);
    const pointBytes = point.toRawBytes();
    return { head, prefix: prefix2, scalar, point, pointBytes };
  }
  function getPublicKey(privKey) {
    return getExtendedPublicKey(privKey).pointBytes;
  }
  function hashDomainToScalar(context2 = new Uint8Array(), ...msgs) {
    const msg = concatBytes6(...msgs);
    return modN_LE(cHash(domain(msg, ensureBytes3("context", context2), !!prehash)));
  }
  function sign2(msg, privKey, options = {}) {
    msg = ensureBytes3("message", msg);
    if (prehash)
      msg = prehash(msg);
    const { prefix: prefix2, scalar, pointBytes } = getExtendedPublicKey(privKey);
    const r = hashDomainToScalar(options.context, prefix2, msg);
    const R = G.multiply(r).toRawBytes();
    const k = hashDomainToScalar(options.context, R, pointBytes, msg);
    const s = modN5(r + k * scalar);
    assertGE0(s);
    const res = concatBytes6(R, numberToBytesLE3(s, Fp9.BYTES));
    return ensureBytes3("result", res, nByteLength * 2);
  }
  const verifyOpts = VERIFY_DEFAULT3;
  function verify(sig2, msg, publicKey2, options = verifyOpts) {
    const { context: context2, zip215 } = options;
    const len = Fp9.BYTES;
    sig2 = ensureBytes3("signature", sig2, 2 * len);
    msg = ensureBytes3("message", msg);
    if (prehash)
      msg = prehash(msg);
    const s = bytesToNumberLE3(sig2.slice(len, 2 * len));
    let A, R, SB;
    try {
      A = Point5.fromHex(publicKey2, zip215);
      R = Point5.fromHex(sig2.slice(0, len), zip215);
      SB = G.multiplyUnsafe(s);
    } catch (error) {
      return false;
    }
    if (!zip215 && A.isSmallOrder())
      return false;
    const k = hashDomainToScalar(context2, R.toRawBytes(), A.toRawBytes(), msg);
    const RkA = R.add(A.multiplyUnsafe(k));
    return RkA.subtract(SB).clearCofactor().equals(Point5.ZERO);
  }
  G._setWindowSize(8);
  const utils5 = {
    getExtendedPublicKey,
    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.
    randomPrivateKey: () => randomBytes5(Fp9.BYTES),
    /**
     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
     * values. This slows down first getPublicKey() by milliseconds (see Speed section),
     * but allows to speed-up subsequent getPublicKey() calls up to 20x.
     * @param windowSize 2, 4, 8, 16
     */
    precompute(windowSize = 8, point = Point5.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  return {
    CURVE,
    getPublicKey,
    sign: sign2,
    verify,
    ExtendedPoint: Point5,
    utils: utils5
  };
}

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/abstract/montgomery.js
init_shim();
var _0n35 = BigInt(0);
var _1n35 = BigInt(1);
function validateOpts9(curve) {
  validateObject3(curve, {
    a: "bigint"
  }, {
    montgomeryBits: "isSafeInteger",
    nByteLength: "isSafeInteger",
    adjustScalarBytes: "function",
    domain: "function",
    powPminus2: "function",
    Gu: "bigint"
  });
  return Object.freeze({ ...curve });
}
function montgomery3(curveDef) {
  const CURVE = validateOpts9(curveDef);
  const { P } = CURVE;
  const modP5 = (n) => mod3(n, P);
  const montgomeryBits = CURVE.montgomeryBits;
  const montgomeryBytes = Math.ceil(montgomeryBits / 8);
  const fieldLen = CURVE.nByteLength;
  const adjustScalarBytes5 = CURVE.adjustScalarBytes || ((bytes5) => bytes5);
  const powPminus2 = CURVE.powPminus2 || ((x) => pow4(x, P - BigInt(2), P));
  function cswap(swap, x_2, x_3) {
    const dummy = modP5(swap * (x_2 - x_3));
    x_2 = modP5(x_2 - dummy);
    x_3 = modP5(x_3 + dummy);
    return [x_2, x_3];
  }
  function assertFieldElement(n) {
    if (typeof n === "bigint" && _0n35 <= n && n < P)
      return n;
    throw new Error("Expected valid scalar 0 < scalar < CURVE.P");
  }
  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);
  function montgomeryLadder(pointU, scalar) {
    const u = assertFieldElement(pointU);
    const k = assertFieldElement(scalar);
    const x_1 = u;
    let x_2 = _1n35;
    let z_2 = _0n35;
    let x_3 = u;
    let z_3 = _1n35;
    let swap = _0n35;
    let sw;
    for (let t = BigInt(montgomeryBits - 1); t >= _0n35; t--) {
      const k_t = k >> t & _1n35;
      swap ^= k_t;
      sw = cswap(swap, x_2, x_3);
      x_2 = sw[0];
      x_3 = sw[1];
      sw = cswap(swap, z_2, z_3);
      z_2 = sw[0];
      z_3 = sw[1];
      swap = k_t;
      const A = x_2 + z_2;
      const AA = modP5(A * A);
      const B = x_2 - z_2;
      const BB = modP5(B * B);
      const E = AA - BB;
      const C = x_3 + z_3;
      const D = x_3 - z_3;
      const DA = modP5(D * A);
      const CB = modP5(C * B);
      const dacb = DA + CB;
      const da_cb = DA - CB;
      x_3 = modP5(dacb * dacb);
      z_3 = modP5(x_1 * modP5(da_cb * da_cb));
      x_2 = modP5(AA * BB);
      z_2 = modP5(E * (AA + modP5(a24 * E)));
    }
    sw = cswap(swap, x_2, x_3);
    x_2 = sw[0];
    x_3 = sw[1];
    sw = cswap(swap, z_2, z_3);
    z_2 = sw[0];
    z_3 = sw[1];
    const z2 = powPminus2(z_2);
    return modP5(x_2 * z2);
  }
  function encodeUCoordinate(u) {
    return numberToBytesLE3(modP5(u), montgomeryBytes);
  }
  function decodeUCoordinate(uEnc) {
    const u = ensureBytes3("u coordinate", uEnc, montgomeryBytes);
    if (fieldLen === montgomeryBytes)
      u[fieldLen - 1] &= 127;
    return bytesToNumberLE3(u);
  }
  function decodeScalar(n) {
    const bytes5 = ensureBytes3("scalar", n);
    if (bytes5.length !== montgomeryBytes && bytes5.length !== fieldLen)
      throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${bytes5.length}`);
    return bytesToNumberLE3(adjustScalarBytes5(bytes5));
  }
  function scalarMult(scalar, u) {
    const pointU = decodeUCoordinate(u);
    const _scalar = decodeScalar(scalar);
    const pu = montgomeryLadder(pointU, _scalar);
    if (pu === _0n35)
      throw new Error("Invalid private or public key received");
    return encodeUCoordinate(pu);
  }
  const GuBytes = encodeUCoordinate(CURVE.Gu);
  function scalarMultBase(scalar) {
    return scalarMult(scalar, GuBytes);
  }
  return {
    scalarMult,
    scalarMultBase,
    getSharedSecret: (privateKey, publicKey2) => scalarMult(privateKey, publicKey2),
    getPublicKey: (privateKey) => scalarMultBase(privateKey),
    utils: { randomPrivateKey: () => CURVE.randomBytes(CURVE.nByteLength) },
    GuBytes
  };
}

// node_modules/@polkadot/api-derive/node_modules/@noble/curves/esm/ed25519.js
var ED25519_P3 = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var ED25519_SQRT_M13 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
var _0n36 = BigInt(0);
var _1n36 = BigInt(1);
var _2n29 = BigInt(2);
var _5n15 = BigInt(5);
var _10n12 = BigInt(10);
var _20n3 = BigInt(20);
var _40n3 = BigInt(40);
var _80n3 = BigInt(80);
function ed25519_pow_2_252_33(x) {
  const P = ED25519_P3;
  const x2 = x * x % P;
  const b2 = x2 * x % P;
  const b4 = pow23(b2, _2n29, P) * b2 % P;
  const b5 = pow23(b4, _1n36, P) * x % P;
  const b10 = pow23(b5, _5n15, P) * b5 % P;
  const b20 = pow23(b10, _10n12, P) * b10 % P;
  const b40 = pow23(b20, _20n3, P) * b20 % P;
  const b80 = pow23(b40, _40n3, P) * b40 % P;
  const b160 = pow23(b80, _80n3, P) * b80 % P;
  const b240 = pow23(b160, _80n3, P) * b80 % P;
  const b250 = pow23(b240, _10n12, P) * b10 % P;
  const pow_p_5_8 = pow23(b250, _2n29, P) * x % P;
  return { pow_p_5_8, b2 };
}
function adjustScalarBytes3(bytes5) {
  bytes5[0] &= 248;
  bytes5[31] &= 127;
  bytes5[31] |= 64;
  return bytes5;
}
function uvRatio3(u, v) {
  const P = ED25519_P3;
  const v3 = mod3(v * v * v, P);
  const v7 = mod3(v3 * v3 * v, P);
  const pow6 = ed25519_pow_2_252_33(u * v7).pow_p_5_8;
  let x = mod3(u * v3 * pow6, P);
  const vx2 = mod3(v * x * x, P);
  const root1 = x;
  const root2 = mod3(x * ED25519_SQRT_M13, P);
  const useRoot1 = vx2 === u;
  const useRoot2 = vx2 === mod3(-u, P);
  const noRoot = vx2 === mod3(-u * ED25519_SQRT_M13, P);
  if (useRoot1)
    x = root1;
  if (useRoot2 || noRoot)
    x = root2;
  if (isNegativeLE3(x, P))
    x = mod3(-x, P);
  return { isValid: useRoot1 || useRoot2, value: x };
}
var Fp6 = Field3(ED25519_P3, void 0, true);
var ed25519Defaults3 = {
  // Param: a
  a: BigInt(-1),
  // d is equal to -121665/121666 over finite field.
  // Negative number is P - number, and division is invert(number, P)
  d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),
  // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n
  Fp: Fp6,
  // Subgroup order: how many points curve has
  // 2n**252n + 27742317777372353535851937790883648493n;
  n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),
  // Cofactor
  h: BigInt(8),
  // Base point (x, y) aka generator point
  Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),
  Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),
  hash: sha5124,
  randomBytes: randomBytes3,
  adjustScalarBytes: adjustScalarBytes3,
  // dom2
  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
  // Constant-time, u/√v
  uvRatio: uvRatio3
};
var ed255193 = twistedEdwards3(ed25519Defaults3);
function ed25519_domain3(data, ctx, phflag) {
  if (ctx.length > 255)
    throw new Error("Context is too big");
  return concatBytes5(utf8ToBytes5("SigEd25519 no Ed25519 collisions"), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);
}
var ed25519ctx3 = twistedEdwards3({
  ...ed25519Defaults3,
  domain: ed25519_domain3
});
var ed25519ph3 = twistedEdwards3({
  ...ed25519Defaults3,
  domain: ed25519_domain3,
  prehash: sha5124
});
var x255193 = (() => montgomery3({
  P: ED25519_P3,
  a: BigInt(486662),
  montgomeryBits: 255,
  nByteLength: 32,
  Gu: BigInt(9),
  powPminus2: (x) => {
    const P = ED25519_P3;
    const { pow_p_5_8, b2 } = ed25519_pow_2_252_33(x);
    return mod3(pow23(pow_p_5_8, BigInt(3), P) * b2, P);
  },
  adjustScalarBytes: adjustScalarBytes3,
  randomBytes: randomBytes3
}))();
var ELL2_C13 = (Fp6.ORDER + BigInt(3)) / BigInt(8);
var ELL2_C23 = Fp6.pow(_2n29, ELL2_C13);
var ELL2_C33 = Fp6.sqrt(Fp6.neg(Fp6.ONE));
var ELL2_C43 = (Fp6.ORDER - BigInt(5)) / BigInt(8);
var ELL2_J3 = BigInt(486662);
function map_to_curve_elligator2_curve255193(u) {
  let tv1 = Fp6.sqr(u);
  tv1 = Fp6.mul(tv1, _2n29);
  let xd = Fp6.add(tv1, Fp6.ONE);
  let x1n = Fp6.neg(ELL2_J3);
  let tv2 = Fp6.sqr(xd);
  let gxd = Fp6.mul(tv2, xd);
  let gx1 = Fp6.mul(tv1, ELL2_J3);
  gx1 = Fp6.mul(gx1, x1n);
  gx1 = Fp6.add(gx1, tv2);
  gx1 = Fp6.mul(gx1, x1n);
  let tv3 = Fp6.sqr(gxd);
  tv2 = Fp6.sqr(tv3);
  tv3 = Fp6.mul(tv3, gxd);
  tv3 = Fp6.mul(tv3, gx1);
  tv2 = Fp6.mul(tv2, tv3);
  let y11 = Fp6.pow(tv2, ELL2_C43);
  y11 = Fp6.mul(y11, tv3);
  let y12 = Fp6.mul(y11, ELL2_C33);
  tv2 = Fp6.sqr(y11);
  tv2 = Fp6.mul(tv2, gxd);
  let e1 = Fp6.eql(tv2, gx1);
  let y1 = Fp6.cmov(y12, y11, e1);
  let x2n = Fp6.mul(x1n, tv1);
  let y21 = Fp6.mul(y11, u);
  y21 = Fp6.mul(y21, ELL2_C23);
  let y22 = Fp6.mul(y21, ELL2_C33);
  let gx2 = Fp6.mul(gx1, tv1);
  tv2 = Fp6.sqr(y21);
  tv2 = Fp6.mul(tv2, gxd);
  let e2 = Fp6.eql(tv2, gx2);
  let y2 = Fp6.cmov(y22, y21, e2);
  tv2 = Fp6.sqr(y1);
  tv2 = Fp6.mul(tv2, gxd);
  let e3 = Fp6.eql(tv2, gx1);
  let xn = Fp6.cmov(x2n, x1n, e3);
  let y = Fp6.cmov(y2, y1, e3);
  let e4 = Fp6.isOdd(y);
  y = Fp6.cmov(y, Fp6.neg(y), e3 !== e4);
  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n36 };
}
var ELL2_C1_EDWARDS3 = FpSqrtEven3(Fp6, Fp6.neg(BigInt(486664)));
function map_to_curve_elligator2_edwards255193(u) {
  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve255193(u);
  let xn = Fp6.mul(xMn, yMd);
  xn = Fp6.mul(xn, ELL2_C1_EDWARDS3);
  let xd = Fp6.mul(xMd, yMn);
  let yn = Fp6.sub(xMn, xMd);
  let yd = Fp6.add(xMn, xMd);
  let tv1 = Fp6.mul(xd, yd);
  let e = Fp6.eql(tv1, Fp6.ZERO);
  xn = Fp6.cmov(xn, Fp6.ZERO, e);
  xd = Fp6.cmov(xd, Fp6.ONE, e);
  yn = Fp6.cmov(yn, Fp6.ONE, e);
  yd = Fp6.cmov(yd, Fp6.ONE, e);
  const inv = Fp6.invertBatch([xd, yd]);
  return { x: Fp6.mul(xn, inv[0]), y: Fp6.mul(yn, inv[1]) };
}
var htf6 = (() => createHasher3(ed255193.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards255193(scalars[0]), {
  DST: "edwards25519_XMD:SHA-512_ELL2_RO_",
  encodeDST: "edwards25519_XMD:SHA-512_ELL2_NU_",
  p: Fp6.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha5124
}))();
var hashToCurve6 = (() => htf6.hashToCurve)();
var encodeToCurve6 = (() => htf6.encodeToCurve)();
function assertRstPoint3(other) {
  if (!(other instanceof RistPoint3))
    throw new Error("RistrettoPoint expected");
}
var SQRT_M13 = ED25519_SQRT_M13;
var SQRT_AD_MINUS_ONE3 = BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235");
var INVSQRT_A_MINUS_D3 = BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578");
var ONE_MINUS_D_SQ3 = BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838");
var D_MINUS_ONE_SQ3 = BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
var invertSqrt3 = (number5) => uvRatio3(_1n36, number5);
var MAX_255B3 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var bytes255ToNumberLE3 = (bytes5) => ed255193.CURVE.Fp.create(bytesToNumberLE3(bytes5) & MAX_255B3);
function calcElligatorRistrettoMap3(r0) {
  const { d } = ed255193.CURVE;
  const P = ed255193.CURVE.Fp.ORDER;
  const mod5 = ed255193.CURVE.Fp.create;
  const r = mod5(SQRT_M13 * r0 * r0);
  const Ns = mod5((r + _1n36) * ONE_MINUS_D_SQ3);
  let c = BigInt(-1);
  const D = mod5((c - d * r) * mod5(r + d));
  let { isValid: Ns_D_is_sq, value: s } = uvRatio3(Ns, D);
  let s_ = mod5(s * r0);
  if (!isNegativeLE3(s_, P))
    s_ = mod5(-s_);
  if (!Ns_D_is_sq)
    s = s_;
  if (!Ns_D_is_sq)
    c = r;
  const Nt = mod5(c * (r - _1n36) * D_MINUS_ONE_SQ3 - D);
  const s2 = s * s;
  const W0 = mod5((s + s) * D);
  const W1 = mod5(Nt * SQRT_AD_MINUS_ONE3);
  const W2 = mod5(_1n36 - s2);
  const W3 = mod5(_1n36 + s2);
  return new ed255193.ExtendedPoint(mod5(W0 * W3), mod5(W2 * W1), mod5(W1 * W3), mod5(W0 * W2));
}
var RistPoint3 = class {
  // Private property to discourage combining ExtendedPoint + RistrettoPoint
  // Always use Ristretto encoding/decoding instead.
  constructor(ep) {
    this.ep = ep;
  }
  static fromAffine(ap) {
    return new RistPoint3(ed255193.ExtendedPoint.fromAffine(ap));
  }
  /**
   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.
   * The hash-to-group operation applies Elligator twice and adds the results.
   * **Note:** this is one-way map, there is no conversion from point to hash.
   * https://ristretto.group/formulas/elligator.html
   * @param hex 64-byte output of a hash function
   */
  static hashToCurve(hex11) {
    hex11 = ensureBytes3("ristrettoHash", hex11, 64);
    const r1 = bytes255ToNumberLE3(hex11.slice(0, 32));
    const R1 = calcElligatorRistrettoMap3(r1);
    const r2 = bytes255ToNumberLE3(hex11.slice(32, 64));
    const R2 = calcElligatorRistrettoMap3(r2);
    return new RistPoint3(R1.add(R2));
  }
  /**
   * Converts ristretto-encoded string to ristretto point.
   * https://ristretto.group/formulas/decoding.html
   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
   */
  static fromHex(hex11) {
    hex11 = ensureBytes3("ristrettoHex", hex11, 32);
    const { a, d } = ed255193.CURVE;
    const P = ed255193.CURVE.Fp.ORDER;
    const mod5 = ed255193.CURVE.Fp.create;
    const emsg = "RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint";
    const s = bytes255ToNumberLE3(hex11);
    if (!equalBytes3(numberToBytesLE3(s, 32), hex11) || isNegativeLE3(s, P))
      throw new Error(emsg);
    const s2 = mod5(s * s);
    const u1 = mod5(_1n36 + a * s2);
    const u2 = mod5(_1n36 - a * s2);
    const u1_2 = mod5(u1 * u1);
    const u2_2 = mod5(u2 * u2);
    const v = mod5(a * d * u1_2 - u2_2);
    const { isValid, value: I } = invertSqrt3(mod5(v * u2_2));
    const Dx = mod5(I * u2);
    const Dy = mod5(I * Dx * v);
    let x = mod5((s + s) * Dx);
    if (isNegativeLE3(x, P))
      x = mod5(-x);
    const y = mod5(u1 * Dy);
    const t = mod5(x * y);
    if (!isValid || isNegativeLE3(t, P) || y === _0n36)
      throw new Error(emsg);
    return new RistPoint3(new ed255193.ExtendedPoint(x, y, _1n36, t));
  }
  /**
   * Encodes ristretto point to Uint8Array.
   * https://ristretto.group/formulas/encoding.html
   */
  toRawBytes() {
    let { ex: x, ey: y, ez: z, et: t } = this.ep;
    const P = ed255193.CURVE.Fp.ORDER;
    const mod5 = ed255193.CURVE.Fp.create;
    const u1 = mod5(mod5(z + y) * mod5(z - y));
    const u2 = mod5(x * y);
    const u2sq = mod5(u2 * u2);
    const { value: invsqrt } = invertSqrt3(mod5(u1 * u2sq));
    const D1 = mod5(invsqrt * u1);
    const D2 = mod5(invsqrt * u2);
    const zInv = mod5(D1 * D2 * t);
    let D;
    if (isNegativeLE3(t * zInv, P)) {
      let _x = mod5(y * SQRT_M13);
      let _y = mod5(x * SQRT_M13);
      x = _x;
      y = _y;
      D = mod5(D1 * INVSQRT_A_MINUS_D3);
    } else {
      D = D2;
    }
    if (isNegativeLE3(x * zInv, P))
      y = mod5(-y);
    let s = mod5((z - y) * D);
    if (isNegativeLE3(s, P))
      s = mod5(-s);
    return numberToBytesLE3(s, 32);
  }
  toHex() {
    return bytesToHex3(this.toRawBytes());
  }
  toString() {
    return this.toHex();
  }
  // Compare one point to another.
  equals(other) {
    assertRstPoint3(other);
    const { ex: X1, ey: Y1 } = this.ep;
    const { ex: X2, ey: Y2 } = other.ep;
    const mod5 = ed255193.CURVE.Fp.create;
    const one = mod5(X1 * Y2) === mod5(Y1 * X2);
    const two = mod5(Y1 * Y2) === mod5(X1 * X2);
    return one || two;
  }
  add(other) {
    assertRstPoint3(other);
    return new RistPoint3(this.ep.add(other.ep));
  }
  subtract(other) {
    assertRstPoint3(other);
    return new RistPoint3(this.ep.subtract(other.ep));
  }
  multiply(scalar) {
    return new RistPoint3(this.ep.multiply(scalar));
  }
  multiplyUnsafe(scalar) {
    return new RistPoint3(this.ep.multiplyUnsafe(scalar));
  }
};
var RistrettoPoint3 = (() => {
  if (!RistPoint3.BASE)
    RistPoint3.BASE = new RistPoint3(ed255193.ExtendedPoint.BASE);
  if (!RistPoint3.ZERO)
    RistPoint3.ZERO = new RistPoint3(ed255193.ExtendedPoint.ZERO);
  return RistPoint3;
})();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/ed25519/pair/fromSeed.js
function ed25519PairFromSeed3(seed, onlyJs) {
  if (!hasBigInt6 || !onlyJs && isReady()) {
    const full = ed25519KeypairFromSeed(seed);
    return {
      publicKey: full.slice(32),
      secretKey: full.slice(0, 64)
    };
  }
  const publicKey2 = ed255193.getPublicKey(seed);
  return {
    publicKey: publicKey2,
    secretKey: u8aConcatStrict6([seed, publicKey2])
  };
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/ed25519/pair/fromSecret.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/ed25519/pair/fromString.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/ed25519/sign.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/ed25519/verify.js
init_shim();
function ed25519Verify4(message, signature, publicKey2, onlyJs) {
  const messageU8a = u8aToU8a6(message);
  const publicKeyU8a = u8aToU8a6(publicKey2);
  const signatureU8a = u8aToU8a6(signature);
  if (publicKeyU8a.length !== 32) {
    throw new Error(`Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);
  } else if (signatureU8a.length !== 64) {
    throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  }
  try {
    return !hasBigInt6 || !onlyJs && isReady() ? ed25519Verify(signatureU8a, messageU8a, publicKeyU8a) : ed255193.verify(signatureU8a, messageU8a, publicKeyU8a);
  } catch {
    return false;
  }
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/key/hdkdEd25519.js
var keyHdkdEd255193 = createSeedDeriveFn3(ed25519PairFromSeed3, ed25519DeriveHard3);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/key/hdkdSr25519.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/deriveHard.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/derive.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/pair/fromU8a.js
init_shim();
var SEC_LEN3 = 64;
var PUB_LEN3 = 32;
var TOT_LEN3 = SEC_LEN3 + PUB_LEN3;
function sr25519PairFromU8a3(full) {
  const fullU8a = u8aToU8a6(full);
  if (fullU8a.length !== TOT_LEN3) {
    throw new Error(`Expected keypair with ${TOT_LEN3} bytes, found ${fullU8a.length}`);
  }
  return {
    publicKey: fullU8a.slice(SEC_LEN3, TOT_LEN3),
    secretKey: fullU8a.slice(0, SEC_LEN3)
  };
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/pair/toU8a.js
init_shim();
function sr25519KeypairToU8a3({ publicKey: publicKey2, secretKey }) {
  return u8aConcat6(secretKey, publicKey2).slice();
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/derive.js
function createDeriveFn3(derive2) {
  return (keypair, chainCode) => {
    if (!isU8a6(chainCode) || chainCode.length !== 32) {
      throw new Error("Invalid chainCode passed to derive");
    }
    return sr25519PairFromU8a3(derive2(sr25519KeypairToU8a3(keypair), chainCode));
  };
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/deriveHard.js
var sr25519DeriveHard3 = createDeriveFn3(sr25519DeriveKeypairHard);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/deriveSoft.js
init_shim();
var sr25519DeriveSoft3 = createDeriveFn3(sr25519DeriveKeypairSoft);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/agreement.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/derivePublic.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/pair/fromSeed.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/sign.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/verify.js
init_shim();
function sr25519Verify4(message, signature, publicKey2) {
  const publicKeyU8a = u8aToU8a6(publicKey2);
  const signatureU8a = u8aToU8a6(signature);
  if (publicKeyU8a.length !== 32) {
    throw new Error(`Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
  } else if (signatureU8a.length !== 64) {
    throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  }
  return sr25519Verify(signatureU8a, u8aToU8a6(message), publicKeyU8a);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/vrfSign.js
init_shim();
var EMPTY_U8A6 = new Uint8Array();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sr25519/vrfVerify.js
init_shim();
var EMPTY_U8A7 = new Uint8Array();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/encode.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/encodeDerived.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/keyDerived.js
init_shim();
var PREFIX5 = stringToU8a6("modlpy/utilisuba");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/encodeMulti.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/keyMulti.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/util.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/keyMulti.js
var PREFIX6 = stringToU8a6("modlpy/utilisuba");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/eq.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/evmToAddress.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/secp256k1/hasher.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/blake2/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/keccak/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/keccak/asU8a.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/sha3.js
init_shim();
var [SHA3_PI3, SHA3_ROTL3, _SHA3_IOTA3] = [[], [], []];
var _0n37 = BigInt(0);
var _1n37 = BigInt(1);
var _2n30 = BigInt(2);
var _7n14 = BigInt(7);
var _256n5 = BigInt(256);
var _0x71n3 = BigInt(113);
for (let round = 0, R = _1n37, x = 1, y = 0; round < 24; round++) {
  [x, y] = [y, (2 * x + 3 * y) % 5];
  SHA3_PI3.push(2 * (5 * y + x));
  SHA3_ROTL3.push((round + 1) * (round + 2) / 2 % 64);
  let t = _0n37;
  for (let j = 0; j < 7; j++) {
    R = (R << _1n37 ^ (R >> _7n14) * _0x71n3) % _256n5;
    if (R & _2n30)
      t ^= _1n37 << (_1n37 << BigInt(j)) - _1n37;
  }
  _SHA3_IOTA3.push(t);
}
var [SHA3_IOTA_H3, SHA3_IOTA_L3] = split3(_SHA3_IOTA3, true);
var rotlH3 = (h, l19, s) => s > 32 ? rotlBH3(h, l19, s) : rotlSH3(h, l19, s);
var rotlL3 = (h, l19, s) => s > 32 ? rotlBL3(h, l19, s) : rotlSL3(h, l19, s);
function keccakP3(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x = 0; x < 10; x++)
      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
    for (let x = 0; x < 10; x += 2) {
      const idx1 = (x + 8) % 10;
      const idx0 = (x + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH3(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL3(B0, B1, 1) ^ B[idx1 + 1];
      for (let y = 0; y < 50; y += 10) {
        s[x + y] ^= Th;
        s[x + y + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL3[t];
      const Th = rotlH3(curH, curL, shift);
      const Tl = rotlL3(curH, curL, shift);
      const PI = SHA3_PI3[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y = 0; y < 50; y += 10) {
      for (let x = 0; x < 10; x++)
        B[x] = s[y + x];
      for (let x = 0; x < 10; x++)
        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H3[round];
    s[1] ^= SHA3_IOTA_L3[round];
  }
  B.fill(0);
}
var Keccak3 = class extends Hash3 {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    number3(outputLen);
    if (0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200);
    this.state32 = u324(this.state);
  }
  keccak() {
    keccakP3(this.state32, this.rounds);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    exists3(this);
    const { blockLen, state } = this;
    data = toBytes3(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take2 = Math.min(blockLen - this.pos, len - pos);
      for (let i = 0; i < take2; i++)
        state[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state, suffix, pos, blockLen } = this;
    state[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    exists3(this, false);
    bytes3(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take2 = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take2), pos);
      this.posOut += take2;
      pos += take2;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes5) {
    number3(bytes5);
    return this.xofInto(new Uint8Array(bytes5));
  }
  digestInto(out) {
    output3(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    this.state.fill(0);
  }
  _cloneInto(to) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to || (to = new Keccak3(blockLen, suffix, outputLen, enableXOF, rounds));
    to.state32.set(this.state32);
    to.pos = this.pos;
    to.posOut = this.posOut;
    to.finished = this.finished;
    to.rounds = rounds;
    to.suffix = suffix;
    to.outputLen = outputLen;
    to.enableXOF = enableXOF;
    to.destroyed = this.destroyed;
    return to;
  }
};
var gen3 = (suffix, blockLen, outputLen) => wrapConstructor3(() => new Keccak3(blockLen, suffix, outputLen));
var sha3_2243 = gen3(6, 144, 224 / 8);
var sha3_2563 = gen3(6, 136, 256 / 8);
var sha3_3843 = gen3(6, 104, 384 / 8);
var sha3_5123 = gen3(6, 72, 512 / 8);
var keccak_2243 = gen3(1, 144, 224 / 8);
var keccak_2563 = gen3(1, 136, 256 / 8);
var keccak_3843 = gen3(1, 104, 384 / 8);
var keccak_5123 = gen3(1, 72, 512 / 8);
var genShake3 = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts3((opts = {}) => new Keccak3(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake1283 = genShake3(31, 168, 128 / 8);
var shake2563 = genShake3(31, 136, 256 / 8);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/keccak/asU8a.js
var keccakAsU8a3 = createDualHasher3({ 256: keccak256, 512: keccak512 }, { 256: keccak_2563, 512: keccak_5123 });
var keccak256AsU8a3 = createBitHasher3(256, keccakAsU8a3);
var keccak512AsU8a3 = createBitHasher3(512, keccakAsU8a3);
var keccakAsHex3 = createAsHex3(keccakAsU8a3);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/secp256k1/hasher.js
function hasher3(hashType, data, onlyJs) {
  return hashType === "keccak" ? keccakAsU8a3(data, void 0, onlyJs) : blake2AsU8a3(data, void 0, void 0, onlyJs);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/is.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/validate.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/sort.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/setSS58Format.js
init_shim();
var l14 = logger3("setSS58Format");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/base32/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/base32/bs32.js
init_shim();
var chars3 = "abcdefghijklmnopqrstuvwxyz234567";
var config9 = {
  chars: chars3,
  coder: utils3.chain(
    // We define our own chain, the default base32 has padding
    utils3.radix2(5),
    utils3.alphabet(chars3),
    {
      decode: (input) => input.split(""),
      encode: (input) => input.join("")
    }
  ),
  ipfs: "b",
  type: "base32"
};
var base32Validate3 = createValidate3(config9);
var isBase323 = createIs3(base32Validate3);
var base32Decode3 = createDecode3(config9, base32Validate3);
var base32Encode3 = createEncode3(config9);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/base64/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/base64/bs64.js
init_shim();
var config10 = {
  chars: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  coder: base643,
  type: "base64",
  withPadding: true
};
var base64Validate3 = createValidate3(config10);
var isBase643 = createIs3(base64Validate3);
var base64Decode3 = createDecode3(config10, base64Validate3);
var base64Encode3 = createEncode3(config10);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/base64/pad.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/base64/trim.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/ethereum/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/ethereum/encode.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/secp256k1/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/secp256k1/compress.js
init_shim();
function secp256k1Compress4(publicKey2, onlyJs) {
  if (![33, 65].includes(publicKey2.length)) {
    throw new Error(`Invalid publicKey provided, received ${publicKey2.length} bytes input`);
  }
  if (publicKey2.length === 33) {
    return publicKey2;
  }
  return !hasBigInt6 || !onlyJs && isReady() ? secp256k1Compress(publicKey2) : secp256k13.ProjectivePoint.fromHex(publicKey2).toRawBytes(true);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/secp256k1/expand.js
init_shim();
function secp256k1Expand4(publicKey2, onlyJs) {
  if (![33, 65].includes(publicKey2.length)) {
    throw new Error(`Invalid publicKey provided, received ${publicKey2.length} bytes input`);
  }
  if (publicKey2.length === 65) {
    return publicKey2.subarray(1);
  }
  if (!hasBigInt6 || !onlyJs && isReady()) {
    return secp256k1Expand(publicKey2).subarray(1);
  }
  const { px, py } = secp256k13.ProjectivePoint.fromHex(publicKey2);
  return u8aConcat6(bnToU8a6(px, BN_BE_256_OPTS3), bnToU8a6(py, BN_BE_256_OPTS3));
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/secp256k1/recover.js
init_shim();
function secp256k1Recover4(msgHash, signature, recovery, hashType = "blake2", onlyJs) {
  const sig2 = u8aToU8a6(signature).subarray(0, 64);
  const msg = u8aToU8a6(msgHash);
  const publicKey2 = !hasBigInt6 || !onlyJs && isReady() ? secp256k1Recover(msg, sig2, recovery) : secp256k13.Signature.fromCompact(sig2).addRecoveryBit(recovery).recoverPublicKey(msg).toRawBytes();
  if (!publicKey2) {
    throw new Error("Unable to recover publicKey from signature");
  }
  return hashType === "keccak" ? secp256k1Expand4(publicKey2, onlyJs) : secp256k1Compress4(publicKey2, onlyJs);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/secp256k1/sign.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/secp256k1/tweakAdd.js
init_shim();
var N3 = "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141".replace(/ /g, "");
var N_BI3 = BigInt2(`0x${N3}`);
var N_BN3 = new import_bn64.default(N3, "hex");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/secp256k1/verify.js
init_shim();
function secp256k1Verify3(msgHash, signature, address, hashType = "blake2", onlyJs) {
  const sig2 = u8aToU8a6(signature);
  if (sig2.length !== 65) {
    throw new Error(`Expected signature with 65 bytes, ${sig2.length} found instead`);
  }
  const publicKey2 = secp256k1Recover4(hasher3(hashType, msgHash), sig2, sig2[64], hashType, onlyJs);
  const signerAddr = hasher3(hashType, publicKey2, onlyJs);
  const inputAddr = u8aToU8a6(address);
  return u8aEq6(publicKey2, inputAddr) || (hashType === "keccak" ? u8aEq6(signerAddr.slice(-20), inputAddr.slice(-20)) : u8aEq6(signerAddr, inputAddr));
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/ethereum/isAddress.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/ethereum/isChecksum.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/hd/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/hd/ethereum/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/hmac/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/hmac/shaAsU8a.js
init_shim();
var JS_HASH3 = {
  256: sha2564,
  512: sha5124
};
var WA_MHAC3 = {
  256: hmacSha256,
  512: hmacSha512
};
function createSha3(bitLength) {
  return (key, data, onlyJs) => hmacShaAsU8a3(key, data, bitLength, onlyJs);
}
function hmacShaAsU8a3(key, data, bitLength = 256, onlyJs) {
  const u8aKey = u8aToU8a6(key);
  return !hasBigInt6 || !onlyJs && isReady() ? WA_MHAC3[bitLength](u8aKey, data) : hmac3(JS_HASH3[bitLength], u8aKey, data);
}
var hmacSha256AsU8a3 = createSha3(256);
var hmacSha512AsU8a3 = createSha3(512);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/hd/validatePath.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/hd/ethereum/index.js
var MASTER_SECRET3 = stringToU8a6("Bitcoin seed");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/hd/ledger/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/mnemonic/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/mnemonic/generate.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/mnemonic/bip39.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/pbkdf2/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/pbkdf2/encode.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/pbkdf2.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sha/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/sha/asU8a.js
init_shim();
var shaAsU8a3 = createDualHasher3({ 256: sha256, 512: sha512 }, { 256: sha2564, 512: sha5124 });
var sha256AsU8a3 = createBitHasher3(256, shaAsU8a3);
var sha512AsU8a3 = createBitHasher3(512, shaAsU8a3);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/mnemonic/wordlists/en.js
init_shim();
var en_default3 = "abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo".split("|");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/mnemonic/toEntropy.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/mnemonic/toLegacySeed.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/mnemonic/validate.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/mnemonic/toMiniSecret.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/hd/ledger/derivePrivate.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/hd/ledger/master.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/json/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/json/decrypt.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/json/decryptData.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/nacl/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/nacl/decrypt.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/nacl/tweetnacl.js
init_shim();
var sigma3 = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
var minusp3 = new Uint32Array([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252]);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/nacl/encrypt.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/scrypt/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/scrypt/encode.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@noble/hashes/esm/scrypt.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/scrypt/defaults.js
init_shim();
var DEFAULT_PARAMS3 = {
  N: 1 << 15,
  p: 1,
  r: 8
};

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/scrypt/fromU8a.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/scrypt/toU8a.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/json/constants.js
init_shim();
var SCRYPT_LENGTH3 = 32 + 3 * 4;

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/json/encrypt.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/json/encryptFormat.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/signature/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/signature/verify.js
init_shim();
var secp256k1VerifyHasher3 = (hashType) => (message, signature, publicKey2) => secp256k1Verify3(message, signature, publicKey2, hashType);
var VERIFIERS_ECDSA3 = [
  ["ecdsa", secp256k1VerifyHasher3("blake2")],
  ["ethereum", secp256k1VerifyHasher3("keccak")]
];
var VERIFIERS3 = [
  ["ed25519", ed25519Verify4],
  ["sr25519", sr25519Verify4],
  ...VERIFIERS_ECDSA3
];

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/xxhash/index.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/xxhash/asU8a.js
init_shim();

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/xxhash/xxhash64.js
init_shim();
var P64_13 = BigInt2("11400714785074694791");
var P64_23 = BigInt2("14029467366897019727");
var P64_33 = BigInt2("1609587929392839161");
var P64_43 = BigInt2("9650029242287828579");
var P64_53 = BigInt2("2870177450012600261");
var U643 = BigInt2("0xffffffffffffffff");
var _7n15 = BigInt2(7);
var _11n3 = BigInt2(11);
var _12n3 = BigInt2(12);
var _16n6 = BigInt2(16);
var _18n3 = BigInt2(18);
var _23n3 = BigInt2(23);
var _27n3 = BigInt2(27);
var _29n3 = BigInt2(29);
var _31n3 = BigInt2(31);
var _32n6 = BigInt2(32);
var _33n3 = BigInt2(33);
var _64n3 = BigInt2(64);
var _256n6 = BigInt2(256);
function rotl4(a, b) {
  const c = a & U643;
  return (c << b | c >> _64n3 - b) & U643;
}
function fromU8a3(u8a9, p, count2) {
  const bigints = new Array(count2);
  let offset = 0;
  for (let i = 0; i < count2; i++, offset += 2) {
    bigints[i] = BigInt2(u8a9[p + offset] | u8a9[p + 1 + offset] << 8);
  }
  let result = _0n15;
  for (let i = count2 - 1; i >= 0; i--) {
    result = (result << _16n6) + bigints[i];
  }
  return result;
}
function init3(seed, input) {
  const state = {
    seed,
    u8a: new Uint8Array(32),
    u8asize: 0,
    v1: seed + P64_13 + P64_23,
    v2: seed + P64_23,
    v3: seed,
    v4: seed - P64_13
  };
  if (input.length < 32) {
    state.u8a.set(input);
    state.u8asize = input.length;
    return state;
  }
  const limit = input.length - 32;
  let p = 0;
  if (limit >= 0) {
    const adjustV = (v) => P64_13 * rotl4(v + P64_23 * fromU8a3(input, p, 4), _31n3);
    do {
      state.v1 = adjustV(state.v1);
      p += 8;
      state.v2 = adjustV(state.v2);
      p += 8;
      state.v3 = adjustV(state.v3);
      p += 8;
      state.v4 = adjustV(state.v4);
      p += 8;
    } while (p <= limit);
  }
  if (p < input.length) {
    state.u8a.set(input.subarray(p, input.length));
    state.u8asize = input.length - p;
  }
  return state;
}
function xxhash643(input, initSeed) {
  const { seed, u8a: u8a9, u8asize, v1: v17, v2: v22, v3, v4: v411 } = init3(BigInt2(initSeed), input);
  let p = 0;
  let h64 = U643 & BigInt2(input.length) + (input.length >= 32 ? ((((rotl4(v17, _1n15) + rotl4(v22, _7n15) + rotl4(v3, _12n3) + rotl4(v411, _18n3) ^ P64_13 * rotl4(v17 * P64_23, _31n3)) * P64_13 + P64_43 ^ P64_13 * rotl4(v22 * P64_23, _31n3)) * P64_13 + P64_43 ^ P64_13 * rotl4(v3 * P64_23, _31n3)) * P64_13 + P64_43 ^ P64_13 * rotl4(v411 * P64_23, _31n3)) * P64_13 + P64_43 : seed + P64_53);
  while (p <= u8asize - 8) {
    h64 = U643 & P64_43 + P64_13 * rotl4(h64 ^ P64_13 * rotl4(P64_23 * fromU8a3(u8a9, p, 4), _31n3), _27n3);
    p += 8;
  }
  if (p + 4 <= u8asize) {
    h64 = U643 & P64_33 + P64_23 * rotl4(h64 ^ P64_13 * fromU8a3(u8a9, p, 2), _23n3);
    p += 4;
  }
  while (p < u8asize) {
    h64 = U643 & P64_13 * rotl4(h64 ^ P64_53 * BigInt2(u8a9[p++]), _11n3);
  }
  h64 = U643 & P64_23 * (h64 ^ h64 >> _33n3);
  h64 = U643 & P64_33 * (h64 ^ h64 >> _29n3);
  h64 = U643 & (h64 ^ h64 >> _32n6);
  const result = new Uint8Array(8);
  for (let i = 7; i >= 0; i--) {
    result[i] = Number(h64 % _256n6);
    h64 = h64 / _256n6;
  }
  return result;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/xxhash/asU8a.js
function xxhashAsU8a3(data, bitLength = 64, onlyJs) {
  const rounds = Math.ceil(bitLength / 64);
  const u8a9 = u8aToU8a6(data);
  if (!hasBigInt6 || !onlyJs && isReady()) {
    return twox(u8a9, rounds);
  }
  const result = new Uint8Array(rounds * 8);
  for (let seed = 0; seed < rounds; seed++) {
    result.set(xxhash643(u8a9, seed).reverse(), seed * 8);
  }
  return result;
}
var xxhashAsHex3 = createAsHex3(xxhashAsU8a3);

// node_modules/@polkadot/api-derive/accounts/accountId.js
function accountId(instanceId, api) {
  return memo(instanceId, (address) => {
    const decoded = isU8a6(address) ? address : decodeAddress3((address || "").toString());
    if (decoded.length > 8) {
      return of(api.registry.createType("AccountId", decoded));
    }
    const accountIndex = api.registry.createType("AccountIndex", decoded);
    return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map((a) => assertReturn2(a, "Unable to retrieve accountId")));
  });
}

// node_modules/@polkadot/api-derive/accounts/flags.js
init_shim();
function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
  const addrStr = address == null ? void 0 : address.toString();
  const isIncluded = (id) => id.toString() === addrStr;
  return {
    isCouncil: ((electionsMembers == null ? void 0 : electionsMembers.map((r) => Array.isArray(r) ? r[0] : r.who)) || councilMembers || []).some(isIncluded),
    isSociety: (societyMembers || []).some(isIncluded),
    isSudo: (sudoKey == null ? void 0 : sudoKey.toString()) === addrStr,
    isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
  };
}
function _flags(instanceId, api) {
  return memo(instanceId, () => {
    var _a, _b, _c, _d, _e;
    const results = [void 0, [], [], [], void 0];
    const calls = [
      (_a = api.query.elections || api.query["phragmenElection"] || api.query["electionsPhragmen"]) == null ? void 0 : _a.members,
      (_b = api.query.council) == null ? void 0 : _b.members,
      (_c = api.query.technicalCommittee) == null ? void 0 : _c.members,
      (_d = api.query.society) == null ? void 0 : _d.members,
      (_e = api.query.sudo) == null ? void 0 : _e.key
    ];
    const filtered = calls.filter((c) => c);
    if (!filtered.length) {
      return of(results);
    }
    return api.queryMulti(filtered).pipe(map((values) => {
      let resultIndex = -1;
      for (let i = 0, count2 = calls.length; i < count2; i++) {
        if (isFunction7(calls[i])) {
          results[i] = values[++resultIndex];
        }
      }
      return results;
    }));
  });
}
function flags(instanceId, api) {
  return memo(instanceId, (address) => api.derive.accounts._flags().pipe(map((r) => parseFlags(address, r))));
}

// node_modules/@polkadot/api-derive/accounts/idAndIndex.js
init_shim();
function idAndIndex(instanceId, api) {
  return memo(instanceId, (address) => {
    try {
      const decoded = isU8a6(address) ? address : decodeAddress3((address || "").toString());
      if (decoded.length > 8) {
        const accountId2 = api.registry.createType("AccountId", decoded);
        return api.derive.accounts.idToIndex(accountId2).pipe(map((accountIndex2) => [accountId2, accountIndex2]));
      }
      const accountIndex = api.registry.createType("AccountIndex", decoded);
      return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map((accountId2) => [accountId2, accountIndex]));
    } catch {
      return of([void 0, void 0]);
    }
  });
}

// node_modules/@polkadot/api-derive/accounts/identity.js
init_shim();
var UNDEF_HEX = { toHex: () => void 0 };
function dataAsString(data) {
  return data.isRaw ? u8aToString6(data.asRaw.toU8a(true)) : data.isNone ? void 0 : data.toHex();
}
function extractOther(additional) {
  return additional.reduce((other, [_key, _value]) => {
    const key = dataAsString(_key);
    const value = dataAsString(_value);
    if (key && value) {
      other[key] = value;
    }
    return other;
  }, {});
}
function extractIdentity(identityOfOpt, superOf) {
  if (!(identityOfOpt == null ? void 0 : identityOfOpt.isSome)) {
    return { judgements: [] };
  }
  const { info: info6, judgements } = identityOfOpt.unwrap();
  const topDisplay = dataAsString(info6.display);
  return {
    display: superOf && dataAsString(superOf[1]) || topDisplay,
    displayParent: superOf && topDisplay,
    email: dataAsString(info6.email),
    image: dataAsString(info6.image),
    judgements,
    legal: dataAsString(info6.legal),
    other: extractOther(info6.additional),
    parent: superOf == null ? void 0 : superOf[0],
    pgp: info6.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
    riot: dataAsString(info6.riot),
    twitter: dataAsString(info6.twitter),
    web: dataAsString(info6.web)
  };
}
function getParent(api, identityOfOpt, superOfOpt) {
  if (identityOfOpt == null ? void 0 : identityOfOpt.isSome) {
    return of([identityOfOpt, void 0]);
  } else if (superOfOpt == null ? void 0 : superOfOpt.isSome) {
    const superOf = superOfOpt.unwrap();
    return combineLatest([
      api.derive.accounts._identity(superOf[0]).pipe(map(([info6]) => info6)),
      of(superOf)
    ]);
  }
  return of([void 0, void 0]);
}
function _identity(instanceId, api) {
  return memo(instanceId, (accountId2) => {
    var _a;
    return accountId2 && ((_a = api.query.identity) == null ? void 0 : _a.identityOf) ? combineLatest([
      api.query.identity.identityOf(accountId2),
      api.query.identity.superOf(accountId2)
    ]) : of([void 0, void 0]);
  });
}
function identity4(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.accounts._identity(accountId2).pipe(switchMap(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), map(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
}
var hasIdentity = firstMemo((api, accountId2) => api.derive.accounts.hasIdentityMulti([accountId2]));
function hasIdentityMulti(instanceId, api) {
  return memo(instanceId, (accountIds) => {
    var _a;
    return ((_a = api.query.identity) == null ? void 0 : _a.identityOf) ? combineLatest([
      api.query.identity.identityOf.multi(accountIds),
      api.query.identity.superOf.multi(accountIds)
    ]).pipe(map(([identities, supers]) => identities.map((identityOfOpt, index) => {
      const superOfOpt = supers[index];
      const parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : void 0;
      let display;
      if (identityOfOpt && identityOfOpt.isSome) {
        const value = dataAsString(identityOfOpt.unwrap().info.display);
        if (value && !isHex6(value)) {
          display = value;
        }
      }
      return { display, hasIdentity: !!(display || parentId), parentId };
    }))) : of(accountIds.map(() => ({ hasIdentity: false })));
  });
}

// node_modules/@polkadot/api-derive/accounts/idToIndex.js
init_shim();
function idToIndex(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.accounts.indexes().pipe(map((indexes3) => indexes3[accountId2.toString()])));
}

// node_modules/@polkadot/api-derive/accounts/indexes.js
init_shim();
var indicesCache = null;
function queryAccounts(api) {
  return api.query.indices.accounts.entries().pipe(map((entries) => entries.reduce((indexes3, [key, idOpt]) => {
    if (idOpt.isSome) {
      indexes3[idOpt.unwrap()[0].toString()] = api.registry.createType("AccountIndex", key.args[0]);
    }
    return indexes3;
  }, {})));
}
function indexes(instanceId, api) {
  return memo(instanceId, () => indicesCache ? of(indicesCache) : (api.query.indices ? queryAccounts(api).pipe(startWith({})) : of({})).pipe(map((indices) => {
    indicesCache = indices;
    return indices;
  })));
}

// node_modules/@polkadot/api-derive/accounts/indexToId.js
init_shim();
function indexToId(instanceId, api) {
  return memo(instanceId, (accountIndex) => api.query.indices ? api.query.indices.accounts(accountIndex).pipe(map((optResult) => optResult.unwrapOr([])[0])) : of(void 0));
}

// node_modules/@polkadot/api-derive/accounts/info.js
init_shim();
function retrieveNick(api, accountId2) {
  var _a;
  return (accountId2 && ((_a = api.query["nicks"]) == null ? void 0 : _a["nameOf"]) ? api.query["nicks"]["nameOf"](accountId2) : of(void 0)).pipe(map((nameOf) => (nameOf == null ? void 0 : nameOf.isSome) ? u8aToString6(nameOf.unwrap()[0]).substring(0, api.consts["nicks"]["maxLength"].toNumber()) : void 0));
}
function info(instanceId, api) {
  return memo(instanceId, (address) => api.derive.accounts.idAndIndex(address).pipe(switchMap(([accountId2, accountIndex]) => combineLatest([
    of({ accountId: accountId2, accountIndex }),
    api.derive.accounts.identity(accountId2),
    retrieveNick(api, accountId2)
  ])), map(([{ accountId: accountId2, accountIndex }, identity5, nickname]) => ({
    accountId: accountId2,
    accountIndex,
    identity: identity5,
    nickname
  }))));
}

// node_modules/@polkadot/api-derive/alliance/index.js
var alliance_exports = {};
__export(alliance_exports, {
  hasProposals: () => hasProposals2,
  members: () => members2,
  prime: () => prime2,
  proposal: () => proposal2,
  proposalCount: () => proposalCount2,
  proposalHashes: () => proposalHashes2,
  proposals: () => proposals2
});
init_shim();

// node_modules/@polkadot/api-derive/collective/index.js
init_shim();

// node_modules/@polkadot/api-derive/collective/members.js
init_shim();

// node_modules/@polkadot/api-derive/collective/helpers.js
init_shim();
function getInstance(api, section2) {
  const instances = api.registry.getModuleInstances(api.runtimeVersion.specName, section2);
  const name = (instances == null ? void 0 : instances.length) ? instances[0] : section2;
  return api.query[name];
}
function withSection(section2, fn) {
  return (instanceId, api) => memo(instanceId, fn(getInstance(api, section2), api, instanceId));
}
function callMethod(method, empty3) {
  return (section2) => withSection(section2, (query2) => () => isFunction7(query2 == null ? void 0 : query2[method]) ? query2[method]() : of(empty3));
}

// node_modules/@polkadot/api-derive/collective/members.js
var members = callMethod("members", []);

// node_modules/@polkadot/api-derive/collective/prime.js
init_shim();
function prime(section2) {
  return withSection(section2, (query2) => () => isFunction7(query2 == null ? void 0 : query2.prime) ? query2.prime().pipe(map((o) => o.unwrapOr(null))) : of(null));
}

// node_modules/@polkadot/api-derive/collective/proposals.js
init_shim();
function parse(api, [hashes, proposals8, votes2]) {
  return proposals8.map((o, index) => ({
    hash: api.registry.createType("Hash", hashes[index]),
    proposal: o && o.isSome ? o.unwrap() : null,
    votes: votes2[index].unwrapOr(null)
  }));
}
function _proposalsFrom(api, query2, hashes) {
  return (isFunction7(query2 == null ? void 0 : query2.proposals) && hashes.length ? combineLatest([
    of(hashes),
    // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
    // however we have had cases on Edgeware where the indices have moved around after an
    // upgrade, which results in invalid on-chain data
    query2.proposalOf.multi(hashes).pipe(catchError(() => of(hashes.map(() => null)))),
    query2.voting.multi(hashes)
  ]) : of([[], [], []])).pipe(map((r) => parse(api, r)));
}
function hasProposals(section2) {
  return withSection(section2, (query2) => () => of(isFunction7(query2 == null ? void 0 : query2.proposals)));
}
function proposals(section2) {
  return withSection(section2, (query2, api) => () => api.derive[section2].proposalHashes().pipe(switchMap((all3) => _proposalsFrom(api, query2, all3))));
}
function proposal(section2) {
  return withSection(section2, (query2, api) => (hash5) => isFunction7(query2 == null ? void 0 : query2.proposals) ? firstObservable(_proposalsFrom(api, query2, [hash5])) : of(null));
}
var proposalCount = callMethod("proposalCount", null);
var proposalHashes = callMethod("proposals", []);

// node_modules/@polkadot/api-derive/alliance/index.js
var members2 = members("allianceMotion");
var hasProposals2 = hasProposals("allianceMotion");
var proposal2 = proposal("allianceMotion");
var proposalCount2 = proposalCount("allianceMotion");
var proposalHashes2 = proposalHashes("allianceMotion");
var proposals2 = proposals("allianceMotion");
var prime2 = prime("allianceMotion");

// node_modules/@polkadot/api-derive/bagsList/index.js
var bagsList_exports = {};
__export(bagsList_exports, {
  _getIds: () => _getIds,
  all: () => all,
  expand: () => expand2,
  get: () => get,
  getExpanded: () => getExpanded,
  listNodes: () => listNodes
});
init_shim();

// node_modules/@polkadot/api-derive/bagsList/get.js
init_shim();

// node_modules/@polkadot/api-derive/bagsList/util.js
init_shim();
function getQueryInterface(api) {
  return (
    // latest substrate & polkadot
    api.query.voterList || // previous substrate
    api.query["voterBagsList"] || api.query["bagsList"]
  );
}

// node_modules/@polkadot/api-derive/bagsList/get.js
function orderBags(ids, bags) {
  const sorted = ids.map((id, index) => ({
    bag: bags[index].unwrapOr(null),
    id,
    key: id.toString()
  })).sort((a, b) => b.id.cmp(a.id));
  const max2 = sorted.length - 1;
  return sorted.map((entry, index) => objectSpread5(entry, {
    bagLower: index === max2 ? BN_ZERO5 : sorted[index + 1].id,
    bagUpper: entry.id,
    index
  }));
}
function _getIds(instanceId, api) {
  const query2 = getQueryInterface(api);
  return memo(instanceId, (_ids) => {
    const ids = _ids.map((id) => bnToBn5(id));
    return ids.length ? query2.listBags.multi(ids).pipe(map((bags) => orderBags(ids, bags))) : of([]);
  });
}
function all(instanceId, api) {
  const query2 = getQueryInterface(api);
  return memo(instanceId, () => query2.listBags.keys().pipe(switchMap((keys2) => api.derive.bagsList._getIds(keys2.map(({ args: [id] }) => id))), map((list) => list.filter(({ bag }) => bag))));
}
function get(instanceId, api) {
  return memo(instanceId, (id) => api.derive.bagsList._getIds([bnToBn5(id)]).pipe(map((bags) => bags[0])));
}

// node_modules/@polkadot/api-derive/bagsList/getExpanded.js
init_shim();
function expand2(instanceId, api) {
  return memo(instanceId, (bag) => api.derive.bagsList.listNodes(bag.bag).pipe(map((nodes) => objectSpread5({ nodes }, bag))));
}
function getExpanded(instanceId, api) {
  return memo(instanceId, (id) => api.derive.bagsList.get(id).pipe(switchMap((bag) => api.derive.bagsList.expand(bag))));
}

// node_modules/@polkadot/api-derive/bagsList/listNodes.js
init_shim();
function traverseLinks(api, head) {
  const subject = new BehaviorSubject(head);
  const query2 = getQueryInterface(api);
  return subject.pipe(
    switchMap((account3) => query2.listNodes(account3)),
    tap((node) => {
      nextTick2(() => {
        node.isSome && node.value.next.isSome ? subject.next(node.unwrap().next.unwrap()) : subject.complete();
      });
    }),
    toArray(),
    // toArray since we want to startSubject to be completed
    map((all3) => all3.map((o) => o.unwrap()))
  );
}
function listNodes(instanceId, api) {
  return memo(instanceId, (bag) => bag && bag.head.isSome ? traverseLinks(api, bag.head.unwrap()) : of([]));
}

// node_modules/@polkadot/api-derive/balances/index.js
var balances_exports = {};
__export(balances_exports, {
  account: () => account,
  all: () => all2,
  votingBalance: () => votingBalance,
  votingBalances: () => votingBalances
});
init_shim();

// node_modules/@polkadot/api-derive/balances/all.js
init_shim();
var VESTING_ID = "0x76657374696e6720";
function calcLocked(api, bestNumber2, locks2) {
  let lockedBalance = api.registry.createType("Balance");
  let lockedBreakdown = [];
  let vestingLocked = api.registry.createType("Balance");
  let allLocked = false;
  if (Array.isArray(locks2)) {
    lockedBreakdown = locks2.filter(({ until }) => !until || bestNumber2 && until.gt(bestNumber2));
    allLocked = lockedBreakdown.some(({ amount }) => amount && amount.isMax());
    vestingLocked = api.registry.createType("Balance", lockedBreakdown.filter(({ id }) => id.eq(VESTING_ID)).reduce((result, { amount }) => result.iadd(amount), new import_bn64.default(0)));
    const notAll = lockedBreakdown.filter(({ amount }) => amount && !amount.isMax());
    if (notAll.length) {
      lockedBalance = api.registry.createType("Balance", bnMax5(...notAll.map(({ amount }) => amount)));
    }
  }
  return { allLocked, lockedBalance, lockedBreakdown, vestingLocked };
}
function calcShared(api, bestNumber2, data, locks2) {
  const { allLocked, lockedBalance, lockedBreakdown, vestingLocked } = calcLocked(api, bestNumber2, locks2);
  return objectSpread5({}, data, {
    availableBalance: api.registry.createType("Balance", allLocked ? 0 : bnMax5(new import_bn64.default(0), (data == null ? void 0 : data.freeBalance) ? data.freeBalance.sub(lockedBalance) : new import_bn64.default(0))),
    lockedBalance,
    lockedBreakdown,
    vestingLocked
  });
}
function calcVesting(bestNumber2, shared, _vesting) {
  const vesting = _vesting || [];
  const isVesting = !shared.vestingLocked.isZero();
  const vestedBalances = vesting.map(({ locked, perBlock, startingBlock }) => bestNumber2.gt(startingBlock) ? bnMin5(locked, perBlock.mul(bestNumber2.sub(startingBlock))) : BN_ZERO5);
  const vestedBalance = vestedBalances.reduce((all3, value) => all3.iadd(value), new import_bn64.default(0));
  const vestingTotal = vesting.reduce((all3, { locked }) => all3.iadd(locked), new import_bn64.default(0));
  return {
    isVesting,
    vestedBalance,
    vestedClaimable: isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : BN_ZERO5,
    vesting: vesting.map(({ locked, perBlock, startingBlock }, index) => ({
      endBlock: locked.div(perBlock).iadd(startingBlock),
      locked,
      perBlock,
      startingBlock,
      vested: vestedBalances[index]
    })).filter(({ locked }) => !locked.isZero()),
    vestingTotal
  };
}
function calcBalances(api, result) {
  const [data, [vesting, allLocks, namedReserves], bestNumber2] = result;
  const shared = calcShared(api, bestNumber2, data, allLocks[0]);
  return objectSpread5(shared, calcVesting(bestNumber2, shared, vesting), {
    accountId: data.accountId,
    accountNonce: data.accountNonce,
    additional: allLocks.slice(1).map((l19, index) => calcShared(api, bestNumber2, data.additional[index], l19)),
    namedReserves
  });
}
function queryOld(api, accountId2) {
  return combineLatest([
    api.query.balances.locks(accountId2),
    api.query.balances["vesting"](accountId2)
  ]).pipe(map(([locks2, optVesting]) => {
    let vestingNew = null;
    if (optVesting.isSome) {
      const { offset: locked, perBlock, startingBlock } = optVesting.unwrap();
      vestingNew = api.registry.createType("VestingInfo", { locked, perBlock, startingBlock });
    }
    return [
      vestingNew ? [vestingNew] : null,
      [locks2],
      []
    ];
  }));
}
var isNonNullable = (nullable) => !!nullable;
function createCalls(calls) {
  return [
    calls.map((c) => !c),
    calls.filter(isNonNullable)
  ];
}
function queryCurrent(api, accountId2, balanceInstances = ["balances"]) {
  var _a;
  const [lockEmpty, lockQueries] = createCalls(balanceInstances.map((m) => {
    var _a2, _b;
    return ((_a2 = api.derive[m]) == null ? void 0 : _a2.customLocks) || ((_b = api.query[m]) == null ? void 0 : _b.locks);
  }));
  const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map((m) => {
    var _a2;
    return (_a2 = api.query[m]) == null ? void 0 : _a2.reserves;
  }));
  return combineLatest([
    ((_a = api.query.vesting) == null ? void 0 : _a.vesting) ? api.query.vesting.vesting(accountId2) : of(api.registry.createType("Option<VestingInfo>")),
    lockQueries.length ? combineLatest(lockQueries.map((c) => c(accountId2))) : of([]),
    reserveQueries.length ? combineLatest(reserveQueries.map((c) => c(accountId2))) : of([])
  ]).pipe(map(([opt, locks2, reserves]) => {
    let offsetLock = -1;
    let offsetReserve = -1;
    const vesting = opt.unwrapOr(null);
    return [
      vesting ? Array.isArray(vesting) ? vesting : [vesting] : null,
      lockEmpty.map((e) => e ? api.registry.createType("Vec<BalanceLock>") : locks2[++offsetLock]),
      reserveEmpty.map((e) => e ? api.registry.createType("Vec<PalletBalancesReserveData>") : reserves[++offsetReserve])
    ];
  }));
}
function all2(instanceId, api) {
  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
  return memo(instanceId, (address) => {
    var _a, _b;
    return combineLatest([
      api.derive.balances.account(address),
      isFunction7((_a = api.query.system) == null ? void 0 : _a.account) || isFunction7((_b = api.query.balances) == null ? void 0 : _b.account) ? queryCurrent(api, address, balanceInstances) : queryOld(api, address)
    ]).pipe(switchMap(([account3, locks2]) => combineLatest([
      of(account3),
      of(locks2),
      api.derive.chain.bestNumber()
    ])), map((result) => calcBalances(api, result)));
  });
}

// node_modules/@polkadot/api-derive/balances/account.js
init_shim();
function zeroBalance(api) {
  return api.registry.createType("Balance");
}
function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
  const votingBalance2 = api.registry.createType("Balance", freeBalance.toBn());
  return {
    freeBalance,
    frozenFee,
    frozenMisc,
    reservedBalance,
    votingBalance: votingBalance2
  };
}
function calcBalances2(api, [accountId2, [accountNonce, [primary, ...additional]]]) {
  return objectSpread5({
    accountId: accountId2,
    accountNonce,
    additional: additional.map((b) => getBalance(api, b))
  }, getBalance(api, primary));
}
function queryBalancesFree(api, accountId2) {
  return combineLatest([
    api.query.balances["freeBalance"](accountId2),
    api.query.balances["reservedBalance"](accountId2),
    api.query.system["accountNonce"](accountId2)
  ]).pipe(map(([freeBalance, reservedBalance, accountNonce]) => [
    accountNonce,
    [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]
  ]));
}
function queryNonceOnly(api, accountId2) {
  const fill = (nonce) => [
    nonce,
    [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
  ];
  return isFunction7(api.query.system.account) ? api.query.system.account(accountId2).pipe(map(({ nonce }) => fill(nonce))) : isFunction7(api.query.system["accountNonce"]) ? api.query.system["accountNonce"](accountId2).pipe(map((nonce) => fill(nonce))) : of(fill(api.registry.createType("Index")));
}
function queryBalancesAccount(api, accountId2, modules = ["balances"]) {
  const balances = modules.map((m) => {
    var _a, _b;
    return ((_a = api.derive[m]) == null ? void 0 : _a.customAccount) || ((_b = api.query[m]) == null ? void 0 : _b.account);
  }).filter((q) => isFunction7(q));
  const extract = (nonce, data) => [
    nonce,
    data.map(({ feeFrozen, free, miscFrozen, reserved }) => [free, reserved, feeFrozen, miscFrozen])
  ];
  return balances.length ? isFunction7(api.query.system.account) ? combineLatest([
    api.query.system.account(accountId2),
    ...balances.map((c) => c(accountId2))
  ]).pipe(map(([{ nonce }, ...balances2]) => extract(nonce, balances2))) : combineLatest([
    api.query.system["accountNonce"](accountId2),
    ...balances.map((c) => c(accountId2))
  ]).pipe(map(([nonce, ...balances2]) => extract(nonce, balances2))) : queryNonceOnly(api, accountId2);
}
function querySystemAccount(api, accountId2) {
  return api.query.system.account(accountId2).pipe(map((infoOrTuple) => {
    const data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
    const nonce = infoOrTuple.nonce || infoOrTuple[0];
    if (!data || data.isEmpty) {
      return [
        nonce,
        [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
      ];
    }
    const { feeFrozen, free, miscFrozen, reserved } = data;
    return [
      nonce,
      [[free, reserved, feeFrozen, miscFrozen]]
    ];
  }));
}
function account(instanceId, api) {
  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
  const nonDefaultBalances = balanceInstances && balanceInstances[0] !== "balances";
  return memo(instanceId, (address) => api.derive.accounts.accountId(address).pipe(switchMap((accountId2) => {
    var _a, _b, _c;
    return accountId2 ? combineLatest([
      of(accountId2),
      nonDefaultBalances ? queryBalancesAccount(api, accountId2, balanceInstances) : isFunction7((_a = api.query.system) == null ? void 0 : _a.account) ? querySystemAccount(api, accountId2) : isFunction7((_b = api.query.balances) == null ? void 0 : _b.account) ? queryBalancesAccount(api, accountId2) : isFunction7((_c = api.query.balances) == null ? void 0 : _c["freeBalance"]) ? queryBalancesFree(api, accountId2) : queryNonceOnly(api, accountId2)
    ]) : of([api.registry.createType("AccountId"), [
      api.registry.createType("Index"),
      [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
    ]]);
  }), map((result) => calcBalances2(api, result))));
}

// node_modules/@polkadot/api-derive/balances/votingBalances.js
init_shim();
function votingBalances(instanceId, api) {
  return memo(instanceId, (addresses) => !(addresses == null ? void 0 : addresses.length) ? of([]) : combineLatest(addresses.map((accountId2) => api.derive.balances.account(accountId2))));
}

// node_modules/@polkadot/api-derive/balances/index.js
var votingBalance = all2;

// node_modules/@polkadot/api-derive/bounties/index.js
var bounties_exports = {};
__export(bounties_exports, {
  bounties: () => bounties
});
init_shim();

// node_modules/@polkadot/api-derive/bounties/bounties.js
init_shim();

// node_modules/@polkadot/api-derive/bounties/helpers/filterBountyProposals.js
init_shim();
function filterBountiesProposals(api, allProposals) {
  const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
  const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
  return allProposals.filter((proposal6) => bountyProposalCalls.find((bountyCall) => proposal6.proposal && bountyCall.is(proposal6.proposal)));
}

// node_modules/@polkadot/api-derive/bounties/bounties.js
function parseResult([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
  const bounties2 = [];
  maybeBounties.forEach((bounty, index) => {
    if (bounty.isSome) {
      bounties2.push({
        bounty: bounty.unwrap(),
        description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
        index: ids[index],
        proposals: bountyProposals.filter((bountyProposal) => bountyProposal.proposal && ids[index].eq(bountyProposal.proposal.args[0]))
      });
    }
  });
  return bounties2;
}
function bounties(instanceId, api) {
  const bountyBase = api.query.bounties || api.query.treasury;
  return memo(instanceId, () => bountyBase.bounties ? combineLatest([
    bountyBase.bountyCount(),
    api.query.council ? api.query.council.proposalCount() : of(0)
  ]).pipe(switchMap(() => combineLatest([
    bountyBase.bounties.keys(),
    api.derive.council ? api.derive.council.proposals() : of([])
  ])), switchMap(([keys2, proposals8]) => {
    const ids = keys2.map(({ args: [id] }) => id);
    return combineLatest([
      bountyBase.bounties.multi(ids),
      bountyBase.bountyDescriptions.multi(ids),
      of(ids),
      of(filterBountiesProposals(api, proposals8))
    ]);
  }), map(parseResult)) : of(parseResult([[], [], [], []])));
}

// node_modules/@polkadot/api-derive/chain/index.js
var chain_exports = {};
__export(chain_exports, {
  _getHeaderRange: () => _getHeaderRange,
  bestNumber: () => bestNumber,
  bestNumberFinalized: () => bestNumberFinalized,
  bestNumberLag: () => bestNumberLag,
  getBlock: () => getBlock,
  getBlockByNumber: () => getBlockByNumber,
  getHeader: () => getHeader,
  subscribeFinalizedBlocks: () => subscribeFinalizedBlocks,
  subscribeFinalizedHeads: () => subscribeFinalizedHeads,
  subscribeNewBlocks: () => subscribeNewBlocks,
  subscribeNewHeads: () => subscribeNewHeads
});
init_shim();

// node_modules/@polkadot/api-derive/chain/bestNumber.js
init_shim();

// node_modules/@polkadot/api-derive/chain/util.js
init_shim();
function createBlockNumberDerive(fn) {
  return (instanceId, api) => memo(instanceId, () => fn(api).pipe(map(unwrapBlockNumber)));
}
function getAuthorDetailsWithAt(header, queryAt) {
  var _a, _b, _c, _d;
  const validators2 = ((_a = queryAt.session) == null ? void 0 : _a.validators) ? queryAt.session.validators() : of(null);
  const { logs: [log] } = header.digest;
  const loggedAuthor = log && (log.isConsensus && log.asConsensus[0].isNimbus && log.asConsensus[1] || log.isPreRuntime && log.asPreRuntime[0].isNimbus && log.asPreRuntime[1]);
  if (loggedAuthor) {
    if ((_b = queryAt["authorMapping"]) == null ? void 0 : _b["mappingWithDeposit"]) {
      return combineLatest([
        of(header),
        validators2,
        queryAt["authorMapping"]["mappingWithDeposit"](loggedAuthor).pipe(map((o) => o.unwrapOr({ account: null }).account))
      ]);
    }
    if (((_c = queryAt["parachainStaking"]) == null ? void 0 : _c["selectedCandidates"]) && ((_d = queryAt.session) == null ? void 0 : _d.nextKeys)) {
      const loggedHex = loggedAuthor.toHex();
      return combineLatest([
        of(header),
        validators2,
        queryAt["parachainStaking"]["selectedCandidates"]().pipe(mergeMap((selectedCandidates) => combineLatest([
          of(selectedCandidates),
          queryAt.session.nextKeys.multi(selectedCandidates).pipe(map((nextKeys) => nextKeys.findIndex((o) => o.unwrapOrDefault().nimbus.toHex() === loggedHex)))
        ])), map(([selectedCandidates, index]) => index === -1 ? null : selectedCandidates[index]))
      ]);
    }
  }
  return combineLatest([
    of(header),
    validators2,
    of(null)
  ]);
}
function getAuthorDetails(api, header, blockHash) {
  return api.queryAt(header.parentHash.isEmpty ? blockHash || header.hash : header.parentHash).pipe(switchMap((queryAt) => getAuthorDetailsWithAt(header, queryAt)));
}

// node_modules/@polkadot/api-derive/chain/bestNumber.js
var bestNumber = createBlockNumberDerive((api) => api.rpc.chain.subscribeNewHeads());

// node_modules/@polkadot/api-derive/chain/bestNumberFinalized.js
init_shim();
var bestNumberFinalized = createBlockNumberDerive((api) => api.rpc.chain.subscribeFinalizedHeads());

// node_modules/@polkadot/api-derive/chain/bestNumberLag.js
init_shim();
function bestNumberLag(instanceId, api) {
  return memo(instanceId, () => combineLatest([
    api.derive.chain.bestNumber(),
    api.derive.chain.bestNumberFinalized()
  ]).pipe(map(([bestNumber2, bestNumberFinalized2]) => api.registry.createType("BlockNumber", bestNumber2.sub(bestNumberFinalized2)))));
}

// node_modules/@polkadot/api-derive/chain/getBlock.js
init_shim();

// node_modules/@polkadot/api-derive/type/index.js
init_shim();

// node_modules/@polkadot/api-derive/type/HeaderExtended.js
init_shim();

// node_modules/@polkadot/api-derive/type/util.js
init_shim();
function extractAuthor(digest, sessionValidators) {
  const [citem] = digest.logs.filter((e) => e.isConsensus);
  const [pitem] = digest.logs.filter((e) => e.isPreRuntime);
  const [sitem] = digest.logs.filter((e) => e.isSeal);
  let accountId2;
  try {
    if (pitem) {
      const [engine, data] = pitem.asPreRuntime;
      accountId2 = engine.extractAuthor(data, sessionValidators);
    }
    if (!accountId2 && citem) {
      const [engine, data] = citem.asConsensus;
      accountId2 = engine.extractAuthor(data, sessionValidators);
    }
    if (!accountId2 && sitem) {
      const [engine, data] = sitem.asSeal;
      accountId2 = engine.extractAuthor(data, sessionValidators);
    }
  } catch {
  }
  return accountId2;
}

// node_modules/@polkadot/api-derive/type/HeaderExtended.js
function createHeaderExtended(registry, header, validators2, author) {
  const HeaderBase = registry.createClass("Header");
  class Implementation extends HeaderBase {
    constructor(registry2, header2, validators3, author2) {
      super(registry2, header2);
      this.__internal__author = author2 || extractAuthor(this.digest, validators3 || []);
      this.createdAtHash = header2 == null ? void 0 : header2.createdAtHash;
    }
    /**
     * @description Convenience method, returns the author for the block
     */
    get author() {
      return this.__internal__author;
    }
  }
  return new Implementation(registry, header, validators2, author);
}

// node_modules/@polkadot/api-derive/type/SignedBlockExtended.js
init_shim();
function mapExtrinsics(extrinsics, records) {
  return extrinsics.map((extrinsic, index) => {
    let dispatchError;
    let dispatchInfo;
    const events2 = records.filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index)).map(({ event }) => {
      if (event.section === "system") {
        if (event.method === "ExtrinsicSuccess") {
          dispatchInfo = event.data[0];
        } else if (event.method === "ExtrinsicFailed") {
          dispatchError = event.data[0];
          dispatchInfo = event.data[1];
        }
      }
      return event;
    });
    return { dispatchError, dispatchInfo, events: events2, extrinsic };
  });
}
function createSignedBlockExtended(registry, block, events2, validators2, author) {
  const SignedBlockBase = registry.createClass("SignedBlock");
  class Implementation extends SignedBlockBase {
    constructor(registry2, block2, events3, validators3, author2) {
      super(registry2, block2);
      this.__internal__author = author2 || extractAuthor(this.block.header.digest, validators3 || []);
      this.__internal__events = events3 || [];
      this.__internal__extrinsics = mapExtrinsics(this.block.extrinsics, this.__internal__events);
      this.createdAtHash = block2 == null ? void 0 : block2.createdAtHash;
    }
    /**
     * @description Convenience method, returns the author for the block
     */
    get author() {
      return this.__internal__author;
    }
    /**
     * @description Convenience method, returns the events associated with the block
     */
    get events() {
      return this.__internal__events;
    }
    /**
     * @description Returns the extrinsics and their events, mapped
     */
    get extrinsics() {
      return this.__internal__extrinsics;
    }
  }
  return new Implementation(registry, block, events2, validators2, author);
}

// node_modules/@polkadot/api-derive/chain/getBlock.js
function getBlock(instanceId, api) {
  return memo(instanceId, (blockHash) => combineLatest([
    api.rpc.chain.getBlock(blockHash),
    api.queryAt(blockHash)
  ]).pipe(switchMap(([signedBlock, queryAt]) => combineLatest([
    of(signedBlock),
    queryAt.system.events(),
    getAuthorDetails(api, signedBlock.block.header, blockHash)
  ])), map(([signedBlock, events2, [, validators2, author]]) => createSignedBlockExtended(events2.registry, signedBlock, events2, validators2, author))));
}

// node_modules/@polkadot/api-derive/chain/getBlockByNumber.js
init_shim();
function getBlockByNumber(instanceId, api) {
  return memo(instanceId, (blockNumber) => api.rpc.chain.getBlockHash(blockNumber).pipe(switchMap((h) => api.derive.chain.getBlock(h))));
}

// node_modules/@polkadot/api-derive/chain/getHeader.js
init_shim();
function getHeader(instanceId, api) {
  return memo(instanceId, (blockHash) => api.rpc.chain.getHeader(blockHash).pipe(switchMap((header) => getAuthorDetails(api, header, blockHash)), map(([header, validators2, author]) => createHeaderExtended((validators2 || header).registry, header, validators2, author))));
}

// node_modules/@polkadot/api-derive/chain/subscribeFinalizedBlocks.js
init_shim();
function subscribeFinalizedBlocks(instanceId, api) {
  return memo(instanceId, () => api.derive.chain.subscribeFinalizedHeads().pipe(switchMap((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
}

// node_modules/@polkadot/api-derive/chain/subscribeFinalizedHeads.js
init_shim();
function _getHeaderRange(instanceId, api) {
  return memo(instanceId, (startHash, endHash, prev = []) => api.rpc.chain.getHeader(startHash).pipe(switchMap((header) => header.parentHash.eq(endHash) ? of([header, ...prev]) : api.derive.chain._getHeaderRange(header.parentHash, endHash, [header, ...prev]))));
}
function subscribeFinalizedHeads(instanceId, api) {
  return memo(instanceId, () => {
    let prevHash = null;
    return api.rpc.chain.subscribeFinalizedHeads().pipe(switchMap((header) => {
      const endHash = prevHash;
      const startHash = header.parentHash;
      prevHash = header.createdAtHash = header.hash;
      return endHash === null || startHash.eq(endHash) ? of(header) : api.derive.chain._getHeaderRange(startHash, endHash, [header]).pipe(switchMap((headers) => from(headers)));
    }));
  });
}

// node_modules/@polkadot/api-derive/chain/subscribeNewBlocks.js
init_shim();
function subscribeNewBlocks(instanceId, api) {
  return memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(switchMap((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
}

// node_modules/@polkadot/api-derive/chain/subscribeNewHeads.js
init_shim();
function subscribeNewHeads(instanceId, api) {
  return memo(instanceId, () => api.rpc.chain.subscribeNewHeads().pipe(switchMap((header) => getAuthorDetails(api, header)), map(([header, validators2, author]) => {
    header.createdAtHash = header.hash;
    return createHeaderExtended(header.registry, header, validators2, author);
  })));
}

// node_modules/@polkadot/api-derive/contracts/index.js
var contracts_exports = {};
__export(contracts_exports, {
  fees: () => fees
});
init_shim();

// node_modules/@polkadot/api-derive/contracts/fees.js
init_shim();
function queryConstants(api) {
  return of([
    // deprecated
    api.consts.contracts["callBaseFee"] || api.registry.createType("Balance"),
    api.consts.contracts["contractFee"] || api.registry.createType("Balance"),
    api.consts.contracts["creationFee"] || api.registry.createType("Balance"),
    api.consts.contracts["transactionBaseFee"] || api.registry.createType("Balance"),
    api.consts.contracts["transactionByteFee"] || api.registry.createType("Balance"),
    api.consts.contracts["transferFee"] || api.registry.createType("Balance"),
    // current
    api.consts.contracts["rentByteFee"] || api.registry.createType("Balance"),
    api.consts.contracts["rentDepositOffset"] || api.registry.createType("Balance"),
    api.consts.contracts["surchargeReward"] || api.registry.createType("Balance"),
    api.consts.contracts["tombstoneDeposit"] || api.registry.createType("Balance")
  ]);
}
function fees(instanceId, api) {
  return memo(instanceId, () => {
    return queryConstants(api).pipe(map(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
      callBaseFee,
      contractFee,
      creationFee,
      rentByteFee,
      rentDepositOffset,
      surchargeReward,
      tombstoneDeposit,
      transactionBaseFee,
      transactionByteFee,
      transferFee
    })));
  });
}

// node_modules/@polkadot/api-derive/council/index.js
var council_exports = {};
__export(council_exports, {
  hasProposals: () => hasProposals3,
  members: () => members3,
  prime: () => prime3,
  proposal: () => proposal3,
  proposalCount: () => proposalCount3,
  proposalHashes: () => proposalHashes3,
  proposals: () => proposals3,
  votes: () => votes,
  votesOf: () => votesOf
});
init_shim();

// node_modules/@polkadot/api-derive/council/votes.js
init_shim();
function isVoter(value) {
  return !Array.isArray(value);
}
function retrieveStakeOf(elections) {
  return elections["stakeOf"].entries().pipe(map((entries) => entries.map(([{ args: [accountId2] }, stake]) => [accountId2, stake])));
}
function retrieveVoteOf(elections) {
  return elections["votesOf"].entries().pipe(map((entries) => entries.map(([{ args: [accountId2] }, votes2]) => [accountId2, votes2])));
}
function retrievePrev(api, elections) {
  return combineLatest([
    retrieveStakeOf(elections),
    retrieveVoteOf(elections)
  ]).pipe(map(([stakes, votes2]) => {
    const result = [];
    votes2.forEach(([voter, votes3]) => {
      result.push([voter, { stake: api.registry.createType("Balance"), votes: votes3 }]);
    });
    stakes.forEach(([staker, stake]) => {
      const entry = result.find(([voter]) => voter.eq(staker));
      if (entry) {
        entry[1].stake = stake;
      } else {
        result.push([staker, { stake, votes: [] }]);
      }
    });
    return result;
  }));
}
function retrieveCurrent(elections) {
  return elections.voting.entries().pipe(map((entries) => entries.map(([{ args: [accountId2] }, value]) => [
    accountId2,
    isVoter(value) ? { stake: value.stake, votes: value.votes } : { stake: value[0], votes: value[1] }
  ])));
}
function votes(instanceId, api) {
  const elections = api.query.elections || api.query["phragmenElection"] || api.query["electionsPhragmen"];
  return memo(instanceId, () => elections ? elections["stakeOf"] ? retrievePrev(api, elections) : retrieveCurrent(elections) : of([]));
}

// node_modules/@polkadot/api-derive/council/votesOf.js
init_shim();
function votesOf(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.council.votes().pipe(map((votes2) => (votes2.find(([from2]) => from2.eq(accountId2)) || [null, { stake: api.registry.createType("Balance"), votes: [] }])[1])));
}

// node_modules/@polkadot/api-derive/council/index.js
var members3 = members("council");
var hasProposals3 = hasProposals("council");
var proposal3 = proposal("council");
var proposalCount3 = proposalCount("council");
var proposalHashes3 = proposalHashes("council");
var proposals3 = proposals("council");
var prime3 = prime("council");

// node_modules/@polkadot/api-derive/crowdloan/index.js
var crowdloan_exports = {};
__export(crowdloan_exports, {
  childKey: () => childKey,
  contributions: () => contributions,
  ownContributions: () => ownContributions
});
init_shim();

// node_modules/@polkadot/api-derive/crowdloan/childKey.js
init_shim();
function createChildKey(info6) {
  return u8aToHex6(u8aConcat6(":child_storage:default:", blake2AsU8a3(u8aConcat6("crowdloan", (info6.fundIndex || info6.trieIndex).toU8a()))));
}
function childKey(instanceId, api) {
  return memo(instanceId, (paraId) => api.query["crowdloan"]["funds"](paraId).pipe(map((optInfo) => optInfo.isSome ? createChildKey(optInfo.unwrap()) : null)));
}

// node_modules/@polkadot/api-derive/crowdloan/contributions.js
init_shim();

// node_modules/@polkadot/api-derive/crowdloan/util.js
init_shim();
function extractContributed(paraId, events2) {
  var _a;
  const added = [];
  const removed = [];
  return events2.filter(({ event: { data: [, eventParaId], method, section: section2 } }) => section2 === "crowdloan" && ["Contributed", "Withdrew"].includes(method) && eventParaId.eq(paraId)).reduce((result, { event: { data: [accountId2], method } }) => {
    if (method === "Contributed") {
      result.added.push(accountId2.toHex());
    } else {
      result.removed.push(accountId2.toHex());
    }
    return result;
  }, { added, blockHash: ((_a = events2.createdAtHash) == null ? void 0 : _a.toHex()) || "-", removed });
}

// node_modules/@polkadot/api-derive/crowdloan/contributions.js
var PAGE_SIZE_K = 1e3;
function _getUpdates(api, paraId) {
  let added = [];
  let removed = [];
  return api.query.system.events().pipe(switchMap((events2) => {
    var _a;
    const changes = extractContributed(paraId, events2);
    if (changes.added.length || changes.removed.length) {
      added = added.concat(...changes.added);
      removed = removed.concat(...changes.removed);
      return of({ added, addedDelta: changes.added, blockHash: ((_a = events2.createdAtHash) == null ? void 0 : _a.toHex()) || "-", removed, removedDelta: changes.removed });
    }
    return EMPTY;
  }), startWith({ added, addedDelta: [], blockHash: "-", removed, removedDelta: [] }));
}
function _eventTriggerAll(api, paraId) {
  return api.query.system.events().pipe(switchMap((events2) => {
    var _a;
    const items = events2.filter(({ event: { data: [eventParaId], method, section: section2 } }) => section2 === "crowdloan" && ["AllRefunded", "Dissolved", "PartiallyRefunded"].includes(method) && eventParaId.eq(paraId));
    return items.length ? of(((_a = events2.createdAtHash) == null ? void 0 : _a.toHex()) || "-") : EMPTY;
  }), startWith("-"));
}
function _getKeysPaged(api, childKey2) {
  const subject = new BehaviorSubject(void 0);
  return subject.pipe(
    switchMap((startKey) => api.rpc.childstate.getKeysPaged(childKey2, "0x", PAGE_SIZE_K, startKey)),
    tap((keys2) => {
      nextTick2(() => {
        keys2.length === PAGE_SIZE_K ? subject.next(keys2[PAGE_SIZE_K - 1].toHex()) : subject.complete();
      });
    }),
    toArray(),
    // toArray since we want to startSubject to be completed
    map((keyArr) => arrayFlatten5(keyArr))
  );
}
function _getAll(api, paraId, childKey2) {
  return _eventTriggerAll(api, paraId).pipe(switchMap(() => isFunction7(api.rpc.childstate.getKeysPaged) ? _getKeysPaged(api, childKey2) : api.rpc.childstate.getKeys(childKey2, "0x")), map((keys2) => keys2.map((k) => k.toHex())));
}
function _contributions(api, paraId, childKey2) {
  return combineLatest([
    _getAll(api, paraId, childKey2),
    _getUpdates(api, paraId)
  ]).pipe(map(([keys2, { added, blockHash, removed }]) => {
    const contributorsMap = {};
    keys2.forEach((k) => {
      contributorsMap[k] = true;
    });
    added.forEach((k) => {
      contributorsMap[k] = true;
    });
    removed.forEach((k) => {
      delete contributorsMap[k];
    });
    return {
      blockHash,
      contributorsHex: Object.keys(contributorsMap)
    };
  }));
}
function contributions(instanceId, api) {
  return memo(instanceId, (paraId) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey2) => childKey2 ? _contributions(api, paraId, childKey2) : of({ blockHash: "-", contributorsHex: [] }))));
}

// node_modules/@polkadot/api-derive/crowdloan/ownContributions.js
init_shim();
function _getValues(api, childKey2, keys2) {
  return combineLatest(keys2.map((k) => api.rpc.childstate.getStorage(childKey2, k))).pipe(map((values) => values.map((v) => api.registry.createType("Option<StorageData>", v)).map((o) => o.isSome ? api.registry.createType("Balance", o.unwrap()) : api.registry.createType("Balance")).reduce((all3, b, index) => objectSpread5(all3, { [keys2[index]]: b }), {})));
}
function _watchOwnChanges(api, paraId, childkey, keys2) {
  return api.query.system.events().pipe(switchMap((events2) => {
    const changes = extractContributed(paraId, events2);
    const filtered = keys2.filter((k) => changes.added.includes(k) || changes.removed.includes(k));
    return filtered.length ? _getValues(api, childkey, filtered) : EMPTY;
  }), startWith({}));
}
function _contributions2(api, paraId, childKey2, keys2) {
  return combineLatest([
    _getValues(api, childKey2, keys2),
    _watchOwnChanges(api, paraId, childKey2, keys2)
  ]).pipe(map(([all3, latest2]) => objectSpread5({}, all3, latest2)));
}
function ownContributions(instanceId, api) {
  return memo(instanceId, (paraId, keys2) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey2) => childKey2 && keys2.length ? _contributions2(api, paraId, childKey2, keys2) : of({}))));
}

// node_modules/@polkadot/api-derive/democracy/index.js
var democracy_exports = {};
__export(democracy_exports, {
  _referendumInfo: () => _referendumInfo,
  _referendumVotes: () => _referendumVotes,
  _referendumsVotes: () => _referendumsVotes,
  dispatchQueue: () => dispatchQueue,
  locks: () => locks,
  nextExternal: () => nextExternal,
  preimage: () => preimage,
  preimages: () => preimages,
  proposals: () => proposals4,
  referendumIds: () => referendumIds,
  referendums: () => referendums,
  referendumsActive: () => referendumsActive,
  referendumsFinished: () => referendumsFinished,
  referendumsInfo: () => referendumsInfo,
  sqrtElectorate: () => sqrtElectorate
});
init_shim();

// node_modules/@polkadot/api-derive/democracy/dispatchQueue.js
init_shim();

// node_modules/@polkadot/api-derive/democracy/util.js
init_shim();
function isOldInfo(info6) {
  return !!info6.proposalHash;
}
function isCurrentStatus(status) {
  return !!status.tally;
}
function compareRationals(n1, d1, n2, d2) {
  while (true) {
    const q1 = n1.div(d1);
    const q2 = n2.div(d2);
    if (q1.lt(q2)) {
      return true;
    } else if (q2.lt(q1)) {
      return false;
    }
    const r1 = n1.mod(d1);
    const r2 = n2.mod(d2);
    if (r2.isZero()) {
      return false;
    } else if (r1.isZero()) {
      return true;
    }
    n1 = d2;
    n2 = d1;
    d1 = r2;
    d2 = r1;
  }
}
function calcPassingOther(threshold, sqrtElectorate2, { votedAye, votedNay, votedTotal }) {
  const sqrtVoters = bnSqrt5(votedTotal);
  return sqrtVoters.isZero() ? false : threshold.isSuperMajorityApprove ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate2) : compareRationals(votedNay, sqrtElectorate2, votedAye, sqrtVoters);
}
function calcPassing(threshold, sqrtElectorate2, state) {
  return threshold.isSimpleMajority ? state.votedAye.gt(state.votedNay) : calcPassingOther(threshold, sqrtElectorate2, state);
}
function calcVotesPrev(votesFor) {
  return votesFor.reduce((state, derived) => {
    const { balance, vote } = derived;
    const isDefault = vote.conviction.index === 0;
    const counted = balance.muln(isDefault ? 1 : vote.conviction.index).divn(isDefault ? 10 : 1);
    if (vote.isAye) {
      state.allAye.push(derived);
      state.voteCountAye++;
      state.votedAye.iadd(counted);
    } else {
      state.allNay.push(derived);
      state.voteCountNay++;
      state.votedNay.iadd(counted);
    }
    state.voteCount++;
    state.votedTotal.iadd(counted);
    return state;
  }, { allAye: [], allNay: [], voteCount: 0, voteCountAye: 0, voteCountNay: 0, votedAye: new import_bn64.default(0), votedNay: new import_bn64.default(0), votedTotal: new import_bn64.default(0) });
}
function calcVotesCurrent(tally, votes2) {
  const allAye = [];
  const allNay = [];
  votes2.forEach((derived) => {
    if (derived.vote.isAye) {
      allAye.push(derived);
    } else {
      allNay.push(derived);
    }
  });
  return {
    allAye,
    allNay,
    voteCount: allAye.length + allNay.length,
    voteCountAye: allAye.length,
    voteCountNay: allNay.length,
    votedAye: tally.ayes,
    votedNay: tally.nays,
    votedTotal: tally.turnout
  };
}
function calcVotes(sqrtElectorate2, referendum, votes2) {
  const state = isCurrentStatus(referendum.status) ? calcVotesCurrent(referendum.status.tally, votes2) : calcVotesPrev(votes2);
  return objectSpread5({}, state, {
    isPassing: calcPassing(referendum.status.threshold, sqrtElectorate2, state),
    votes: votes2
  });
}
function getStatus(info6) {
  if (info6.isNone) {
    return null;
  }
  const unwrapped = info6.unwrap();
  return isOldInfo(unwrapped) ? unwrapped : unwrapped.isOngoing ? unwrapped.asOngoing : null;
}
function getImageHashBounded(hash5) {
  return hash5.isLegacy ? hash5.asLegacy.hash_.toHex() : hash5.isLookup ? hash5.asLookup.hash_.toHex() : hash5.isInline ? hash5.asInline.hash.toHex() : isString6(hash5) ? isHex6(hash5) ? hash5 : stringToHex5(hash5) : isU8a6(hash5) ? u8aToHex6(hash5) : hash5.toHex();
}
function getImageHash(status) {
  return getImageHashBounded(status.proposal || status.proposalHash);
}

// node_modules/@polkadot/api-derive/democracy/dispatchQueue.js
var DEMOCRACY_ID = stringToHex5("democrac");
function isMaybeHashedOrBounded(call) {
  return call instanceof Enum;
}
function isBounded(call) {
  return call.isInline || call.isLegacy || call.isLookup;
}
function queryQueue(api) {
  return api.query.democracy["dispatchQueue"]().pipe(switchMap((dispatches) => combineLatest([
    of(dispatches),
    api.derive.democracy.preimages(dispatches.map(([, hash5]) => hash5))
  ])), map(([dispatches, images]) => dispatches.map(([at, imageHash, index], dispatchIndex) => ({
    at,
    image: images[dispatchIndex],
    imageHash: getImageHashBounded(imageHash),
    index
  }))));
}
function schedulerEntries(api) {
  return api.derive.democracy.referendumsFinished().pipe(switchMap(() => api.query.scheduler.agenda.keys()), switchMap((keys2) => {
    const blockNumbers = keys2.map(({ args: [blockNumber] }) => blockNumber);
    return blockNumbers.length ? combineLatest([
      of(blockNumbers),
      // this should simply be api.query.scheduler.agenda.multi,
      // however we have had cases on Darwinia where the indices have moved around after an
      // upgrade, which results in invalid on-chain data
      api.query.scheduler.agenda.multi(blockNumbers).pipe(catchError(() => of(blockNumbers.map(() => []))))
    ]) : of([[], []]);
  }));
}
function queryScheduler(api) {
  return schedulerEntries(api).pipe(switchMap(([blockNumbers, agendas]) => {
    const result = [];
    blockNumbers.forEach((at, index) => {
      (agendas[index] || []).filter((o) => o.isSome).forEach((o) => {
        const scheduled2 = o.unwrap();
        if (scheduled2.maybeId.isSome) {
          const id = scheduled2.maybeId.unwrap().toHex();
          if (id.startsWith(DEMOCRACY_ID)) {
            const imageHash = isMaybeHashedOrBounded(scheduled2.call) ? isBounded(scheduled2.call) ? getImageHashBounded(scheduled2.call) : scheduled2.call.isHash ? scheduled2.call.asHash.toHex() : scheduled2.call.asValue.args[0].toHex() : scheduled2.call.args[0].toHex();
            result.push({ at, imageHash, index: api.registry.createType("(u64, ReferendumIndex)", id)[1] });
          }
        }
      });
    });
    return combineLatest([
      of(result),
      result.length ? api.derive.democracy.preimages(result.map(({ imageHash }) => imageHash)) : of([])
    ]);
  }), map(([infos, images]) => infos.map((info6, index) => objectSpread5({ image: images[index] }, info6))));
}
function dispatchQueue(instanceId, api) {
  return memo(instanceId, () => {
    var _a;
    return isFunction7((_a = api.query.scheduler) == null ? void 0 : _a.agenda) ? queryScheduler(api) : api.query.democracy["dispatchQueue"] ? queryQueue(api) : of([]);
  });
}

// node_modules/@polkadot/api-derive/democracy/locks.js
init_shim();
var LOCKUPS = [0, 1, 2, 4, 8, 16, 32];
function parseEnd(api, vote, { approved, end }) {
  return [
    end,
    approved.isTrue && vote.isAye || approved.isFalse && vote.isNay ? end.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index])) : BN_ZERO5
  ];
}
function parseLock(api, [referendumId, accountVote], referendum) {
  const { balance, vote } = accountVote.asStandard;
  const [referendumEnd, unlockAt] = referendum.isFinished ? parseEnd(api, vote, referendum.asFinished) : [BN_ZERO5, BN_ZERO5];
  return { balance, isDelegated: false, isFinished: referendum.isFinished, referendumEnd, referendumId, unlockAt, vote };
}
function delegateLocks(api, { balance, conviction, target }) {
  return api.derive.democracy.locks(target).pipe(map((available) => available.map(({ isFinished, referendumEnd, referendumId, unlockAt, vote }) => ({
    balance,
    isDelegated: true,
    isFinished,
    referendumEnd,
    referendumId,
    unlockAt: unlockAt.isZero() ? unlockAt : referendumEnd.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
    vote: api.registry.createType("Vote", { aye: vote.isAye, conviction })
  }))));
}
function directLocks(api, { votes: votes2 }) {
  if (!votes2.length) {
    return of([]);
  }
  return api.query.democracy.referendumInfoOf.multi(votes2.map(([referendumId]) => referendumId)).pipe(map((referendums2) => votes2.map((vote, index) => [vote, referendums2[index].unwrapOr(null)]).filter((item) => !!item[1] && isUndefined5(item[1].end) && item[0][1].isStandard).map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
}
function locks(instanceId, api) {
  return memo(instanceId, (accountId2) => api.query.democracy.votingOf ? api.query.democracy.votingOf(accountId2).pipe(switchMap((voting) => voting.isDirect ? directLocks(api, voting.asDirect) : voting.isDelegating ? delegateLocks(api, voting.asDelegating) : of([]))) : of([]));
}

// node_modules/@polkadot/api-derive/democracy/nextExternal.js
init_shim();
function withImage(api, nextOpt) {
  if (nextOpt.isNone) {
    return of(null);
  }
  const [hash5, threshold] = nextOpt.unwrap();
  return api.derive.democracy.preimage(hash5).pipe(map((image) => ({
    image,
    imageHash: getImageHashBounded(hash5),
    threshold
  })));
}
function nextExternal(instanceId, api) {
  return memo(instanceId, () => {
    var _a;
    return ((_a = api.query.democracy) == null ? void 0 : _a.nextExternal) ? api.query.democracy.nextExternal().pipe(switchMap((nextOpt) => withImage(api, nextOpt))) : of(null);
  });
}

// node_modules/@polkadot/api-derive/democracy/preimages.js
init_shim();
function isDemocracyPreimage(api, imageOpt) {
  return !!imageOpt && !api.query.democracy["dispatchQueue"];
}
function constructProposal(api, [bytes5, proposer, balance, at]) {
  let proposal6;
  try {
    proposal6 = api.registry.createType("Call", bytes5.toU8a(true));
  } catch (error) {
    console.error(error);
  }
  return { at, balance, proposal: proposal6, proposer };
}
function parseDemocracy(api, imageOpt) {
  if (imageOpt.isNone) {
    return;
  }
  if (isDemocracyPreimage(api, imageOpt)) {
    const status = imageOpt.unwrap();
    if (status.isMissing) {
      return;
    }
    const { data, deposit, provider, since } = status.asAvailable;
    return constructProposal(api, [data, provider, deposit, since]);
  }
  return constructProposal(api, imageOpt.unwrap());
}
function parseImage(api, [proposalHash, status, bytes5]) {
  if (!status) {
    return void 0;
  }
  const [proposer, balance] = status.isUnrequested ? status.asUnrequested.deposit : status.asRequested.deposit.unwrapOrDefault();
  let proposal6;
  if (bytes5) {
    try {
      proposal6 = api.registry.createType("Call", bytes5.toU8a(true));
    } catch (error) {
      console.error(error);
    }
  }
  return { at: BN_ZERO5, balance, proposal: proposal6, proposalHash, proposer };
}
function getDemocracyImages(api, bounded) {
  const hashes = bounded.map((b) => getImageHashBounded(b));
  return api.query.democracy["preimages"].multi(hashes).pipe(map((images) => images.map((imageOpt) => parseDemocracy(api, imageOpt))));
}
function getImages(api, bounded) {
  const hashes = bounded.map((b) => getImageHashBounded(b));
  const bytesType = api.registry.lookup.getTypeDef(api.query.preimage.preimageFor.creator.meta.type.asMap.key).type;
  return api.query.preimage.statusFor.multi(hashes).pipe(switchMap((optStatus) => {
    const statuses = optStatus.map((o) => o.unwrapOr(null));
    const keys2 = statuses.map((s, i) => s ? bytesType === "H256" ? hashes[i] : s.isRequested ? [hashes[i], s.asRequested.len.unwrapOr(0)] : [hashes[i], s.asUnrequested.len] : null).filter((p) => !!p);
    return api.query.preimage.preimageFor.multi(keys2).pipe(map((optBytes) => {
      let ptr = -1;
      return statuses.map((s, i) => s ? [hashes[i], s, optBytes[++ptr].unwrapOr(null)] : [hashes[i], null, null]).map((v) => parseImage(api, v));
    }));
  }));
}
function preimages(instanceId, api) {
  return memo(instanceId, (hashes) => hashes.length ? isFunction7(api.query.democracy["preimages"]) ? getDemocracyImages(api, hashes) : isFunction7(api.query.preimage.preimageFor) ? getImages(api, hashes) : of([]) : of([]));
}
var preimage = firstMemo((api, hash5) => api.derive.democracy.preimages([hash5]));

// node_modules/@polkadot/api-derive/democracy/proposals.js
init_shim();
function isNewDepositors(depositors) {
  return isFunction7(depositors[1].mul);
}
function parse2([proposals8, images, optDepositors]) {
  return proposals8.filter(([, , proposer], index) => {
    var _a;
    return !!((_a = optDepositors[index]) == null ? void 0 : _a.isSome) && !proposer.isEmpty;
  }).map(([index, hash5, proposer], proposalIndex) => {
    const depositors = optDepositors[proposalIndex].unwrap();
    return objectSpread5({
      image: images[proposalIndex],
      imageHash: getImageHashBounded(hash5),
      index,
      proposer
    }, isNewDepositors(depositors) ? { balance: depositors[1], seconds: depositors[0] } : { balance: depositors[0], seconds: depositors[1] });
  });
}
function proposals4(instanceId, api) {
  return memo(instanceId, () => {
    var _a;
    return isFunction7((_a = api.query.democracy) == null ? void 0 : _a.publicProps) ? api.query.democracy.publicProps().pipe(switchMap((proposals8) => proposals8.length ? combineLatest([
      of(proposals8),
      api.derive.democracy.preimages(proposals8.map(([, hash5]) => hash5)),
      api.query.democracy.depositOf.multi(proposals8.map(([index]) => index))
    ]) : of([[], [], []])), map(parse2)) : of([]);
  });
}

// node_modules/@polkadot/api-derive/democracy/referendumIds.js
init_shim();
function referendumIds(instanceId, api) {
  return memo(instanceId, () => {
    var _a;
    return ((_a = api.query.democracy) == null ? void 0 : _a.lowestUnbaked) ? api.queryMulti([
      api.query.democracy.lowestUnbaked,
      api.query.democracy.referendumCount
    ]).pipe(map(([first2, total]) => total.gt(first2) ? [...Array(total.sub(first2).toNumber())].map((_, i) => first2.addn(i)) : [])) : of([]);
  });
}

// node_modules/@polkadot/api-derive/democracy/referendums.js
init_shim();
function referendums(instanceId, api) {
  return memo(instanceId, () => api.derive.democracy.referendumsActive().pipe(switchMap((referendums2) => referendums2.length ? combineLatest([
    of(referendums2),
    api.derive.democracy._referendumsVotes(referendums2)
  ]) : of([[], []])), map(([referendums2, votes2]) => referendums2.map((referendum, index) => objectSpread5({}, referendum, votes2[index])))));
}

// node_modules/@polkadot/api-derive/democracy/referendumsActive.js
init_shim();
function referendumsActive(instanceId, api) {
  return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => ids.length ? api.derive.democracy.referendumsInfo(ids) : of([]))));
}

// node_modules/@polkadot/api-derive/democracy/referendumsFinished.js
init_shim();
function referendumsFinished(instanceId, api) {
  return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => api.query.democracy.referendumInfoOf.multi(ids)), map((infos) => infos.map((o) => o.unwrapOr(null)).filter((info6) => !!info6 && info6.isFinished).map((info6) => info6.asFinished))));
}

// node_modules/@polkadot/api-derive/democracy/referendumsInfo.js
init_shim();
function votesPrev(api, referendumId) {
  return api.query.democracy["votersFor"](referendumId).pipe(switchMap((votersFor) => combineLatest([
    of(votersFor),
    votersFor.length ? api.query.democracy["voteOf"].multi(votersFor.map((accountId2) => [referendumId, accountId2])) : of([]),
    api.derive.balances.votingBalances(votersFor)
  ])), map(([votersFor, votes2, balances]) => votersFor.map((accountId2, index) => ({
    accountId: accountId2,
    balance: balances[index].votingBalance || api.registry.createType("Balance"),
    isDelegating: false,
    vote: votes2[index] || api.registry.createType("Vote")
  }))));
}
function extractVotes(mapped, referendumId) {
  return mapped.filter(([, voting]) => voting.isDirect).map(([accountId2, voting]) => [
    accountId2,
    voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))
  ]).filter(([, directVotes]) => !!directVotes.length).reduce((result, [accountId2, votes2]) => (
    // FIXME We are ignoring split votes
    votes2.reduce((result2, [, vote]) => {
      if (vote.isStandard) {
        result2.push(objectSpread5({
          accountId: accountId2,
          isDelegating: false
        }, vote.asStandard));
      }
      return result2;
    }, result)
  ), []);
}
function votesCurr(api, referendumId) {
  return api.query.democracy.votingOf.entries().pipe(map((allVoting) => {
    const mapped = allVoting.map(([{ args: [accountId2] }, voting]) => [accountId2, voting]);
    const votes2 = extractVotes(mapped, referendumId);
    const delegations = mapped.filter(([, voting]) => voting.isDelegating).map(([accountId2, voting]) => [accountId2, voting.asDelegating]);
    delegations.forEach(([accountId2, { balance, conviction, target }]) => {
      const toDelegator = delegations.find(([accountId3]) => accountId3.eq(target));
      const to = votes2.find(({ accountId: accountId3 }) => accountId3.eq(toDelegator ? toDelegator[0] : target));
      if (to) {
        votes2.push({
          accountId: accountId2,
          balance,
          isDelegating: true,
          vote: api.registry.createType("Vote", { aye: to.vote.isAye, conviction })
        });
      }
    });
    return votes2;
  }));
}
function _referendumVotes(instanceId, api) {
  return memo(instanceId, (referendum) => combineLatest([
    api.derive.democracy.sqrtElectorate(),
    isFunction7(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)
  ]).pipe(map(([sqrtElectorate2, votes2]) => calcVotes(sqrtElectorate2, referendum, votes2))));
}
function _referendumsVotes(instanceId, api) {
  return memo(instanceId, (referendums2) => referendums2.length ? combineLatest(referendums2.map((referendum) => api.derive.democracy._referendumVotes(referendum))) : of([]));
}
function _referendumInfo(instanceId, api) {
  return memo(instanceId, (index, info6) => {
    const status = getStatus(info6);
    return status ? api.derive.democracy.preimage(status.proposal || status.proposalHash).pipe(map((image) => ({
      image,
      imageHash: getImageHash(status),
      index: api.registry.createType("ReferendumIndex", index),
      status
    }))) : of(null);
  });
}
function referendumsInfo(instanceId, api) {
  return memo(instanceId, (ids) => ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe(switchMap((infos) => combineLatest(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), map((infos) => infos.filter((r) => !!r))) : of([]));
}

// node_modules/@polkadot/api-derive/democracy/sqrtElectorate.js
init_shim();
function sqrtElectorate(instanceId, api) {
  return memo(instanceId, () => api.query.balances.totalIssuance().pipe(map(bnSqrt5)));
}

// node_modules/@polkadot/api-derive/elections/index.js
var elections_exports = {};
__export(elections_exports, {
  info: () => info2
});
init_shim();

// node_modules/@polkadot/api-derive/elections/info.js
init_shim();
function isSeatHolder(value) {
  return !Array.isArray(value);
}
function isCandidateTuple(value) {
  return Array.isArray(value);
}
function getAccountTuple(value) {
  return isSeatHolder(value) ? [value.who, value.stake] : value;
}
function getCandidate(value) {
  return isCandidateTuple(value) ? value[0] : value;
}
function sortAccounts([, balanceA], [, balanceB]) {
  return balanceB.cmp(balanceA);
}
function getConstants(api, elections) {
  return elections ? {
    candidacyBond: api.consts[elections].candidacyBond,
    desiredRunnersUp: api.consts[elections].desiredRunnersUp,
    desiredSeats: api.consts[elections].desiredMembers,
    termDuration: api.consts[elections].termDuration,
    votingBond: api.consts[elections]["votingBond"],
    votingBondBase: api.consts[elections].votingBondBase,
    votingBondFactor: api.consts[elections].votingBondFactor
  } : {};
}
function getModules(api) {
  const [council] = api.registry.getModuleInstances(api.runtimeVersion.specName, "council") || ["council"];
  const elections = api.query["phragmenElection"] ? "phragmenElection" : api.query["electionsPhragmen"] ? "electionsPhragmen" : api.query.elections ? "elections" : null;
  return [council, elections];
}
function queryAll(api, council, elections) {
  return api.queryMulti([
    api.query[council].members,
    api.query[elections].candidates,
    api.query[elections].members,
    api.query[elections].runnersUp
  ]);
}
function queryCouncil(api, council) {
  return combineLatest([
    api.query[council].members(),
    of([]),
    of([]),
    of([])
  ]);
}
function info2(instanceId, api) {
  return memo(instanceId, () => {
    const [council, elections] = getModules(api);
    return (elections ? queryAll(api, council, elections) : queryCouncil(api, council)).pipe(map(([councilMembers, candidates2, members7, runnersUp]) => objectSpread5({}, getConstants(api, elections), {
      candidateCount: api.registry.createType("u32", candidates2.length),
      candidates: candidates2.map(getCandidate),
      members: members7.length ? members7.map(getAccountTuple).sort(sortAccounts) : councilMembers.map((a) => [a, api.registry.createType("Balance")]),
      runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
    })));
  });
}

// node_modules/@polkadot/api-derive/imOnline/index.js
var imOnline_exports = {};
__export(imOnline_exports, {
  receivedHeartbeats: () => receivedHeartbeats
});
init_shim();

// node_modules/@polkadot/api-derive/imOnline/receivedHeartbeats.js
init_shim();
function mapResult([result, validators2, heartbeats, numBlocks]) {
  validators2.forEach((validator, index) => {
    const validatorId = validator.toString();
    const blockCount = numBlocks[index];
    const hasMessage = !heartbeats[index].isEmpty;
    const prev = result[validatorId];
    if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
      result[validatorId] = {
        blockCount,
        hasMessage,
        isOnline: hasMessage || blockCount.gt(BN_ZERO5)
      };
    }
  });
  return result;
}
function receivedHeartbeats(instanceId, api) {
  return memo(instanceId, () => {
    var _a;
    return ((_a = api.query.imOnline) == null ? void 0 : _a.receivedHeartbeats) ? api.derive.staking.overview().pipe(switchMap(({ currentIndex, validators: validators2 }) => combineLatest([
      of({}),
      of(validators2),
      api.query.imOnline.receivedHeartbeats.multi(validators2.map((_address, index) => [currentIndex, index])),
      api.query.imOnline.authoredBlocks.multi(validators2.map((address) => [currentIndex, address]))
    ])), map(mapResult)) : of({});
  });
}

// node_modules/@polkadot/api-derive/membership/index.js
var membership_exports = {};
__export(membership_exports, {
  hasProposals: () => hasProposals4,
  members: () => members4,
  prime: () => prime4,
  proposal: () => proposal4,
  proposalCount: () => proposalCount4,
  proposalHashes: () => proposalHashes4,
  proposals: () => proposals5
});
init_shim();
var members4 = members("membership");
var hasProposals4 = hasProposals("membership");
var proposal4 = proposal("membership");
var proposalCount4 = proposalCount("membership");
var proposalHashes4 = proposalHashes("membership");
var proposals5 = proposals("membership");
var prime4 = prime("membership");

// node_modules/@polkadot/api-derive/parachains/index.js
var parachains_exports = {};
__export(parachains_exports, {
  info: () => info3,
  overview: () => overview
});
init_shim();

// node_modules/@polkadot/api-derive/parachains/info.js
init_shim();

// node_modules/@polkadot/api-derive/parachains/util.js
init_shim();
function didUpdateToBool(didUpdate, id) {
  return didUpdate.isSome ? didUpdate.unwrap().some((paraId) => paraId.eq(id)) : false;
}

// node_modules/@polkadot/api-derive/parachains/info.js
function parseActive(id, active) {
  const found = active.find(([paraId]) => paraId === id);
  if (found && found[1].isSome) {
    const [collatorId, retriable] = found[1].unwrap();
    return objectSpread5({ collatorId }, retriable.isWithRetries ? {
      isRetriable: true,
      retries: retriable.asWithRetries.toNumber()
    } : {
      isRetriable: false,
      retries: 0
    });
  }
  return null;
}
function parseCollators(id, collatorQueue) {
  return collatorQueue.map((queue2) => {
    const found = queue2.find(([paraId]) => paraId === id);
    return found ? found[1] : null;
  });
}
function parse3(id, [active, retryQueue, selectedThreads, didUpdate, info6, pendingSwap, heads, relayDispatchQueue]) {
  if (info6.isNone) {
    return null;
  }
  return {
    active: parseActive(id, active),
    didUpdate: didUpdateToBool(didUpdate, id),
    heads,
    id,
    info: objectSpread5({ id }, info6.unwrap()),
    pendingSwapId: pendingSwap.unwrapOr(null),
    relayDispatchQueue,
    retryCollators: parseCollators(id, retryQueue),
    selectedCollators: parseCollators(id, selectedThreads)
  };
}
function info3(instanceId, api) {
  return memo(instanceId, (id) => api.query["registrar"] && api.query["parachains"] ? api.queryMulti([
    api.query["registrar"]["active"],
    api.query["registrar"]["retryQueue"],
    api.query["registrar"]["selectedThreads"],
    api.query["parachains"]["didUpdate"],
    [api.query["registrar"]["paras"], id],
    [api.query["registrar"]["pendingSwap"], id],
    [api.query["parachains"]["heads"], id],
    [api.query["parachains"]["relayDispatchQueue"], id]
  ]).pipe(map((result) => parse3(api.registry.createType("ParaId", id), result))) : of(null));
}

// node_modules/@polkadot/api-derive/parachains/overview.js
init_shim();
function parse4([ids, didUpdate, relayDispatchQueueSizes, infos, pendingSwaps]) {
  return ids.map((id, index) => ({
    didUpdate: didUpdateToBool(didUpdate, id),
    id,
    info: objectSpread5({ id }, infos[index].unwrapOr(null)),
    pendingSwapId: pendingSwaps[index].unwrapOr(null),
    relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
  }));
}
function overview(instanceId, api) {
  return memo(instanceId, () => {
    var _a;
    return ((_a = api.query["registrar"]) == null ? void 0 : _a["parachains"]) && api.query["parachains"] ? api.query["registrar"]["parachains"]().pipe(switchMap((paraIds) => combineLatest([
      of(paraIds),
      api.query["parachains"]["didUpdate"](),
      api.query["parachains"]["relayDispatchQueueSize"].multi(paraIds),
      api.query["registrar"]["paras"].multi(paraIds),
      api.query["registrar"]["pendingSwap"].multi(paraIds)
    ])), map(parse4)) : of([]);
  });
}

// node_modules/@polkadot/api-derive/session/index.js
var session_exports = {};
__export(session_exports, {
  eraLength: () => eraLength,
  eraProgress: () => eraProgress,
  indexes: () => indexes2,
  info: () => info4,
  progress: () => progress,
  sessionProgress: () => sessionProgress
});
init_shim();

// node_modules/@polkadot/api-derive/session/indexes.js
init_shim();
function parse5([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
  return {
    activeEra,
    activeEraStart,
    currentEra,
    currentIndex,
    validatorCount
  };
}
function queryStaking(api) {
  return api.queryMulti([
    api.query.session.currentIndex,
    api.query.staking.activeEra,
    api.query.staking.currentEra,
    api.query.staking.validatorCount
  ]).pipe(map(([currentIndex, activeOpt, currentEra, validatorCount]) => {
    const { index, start } = activeOpt.unwrapOrDefault();
    return parse5([
      currentIndex,
      index,
      start,
      currentEra.unwrapOrDefault(),
      validatorCount
    ]);
  }));
}
function querySession(api) {
  return api.query.session.currentIndex().pipe(map((currentIndex) => parse5([
    currentIndex,
    api.registry.createType("EraIndex"),
    api.registry.createType("Option<Moment>"),
    api.registry.createType("EraIndex"),
    api.registry.createType("u32")
  ])));
}
function empty2(api) {
  return of(parse5([
    api.registry.createType("SessionIndex", 1),
    api.registry.createType("EraIndex"),
    api.registry.createType("Option<Moment>"),
    api.registry.createType("EraIndex"),
    api.registry.createType("u32")
  ]));
}
function indexes2(instanceId, api) {
  return memo(instanceId, () => api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty2(api));
}

// node_modules/@polkadot/api-derive/session/info.js
init_shim();
function info4(instanceId, api) {
  return memo(instanceId, () => api.derive.session.indexes().pipe(map((indexes3) => {
    var _a, _b, _c, _d;
    const sessionLength = ((_b = (_a = api.consts) == null ? void 0 : _a.babe) == null ? void 0 : _b.epochDuration) || api.registry.createType("u64", 1);
    const sessionsPerEra = ((_d = (_c = api.consts) == null ? void 0 : _c.staking) == null ? void 0 : _d.sessionsPerEra) || api.registry.createType("SessionIndex", 1);
    return objectSpread5({
      eraLength: api.registry.createType("BlockNumber", sessionsPerEra.mul(sessionLength)),
      isEpoch: !!api.query.babe,
      sessionLength,
      sessionsPerEra
    }, indexes3);
  })));
}

// node_modules/@polkadot/api-derive/session/progress.js
init_shim();
function withProgressField(field) {
  return (instanceId, api) => memo(instanceId, () => api.derive.session.progress().pipe(map((info6) => info6[field])));
}
function createDerive(api, info6, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
  const epochStartSlot = epochIndex.mul(info6.sessionLength).iadd(epochOrGenesisStartSlot);
  const sessionProgress2 = currentSlot.sub(epochStartSlot);
  const eraProgress2 = info6.currentIndex.sub(activeEraStartSessionIndex).imul(info6.sessionLength).iadd(sessionProgress2);
  return objectSpread5({
    eraProgress: api.registry.createType("BlockNumber", eraProgress2),
    sessionProgress: api.registry.createType("BlockNumber", sessionProgress2)
  }, info6);
}
function queryAura(api) {
  return api.derive.session.info().pipe(map((info6) => objectSpread5({
    eraProgress: api.registry.createType("BlockNumber"),
    sessionProgress: api.registry.createType("BlockNumber")
  }, info6)));
}
function queryBabe(api) {
  return api.derive.session.info().pipe(switchMap((info6) => {
    var _a;
    return combineLatest([
      of(info6),
      // we may have no staking, but have babe (permissioned)
      ((_a = api.query.staking) == null ? void 0 : _a.erasStartSessionIndex) ? api.queryMulti([
        api.query.babe.currentSlot,
        api.query.babe.epochIndex,
        api.query.babe.genesisSlot,
        [api.query.staking.erasStartSessionIndex, info6.activeEra]
      ]) : api.queryMulti([
        api.query.babe.currentSlot,
        api.query.babe.epochIndex,
        api.query.babe.genesisSlot
      ])
    ]);
  }), map(([info6, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [
    info6,
    [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType("SessionIndex", 1)]
  ]));
}
function progress(instanceId, api) {
  return memo(instanceId, () => api.query.babe ? queryBabe(api).pipe(map(([info6, slots]) => createDerive(api, info6, slots))) : queryAura(api));
}
var eraLength = withProgressField("eraLength");
var eraProgress = withProgressField("eraProgress");
var sessionProgress = withProgressField("sessionProgress");

// node_modules/@polkadot/api-derive/society/index.js
var society_exports = {};
__export(society_exports, {
  _members: () => _members,
  candidates: () => candidates,
  info: () => info5,
  member: () => member,
  members: () => members5
});
init_shim();

// node_modules/@polkadot/api-derive/society/candidates.js
init_shim();
function getPrev(api) {
  return api.query.society.candidates().pipe(switchMap((candidates2) => combineLatest([
    of(candidates2),
    api.query.society["suspendedCandidates"].multi(candidates2.map(({ who }) => who))
  ])), map(([candidates2, suspended]) => candidates2.map(({ kind, value, who }, index) => ({
    accountId: who,
    isSuspended: suspended[index].isSome,
    kind,
    value
  }))));
}
function getCurr(api) {
  return api.query.society.candidates.entries().pipe(map((entries) => entries.filter(([, opt]) => opt.isSome).map(([{ args: [accountId2] }, opt]) => [accountId2, opt.unwrap()]).map(([accountId2, { bid, kind }]) => ({
    accountId: accountId2,
    isSuspended: false,
    kind,
    value: bid
  }))));
}
function candidates(instanceId, api) {
  return memo(instanceId, () => api.query.society["suspendedCandidates"] && api.query.society.candidates.creator.meta.type.isPlain ? getPrev(api) : getCurr(api));
}

// node_modules/@polkadot/api-derive/society/info.js
init_shim();
function info5(instanceId, api) {
  return memo(instanceId, () => combineLatest([
    api.query.society.bids(),
    api.query.society["defender"] ? api.query.society["defender"]() : of(void 0),
    api.query.society.founder(),
    api.query.society.head(),
    api.query.society["maxMembers"] ? api.query.society["maxMembers"]() : of(void 0),
    api.query.society.pot()
  ]).pipe(map(([bids, defender, founder, head, maxMembers, pot]) => ({
    bids,
    defender: defender == null ? void 0 : defender.unwrapOr(void 0),
    founder: founder.unwrapOr(void 0),
    hasDefender: (defender == null ? void 0 : defender.isSome) && head.isSome && !head.eq(defender) || false,
    head: head.unwrapOr(void 0),
    maxMembers,
    pot
  }))));
}

// node_modules/@polkadot/api-derive/society/member.js
init_shim();
function member(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.society._members([accountId2]).pipe(map(([result]) => result)));
}

// node_modules/@polkadot/api-derive/society/members.js
init_shim();
function _membersPrev(api, accountIds) {
  return combineLatest([
    of(accountIds),
    api.query.society.payouts.multi(accountIds),
    api.query.society["strikes"].multi(accountIds),
    api.query.society.defenderVotes.multi(accountIds),
    api.query.society.suspendedMembers.multi(accountIds),
    api.query.society["vouching"].multi(accountIds)
  ]).pipe(map(([accountIds2, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds2.map((accountId2, index) => ({
    accountId: accountId2,
    isDefenderVoter: defenderVotes[index].isSome,
    isSuspended: suspended[index].isTrue,
    payouts: payouts[index],
    strikes: strikes[index],
    vote: defenderVotes[index].unwrapOr(void 0),
    vouching: vouching[index].unwrapOr(void 0)
  }))));
}
function _membersCurr(api, accountIds) {
  return combineLatest([
    of(accountIds),
    api.query.society.members.multi(accountIds),
    api.query.society.payouts.multi(accountIds),
    api.query.society.defenderVotes.multi(accountIds),
    api.query.society.suspendedMembers.multi(accountIds)
  ]).pipe(map(([accountIds2, members7, payouts, defenderVotes, suspendedMembers]) => accountIds2.map((accountId2, index) => members7[index].isSome ? {
    accountId: accountId2,
    isDefenderVoter: defenderVotes[index].isSome ? defenderVotes[index].unwrap().approve.isTrue : false,
    isSuspended: suspendedMembers[index].isSome,
    member: members7[index].unwrap(),
    payouts: payouts[index].payouts
  } : null).filter((m) => !!m).map(({ accountId: accountId2, isDefenderVoter, isSuspended, member: member2, payouts: payouts2 }) => ({
    accountId: accountId2,
    isDefenderVoter,
    isSuspended,
    payouts: payouts2,
    strikes: member2.strikes,
    vouching: member2.vouching.unwrapOr(void 0)
  }))));
}
function _members(instanceId, api) {
  return memo(instanceId, (accountIds) => api.query.society.members.creator.meta.type.isMap ? _membersCurr(api, accountIds) : _membersPrev(api, accountIds));
}
function members5(instanceId, api) {
  return memo(instanceId, () => api.query.society.members.creator.meta.type.isMap ? api.query.society.members.keys().pipe(switchMap((keys2) => api.derive.society._members(keys2.map(({ args: [accountId2] }) => accountId2)))) : api.query.society.members().pipe(switchMap((members7) => api.derive.society._members(members7))));
}

// node_modules/@polkadot/api-derive/staking/index.js
var staking_exports = {};
__export(staking_exports, {
  _eraExposure: () => _eraExposure,
  _eraPrefs: () => _eraPrefs,
  _eraSlashes: () => _eraSlashes,
  _erasExposure: () => _erasExposure,
  _erasPoints: () => _erasPoints,
  _erasPrefs: () => _erasPrefs,
  _erasRewards: () => _erasRewards,
  _erasSlashes: () => _erasSlashes,
  _ownExposures: () => _ownExposures,
  _ownSlashes: () => _ownSlashes,
  _stakerExposures: () => _stakerExposures,
  _stakerPoints: () => _stakerPoints,
  _stakerPrefs: () => _stakerPrefs,
  _stakerRewards: () => _stakerRewards,
  _stakerRewardsEras: () => _stakerRewardsEras,
  _stakerSlashes: () => _stakerSlashes,
  account: () => account2,
  accounts: () => accounts,
  currentPoints: () => currentPoints,
  electedInfo: () => electedInfo,
  eraExposure: () => eraExposure,
  eraPrefs: () => eraPrefs,
  eraSlashes: () => eraSlashes,
  erasExposure: () => erasExposure,
  erasHistoric: () => erasHistoric,
  erasPoints: () => erasPoints,
  erasPrefs: () => erasPrefs,
  erasRewards: () => erasRewards,
  erasSlashes: () => erasSlashes,
  keys: () => keys,
  keysMulti: () => keysMulti,
  nextElected: () => nextElected,
  overview: () => overview2,
  ownExposure: () => ownExposure,
  ownExposures: () => ownExposures,
  ownSlash: () => ownSlash,
  ownSlashes: () => ownSlashes,
  query: () => query,
  queryMulti: () => queryMulti,
  stakerExposure: () => stakerExposure,
  stakerExposures: () => stakerExposures,
  stakerPoints: () => stakerPoints,
  stakerPrefs: () => stakerPrefs,
  stakerRewards: () => stakerRewards,
  stakerRewardsMulti: () => stakerRewardsMulti,
  stakerRewardsMultiEras: () => stakerRewardsMultiEras,
  stakerSlashes: () => stakerSlashes,
  stashes: () => stashes,
  validators: () => validators,
  waitingInfo: () => waitingInfo
});
init_shim();

// node_modules/@polkadot/api-derive/staking/account.js
init_shim();
var QUERY_OPTS = {
  withDestination: true,
  withLedger: true,
  withNominations: true,
  withPrefs: true
};
function groupByEra(list) {
  return list.reduce((map2, { era, value }) => {
    const key = era.toString();
    map2[key] = (map2[key] || BN_ZERO5).add(value.unwrap());
    return map2;
  }, {});
}
function calculateUnlocking(api, stakingLedger, sessionInfo) {
  const results = Object.entries(groupByEra(((stakingLedger == null ? void 0 : stakingLedger.unlocking) || []).filter(({ era }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({
    remainingEras: new import_bn64.default(eraString).isub(sessionInfo.activeEra),
    value: api.registry.createType("Balance", value)
  }));
  return results.length ? results : void 0;
}
function redeemableSum(api, stakingLedger, sessionInfo) {
  return api.registry.createType("Balance", ((stakingLedger == null ? void 0 : stakingLedger.unlocking) || []).reduce((total, { era, value }) => {
    return era.unwrap().gt(sessionInfo.currentEra) ? total : total.iadd(value.unwrap());
  }, new import_bn64.default(0)));
}
function parseResult2(api, sessionInfo, keys2, query2) {
  return objectSpread5({}, keys2, query2, {
    redeemable: redeemableSum(api, query2.stakingLedger, sessionInfo),
    unlocking: calculateUnlocking(api, query2.stakingLedger, sessionInfo)
  });
}
function accounts(instanceId, api) {
  return memo(instanceId, (accountIds, opts = QUERY_OPTS) => api.derive.session.info().pipe(switchMap((sessionInfo) => combineLatest([
    api.derive.staking.keysMulti(accountIds),
    api.derive.staking.queryMulti(accountIds, opts)
  ]).pipe(map(([keys2, queries]) => queries.map((q, index) => parseResult2(api, sessionInfo, keys2[index], q)))))));
}
var account2 = firstMemo((api, accountId2, opts) => api.derive.staking.accounts([accountId2], opts));

// node_modules/@polkadot/api-derive/staking/currentPoints.js
init_shim();
function currentPoints(instanceId, api) {
  return memo(instanceId, () => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => api.query.staking.erasRewardPoints(activeEra))));
}

// node_modules/@polkadot/api-derive/staking/electedInfo.js
init_shim();
var DEFAULT_FLAGS = { withController: true, withExposure: true, withPrefs: true };
function combineAccounts(nextElected2, validators2) {
  return arrayFlatten5([nextElected2, validators2.filter((v) => !nextElected2.find((n) => n.eq(v)))]);
}
function electedInfo(instanceId, api) {
  return memo(instanceId, (flags2 = DEFAULT_FLAGS) => api.derive.staking.validators().pipe(switchMap(({ nextElected: nextElected2, validators: validators2 }) => api.derive.staking.queryMulti(combineAccounts(nextElected2, validators2), flags2).pipe(map((info6) => ({
    info: info6,
    nextElected: nextElected2,
    validators: validators2
  }))))));
}

// node_modules/@polkadot/api-derive/staking/erasExposure.js
init_shim();

// node_modules/@polkadot/api-derive/staking/cache.js
init_shim();
function getEraCache(CACHE_KEY6, era, withActive) {
  const cacheKey = `${CACHE_KEY6}-${era.toString()}`;
  return [
    cacheKey,
    withActive ? void 0 : deriveCache.get(cacheKey)
  ];
}
function getEraMultiCache(CACHE_KEY6, eras, withActive) {
  const cached = withActive ? [] : eras.map((e) => deriveCache.get(`${CACHE_KEY6}-${e.toString()}`)).filter((v) => !!v);
  return cached;
}
function setEraCache(cacheKey, withActive, value) {
  !withActive && deriveCache.set(cacheKey, value);
  return value;
}
function setEraMultiCache(CACHE_KEY6, withActive, values) {
  !withActive && values.forEach((v) => deriveCache.set(`${CACHE_KEY6}-${v.era.toString()}`, v));
  return values;
}
function filterCachedEras(eras, cached, query2) {
  return eras.map((e) => cached.find(({ era }) => e.eq(era)) || query2.find(({ era }) => e.eq(era))).filter((e) => !!e);
}

// node_modules/@polkadot/api-derive/staking/util.js
init_shim();
var ERA_CHUNK_SIZE = 14;
function chunkEras(eras, fn) {
  const chunked = arrayChunk5(eras, ERA_CHUNK_SIZE);
  let index = 0;
  const subject = new BehaviorSubject(chunked[index]);
  return subject.pipe(switchMap(fn), tap(() => {
    nextTick2(() => {
      index++;
      index === chunked.length ? subject.complete() : subject.next(chunked[index]);
    });
  }), toArray(), map(arrayFlatten5));
}
function filterEras(eras, list) {
  return eras.filter((e) => !list.some(({ era }) => e.eq(era)));
}
function erasHistoricApply(fn) {
  return (instanceId, api) => (
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn](e, withActive))))
  );
}
function erasHistoricApplyAccount(fn) {
  return (instanceId, api) => (
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (accountId2, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn](accountId2, e, withActive))))
  );
}
function singleEra(fn) {
  return (instanceId, api) => (
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (era) => api.derive.staking[fn](era, true))
  );
}
function combineEras(fn) {
  return (instanceId, api) => (
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (eras, withActive) => !eras.length ? of([]) : chunkEras(eras, (eras2) => combineLatest(eras2.map((e) => api.derive.staking[fn](e, withActive)))))
  );
}

// node_modules/@polkadot/api-derive/staking/erasExposure.js
var CACHE_KEY = "eraExposure";
function mapStakers(era, stakers) {
  const nominators = {};
  const validators2 = {};
  stakers.forEach(([key, exposure]) => {
    const validatorId = key.args[1].toString();
    validators2[validatorId] = exposure;
    exposure.others.forEach(({ who }, validatorIndex) => {
      const nominatorId = who.toString();
      nominators[nominatorId] = nominators[nominatorId] || [];
      nominators[nominatorId].push({ validatorId, validatorIndex });
    });
  });
  return { era, nominators, validators: validators2 };
}
function _eraExposure(instanceId, api) {
  return memo(instanceId, (era, withActive = false) => {
    const [cacheKey, cached] = getEraCache(CACHE_KEY, era, withActive);
    return cached ? of(cached) : api.query.staking.erasStakersClipped.entries(era).pipe(map((r) => setEraCache(cacheKey, withActive, mapStakers(era, r))));
  });
}
var eraExposure = singleEra("_eraExposure");
var _erasExposure = combineEras("_eraExposure");
var erasExposure = erasHistoricApply("_erasExposure");

// node_modules/@polkadot/api-derive/staking/erasHistoric.js
init_shim();
function erasHistoric(instanceId, api) {
  return memo(instanceId, (withActive) => combineLatest([
    api.query.staking.activeEra(),
    api.consts.staking.historyDepth ? of(api.consts.staking.historyDepth) : api.query.staking["historyDepth"]()
  ]).pipe(map(([activeEraOpt, historyDepth]) => {
    const result = [];
    const max2 = historyDepth.toNumber();
    const activeEra = activeEraOpt.unwrapOrDefault().index;
    let lastEra = activeEra;
    while (lastEra.gte(BN_ZERO5) && result.length < max2) {
      if (lastEra !== activeEra || withActive === true) {
        result.push(api.registry.createType("EraIndex", lastEra));
      }
      lastEra = lastEra.sub(BN_ONE5);
    }
    return result.reverse();
  })));
}

// node_modules/@polkadot/api-derive/staking/erasPoints.js
init_shim();
var CACHE_KEY2 = "eraPoints";
function mapValidators({ individual }) {
  return [...individual.entries()].filter(([, points]) => points.gt(BN_ZERO5)).reduce((result, [validatorId, points]) => {
    result[validatorId.toString()] = points;
    return result;
  }, {});
}
function mapPoints(eras, points) {
  return eras.map((era, index) => ({
    era,
    eraPoints: points[index].total,
    validators: mapValidators(points[index])
  }));
}
function _erasPoints(instanceId, api) {
  return memo(instanceId, (eras, withActive) => {
    if (!eras.length) {
      return of([]);
    }
    const cached = getEraMultiCache(CACHE_KEY2, eras, withActive);
    const remaining = filterEras(eras, cached);
    return !remaining.length ? of(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe(map((p) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY2, withActive, mapPoints(remaining, p)))));
  });
}
var erasPoints = erasHistoricApply("_erasPoints");

// node_modules/@polkadot/api-derive/staking/erasPrefs.js
init_shim();
var CACHE_KEY3 = "eraPrefs";
function mapPrefs(era, all3) {
  const validators2 = {};
  all3.forEach(([key, prefs]) => {
    validators2[key.args[1].toString()] = prefs;
  });
  return { era, validators: validators2 };
}
function _eraPrefs(instanceId, api) {
  return memo(instanceId, (era, withActive) => {
    const [cacheKey, cached] = getEraCache(CACHE_KEY3, era, withActive);
    return cached ? of(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe(map((r) => setEraCache(cacheKey, withActive, mapPrefs(era, r))));
  });
}
var eraPrefs = singleEra("_eraPrefs");
var _erasPrefs = combineEras("_eraPrefs");
var erasPrefs = erasHistoricApply("_erasPrefs");

// node_modules/@polkadot/api-derive/staking/erasRewards.js
init_shim();
var CACHE_KEY4 = "eraRewards";
function mapRewards(eras, optRewards) {
  return eras.map((era, index) => ({
    era,
    eraReward: optRewards[index].unwrapOrDefault()
  }));
}
function _erasRewards(instanceId, api) {
  return memo(instanceId, (eras, withActive) => {
    if (!eras.length) {
      return of([]);
    }
    const cached = getEraMultiCache(CACHE_KEY4, eras, withActive);
    const remaining = filterEras(eras, cached);
    if (!remaining.length) {
      return of(cached);
    }
    return api.query.staking.erasValidatorReward.multi(remaining).pipe(map((r) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY4, withActive, mapRewards(remaining, r)))));
  });
}
var erasRewards = erasHistoricApply("_erasRewards");

// node_modules/@polkadot/api-derive/staking/erasSlashes.js
init_shim();
var CACHE_KEY5 = "eraSlashes";
function mapSlashes(era, noms, vals) {
  const nominators = {};
  const validators2 = {};
  noms.forEach(([key, optBalance]) => {
    nominators[key.args[1].toString()] = optBalance.unwrap();
  });
  vals.forEach(([key, optRes]) => {
    validators2[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
  });
  return { era, nominators, validators: validators2 };
}
function _eraSlashes(instanceId, api) {
  return memo(instanceId, (era, withActive) => {
    const [cacheKey, cached] = getEraCache(CACHE_KEY5, era, withActive);
    return cached ? of(cached) : combineLatest([
      api.query.staking.nominatorSlashInEra.entries(era),
      api.query.staking.validatorSlashInEra.entries(era)
    ]).pipe(map(([n, v]) => setEraCache(cacheKey, withActive, mapSlashes(era, n, v))));
  });
}
var eraSlashes = singleEra("_eraSlashes");
var _erasSlashes = combineEras("_eraSlashes");
var erasSlashes = erasHistoricApply("_erasSlashes");

// node_modules/@polkadot/api-derive/staking/keys.js
init_shim();
function extractsIds(stashId, queuedKeys, nextKeys) {
  const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [void 0, []])[1];
  const nextSessionIds = nextKeys.unwrapOr([]);
  return {
    nextSessionIds: Array.isArray(nextSessionIds) ? nextSessionIds : [...nextSessionIds.values()],
    sessionIds: Array.isArray(sessionIds) ? sessionIds : [...sessionIds.values()]
  };
}
var keys = firstMemo((api, stashId) => api.derive.staking.keysMulti([stashId]));
function keysMulti(instanceId, api) {
  return memo(instanceId, (stashIds) => stashIds.length ? api.query.session.queuedKeys().pipe(switchMap((queuedKeys) => {
    var _a;
    return combineLatest([
      of(queuedKeys),
      ((_a = api.consts["session"]) == null ? void 0 : _a["dedupKeyPrefix"]) ? api.query.session.nextKeys.multi(stashIds.map((s) => [api.consts["session"]["dedupKeyPrefix"], s])) : combineLatest(stashIds.map((s) => api.query.session.nextKeys(s)))
    ]);
  }), map(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index])))) : of([]));
}

// node_modules/@polkadot/api-derive/staking/overview.js
init_shim();
function overview2(instanceId, api) {
  return memo(instanceId, () => combineLatest([
    api.derive.session.indexes(),
    api.derive.staking.validators()
  ]).pipe(map(([indexes3, { nextElected: nextElected2, validators: validators2 }]) => objectSpread5({}, indexes3, {
    nextElected: nextElected2,
    validators: validators2
  }))));
}

// node_modules/@polkadot/api-derive/staking/ownExposure.js
init_shim();
function _ownExposures(instanceId, api) {
  return memo(instanceId, (accountId2, eras, _withActive) => eras.length ? combineLatest([
    combineLatest(eras.map((e) => api.query.staking.erasStakersClipped(e, accountId2))),
    combineLatest(eras.map((e) => api.query.staking.erasStakers(e, accountId2)))
  ]).pipe(map(([clp, exp]) => eras.map((era, index) => ({ clipped: clp[index], era, exposure: exp[index] })))) : of([]));
}
var ownExposure = firstMemo((api, accountId2, era) => api.derive.staking._ownExposures(accountId2, [era], true));
var ownExposures = erasHistoricApplyAccount("_ownExposures");

// node_modules/@polkadot/api-derive/staking/ownSlashes.js
init_shim();
function _ownSlashes(instanceId, api) {
  return memo(instanceId, (accountId2, eras, _withActive) => eras.length ? combineLatest([
    combineLatest(eras.map((e) => api.query.staking.validatorSlashInEra(e, accountId2))),
    combineLatest(eras.map((e) => api.query.staking.nominatorSlashInEra(e, accountId2)))
  ]).pipe(map(([vals, noms]) => eras.map((era, index) => ({
    era,
    total: vals[index].isSome ? vals[index].unwrap()[1] : noms[index].unwrapOrDefault()
  })))) : of([]));
}
var ownSlash = firstMemo((api, accountId2, era) => api.derive.staking._ownSlashes(accountId2, [era], true));
var ownSlashes = erasHistoricApplyAccount("_ownSlashes");

// node_modules/@polkadot/api-derive/staking/query.js
init_shim();
function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
  return {
    accountId: stashId,
    controllerId: (controllerIdOpt == null ? void 0 : controllerIdOpt.unwrapOr(null)) || null,
    exposure,
    nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],
    rewardDestination,
    stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
    stashId,
    validatorPrefs
  };
}
function getLedgers(api, optIds, { withLedger = false }) {
  const ids = optIds.filter((o) => withLedger && !!o && o.isSome).map((o) => o.unwrap());
  const emptyLed = api.registry.createType("Option<StakingLedger>");
  return (ids.length ? combineLatest(ids.map((s) => api.query.staking.ledger(s))) : of([])).pipe(map((optLedgers) => {
    let offset = -1;
    return optIds.map((o) => o && o.isSome ? optLedgers[++offset] || emptyLed : emptyLed);
  }));
}
function getStashInfo(api, stashIds, activeEra, { withController, withDestination, withExposure, withLedger, withNominations, withPrefs }) {
  const emptyNoms = api.registry.createType("Option<Nominations>");
  const emptyRewa = api.registry.createType("RewardDestination");
  const emptyExpo = api.registry.createType("Exposure");
  const emptyPrefs = api.registry.createType("ValidatorPrefs");
  return combineLatest([
    withController || withLedger ? combineLatest(stashIds.map((s) => api.query.staking.bonded(s))) : of(stashIds.map(() => null)),
    withNominations ? combineLatest(stashIds.map((s) => api.query.staking.nominators(s))) : of(stashIds.map(() => emptyNoms)),
    withDestination ? combineLatest(stashIds.map((s) => api.query.staking.payee(s))) : of(stashIds.map(() => emptyRewa)),
    withPrefs ? combineLatest(stashIds.map((s) => api.query.staking.validators(s))) : of(stashIds.map(() => emptyPrefs)),
    withExposure ? combineLatest(stashIds.map((s) => api.query.staking.erasStakers(activeEra, s))) : of(stashIds.map(() => emptyExpo))
  ]);
}
function getBatch(api, activeEra, stashIds, flags2) {
  return getStashInfo(api, stashIds, activeEra, flags2).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags2).pipe(map((stakingLedgerOpts) => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
}
var query = firstMemo((api, accountId2, flags2) => api.derive.staking.queryMulti([accountId2], flags2));
function queryMulti(instanceId, api) {
  return memo(instanceId, (accountIds, flags2) => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => {
    const stashIds = accountIds.map((a) => api.registry.createType("AccountId", a));
    return stashIds.length ? getBatch(api, activeEra, stashIds, flags2) : of([]);
  })));
}

// node_modules/@polkadot/api-derive/staking/stakerExposure.js
init_shim();
function _stakerExposures(instanceId, api) {
  return memo(instanceId, (accountIds, eras, withActive = false) => {
    const stakerIds = accountIds.map((a) => api.registry.createType("AccountId", a).toString());
    return api.derive.staking._erasExposure(eras, withActive).pipe(map((exposures) => stakerIds.map((stakerId) => exposures.map(({ era, nominators: allNominators, validators: allValidators }) => {
      const isValidator = !!allValidators[stakerId];
      const validators2 = {};
      const nominating = allNominators[stakerId] || [];
      if (isValidator) {
        validators2[stakerId] = allValidators[stakerId];
      } else if (nominating) {
        nominating.forEach(({ validatorId }) => {
          validators2[validatorId] = allValidators[validatorId];
        });
      }
      return { era, isEmpty: !Object.keys(validators2).length, isValidator, nominating, validators: validators2 };
    }))));
  });
}
function stakerExposures(instanceId, api) {
  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
}
var stakerExposure = firstMemo((api, accountId2, withActive) => api.derive.staking.stakerExposures([accountId2], withActive));

// node_modules/@polkadot/api-derive/staking/stakerPoints.js
init_shim();
function _stakerPoints(instanceId, api) {
  return memo(instanceId, (accountId2, eras, withActive) => {
    const stakerId = api.registry.createType("AccountId", accountId2).toString();
    return api.derive.staking._erasPoints(eras, withActive).pipe(map((points) => points.map(({ era, eraPoints, validators: validators2 }) => ({
      era,
      eraPoints,
      points: validators2[stakerId] || api.registry.createType("RewardPoint")
    }))));
  });
}
var stakerPoints = erasHistoricApplyAccount("_stakerPoints");

// node_modules/@polkadot/api-derive/staking/stakerPrefs.js
init_shim();
function _stakerPrefs(instanceId, api) {
  return memo(instanceId, (accountId2, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map((e) => [e, accountId2])).pipe(map((all3) => all3.map((validatorPrefs, index) => ({
    era: eras[index],
    validatorPrefs
  })))));
}
var stakerPrefs = erasHistoricApplyAccount("_stakerPrefs");

// node_modules/@polkadot/api-derive/staking/stakerRewards.js
init_shim();
function parseRewards(api, stashId, [erasPoints2, erasPrefs2, erasRewards2], exposures) {
  return exposures.map(({ era, isEmpty: isEmpty2, isValidator, nominating, validators: eraValidators }) => {
    const { eraPoints, validators: allValPoints } = erasPoints2.find((p) => p.era.eq(era)) || { eraPoints: BN_ZERO5, validators: {} };
    const { eraReward } = erasRewards2.find((r) => r.era.eq(era)) || { eraReward: api.registry.createType("Balance") };
    const { validators: allValPrefs } = erasPrefs2.find((p) => p.era.eq(era)) || { validators: {} };
    const validators2 = {};
    const stakerId = stashId.toString();
    Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
      var _a, _b;
      const valPoints = allValPoints[validatorId] || BN_ZERO5;
      const valComm = ((_a = allValPrefs[validatorId]) == null ? void 0 : _a.commission.unwrap()) || BN_ZERO5;
      const expTotal = ((_b = exposure.total) == null ? void 0 : _b.unwrap()) || BN_ZERO5;
      let avail = BN_ZERO5;
      let value;
      if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
        avail = eraReward.mul(valPoints).div(eraPoints);
        const valCut = valComm.mul(avail).div(BN_BILLION5);
        let staked;
        if (validatorId === stakerId) {
          staked = exposure.own.unwrap();
        } else {
          const stakerExp = exposure.others.find(({ who }) => who.eq(stakerId));
          staked = stakerExp ? stakerExp.value.unwrap() : BN_ZERO5;
        }
        value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO5);
      }
      validators2[validatorId] = {
        total: api.registry.createType("Balance", avail),
        value: api.registry.createType("Balance", value)
      };
    });
    return {
      era,
      eraReward,
      isEmpty: isEmpty2,
      isValidator,
      nominating,
      validators: validators2
    };
  });
}
function allUniqValidators(rewards) {
  return rewards.reduce(([all3, perStash], rewards2) => {
    const uniq = [];
    perStash.push(uniq);
    rewards2.forEach(({ validators: validators2 }) => Object.keys(validators2).forEach((validatorId) => {
      if (!uniq.includes(validatorId)) {
        uniq.push(validatorId);
        if (!all3.includes(validatorId)) {
          all3.push(validatorId);
        }
      }
    }));
    return [all3, perStash];
  }, [[], []]);
}
function removeClaimed(validators2, queryValidators, reward) {
  const rm = [];
  Object.keys(reward.validators).forEach((validatorId) => {
    const index = validators2.indexOf(validatorId);
    if (index !== -1) {
      const valLedger = queryValidators[index].stakingLedger;
      if (valLedger == null ? void 0 : valLedger.claimedRewards.some((e) => reward.era.eq(e))) {
        rm.push(validatorId);
      }
    }
  });
  rm.forEach((validatorId) => {
    delete reward.validators[validatorId];
  });
}
function filterRewards(eras, valInfo, { rewards, stakingLedger }) {
  const filter2 = eras.filter((e) => !stakingLedger.claimedRewards.some((s) => s.eq(e)));
  const validators2 = valInfo.map(([v]) => v);
  const queryValidators = valInfo.map(([, q]) => q);
  return rewards.filter(({ isEmpty: isEmpty2 }) => !isEmpty2).filter((reward) => {
    if (!filter2.some((e) => reward.era.eq(e))) {
      return false;
    }
    removeClaimed(validators2, queryValidators, reward);
    return true;
  }).filter(({ validators: validators3 }) => Object.keys(validators3).length !== 0).map((reward) => objectSpread5({}, reward, {
    nominators: reward.nominating.filter((n) => reward.validators[n.validatorId])
  }));
}
function _stakerRewardsEras(instanceId, api) {
  return memo(instanceId, (eras, withActive = false) => combineLatest([
    api.derive.staking._erasPoints(eras, withActive),
    api.derive.staking._erasPrefs(eras, withActive),
    api.derive.staking._erasRewards(eras, withActive)
  ]));
}
function _stakerRewards(instanceId, api) {
  return memo(instanceId, (accountIds, eras, withActive = false) => combineLatest([
    api.derive.staking.queryMulti(accountIds, { withLedger: true }),
    api.derive.staking._stakerExposures(accountIds, eras, withActive),
    api.derive.staking._stakerRewardsEras(eras, withActive)
  ]).pipe(switchMap(([queries, exposures, erasResult]) => {
    const allRewards = queries.map(({ stakingLedger, stashId }, index) => !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]));
    if (withActive) {
      return of(allRewards);
    }
    const [allValidators, stashValidators] = allUniqValidators(allRewards);
    return api.derive.staking.queryMulti(allValidators, { withLedger: true }).pipe(map((queriedVals) => queries.map(({ stakingLedger }, index) => filterRewards(eras, stashValidators[index].map((validatorId) => [
      validatorId,
      queriedVals.find((q) => q.accountId.eq(validatorId))
    ]).filter((v) => !!v[1]), {
      rewards: allRewards[index],
      stakingLedger
    }))));
  })));
}
var stakerRewards = firstMemo((api, accountId2, withActive) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerRewards([accountId2], eras, withActive))));
function stakerRewardsMultiEras(instanceId, api) {
  return memo(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : of([]));
}
function stakerRewardsMulti(instanceId, api) {
  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
}

// node_modules/@polkadot/api-derive/staking/stakerSlashes.js
init_shim();
function _stakerSlashes(instanceId, api) {
  return memo(instanceId, (accountId2, eras, withActive) => {
    const stakerId = api.registry.createType("AccountId", accountId2).toString();
    return api.derive.staking._erasSlashes(eras, withActive).pipe(map((slashes) => slashes.map(({ era, nominators, validators: validators2 }) => ({
      era,
      total: nominators[stakerId] || validators2[stakerId] || api.registry.createType("Balance")
    }))));
  });
}
var stakerSlashes = erasHistoricApplyAccount("_stakerSlashes");

// node_modules/@polkadot/api-derive/staking/stashes.js
init_shim();
function onBondedEvent(api) {
  let current = Date.now();
  return api.query.system.events().pipe(map((events2) => {
    current = events2.filter(({ event, phase }) => {
      try {
        return phase.isApplyExtrinsic && event.section === "staking" && event.method === "Bonded";
      } catch {
        return false;
      }
    }) ? Date.now() : current;
    return current;
  }), startWith(current), drr({ skipTimeout: true }));
}
function stashes(instanceId, api) {
  return memo(instanceId, () => onBondedEvent(api).pipe(switchMap(() => api.query.staking.validators.keys()), map((keys2) => keys2.map(({ args: [v] }) => v).filter((a) => a))));
}

// node_modules/@polkadot/api-derive/staking/validators.js
init_shim();
function nextElected(instanceId, api) {
  return memo(instanceId, () => api.query.staking.erasStakers ? api.derive.session.indexes().pipe(
    // only populate for next era in the last session, so track both here - entries are not
    // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
    switchMap(({ currentEra }) => api.query.staking.erasStakers.keys(currentEra)),
    map((keys2) => keys2.map(({ args: [, accountId2] }) => accountId2))
  ) : api.query.staking["currentElected"]());
}
function validators(instanceId, api) {
  return memo(instanceId, () => (
    // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
    // in all actual real-world deployed chains, it does create some confusion for limited template chains
    combineLatest([
      api.query.session ? api.query.session.validators() : of([]),
      api.query.staking ? api.derive.staking.nextElected() : of([])
    ]).pipe(map(([validators2, nextElected2]) => ({
      nextElected: nextElected2.length ? nextElected2 : validators2,
      validators: validators2
    })))
  ));
}

// node_modules/@polkadot/api-derive/staking/waitingInfo.js
init_shim();
var DEFAULT_FLAGS2 = { withController: true, withPrefs: true };
function waitingInfo(instanceId, api) {
  return memo(instanceId, (flags2 = DEFAULT_FLAGS2) => combineLatest([
    api.derive.staking.validators(),
    api.derive.staking.stashes()
  ]).pipe(switchMap(([{ nextElected: nextElected2 }, stashes2]) => {
    const elected = nextElected2.map((a) => a.toString());
    const waiting = stashes2.filter((v) => !elected.includes(v.toString()));
    return api.derive.staking.queryMulti(waiting, flags2).pipe(map((info6) => ({
      info: info6,
      waiting
    })));
  })));
}

// node_modules/@polkadot/api-derive/technicalCommittee/index.js
var technicalCommittee_exports = {};
__export(technicalCommittee_exports, {
  hasProposals: () => hasProposals5,
  members: () => members6,
  prime: () => prime5,
  proposal: () => proposal5,
  proposalCount: () => proposalCount5,
  proposalHashes: () => proposalHashes5,
  proposals: () => proposals6
});
init_shim();
var members6 = members("technicalCommittee");
var hasProposals5 = hasProposals("technicalCommittee");
var proposal5 = proposal("technicalCommittee");
var proposalCount5 = proposalCount("technicalCommittee");
var proposalHashes5 = proposalHashes("technicalCommittee");
var proposals6 = proposals("technicalCommittee");
var prime5 = prime("technicalCommittee");

// node_modules/@polkadot/api-derive/treasury/index.js
var treasury_exports = {};
__export(treasury_exports, {
  proposals: () => proposals7
});
init_shim();

// node_modules/@polkadot/api-derive/treasury/proposals.js
init_shim();
function parseResult3(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount: proposalCount6 }) {
  const approvals = [];
  const proposals8 = [];
  const councilTreasury = councilProposals.filter(({ proposal: proposal6 }) => proposal6 && (api.tx.treasury.approveProposal.is(proposal6) || api.tx.treasury.rejectProposal.is(proposal6)));
  allIds.forEach((id, index) => {
    if (allProposals[index].isSome) {
      const council = councilTreasury.filter(({ proposal: proposal6 }) => proposal6 && id.eq(proposal6.args[0])).sort((a, b) => a.proposal && b.proposal ? a.proposal.method.localeCompare(b.proposal.method) : a.proposal ? -1 : 1);
      const isApproval = approvalIds.some((approvalId) => approvalId.eq(id));
      const derived = { council, id, proposal: allProposals[index].unwrap() };
      if (isApproval) {
        approvals.push(derived);
      } else {
        proposals8.push(derived);
      }
    }
  });
  return { approvals, proposalCount: proposalCount6, proposals: proposals8 };
}
function retrieveProposals(api, proposalCount6, approvalIds) {
  const proposalIds = [];
  const count2 = proposalCount6.toNumber();
  for (let index = 0; index < count2; index++) {
    if (!approvalIds.some((id) => id.eqn(index))) {
      proposalIds.push(api.registry.createType("ProposalIndex", index));
    }
  }
  const allIds = [...proposalIds, ...approvalIds];
  return combineLatest([
    api.query.treasury.proposals.multi(allIds),
    api.derive.council ? api.derive.council.proposals() : of([])
  ]).pipe(map(([allProposals, councilProposals]) => parseResult3(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount: proposalCount6 })));
}
function proposals7(instanceId, api) {
  return memo(instanceId, () => api.query.treasury ? combineLatest([
    api.query.treasury.proposalCount(),
    api.query.treasury.approvals()
  ]).pipe(switchMap(([proposalCount6, approvalIds]) => retrieveProposals(api, proposalCount6, approvalIds))) : of({
    approvals: [],
    proposalCount: api.registry.createType("ProposalIndex"),
    proposals: []
  }));
}

// node_modules/@polkadot/api-derive/tx/index.js
var tx_exports = {};
__export(tx_exports, {
  events: () => events,
  signingInfo: () => signingInfo
});
init_shim();

// node_modules/@polkadot/api-derive/tx/events.js
init_shim();
function events(instanceId, api) {
  return memo(instanceId, (blockHash) => combineLatest([
    api.rpc.chain.getBlock(blockHash),
    api.queryAt(blockHash).pipe(switchMap((queryAt) => queryAt.system.events()))
  ]).pipe(map(([block, events2]) => ({ block, events: events2 }))));
}

// node_modules/@polkadot/api-derive/tx/signingInfo.js
init_shim();

// node_modules/@polkadot/api-derive/tx/constants.js
init_shim();
var FALLBACK_MAX_HASH_COUNT = 250;
var FALLBACK_PERIOD = new import_bn64.default(6 * 1e3);
var MAX_FINALITY_LAG = new import_bn64.default(5);
var MORTAL_PERIOD = new import_bn64.default(5 * 60 * 1e3);

// node_modules/@polkadot/api-derive/tx/signingInfo.js
function latestNonce(api, address) {
  return api.derive.balances.account(address).pipe(map(({ accountNonce }) => accountNonce));
}
function nextNonce(api, address) {
  var _a;
  return ((_a = api.rpc.system) == null ? void 0 : _a.accountNextIndex) ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
}
function signingHeader(api) {
  return combineLatest([
    api.rpc.chain.getHeader().pipe(switchMap((header) => (
      // check for chains at genesis (until block 1 is produced, e.g. 6s), since
      // we do need to allow transactions at chain start (also dev/seal chains)
      header.parentHash.isEmpty ? of(header) : api.rpc.chain.getHeader(header.parentHash).pipe(catchError(() => of(header)))
    ))),
    api.rpc.chain.getFinalizedHead().pipe(switchMap((hash5) => api.rpc.chain.getHeader(hash5).pipe(catchError(() => of(null)))))
  ]).pipe(map(([current, finalized]) => (
    // determine the hash to use, current when lag > max, else finalized
    !finalized || unwrapBlockNumber(current).sub(unwrapBlockNumber(finalized)).gt(MAX_FINALITY_LAG) ? current : finalized
  )));
}
function signingInfo(_instanceId, api) {
  return (address, nonce, era) => combineLatest([
    // retrieve nonce if none was specified
    isUndefined5(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : of(api.registry.createType("Index", nonce)),
    // if no era (create) or era > 0 (mortal), do block retrieval
    isUndefined5(era) || isNumber6(era) && era > 0 ? signingHeader(api) : of(null)
  ]).pipe(map(([nonce2, header]) => {
    var _a, _b, _c, _d;
    return {
      header,
      mortalLength: Math.min(((_b = (_a = api.consts.system) == null ? void 0 : _a.blockHashCount) == null ? void 0 : _b.toNumber()) || FALLBACK_MAX_HASH_COUNT, MORTAL_PERIOD.div(((_c = api.consts.babe) == null ? void 0 : _c.expectedBlockTime) || ((_d = api.consts.timestamp) == null ? void 0 : _d.minimumPeriod.muln(2)) || FALLBACK_PERIOD).iadd(MAX_FINALITY_LAG).toNumber()),
      nonce: nonce2
    };
  }));
}

// node_modules/@polkadot/api-derive/derive.js
var derive = { accounts: accounts_exports, alliance: alliance_exports, bagsList: bagsList_exports, balances: balances_exports, bounties: bounties_exports, chain: chain_exports, contracts: contracts_exports, council: council_exports, crowdloan: crowdloan_exports, democracy: democracy_exports, elections: elections_exports, imOnline: imOnline_exports, membership: membership_exports, parachains: parachains_exports, session: session_exports, society: society_exports, staking: staking_exports, technicalCommittee: technicalCommittee_exports, treasury: treasury_exports, tx: tx_exports };

// node_modules/@polkadot/api-derive/bundle.js
var checks = {
  allianceMotion: {
    instances: ["allianceMotion"],
    methods: []
  },
  bagsList: {
    instances: ["voterBagsList", "voterList", "bagsList"],
    methods: [],
    withDetect: true
  },
  contracts: {
    instances: ["contracts"],
    methods: []
  },
  council: {
    instances: ["council"],
    methods: [],
    withDetect: true
  },
  crowdloan: {
    instances: ["crowdloan"],
    methods: []
  },
  democracy: {
    instances: ["democracy"],
    methods: []
  },
  elections: {
    instances: ["phragmenElection", "electionsPhragmen", "elections", "council"],
    methods: [],
    withDetect: true
  },
  imOnline: {
    instances: ["imOnline"],
    methods: []
  },
  membership: {
    instances: ["membership"],
    methods: []
  },
  parachains: {
    instances: ["parachains", "registrar"],
    methods: []
  },
  session: {
    instances: ["session"],
    methods: []
  },
  society: {
    instances: ["society"],
    methods: []
  },
  staking: {
    instances: ["staking"],
    methods: ["erasRewardPoints"]
  },
  technicalCommittee: {
    instances: ["technicalCommittee"],
    methods: [],
    withDetect: true
  },
  treasury: {
    instances: ["treasury"],
    methods: []
  }
};
function getModuleInstances(api, specName, moduleName) {
  return api.registry.getModuleInstances(specName, moduleName) || [];
}
function injectFunctions(instanceId, api, derives) {
  const result = {};
  const names = Object.keys(derives);
  const keys2 = Object.keys(api.query);
  const specName = api.runtimeVersion.specName;
  const filterKeys = (q) => keys2.includes(q);
  const filterInstances = (q) => getModuleInstances(api, specName, q).some(filterKeys);
  const filterMethods = (all3) => (m) => all3.some((q) => keys2.includes(q) && api.query[q][m]);
  const getKeys2 = (s) => Object.keys(derives[s]);
  const creator = (s, m) => derives[s][m](instanceId, api);
  const isIncluded = (c) => !checks[c] || (checks[c].instances.some(filterKeys) && (!checks[c].methods.length || checks[c].methods.every(filterMethods(checks[c].instances))) || checks[c].withDetect && checks[c].instances.some(filterInstances));
  for (let i = 0, count2 = names.length; i < count2; i++) {
    const name = names[i];
    isIncluded(name) && lazyDeriveSection(result, name, getKeys2, creator);
  }
  return result;
}
function getAvailableDerives(instanceId, api, custom = {}) {
  return {
    ...injectFunctions(instanceId, api, derive),
    ...injectFunctions(instanceId, api, custom)
  };
}

// node_modules/@polkadot/api/util/decorate.js
function decorateDeriveSections(decorateMethod, derives) {
  const getKeys2 = (s) => Object.keys(derives[s]);
  const creator = (s, m) => decorateMethod(derives[s][m]);
  const result = {};
  const names = Object.keys(derives);
  for (let i = 0, count2 = names.length; i < count2; i++) {
    lazyDeriveSection(result, names[i], getKeys2, creator);
  }
  return result;
}

// node_modules/@polkadot/api/submittable/Result.js
init_shim();
var recordIdentity = (record) => record;
function filterAndApply(events2, section2, methods, onFound) {
  return events2.filter(({ event }) => section2 === event.section && methods.includes(event.method)).map((record) => onFound(record));
}
function getDispatchError({ event: { data: [dispatchError] } }) {
  return dispatchError;
}
function getDispatchInfo({ event: { data, method } }) {
  return method === "ExtrinsicSuccess" ? data[0] : data[1];
}
function extractError(events2 = []) {
  return filterAndApply(events2, "system", ["ExtrinsicFailed"], getDispatchError)[0];
}
function extractInfo(events2 = []) {
  return filterAndApply(events2, "system", ["ExtrinsicFailed", "ExtrinsicSuccess"], getDispatchInfo)[0];
}
var SubmittableResult = class {
  constructor({ blockNumber, dispatchError, dispatchInfo, events: events2, internalError, status, txHash, txIndex }) {
    this.dispatchError = dispatchError || extractError(events2);
    this.dispatchInfo = dispatchInfo || extractInfo(events2);
    this.events = events2 || [];
    this.internalError = internalError;
    this.status = status;
    this.txHash = txHash;
    this.txIndex = txIndex;
    this.blockNumber = blockNumber;
  }
  get isCompleted() {
    return this.isError || this.status.isInBlock || this.status.isFinalized;
  }
  get isError() {
    return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
  }
  get isFinalized() {
    return this.status.isFinalized;
  }
  get isInBlock() {
    return this.status.isInBlock;
  }
  get isWarning() {
    return this.status.isRetracted;
  }
  /**
   * @description Filters EventRecords for the specified method & section (there could be multiple)
   */
  filterRecords(section2, method) {
    return filterAndApply(this.events, section2, Array.isArray(method) ? method : [method], recordIdentity);
  }
  /**
   * @description Finds an EventRecord for the specified method & section
   */
  findRecord(section2, method) {
    return this.filterRecords(section2, method)[0];
  }
  /**
   * @description Creates a human representation of the output
   */
  toHuman(isExtended) {
    var _a, _b, _c;
    return {
      dispatchError: (_a = this.dispatchError) == null ? void 0 : _a.toHuman(),
      dispatchInfo: (_b = this.dispatchInfo) == null ? void 0 : _b.toHuman(),
      events: this.events.map((e) => e.toHuman(isExtended)),
      internalError: (_c = this.internalError) == null ? void 0 : _c.message.toString(),
      status: this.status.toHuman(isExtended)
    };
  }
};

// node_modules/@polkadot/api/submittable/createClass.js
function makeEraOptions(api, registry, partialOptions, { header, mortalLength, nonce }) {
  if (!header) {
    if (partialOptions.era && !partialOptions.blockHash) {
      throw new Error("Expected blockHash to be passed alongside non-immortal era options");
    }
    if (isNumber5(partialOptions.era)) {
      delete partialOptions.era;
      delete partialOptions.blockHash;
    }
    return makeSignOptions(api, partialOptions, { nonce });
  }
  return makeSignOptions(api, partialOptions, {
    blockHash: header.hash,
    era: registry.createTypeUnsafe("ExtrinsicEra", [{
      current: header.number,
      period: partialOptions.era || mortalLength
    }]),
    nonce
  });
}
function makeSignAndSendOptions(partialOptions, statusCb) {
  let options = {};
  if (isFunction5(partialOptions)) {
    statusCb = partialOptions;
  } else {
    options = objectSpread4({}, partialOptions);
  }
  return [options, statusCb];
}
function makeSignOptions(api, partialOptions, extras) {
  return objectSpread4({ blockHash: api.genesisHash, genesisHash: api.genesisHash }, partialOptions, extras, { runtimeVersion: api.runtimeVersion, signedExtensions: api.registry.signedExtensions, version: api.extrinsicType });
}
function optionsOrNonce(partialOptions = {}) {
  return isBn4(partialOptions) || isNumber5(partialOptions) ? { nonce: partialOptions } : partialOptions;
}
function createClass({ api, apiType, blockHash, decorateMethod }) {
  const ExtrinsicBase2 = api.registry.createClass("Extrinsic");
  class Submittable extends ExtrinsicBase2 {
    constructor(registry, extrinsic) {
      super(registry, extrinsic, { version: api.extrinsicType });
      this.__internal__transformResult = identity;
      this.__internal__observeSign = (account3, partialOptions) => {
        const address = isKeyringPair(account3) ? account3.address : account3.toString();
        const options = optionsOrNonce(partialOptions);
        return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async (signingInfo2) => {
          const eraOptions = makeEraOptions(api, this.registry, options, signingInfo2);
          let updateId = -1;
          if (isKeyringPair(account3)) {
            this.sign(account3, eraOptions);
          } else {
            updateId = await this.__internal__signViaSigner(address, eraOptions, signingInfo2.header);
          }
          return { options: eraOptions, updateId };
        }));
      };
      this.__internal__observeStatus = (txHash, status) => {
        if (!status.isFinalized && !status.isInBlock) {
          return of(this.__internal__transformResult(new SubmittableResult({
            status,
            txHash
          })));
        }
        const blockHash2 = status.isInBlock ? status.asInBlock : status.asFinalized;
        return api.derive.tx.events(blockHash2).pipe(map(({ block, events: events2 }) => this.__internal__transformResult(new SubmittableResult({
          ...filterEvents(txHash, block, events2, status),
          status,
          txHash
        }))), catchError((internalError) => of(this.__internal__transformResult(new SubmittableResult({
          internalError,
          status,
          txHash
        })))));
      };
      this.__internal__observeSend = (info6) => {
        return api.rpc.author.submitExtrinsic(this).pipe(tap((hash5) => {
          this.__internal__updateSigner(hash5, info6);
        }));
      };
      this.__internal__observeSubscribe = (info6) => {
        const txHash = this.hash;
        return api.rpc.author.submitAndWatchExtrinsic(this).pipe(switchMap((status) => this.__internal__observeStatus(txHash, status)), tap((status) => {
          this.__internal__updateSigner(status, info6);
        }));
      };
      this.__internal__signViaSigner = async (address, options, header) => {
        const signer = options.signer || api.signer;
        if (!signer) {
          throw new Error("No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
        }
        const payload = this.registry.createTypeUnsafe("SignerPayload", [objectSpread4({}, options, {
          address,
          blockNumber: header ? header.number : 0,
          method: this.method
        })]);
        let result;
        if (isFunction5(signer.signPayload)) {
          result = await signer.signPayload(payload.toPayload());
        } else if (isFunction5(signer.signRaw)) {
          result = await signer.signRaw(payload.toRaw());
        } else {
          throw new Error("Invalid signer interface, it should implement either signPayload or signRaw (or both)");
        }
        super.addSignature(address, result.signature, payload.toPayload());
        return result.id;
      };
      this.__internal__updateSigner = (status, info6) => {
        if (info6 && info6.updateId !== -1) {
          const { options, updateId } = info6;
          const signer = options.signer || api.signer;
          if (signer && isFunction5(signer.update)) {
            signer.update(updateId, status);
          }
        }
      };
      this.__internal__ignoreStatusCb = apiType === "rxjs";
    }
    get hasDryRun() {
      var _a;
      return isFunction5((_a = api.rpc.system) == null ? void 0 : _a.dryRun);
    }
    get hasPaymentInfo() {
      var _a;
      return isFunction5((_a = api.call.transactionPaymentApi) == null ? void 0 : _a.queryInfo);
    }
    // dry run an extrinsic
    dryRun(account3, optionsOrHash) {
      if (!this.hasDryRun) {
        throw new Error("The system.dryRun RPC call is not available in your environment");
      }
      if (blockHash || isString5(optionsOrHash) || isU8a5(optionsOrHash)) {
        return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));
      }
      return decorateMethod(() => this.__internal__observeSign(account3, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();
    }
    // calculate the payment info for this transaction (if signed and submitted)
    paymentInfo(account3, optionsOrHash) {
      if (!this.hasPaymentInfo) {
        throw new Error("The transactionPaymentApi.queryInfo runtime call is not available in your environment");
      }
      if (blockHash || isString5(optionsOrHash) || isU8a5(optionsOrHash)) {
        return decorateMethod(() => api.callAt(blockHash || optionsOrHash).pipe(switchMap((callAt) => {
          const u8a9 = this.toU8a();
          return callAt.transactionPaymentApi.queryInfo(u8a9, u8a9.length);
        })));
      }
      const [allOptions] = makeSignAndSendOptions(optionsOrHash);
      const address = isKeyringPair(account3) ? account3.address : account3.toString();
      return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap((signingInfo2) => {
        const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo2);
        const signOptions = makeSignOptions(api, eraOptions, {});
        const u8a9 = api.tx(this.toU8a()).signFake(address, signOptions).toU8a();
        return api.call.transactionPaymentApi.queryInfo(u8a9, u8a9.length);
      })))();
    }
    // send implementation for both immediate Hash and statusCb variants
    send(statusCb) {
      const isSubscription2 = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
      return decorateMethod(isSubscription2 ? this.__internal__observeSubscribe : this.__internal__observeSend)(statusCb);
    }
    /**
     * @description Signs a transaction, returning `this` to allow chaining. E.g.: `signAsync(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
     */
    signAsync(account3, partialOptions) {
      return decorateMethod(() => this.__internal__observeSign(account3, partialOptions).pipe(map(() => this)))();
    }
    // signAndSend implementation for all 3 cases above
    signAndSend(account3, partialOptions, optionalStatusCb) {
      const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
      const isSubscription2 = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
      return decorateMethod(
        () => this.__internal__observeSign(account3, options).pipe(switchMap((info6) => isSubscription2 ? this.__internal__observeSubscribe(info6) : this.__internal__observeSend(info6)))
        // FIXME This is wrong, SubmittableResult is _not_ a codec
      )(statusCb);
    }
    // adds a transform to the result, applied before result is returned
    withResultTransform(transform) {
      this.__internal__transformResult = transform;
      return this;
    }
  }
  return Submittable;
}

// node_modules/@polkadot/api/submittable/createSubmittable.js
function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
  const Submittable = createClass({ api, apiType, blockHash, decorateMethod });
  return (extrinsic) => new Submittable(registry || api.registry, extrinsic);
}

// node_modules/@polkadot/api/promise/index.js
init_shim();

// node_modules/@polkadot/api/promise/Api.js
init_shim();

// node_modules/@polkadot/api/base/index.js
init_shim();

// node_modules/@polkadot/api/base/Getters.js
init_shim();

// node_modules/@polkadot/api/base/find.js
init_shim();
function findCall(registry, callIndex) {
  return registry.findMetaCall(u8aToU8a5(callIndex));
}
function findError(registry, errorIndex) {
  return registry.findMetaError(u8aToU8a5(errorIndex));
}

// node_modules/@polkadot/api/base/Init.js
init_shim();

// node_modules/@polkadot/types-known/index.js
init_shim();

// node_modules/@polkadot/types-known/detectPackage.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/detectPackage.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/detectOther.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/x-textdecoder/browser.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/x-textdecoder/fallback.js
init_shim();
var TextDecoder20 = class {
  constructor(encoding) {
    __publicField(this, "__encoding");
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count2 = value.length; i < count2; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/types-known/node_modules/@polkadot/x-textdecoder/packageInfo.js
init_shim();
var packageInfo50 = { name: "@polkadot/x-textdecoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types-known/node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder21 = extractGlobal("TextDecoder", TextDecoder20);

// node_modules/@polkadot/types-known/node_modules/@polkadot/x-textencoder/browser.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/x-textencoder/fallback.js
init_shim();
var TextEncoder20 = class {
  encode(value) {
    const count2 = value.length;
    const u8a9 = new Uint8Array(count2);
    for (let i = 0; i < count2; i++) {
      u8a9[i] = value.charCodeAt(i);
    }
    return u8a9;
  }
};

// node_modules/@polkadot/types-known/node_modules/@polkadot/x-textencoder/packageInfo.js
init_shim();
var packageInfo51 = { name: "@polkadot/x-textencoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types-known/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder21 = extractGlobal("TextEncoder", TextEncoder20);

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/detectOther.js
var detectOther_default24 = [packageInfo50, packageInfo51];

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/packageInfo.js
init_shim();
var packageInfo52 = { name: "@polkadot/util", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/versionDetect.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/function.js
init_shim();
function isFunction12(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/versionDetect.js
var DEDUPE10 = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
var POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG10 = "POLKADOTJS_DISABLE_ESM_CJS_WARNING";
function getEntry10(name) {
  const _global = xglobal;
  if (!_global.__polkadotjs) {
    _global.__polkadotjs = {};
  }
  if (!_global.__polkadotjs[name]) {
    _global.__polkadotjs[name] = [];
  }
  return _global.__polkadotjs[name];
}
function formatDisplay10(all3, fmt) {
  let max2 = 0;
  for (let i = 0, count2 = all3.length; i < count2; i++) {
    max2 = Math.max(max2, all3[i].version.length);
  }
  return all3.map((d) => `	${fmt(d.version.padEnd(max2), d).join("	")}`).join("\n");
}
function formatInfo10(version, { name }) {
  return [
    version,
    name
  ];
}
function formatVersion10(version, { path, type }) {
  let extracted;
  if (path && path.length >= 5) {
    const nmIndex = path.indexOf("node_modules");
    extracted = nmIndex === -1 ? path : path.substring(nmIndex);
  } else {
    extracted = "<unknown>";
  }
  return [
    `${`${type || ""}`.padStart(3)} ${version}`,
    extracted
  ];
}
function getPath10(infoPath, pathOrFn) {
  if (infoPath) {
    return infoPath;
  } else if (isFunction12(pathOrFn)) {
    try {
      return pathOrFn() || "";
    } catch {
      return "";
    }
  }
  return pathOrFn || "";
}
function warn10(pre, all3, fmt) {
  console.warn(`${pre}
${DEDUPE10}
${formatDisplay10(all3, fmt)}`);
}
function detectPackage11({ name, path, type, version }, pathOrFn, deps = []) {
  var _a, _b;
  if (!name.startsWith("@polkadot")) {
    throw new Error(`Invalid package descriptor ${name}`);
  }
  const entry = getEntry10(name);
  entry.push({ path: getPath10(path, pathOrFn), type, version });
  const entriesSameVersion = entry.every((e) => e.version === version);
  const esmCjsWarningDisabled = ((_b = (_a = xglobal.process) == null ? void 0 : _a.env) == null ? void 0 : _b[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG10]) === "1";
  const multipleEntries = entry.length !== 1;
  const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;
  if (multipleEntries && !disableWarnings) {
    warn10(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion10);
  } else {
    const mismatches = deps.filter((d) => d && d.version !== version);
    if (mismatches.length) {
      warn10(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo10);
    }
  }
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/detectPackage.js
detectPackage11(packageInfo52, null, detectOther_default24);

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bundle.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/array/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/array/chunk.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/array/filter.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/array/flatten.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/array/range.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/array/shuffle.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/array/unzip.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/array/zip.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/assert.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bi/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bi/min.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bi/helpers.js
init_shim();
function createCmp10(cmp) {
  return (...items) => {
    const count2 = items.length;
    if (count2 === 0) {
      throw new Error("Must provide one or more arguments");
    }
    let result = items[0];
    for (let i = 1; i < count2; i++) {
      if (cmp(items[i], result)) {
        result = items[i];
      }
    }
    return result;
  };
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bi/min.js
var nMax10 = createCmp10((a, b) => a > b);
var nMin10 = createCmp10((a, b) => a < b);

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bi/sqrt.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bi/consts.js
init_shim();
var _0n38 = BigInt2(0);
var _1n38 = BigInt2(1);
var _2n31 = BigInt2(2);
var _3n16 = BigInt2(3);
var _4n16 = BigInt2(4);
var _5n16 = BigInt2(5);
var _6n10 = BigInt2(6);
var _7n16 = BigInt2(7);
var _8n16 = BigInt2(8);
var _9n13 = BigInt2(9);
var _10n13 = BigInt2(10);
var _100n10 = BigInt2(100);
var _1000n10 = BigInt2(1e3);
var _1Mn10 = BigInt2(1e6);
var _1Bn10 = BigInt2(1e9);
var _1Qn10 = _1Bn10 * _1Bn10;
var _2pow53n10 = BigInt2(Number.MAX_SAFE_INTEGER);
var _sqrt2pow53n10 = BigInt2(94906265);

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bi/toBigInt.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/toBigInt.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/toBigInt.js
init_shim();
var U8_MAX10 = BigInt2(256);
var U16_MAX10 = BigInt2(256 * 256);
var U64_MAX10 = BigInt2("0x10000000000000000");

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/toU8a.js
init_shim();
var CHR10 = "0123456789abcdef";
var U819 = new Uint8Array(256);
var U1619 = new Uint8Array(256 * 256);
for (let i = 0, count2 = CHR10.length; i < count2; i++) {
  U819[CHR10[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U819[CHR10[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1619[s | j] = U819[i] << 4 | U819[j];
  }
}
function hexToU8a11(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U1619[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/bn.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bn/bn.js
init_shim();
var import_bn149 = __toESM(require_bn10(), 1);

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/hex.js
init_shim();
var REGEX_HEX_PREFIXED10 = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX10 = /^[\da-fA-F]+$/;
function isHex11(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED10.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/toBigInt.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/helpers.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/object.js
init_shim();
function isObject10(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/helpers.js
function isOn10(...fns) {
  return (value) => (isObject10(value) || isFunction12(value)) && fns.every((f) => isFunction12(value[f]));
}
function isOnFunction10(...fns) {
  return (value) => isFunction12(value) && fns.every((f) => isFunction12(value[f]));
}
function isOnObject10(...fns) {
  return (value) => isObject10(value) && fns.every((f) => isFunction12(value[f]));
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt10 = isOn10("toBigInt");

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/toBn.js
init_shim();
var isToBn11 = isOn10("toBn");

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bi/toHex.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/cmp.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/toU8a.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/buffer.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/has.js
init_shim();
var hasBigInt11 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer10 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess10 = typeof xglobal.process === "object";

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/buffer.js
function isBuffer10(value) {
  return hasBuffer10 && !!value && isFunction12(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/u8a.js
init_shim();
function isU8a11(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/string/toU8a.js
init_shim();
var encoder10 = new TextEncoder21();
function stringToU8a11(value) {
  return value ? encoder10.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a11(value) {
  return isU8a11(value) ? isBuffer10(value) ? new Uint8Array(value) : value : isHex11(value) ? hexToU8a11(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a11(value);
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/concat.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/empty.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/eq.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/fixLength.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/sorted.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/toBn.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/toBuffer.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/toFloat.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/toHex.js
init_shim();
var U820 = new Array(256);
var U1620 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U820[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1620[s | j] = U820[i] + U820[j];
  }
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/toNumber.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/toString.js
init_shim();
var decoder10 = new TextDecoder21("utf-8");

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/u8a/wrap.js
init_shim();
var U8A_WRAP_ETHEREUM10 = u8aToU8a11("Ethereum Signed Message:\n");
var U8A_WRAP_PREFIX10 = u8aToU8a11("<Bytes>");
var U8A_WRAP_POSTFIX10 = u8aToU8a11("</Bytes>");
var WRAP_LEN10 = U8A_WRAP_PREFIX10.length + U8A_WRAP_POSTFIX10.length;

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bi/toU8a.js
init_shim();
var DIV10 = BigInt2(256);
var NEG_MASK10 = BigInt2(255);

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bn/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bn/fromHex.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/toBn.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/stripPrefix.js
init_shim();
function hexStripPrefix10(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED10.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX10.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/toBn.js
function hexToBn10(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn149.default(0);
  }
  const stripped = hexStripPrefix10(value);
  const bn = new import_bn149.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bn/min.js
init_shim();
var bnMax10 = createCmp10((a, b) => a.gt(b));
var bnMin10 = createCmp10((a, b) => a.lt(b));

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bn/sqrt.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bn/consts.js
init_shim();
var BN_ZERO10 = new import_bn149.default(0);
var BN_ONE10 = new import_bn149.default(1);
var BN_TWO10 = new import_bn149.default(2);
var BN_THREE10 = new import_bn149.default(3);
var BN_FOUR10 = new import_bn149.default(4);
var BN_FIVE10 = new import_bn149.default(5);
var BN_SIX10 = new import_bn149.default(6);
var BN_SEVEN10 = new import_bn149.default(7);
var BN_EIGHT10 = new import_bn149.default(8);
var BN_NINE10 = new import_bn149.default(9);
var BN_TEN10 = new import_bn149.default(10);
var BN_HUNDRED10 = new import_bn149.default(100);
var BN_THOUSAND10 = new import_bn149.default(1e3);
var BN_MILLION10 = new import_bn149.default(1e6);
var BN_BILLION10 = new import_bn149.default(1e9);
var BN_QUINTILL10 = BN_BILLION10.mul(BN_BILLION10);
var BN_MAX_INTEGER10 = new import_bn149.default(Number.MAX_SAFE_INTEGER);
var BN_SQRT_MAX_INTEGER10 = new import_bn149.default(94906265);

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bn/toBn.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/bigInt.js
init_shim();
function isBigInt10(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bn/toBn.js
function bnToBn10(value) {
  return value ? import_bn149.default.isBN(value) ? value : isHex11(value) ? hexToBn10(value.toString()) : isBigInt10(value) ? new import_bn149.default(value.toString()) : isToBn11(value) ? value.toBn() : isToBigInt10(value) ? new import_bn149.default(value.toBigInt().toString()) : new import_bn149.default(value) : new import_bn149.default(0);
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bn/toHex.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bn/toU8a.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/buffer/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/buffer/toU8a.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/compact/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/compact/addLength.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/compact/toU8a.js
init_shim();
var MAX_U810 = BN_TWO10.pow(new import_bn149.default(8 - 2)).isub(BN_ONE10);
var MAX_U1610 = BN_TWO10.pow(new import_bn149.default(16 - 2)).isub(BN_ONE10);
var MAX_U3210 = BN_TWO10.pow(new import_bn149.default(32 - 2)).isub(BN_ONE10);

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/compact/fromU8a.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/compact/stripLength.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/extractTime.js
init_shim();
var MIN_MS10 = 60 * 1e3;
var HR_MS10 = MIN_MS10 * 60;
var DAY_MS10 = HR_MS10 * 24;

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/float/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/float/toU8a.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/format/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/format/formatBalance.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/boolean.js
init_shim();
function isBoolean10(value) {
  return typeof value === "boolean";
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/format/formatDecimal.js
init_shim();
var NUMBER_REGEX10 = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal10(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX10) : value.match(NUMBER_REGEX10);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/format/getSeparator.js
init_shim();
function getSeparator10(locale) {
  return {
    decimal: 0.1.toLocaleString(locale).substring(1, 2),
    thousand: 1e3.toLocaleString(locale).substring(1, 2)
  };
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/format/si.js
init_shim();
var SI_MID10 = 8;
var SI10 = [
  { power: -24, text: "yocto", value: "y" },
  { power: -21, text: "zepto", value: "z" },
  { power: -18, text: "atto", value: "a" },
  { power: -15, text: "femto", value: "f" },
  { power: -12, text: "pico", value: "p" },
  { power: -9, text: "nano", value: "n" },
  { power: -6, text: "micro", value: "µ" },
  { power: -3, text: "milli", value: "m" },
  { power: 0, text: "Unit", value: "-" },
  { power: 3, text: "Kilo", value: "k" },
  { power: 6, text: "Mill", value: "M" },
  { power: 9, text: "Bill", value: "B" },
  { power: 12, text: "Tril", value: "T" },
  { power: 15, text: "Peta", value: "P" },
  { power: 18, text: "Exa", value: "E" },
  { power: 21, text: "Zeta", value: "Z" },
  { power: 24, text: "Yotta", value: "Y" }
];
function findSi10(type) {
  for (let i = 0, count2 = SI10.length; i < count2; i++) {
    if (SI10[i].value === type) {
      return SI10[i];
    }
  }
  return SI10[SI_MID10];
}
function calcSi10(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi10(forceUnit);
  }
  const siDefIndex = SI_MID10 - 1 + Math.ceil((text.length - decimals) / 3);
  return SI10[siDefIndex] || SI10[siDefIndex < 0 ? 0 : SI10.length - 1];
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/format/formatBalance.js
var DEFAULT_DECIMALS10 = 0;
var DEFAULT_UNIT10 = SI10[SI_MID10].text;
var defaultDecimals10 = DEFAULT_DECIMALS10;
var defaultUnit10 = DEFAULT_UNIT10;
function _formatBalance10(input, { decimals = defaultDecimals10, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text = bnToBn10(input).toString();
  if (text.length === 0 || text === "0") {
    return "0";
  }
  let sign2 = "";
  if (text[0].startsWith("-")) {
    sign2 = "-";
    text = text.substring(1);
  }
  const si = calcSi10(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text.substring(0, mid);
  let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean10(withUnit) ? SI10[SI_MID10].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator10(locale);
  return `${sign2}${formatDecimal10(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
var formatBalance10 = _formatBalance10;
formatBalance10.calcSi = (text, decimals = defaultDecimals10) => calcSi10(text, decimals);
formatBalance10.findSi = findSi10;
formatBalance10.getDefaults = () => {
  return {
    decimals: defaultDecimals10,
    unit: defaultUnit10
  };
};
formatBalance10.getOptions = (decimals = defaultDecimals10) => {
  return SI10.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
};
formatBalance10.setDefaults = ({ decimals, unit }) => {
  defaultDecimals10 = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals10;
  defaultUnit10 = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit10;
  SI10[SI_MID10].text = defaultUnit10;
};

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/format/formatDate.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/format/formatElapsed.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/format/formatNumber.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/addPrefix.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/hasPrefix.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/fixLength.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/toNumber.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/toString.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/array.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/ascii.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/string.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/childClass.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/class.js
init_shim();
var isClass10 = isOnFunction10("isPrototypeOf", "hasOwnProperty");

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/codec.js
init_shim();
var checkCodec10 = isOnObject10("toHex", "toHuman", "toU8a");
var checkRegistry10 = isOnObject10("get");

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/compact.js
init_shim();
var isCompact10 = isOnObject10("toBigInt", "toBn", "toNumber", "unwrap");

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/error.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/instanceOf.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/ip.js
init_shim();
var v410 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
var v6s10 = "[a-fA-F\\d]{1,4}";
var v610 = `
(?:
(?:${v6s10}:){7}(?:${v6s10}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6s10}:){6}(?:${v410}|:${v6s10}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6s10}:){5}(?::${v410}|(?::${v6s10}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6s10}:){4}(?:(?::${v6s10}){0,1}:${v410}|(?::${v6s10}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6s10}:){3}(?:(?::${v6s10}){0,2}:${v410}|(?::${v6s10}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6s10}:){2}(?:(?::${v6s10}){0,3}:${v410}|(?::${v6s10}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6s10}:){1}(?:(?::${v6s10}){0,4}:${v410}|(?::${v6s10}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6s10}){0,5}:${v410}|(?::${v6s10}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
var v46Exact10 = new RegExp(`(?:^${v410}$)|(?:^${v610}$)`);
var v4exact10 = new RegExp(`^${v410}$`);
var v6exact10 = new RegExp(`^${v610}$`);

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/jsonObject.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/stringify.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/null.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/number.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/observable.js
init_shim();
var isObservable11 = isOn10("next");

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/promise.js
init_shim();
var isPromise11 = isOnObject10("catch", "then");

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/riscv.js
init_shim();
var ELF_MAGIC10 = new Uint8Array([127, 69, 76, 70]);
var PVM_MAGIC10 = new Uint8Array([80, 86, 77, 0]);

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/testChain.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/undefined.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/utf8.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/wasm.js
init_shim();
var WASM_MAGIC10 = new Uint8Array([0, 97, 115, 109]);

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/lazy.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/logger.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/noop.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/memoize.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/nextTick.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/number/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/number/toHex.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/number/toU8a.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/object/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/object/clear.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/object/copy.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/object/spread.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/object/entries.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/object/keys.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/object/property.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/object/values.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/promisify.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/string/index.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/string/camelCase.js
init_shim();
var CC_TO_UP10 = new Array(256);
var CC_TO_LO10 = new Array(256);
for (let i = 0, count2 = CC_TO_UP10.length; i < count2; i++) {
  CC_TO_LO10[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP10[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps10(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP10[w.charCodeAt(w.length - 1)];
}
function converter19(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count2 = parts.length; i < count2; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps10), i);
    }
    return result;
  };
}
var stringCamelCase11 = converter19((w, i) => (i ? CC_TO_UP10[w.charCodeAt(0)] : CC_TO_LO10[w.charCodeAt(0)]) + w.slice(1));
var stringPascalCase10 = converter19((w) => CC_TO_UP10[w.charCodeAt(0)] + w.slice(1));

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/string/lowerFirst.js
init_shim();
function converter20(map2) {
  return (value) => value ? map2[value.charCodeAt(0)] + value.slice(1) : "";
}
var stringLowerFirst10 = converter20(CC_TO_LO10);
var stringUpperFirst10 = converter20(CC_TO_UP10);

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/string/shorten.js
init_shim();

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/string/toHex.js
init_shim();

// node_modules/@polkadot/types-known/detectOther.js
init_shim();
var detectOther_default25 = [packageInfo7];

// node_modules/@polkadot/types-known/detectPackage.js
detectPackage11(packageInfo24, null, detectOther_default25);

// node_modules/@polkadot/types-known/bundle.js
init_shim();

// node_modules/@polkadot/types-known/util.js
init_shim();

// node_modules/@polkadot/types-known/chain/index.js
init_shim();
var typesChain = {};

// node_modules/@polkadot/types-known/spec/index.js
init_shim();

// node_modules/@polkadot/types-known/spec/centrifuge-chain.js
init_shim();
var sharedTypes = {
  // Anchor
  AnchorData: {
    anchoredBlock: "u64",
    docRoot: "H256",
    id: "H256"
  },
  DispatchErrorModule: "DispatchErrorModuleU8",
  PreCommitData: {
    expirationBlock: "u64",
    identity: "H256",
    signingRoot: "H256"
  },
  // Fees
  Fee: {
    key: "Hash",
    price: "Balance"
  },
  // MultiAccount
  MultiAccountData: {
    deposit: "Balance",
    depositor: "AccountId",
    signatories: "Vec<AccountId>",
    threshold: "u16"
  },
  // Bridge
  ChainId: "u8",
  DepositNonce: "u64",
  ResourceId: "[u8; 32]",
  "chainbridge::ChainId": "u8",
  // NFT
  RegistryId: "H160",
  TokenId: "U256",
  AssetId: {
    registryId: "RegistryId",
    tokenId: "TokenId"
  },
  AssetInfo: {
    metadata: "Bytes"
  },
  MintInfo: {
    anchorId: "Hash",
    proofs: "Vec<ProofMint>",
    staticHashes: "[Hash; 3]"
  },
  Proof: {
    leafHash: "H256",
    sortedHashes: "H256"
  },
  ProofMint: {
    hashes: "Vec<Hash>",
    property: "Bytes",
    salt: "[u8; 32]",
    value: "Bytes"
  },
  RegistryInfo: {
    fields: "Vec<Bytes>",
    ownerCanBurn: "bool"
  },
  ProxyType: {
    _enum: [
      "Any",
      "NonTransfer",
      "Governance",
      "Staking",
      "NonProxy"
    ]
  }
};
var standaloneTypes = {
  ...sharedTypes,
  AccountInfo: "AccountInfoWithRefCount",
  Address: "LookupSource",
  LookupSource: "IndicesLookupSource",
  Multiplier: "Fixed64",
  RefCount: "RefCountTo259"
};
var versioned = [
  {
    minmax: [240, 243],
    types: {
      ...standaloneTypes,
      ProxyType: {
        _enum: [
          "Any",
          "NonTransfer",
          "Governance",
          "Staking",
          "Vesting"
        ]
      }
    }
  },
  {
    minmax: [244, 999],
    types: { ...standaloneTypes }
  },
  {
    minmax: [1e3, void 0],
    types: { ...sharedTypes }
  }
];

// node_modules/@polkadot/types-known/spec/kusama.js
init_shim();
var sharedTypes2 = {
  CompactAssignments: "CompactAssignmentsWith24",
  DispatchErrorModule: "DispatchErrorModuleU8",
  RawSolution: "RawSolutionWith24",
  Keys: "SessionKeys6",
  ProxyType: {
    _enum: ["Any", "NonTransfer", "Governance", "Staking", "IdentityJudgement", "CancelProxy", "Auction"]
  },
  Weight: "WeightV1"
};
var addrIndicesTypes = {
  AccountInfo: "AccountInfoWithRefCount",
  Address: "LookupSource",
  CompactAssignments: "CompactAssignmentsWith16",
  DispatchErrorModule: "DispatchErrorModuleU8",
  RawSolution: "RawSolutionWith16",
  Keys: "SessionKeys5",
  LookupSource: "IndicesLookupSource",
  ValidatorPrefs: "ValidatorPrefsWithCommission"
};
var addrAccountIdTypes = {
  AccountInfo: "AccountInfoWithRefCount",
  Address: "AccountId",
  CompactAssignments: "CompactAssignmentsWith16",
  DispatchErrorModule: "DispatchErrorModuleU8",
  RawSolution: "RawSolutionWith16",
  Keys: "SessionKeys5",
  LookupSource: "AccountId",
  ValidatorPrefs: "ValidatorPrefsWithCommission"
};
var versioned2 = [
  {
    // 1020 is first CC3
    minmax: [1019, 1031],
    types: {
      ...addrIndicesTypes,
      BalanceLock: "BalanceLockTo212",
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchError: "DispatchErrorTo198",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      IdentityInfo: "IdentityInfoTo198",
      Keys: "SessionKeys5",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      ReferendumInfo: "ReferendumInfoTo239",
      Scheduled: "ScheduledTo254",
      SlashingSpans: "SlashingSpansTo204",
      StakingLedger: "StakingLedgerTo223",
      Votes: "VotesTo230",
      Weight: "u32"
    }
  },
  {
    minmax: [1032, 1042],
    types: {
      ...addrIndicesTypes,
      BalanceLock: "BalanceLockTo212",
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      Keys: "SessionKeys5",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      ReferendumInfo: "ReferendumInfoTo239",
      Scheduled: "ScheduledTo254",
      SlashingSpans: "SlashingSpansTo204",
      StakingLedger: "StakingLedgerTo223",
      Votes: "VotesTo230",
      Weight: "u32"
    }
  },
  {
    // actual at 1045 (1043-1044 is dev)
    minmax: [1043, 1045],
    types: {
      ...addrIndicesTypes,
      BalanceLock: "BalanceLockTo212",
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      Keys: "SessionKeys5",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      ReferendumInfo: "ReferendumInfoTo239",
      Scheduled: "ScheduledTo254",
      StakingLedger: "StakingLedgerTo223",
      Votes: "VotesTo230",
      Weight: "u32"
    }
  },
  {
    minmax: [1046, 1049],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      ReferendumInfo: "ReferendumInfoTo239",
      Scheduled: "ScheduledTo254",
      StakingLedger: "StakingLedgerTo223",
      Weight: "u32"
    }
  },
  {
    minmax: [1050, 1054],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      ReferendumInfo: "ReferendumInfoTo239",
      Scheduled: "ScheduledTo254",
      StakingLedger: "StakingLedgerTo240",
      Weight: "u32"
    }
  },
  {
    minmax: [1055, 1056],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      Scheduled: "ScheduledTo254",
      StakingLedger: "StakingLedgerTo240",
      Weight: "u32"
    }
  },
  {
    minmax: [1057, 1061],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      // Last 100% known problematic runtime range - this quite possibly need to
      // apply to more runtime ranges that follow, we just don't know how far this
      // should be applied to
      //
      // TL;DR whack-a-mole since this was not histrically checked
      //
      // See https://github.com/polkadot-js/api/issues/5618#issuecomment-1530970316
      Scheduled: "ScheduledTo254"
    }
  },
  {
    minmax: [1062, 2012],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      CompactAssignments: "CompactAssignmentsTo257",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [2013, 2022],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      CompactAssignments: "CompactAssignmentsTo257",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [2023, 2024],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [2025, 2027],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes
    }
  },
  {
    minmax: [2028, 2029],
    types: {
      ...sharedTypes2,
      AccountInfo: "AccountInfoWithDualRefCount",
      CompactAssignments: "CompactAssignmentsWith16",
      RawSolution: "RawSolutionWith16"
    }
  },
  {
    minmax: [2030, 9e3],
    types: {
      ...sharedTypes2,
      CompactAssignments: "CompactAssignmentsWith16",
      RawSolution: "RawSolutionWith16"
    }
  },
  {
    minmax: [9010, 9099],
    types: {
      ...sharedTypes2,
      ...mapXcmTypes("V0")
    }
  },
  {
    // jump from 9100 to 9110, however align with Rococo
    minmax: [9100, 9105],
    types: {
      ...sharedTypes2,
      ...mapXcmTypes("V1")
    }
  },
  {
    // metadata v14
    minmax: [9106, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
  // ,
  // {
  //   // weight v2 introduction
  //   minmax: [9300, undefined],
  //   types: {
  //     Weight: 'WeightV2'
  //   }
  // }
];

// node_modules/@polkadot/types-known/spec/node.js
init_shim();
var versioned3 = [
  {
    minmax: [0, void 0],
    types: {
      // nothing, API tracks master
      // (v2 weights are not yet the default)
      Weight: "WeightV2"
    }
  }
];

// node_modules/@polkadot/types-known/spec/node-template.js
init_shim();
var versioned4 = [
  {
    minmax: [0, void 0],
    types: {
      // nothing, API tracks master
      // (v2 weights are not yet the default)
      Weight: "WeightV2"
    }
  }
];

// node_modules/@polkadot/types-known/spec/polkadot.js
init_shim();
var sharedTypes3 = {
  CompactAssignments: "CompactAssignmentsWith16",
  DispatchErrorModule: "DispatchErrorModuleU8",
  RawSolution: "RawSolutionWith16",
  Keys: "SessionKeys6",
  ProxyType: {
    _enum: {
      Any: 0,
      NonTransfer: 1,
      Governance: 2,
      Staking: 3,
      UnusedSudoBalances: 4,
      IdentityJudgement: 5,
      CancelProxy: 6,
      Auction: 7
    }
  },
  Weight: "WeightV1"
};
var addrAccountIdTypes2 = {
  AccountInfo: "AccountInfoWithRefCount",
  Address: "AccountId",
  DispatchErrorModule: "DispatchErrorModuleU8",
  Keys: "SessionKeys5",
  LookupSource: "AccountId",
  ValidatorPrefs: "ValidatorPrefsWithCommission"
};
var versioned5 = [
  {
    minmax: [0, 12],
    types: {
      ...sharedTypes3,
      ...addrAccountIdTypes2,
      CompactAssignments: "CompactAssignmentsTo257",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [13, 22],
    types: {
      ...sharedTypes3,
      ...addrAccountIdTypes2,
      CompactAssignments: "CompactAssignmentsTo257",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [23, 24],
    types: {
      ...sharedTypes3,
      ...addrAccountIdTypes2,
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [25, 27],
    types: {
      ...sharedTypes3,
      ...addrAccountIdTypes2
    }
  },
  {
    minmax: [28, 29],
    types: {
      ...sharedTypes3,
      AccountInfo: "AccountInfoWithDualRefCount"
    }
  },
  {
    minmax: [30, 9109],
    types: {
      ...sharedTypes3
    }
  },
  {
    // metadata v14
    minmax: [9110, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
  // ,
  // {
  //   // weight v2 introduction
  //   minmax: [9300, undefined],
  //   types: {
  //     Weight: 'WeightV2'
  //   }
  // }
];

// node_modules/@polkadot/types-known/spec/rococo.js
init_shim();
var sharedTypes4 = {
  DispatchErrorModule: "DispatchErrorModuleU8",
  FullIdentification: "()",
  Keys: "SessionKeys7B",
  Weight: "WeightV1"
};
var versioned6 = [
  {
    minmax: [0, 200],
    types: {
      ...sharedTypes4,
      AccountInfo: "AccountInfoWithDualRefCount",
      Address: "AccountId",
      LookupSource: "AccountId"
    }
  },
  {
    minmax: [201, 214],
    types: {
      ...sharedTypes4,
      AccountInfo: "AccountInfoWithDualRefCount"
    }
  },
  {
    minmax: [215, 228],
    types: {
      ...sharedTypes4,
      Keys: "SessionKeys6"
    }
  },
  {
    minmax: [229, 9099],
    types: {
      ...sharedTypes4,
      ...mapXcmTypes("V0")
    }
  },
  {
    minmax: [9100, 9105],
    types: {
      ...sharedTypes4,
      ...mapXcmTypes("V1")
    }
  },
  {
    // metadata v14
    minmax: [9106, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
  // ,
  // {
  //   // weight v2 introduction
  //   minmax: [9300, undefined],
  //   types: {
  //     Weight: 'WeightV2'
  //   }
  // }
];

// node_modules/@polkadot/types-known/spec/shell.js
init_shim();
var versioned7 = [
  {
    minmax: [0, void 0],
    types: {
      // nothing, limited runtime
    }
  }
];

// node_modules/@polkadot/types-known/spec/statemint.js
init_shim();
var sharedTypes5 = {
  DispatchErrorModule: "DispatchErrorModuleU8",
  TAssetBalance: "u128",
  ProxyType: {
    _enum: [
      "Any",
      "NonTransfer",
      "CancelProxy",
      "Assets",
      "AssetOwner",
      "AssetManager",
      "Staking"
    ]
  },
  Weight: "WeightV1"
};
var versioned8 = [
  {
    minmax: [0, 3],
    types: {
      // Enum was modified mid-flight -
      // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
      DispatchError: "DispatchErrorPre6First",
      ...sharedTypes5,
      ...mapXcmTypes("V0")
    }
  },
  {
    minmax: [4, 5],
    types: {
      // As above, see https://github.com/polkadot-js/api/issues/5301
      DispatchError: "DispatchErrorPre6First",
      ...sharedTypes5,
      ...mapXcmTypes("V1")
    }
  },
  {
    // metadata V14
    minmax: [500, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
  // ,
  // {
  //   // weight v2 introduction
  //   minmax: [9300, undefined],
  //   types: {
  //     Weight: 'WeightV2'
  //   }
  // }
];

// node_modules/@polkadot/types-known/spec/westend.js
init_shim();
var sharedTypes6 = {
  // 16 validators
  CompactAssignments: "CompactAssignmentsWith16",
  DispatchErrorModule: "DispatchErrorModuleU8",
  RawSolution: "RawSolutionWith16",
  // general
  Keys: "SessionKeys6",
  ProxyType: {
    _enum: ["Any", "NonTransfer", "Staking", "SudoBalances", "IdentityJudgement", "CancelProxy"]
  },
  Weight: "WeightV1"
};
var addrAccountIdTypes3 = {
  AccountInfo: "AccountInfoWithRefCount",
  Address: "AccountId",
  CompactAssignments: "CompactAssignmentsWith16",
  DispatchErrorModule: "DispatchErrorModuleU8",
  LookupSource: "AccountId",
  Keys: "SessionKeys5",
  RawSolution: "RawSolutionWith16",
  ValidatorPrefs: "ValidatorPrefsWithCommission"
};
var versioned9 = [
  {
    minmax: [1, 2],
    types: {
      ...sharedTypes6,
      ...addrAccountIdTypes3,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      Weight: "u32"
    }
  },
  {
    minmax: [3, 22],
    types: {
      ...sharedTypes6,
      ...addrAccountIdTypes3,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [23, 42],
    types: {
      ...sharedTypes6,
      ...addrAccountIdTypes3,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [43, 44],
    types: {
      ...sharedTypes6,
      ...addrAccountIdTypes3,
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [45, 47],
    types: {
      ...sharedTypes6,
      ...addrAccountIdTypes3
    }
  },
  {
    minmax: [48, 49],
    types: {
      ...sharedTypes6,
      AccountInfo: "AccountInfoWithDualRefCount"
    }
  },
  {
    minmax: [50, 9099],
    types: {
      ...sharedTypes6,
      ...mapXcmTypes("V0")
    }
  },
  {
    minmax: [9100, 9105],
    types: {
      ...sharedTypes6,
      ...mapXcmTypes("V1")
    }
  },
  {
    // metadata v14
    minmax: [9106, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
  // ,
  // {
  //   // weight v2 introduction
  //   minmax: [9300, undefined],
  //   types: {
  //     Weight: 'WeightV2'
  //   }
  // }
];

// node_modules/@polkadot/types-known/spec/index.js
var typesSpec = {
  "centrifuge-chain": versioned,
  kusama: versioned2,
  node: versioned3,
  "node-template": versioned4,
  polkadot: versioned5,
  rococo: versioned6,
  shell: versioned7,
  statemine: versioned8,
  statemint: versioned8,
  westend: versioned9,
  westmint: versioned8
};

// node_modules/@polkadot/types-known/upgrades/index.js
init_shim();

// node_modules/@polkadot/types-known/upgrades/e2e/index.js
var e2e_exports = {};
__export(e2e_exports, {
  kusama: () => upgrades,
  polkadot: () => upgrades2,
  westend: () => upgrades3
});
init_shim();

// node_modules/@polkadot/types-known/upgrades/e2e/kusama.js
init_shim();
var upgrades = [
  [
    0,
    1020,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    26669,
    1021,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    38245,
    1022,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    54248,
    1023,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    59659,
    1024,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    67651,
    1025,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    82191,
    1027,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    83238,
    1028,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    101503,
    1029,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    203466,
    1030,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    295787,
    1031,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    461692,
    1032,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    504329,
    1033,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    569327,
    1038,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    587687,
    1039,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    653183,
    1040,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    693488,
    1042,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    901442,
    1045,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1375086,
    1050,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1445458,
    1051,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1472960,
    1052,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1475648,
    1053,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1491596,
    1054,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1574408,
    1055,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2064961,
    1058,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2201991,
    1062,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2671528,
    2005,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2704202,
    2007,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2728002,
    2008,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2832534,
    2011,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2962294,
    2012,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    324e4,
    2013,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3274408,
    2015,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3323565,
    2019,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3534175,
    2022,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3860281,
    2023,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4143129,
    2024,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4401242,
    2025,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4841367,
    2026,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5961600,
    2027,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6137912,
    2028,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6561855,
    2029,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7100891,
    2030,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7468792,
    9010,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7668600,
    9030,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7812476,
    9040,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8010981,
    9050,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8073833,
    9070,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8555825,
    9080,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8945245,
    9090,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9611377,
    9100,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9625129,
    9111,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9866422,
    9122,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10403784,
    9130,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10960765,
    9150,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11006614,
    9151,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11404482,
    9160,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11601803,
    9170,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    12008022,
    9180,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    12405451,
    9190,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    12665416,
    9200,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    12909508,
    9220,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    13109752,
    9230,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    13555777,
    9250,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    13727747,
    9260,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    14248044,
    9271,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    14433840,
    9280,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    14645900,
    9291,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    15048375,
    9300,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    15426015,
    9320,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    15680713,
    9340,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    15756296,
    9350,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ]
];

// node_modules/@polkadot/types-known/upgrades/e2e/polkadot.js
init_shim();
var upgrades2 = [
  [
    0,
    0,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    29231,
    1,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    188836,
    5,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    199405,
    6,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    214264,
    7,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    244358,
    8,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    303079,
    9,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    314201,
    10,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    342400,
    11,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    443963,
    12,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    528470,
    13,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    687751,
    14,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    746085,
    15,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    787923,
    16,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    799302,
    17,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1205128,
    18,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1603423,
    23,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1733218,
    24,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2005673,
    25,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2436698,
    26,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3613564,
    27,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3899547,
    28,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4345767,
    29,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4876134,
    30,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5661442,
    9050,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6321619,
    9080,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6713249,
    9090,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7217907,
    9100,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7229126,
    9110,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7560558,
    9122,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8115869,
    9140,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8638103,
    9151,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9280179,
    9170,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9738717,
    9180,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10156856,
    9190,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10458576,
    9200,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10655116,
    9220,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10879371,
    9230,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11328884,
    9250,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11532856,
    9260,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11933818,
    9270,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    12217535,
    9280,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ]
    ]
  ],
  [
    12245277,
    9281,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ]
    ]
  ],
  [
    12532644,
    9291,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ]
    ]
  ],
  [
    12876189,
    9300,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ]
    ]
  ]
];

// node_modules/@polkadot/types-known/upgrades/e2e/westend.js
init_shim();
var upgrades3 = [
  [
    214356,
    4,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    392764,
    7,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    409740,
    8,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    809976,
    20,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    877581,
    24,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    879238,
    25,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    889472,
    26,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    902937,
    27,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    932751,
    28,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    991142,
    29,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1030162,
    31,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1119657,
    32,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1199282,
    33,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1342534,
    34,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1392263,
    35,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1431703,
    36,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1433369,
    37,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1490972,
    41,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2087397,
    43,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2316688,
    44,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2549864,
    45,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3925782,
    46,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3925843,
    47,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4207800,
    48,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4627944,
    49,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5124076,
    50,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5478664,
    900,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5482450,
    9e3,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5584305,
    9010,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5784566,
    9030,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5879822,
    9031,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5896856,
    9032,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5897316,
    9033,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6117927,
    9050,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6210274,
    9070,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6379314,
    9080,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6979141,
    9090,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7568453,
    9100,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7766394,
    9111,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7911691,
    9120,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7968866,
    9121,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7982889,
    9122,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8514322,
    9130,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9091726,
    9140,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9091774,
    9150,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9406726,
    9160,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9921066,
    9170,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10007115,
    9180,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10480973,
    9190,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10578091,
    9200,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10678509,
    9210,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10811001,
    9220,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11096116,
    9230,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11409279,
    9250,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11584820,
    9251,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11716837,
    9260,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11876919,
    9261,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11987927,
    9270,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    12077324,
    9271,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    12301871,
    9280,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    12604343,
    9290,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    12841034,
    9300,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    13128237,
    9310,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    13272363,
    9320,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    13483497,
    9330,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    13649433,
    9340,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    13761100,
    9350,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ]
];

// node_modules/@polkadot/types-known/upgrades/index.js
var NET_EXTRA = {
  westend: {
    genesisHash: ["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"]
  }
};
function mapRaw([network, versions]) {
  const chain5 = selectableNetworks.find((n) => n.network === network) || NET_EXTRA[network];
  if (!chain5) {
    throw new Error(`Unable to find info for chain ${network}`);
  }
  return {
    genesisHash: hexToU8a11(chain5.genesisHash[0]),
    network,
    versions: versions.map(([blockNumber, specVersion, apis]) => ({
      apis,
      blockNumber: new import_bn149.default(blockNumber),
      specVersion: new import_bn149.default(specVersion)
    }))
  };
}
var upgrades4 = Object.entries(e2e_exports).map(mapRaw);

// node_modules/@polkadot/types-known/util.js
function withNames(chainName, specName, fn) {
  return fn(chainName.toString(), specName.toString());
}
function filterVersions(versions = [], specVersion) {
  return versions.filter(({ minmax: [min2, max2] }) => (min2 === void 0 || min2 === null || specVersion >= min2) && (max2 === void 0 || max2 === null || specVersion <= max2)).reduce((result, { types: types6 }) => ({ ...result, ...types6 }), {});
}
function getSpecExtensions({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _a, _b, _c, _d, _e, _f;
    return {
      ...((_c = (_b = (_a = knownTypes2.typesBundle) == null ? void 0 : _a.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.signedExtensions) ?? {},
      ...((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.signedExtensions) ?? {}
    };
  });
}
function getSpecTypes({ knownTypes: knownTypes2 }, chainName, specName, specVersion) {
  const _specVersion = bnToBn10(specVersion).toNumber();
  return withNames(chainName, specName, (c, s) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    return {
      // The order here is always, based on -
      //   - spec then chain
      //   - typesBundle takes higher precedence
      //   - types is the final catch-all override
      ...filterVersions(typesSpec[s], _specVersion),
      ...filterVersions(typesChain[c], _specVersion),
      ...filterVersions((_c = (_b = (_a = knownTypes2.typesBundle) == null ? void 0 : _a.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.types, _specVersion),
      ...filterVersions((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.types, _specVersion),
      ...((_g = knownTypes2.typesSpec) == null ? void 0 : _g[s]) ?? {},
      ...((_h = knownTypes2.typesChain) == null ? void 0 : _h[c]) ?? {},
      ...knownTypes2.types ?? {}
    };
  });
}
function getSpecHasher({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _a, _b, _c, _d, _e, _f;
    return knownTypes2.hasher || ((_c = (_b = (_a = knownTypes2.typesBundle) == null ? void 0 : _a.chain) == null ? void 0 : _b[c]) == null ? void 0 : _c.hasher) || ((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.spec) == null ? void 0 : _e[s]) == null ? void 0 : _f.hasher) || null;
  });
}
function getSpecRpc({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _a, _b, _c, _d, _e, _f;
    return {
      ...((_c = (_b = (_a = knownTypes2.typesBundle) == null ? void 0 : _a.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.rpc) ?? {},
      ...((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.rpc) ?? {}
    };
  });
}
function getSpecRuntime({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _a, _b, _c, _d, _e, _f;
    return {
      ...((_c = (_b = (_a = knownTypes2.typesBundle) == null ? void 0 : _a.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.runtime) ?? {},
      ...((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.runtime) ?? {}
    };
  });
}
function getSpecAlias({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _a, _b, _c, _d, _e, _f;
    return {
      // as per versions, first spec, then chain then finally non-versioned
      ...((_c = (_b = (_a = knownTypes2.typesBundle) == null ? void 0 : _a.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.alias) ?? {},
      ...((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.alias) ?? {},
      ...knownTypes2.typesAlias ?? {}
    };
  });
}
function getUpgradeVersion(genesisHash, blockNumber) {
  const known2 = upgrades4.find((u) => genesisHash.eq(u.genesisHash));
  return known2 ? [
    known2.versions.reduce((last3, version) => {
      return blockNumber.gt(version.blockNumber) ? version : last3;
    }, void 0),
    known2.versions.find((version) => blockNumber.lte(version.blockNumber))
  ] : [void 0, void 0];
}

// node_modules/@polkadot/api/base/Decorate.js
init_shim();

// node_modules/@polkadot/api/util/augmentObject.js
init_shim();
var l15 = logger2("api/augment");
function logLength(type, values, and = []) {
  return values.length ? ` ${values.length} ${type}${and.length ? " and" : ""}` : "";
}
function logValues(type, values) {
  return values.length ? `
	${type.padStart(7)}: ${values.sort().join(", ")}` : "";
}
function warn11(prefix2, type, [added, removed]) {
  if (added.length || removed.length) {
    l15.warn(`api.${prefix2}: Found${logLength("added", added, removed)}${logLength("removed", removed)} ${type}:${logValues("added", added)}${logValues("removed", removed)}`);
  }
}
function findSectionExcludes(a, b) {
  return a.filter((s) => !b.includes(s));
}
function findSectionIncludes(a, b) {
  return a.filter((s) => b.includes(s));
}
function extractSections(src, dst) {
  const srcSections = Object.keys(src);
  const dstSections = Object.keys(dst);
  return [
    findSectionExcludes(srcSections, dstSections),
    findSectionExcludes(dstSections, srcSections)
  ];
}
function findMethodExcludes(src, dst) {
  const srcSections = Object.keys(src);
  const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
  const excludes = [];
  for (let s = 0, scount = dstSections.length; s < scount; s++) {
    const section2 = dstSections[s];
    const srcMethods = Object.keys(src[section2]);
    const dstMethods = Object.keys(dst[section2]);
    for (let d = 0, mcount = dstMethods.length; d < mcount; d++) {
      const method = dstMethods[d];
      if (!srcMethods.includes(method)) {
        excludes.push(`${section2}.${method}`);
      }
    }
  }
  return excludes;
}
function extractMethods(src, dst) {
  return [
    findMethodExcludes(dst, src),
    findMethodExcludes(src, dst)
  ];
}
function augmentObject(prefix2, src, dst, fromEmpty = false) {
  fromEmpty && objectClear4(dst);
  if (prefix2 && Object.keys(dst).length) {
    warn11(prefix2, "modules", extractSections(src, dst));
    warn11(prefix2, "calls", extractMethods(src, dst));
  }
  const sections = Object.keys(src);
  for (let i = 0, count2 = sections.length; i < count2; i++) {
    const section2 = sections[i];
    const methods = src[section2];
    if (!dst[section2]) {
      dst[section2] = {};
    }
    lazyMethods(dst[section2], Object.keys(methods), (m) => methods[m]);
  }
  return dst;
}

// node_modules/@polkadot/api/util/validate.js
init_shim();
function sig({ lookup }, { method, section: section2 }, args) {
  return `${section2}.${method}(${args.map((a) => lookup.getTypeDef(a).type).join(", ")})`;
}
function extractStorageArgs(registry, creator, _args) {
  const args = _args.filter((a) => !isUndefined4(a));
  if (creator.meta.type.isPlain) {
    if (args.length !== 0) {
      throw new Error(`${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
    }
  } else {
    const { hashers, key } = creator.meta.type.asMap;
    const keys2 = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple.map((t) => t);
    if (args.length !== keys2.length) {
      throw new Error(`${sig(registry, creator, keys2)} is a map, requiring ${keys2.length} arguments, ${args.length} found`);
    }
  }
  return [creator, args];
}

// node_modules/@polkadot/api/base/Events.js
init_shim();
var Events = class {
  constructor() {
    this.__internal__eventemitter = new import_index.default();
  }
  emit(type, ...args) {
    return this.__internal__eventemitter.emit(type, ...args);
  }
  /**
   * @description Attach an eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.on('connected', (): void => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.on('disconnected', (): void => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */
  on(type, handler) {
    this.__internal__eventemitter.on(type, handler);
    return this;
  }
  /**
   * @description Remove the given eventemitter handler
   *
   * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to unregister.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const handler = (): void => {
   *  console.log('Connected !);
   * };
   *
   * // Start listening
   * api.on('connected', handler);
   *
   * // Stop listening
   * api.off('connected', handler);
   * ```
   */
  off(type, handler) {
    this.__internal__eventemitter.removeListener(type, handler);
    return this;
  }
  /**
   * @description Attach an one-time eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.once('connected', (): void => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.once('disconnected', (): void => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */
  once(type, handler) {
    this.__internal__eventemitter.once(type, handler);
    return this;
  }
};

// node_modules/@polkadot/api/base/Decorate.js
var PAGE_SIZE_K2 = 1e3;
var PAGE_SIZE_V = 250;
var PAGE_SIZE_Q = 50;
var l16 = logger2("api/init");
var instanceCounter = 0;
function getAtQueryFn(api, { method, section: section2 }) {
  return assertReturn(api.rx.query[section2] && api.rx.query[section2][method], () => `query.${section2}.${method} is not available in this version of the metadata`);
}
var Decorate = class extends Events {
  /**
   * @description Create an instance of the class
   *
   * @param options Options object to create API instance or a Provider instance
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * const api = new Api().isReady();
   *
   * api.rpc.subscribeNewHeads((header) => {
   *   console.log(`new block #${header.number.toNumber()}`);
   * });
   * ```
   */
  constructor(options, type, decorateMethod) {
    var _a;
    super();
    this.__internal__runtimeLog = {};
    this.__internal__storageGetQ = [];
    this.__internal__storageSubQ = [];
    this.__phantom = new import_bn41.default(0);
    this._call = {};
    this._consts = {};
    this._errors = {};
    this._events = {};
    this._extrinsicType = GenericExtrinsic.LATEST_EXTRINSIC_VERSION;
    this._isReady = false;
    this._query = {};
    this._runtimeMap = {};
    this._rx = { call: {}, consts: {}, query: {}, tx: {} };
    this._rxDecorateMethod = (method) => {
      return method;
    };
    this.__internal__instanceId = `${++instanceCounter}`;
    this.__internal__registry = ((_a = options.source) == null ? void 0 : _a.registry) || options.registry || new TypeRegistry();
    this._rx.callAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map((a) => a.rx.call));
    this._rx.queryAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map((a) => a.rx.query));
    this._rx.registry = this.__internal__registry;
    this._decorateMethod = decorateMethod;
    this._options = options;
    this._type = type;
    const provider = options.source ? options.source._rpcCore.provider.isClonable ? options.source._rpcCore.provider.clone() : options.source._rpcCore.provider : options.provider || new WsProvider();
    this._rpcCore = new RpcCore(this.__internal__instanceId, this.__internal__registry, {
      isPedantic: this._options.isPedantic,
      provider,
      userRpc: this._options.rpc
    });
    this._isConnected = new BehaviorSubject(this._rpcCore.provider.isConnected);
    this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
  }
  /**
   * @description Return the current used registry
   */
  get registry() {
    return this.__internal__registry;
  }
  /**
   * @description Creates an instance of a type as registered
   */
  createType(type, ...params) {
    return this.__internal__registry.createType(type, ...params);
  }
  /**
   * @description Register additional user-defined of chain-specific types in the type registry
   */
  registerTypes(types6) {
    types6 && this.__internal__registry.register(types6);
  }
  /**
   * @returns `true` if the API operates with subscriptions
   */
  get hasSubscriptions() {
    return this._rpcCore.provider.hasSubscriptions;
  }
  /**
   * @returns `true` if the API decorate multi-key queries
   */
  get supportMulti() {
    return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
  }
  _emptyDecorated(registry, blockHash) {
    return {
      call: {},
      consts: {},
      errors: {},
      events: {},
      query: {},
      registry,
      rx: {
        call: {},
        query: {}
      },
      tx: createSubmittable(this._type, this._rx, this._decorateMethod, registry, blockHash)
    };
  }
  _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
    if (!decoratedApi) {
      decoratedApi = this._emptyDecorated(registry.registry, blockHash);
    }
    if (fromEmpty || !registry.decoratedMeta) {
      registry.decoratedMeta = expandMetadata(registry.registry, registry.metadata);
    }
    const runtime31 = this._decorateCalls(registry, this._decorateMethod, blockHash);
    const runtimeRx = this._decorateCalls(registry, this._rxDecorateMethod, blockHash);
    const storage = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);
    const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);
    augmentObject("consts", registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
    augmentObject("errors", registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
    augmentObject("events", registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
    augmentObject("query", storage, decoratedApi.query, fromEmpty);
    augmentObject("query", storageRx, decoratedApi.rx.query, fromEmpty);
    augmentObject("call", runtime31, decoratedApi.call, fromEmpty);
    augmentObject("call", runtimeRx, decoratedApi.rx.call, fromEmpty);
    decoratedApi.findCall = (callIndex) => findCall(registry.registry, callIndex);
    decoratedApi.findError = (errorIndex) => findError(registry.registry, errorIndex);
    decoratedApi.queryMulti = blockHash ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash) : this._decorateMulti(this._decorateMethod);
    decoratedApi.runtimeVersion = registry.runtimeVersion;
    return {
      createdAt: blockHash,
      decoratedApi,
      decoratedMeta: registry.decoratedMeta
    };
  }
  _injectMetadata(registry, fromEmpty = false) {
    if (fromEmpty || !registry.decoratedApi) {
      registry.decoratedApi = this._emptyDecorated(registry.registry);
    }
    const { decoratedApi, decoratedMeta } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);
    this._call = decoratedApi.call;
    this._consts = decoratedApi.consts;
    this._errors = decoratedApi.errors;
    this._events = decoratedApi.events;
    this._query = decoratedApi.query;
    this._rx.call = decoratedApi.rx.call;
    this._rx.query = decoratedApi.rx.query;
    const tx = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
    const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
    if (fromEmpty || !this._extrinsics) {
      this._extrinsics = tx;
      this._rx.tx = rxtx;
    } else {
      augmentObject("tx", tx, this._extrinsics, false);
      augmentObject(null, rxtx, this._rx.tx, false);
    }
    augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
    this.emit("decorated");
  }
  /**
   * @deprecated
   * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
   */
  injectMetadata(metadata, fromEmpty, registry) {
    this._injectMetadata({ counter: 0, metadata, registry: registry || this.__internal__registry, runtimeVersion: this.__internal__registry.createType("RuntimeVersionPartial") }, fromEmpty);
  }
  _decorateFunctionMeta(input, output5) {
    output5.meta = input.meta;
    output5.method = input.method;
    output5.section = input.section;
    output5.toJSON = input.toJSON;
    if (input.callIndex) {
      output5.callIndex = input.callIndex;
    }
    return output5;
  }
  // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
  // manner to cater for both old and new:
  //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
  //   - when non-zero, remove anything that is not in the array (we don't do this)
  _filterRpc(methods, additional) {
    if (Object.keys(additional).length !== 0) {
      this._rpcCore.addUserInterfaces(additional);
      this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);
      this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
    }
    const sectionMap = {};
    for (let i = 0, count2 = methods.length; i < count2; i++) {
      const [section2] = methods[i].split("_");
      sectionMap[section2] = true;
    }
    const sections = Object.keys(sectionMap);
    for (let i = 0, count2 = sections.length; i < count2; i++) {
      const nameA = stringUpperFirst4(sections[i]);
      const nameB = `${nameA}Api`;
      this._runtimeMap[blake2AsHex(nameA, 64)] = nameA;
      this._runtimeMap[blake2AsHex(nameB, 64)] = nameB;
    }
    this._filterRpcMethods(methods);
  }
  _filterRpcMethods(exposed) {
    const hasResults = exposed.length !== 0;
    const allKnown = [...this._rpcCore.mapping.entries()];
    const allKeys = [];
    const count2 = allKnown.length;
    for (let i = 0; i < count2; i++) {
      const [, { alias: alias2, endpoint, method, pubsub, section: section2 }] = allKnown[i];
      allKeys.push(`${section2}_${method}`);
      if (pubsub) {
        allKeys.push(`${section2}_${pubsub[1]}`);
        allKeys.push(`${section2}_${pubsub[2]}`);
      }
      if (alias2) {
        allKeys.push(...alias2);
      }
      if (endpoint) {
        allKeys.push(endpoint);
      }
    }
    const unknown = exposed.filter((k) => !allKeys.includes(k) && !k.includes("_unstable_"));
    if (unknown.length && !this._options.noInitWarn) {
      l16.warn(`RPC methods not decorated: ${unknown.join(", ")}`);
    }
    for (let i = 0; i < count2; i++) {
      const [k, { method, section: section2 }] = allKnown[i];
      if (hasResults && !exposed.includes(k) && k !== "rpc_methods") {
        if (this._rpc[section2]) {
          delete this._rpc[section2][method];
          delete this._rx.rpc[section2][method];
        }
      }
    }
  }
  _rpcSubmitter(decorateMethod) {
    const method = (method2, ...params) => {
      return from(this._rpcCore.provider.send(method2, params));
    };
    return decorateMethod(method);
  }
  _decorateRpc(rpc19, decorateMethod, input = this._rpcSubmitter(decorateMethod)) {
    const out = input;
    const decorateFn = (section2, method) => {
      const source = rpc19[section2][method];
      const fn = decorateMethod(source, { methodName: method });
      fn.meta = source.meta;
      fn.raw = decorateMethod(source.raw, { methodName: method });
      return fn;
    };
    for (let s = 0, scount = rpc19.sections.length; s < scount; s++) {
      const section2 = rpc19.sections[s];
      if (!Object.prototype.hasOwnProperty.call(out, section2)) {
        const methods = Object.keys(rpc19[section2]);
        const decorateInternal = (method) => decorateFn(section2, method);
        for (let m = 0, mcount = methods.length; m < mcount; m++) {
          const method = methods[m];
          if (this.hasSubscriptions || !(method.startsWith("subscribe") || method.startsWith("unsubscribe"))) {
            if (!Object.prototype.hasOwnProperty.call(out, section2)) {
              out[section2] = {};
            }
            lazyMethod(out[section2], method, decorateInternal);
          }
        }
      }
    }
    return out;
  }
  // add all definition entries
  _addRuntimeDef(result, additional) {
    if (!additional) {
      return;
    }
    const entries = Object.entries(additional);
    for (let j = 0, ecount = entries.length; j < ecount; j++) {
      const [key, defs] = entries[j];
      if (result[key]) {
        for (let k = 0, dcount = defs.length; k < dcount; k++) {
          const def = defs[k];
          const prev = result[key].find(({ version }) => def.version === version);
          if (prev) {
            objectSpread4(prev.methods, def.methods);
          } else {
            result[key].push(def);
          }
        }
      } else {
        result[key] = defs;
      }
    }
  }
  // extract all runtime definitions
  _getRuntimeDefs(registry, specName, chain5 = "") {
    const result = {};
    const defValues = Object.values(definitions_exports);
    for (let i = 0, count2 = defValues.length; i < count2; i++) {
      this._addRuntimeDef(result, defValues[i].runtime);
    }
    this._addRuntimeDef(result, getSpecRuntime(registry, chain5, specName));
    this._addRuntimeDef(result, this._options.runtime);
    return Object.entries(result);
  }
  // pre-metadata decoration
  _decorateCalls({ registry, runtimeVersion: { apis, specName, specVersion } }, decorateMethod, blockHash) {
    const result = {};
    const named = {};
    const hashes = {};
    const sections = this._getRuntimeDefs(registry, specName, this._runtimeChain);
    const older = [];
    const implName = `${specName.toString()}/${specVersion.toString()}`;
    const hasLogged = this.__internal__runtimeLog[implName] || false;
    this.__internal__runtimeLog[implName] = true;
    for (let i = 0, scount = sections.length; i < scount; i++) {
      const [_section, secs] = sections[i];
      const sectionHash = blake2AsHex(_section, 64);
      const rtApi = apis.find(([a]) => a.eq(sectionHash));
      hashes[sectionHash] = true;
      if (rtApi) {
        const all3 = secs.map(({ version }) => version).sort();
        const sec = secs.find(({ version }) => rtApi[1].eq(version));
        if (sec) {
          const section2 = stringCamelCase5(_section);
          const methods = Object.entries(sec.methods);
          if (methods.length) {
            if (!named[section2]) {
              named[section2] = {};
            }
            for (let m = 0, mcount = methods.length; m < mcount; m++) {
              const [_method, def] = methods[m];
              const method = stringCamelCase5(_method);
              named[section2][method] = objectSpread4({ method, name: `${_section}_${_method}`, section: section2, sectionHash }, def);
            }
          }
        } else {
          older.push(`${_section}/${rtApi[1].toString()} (${all3.join("/")} known)`);
        }
      }
    }
    const notFound = apis.map(([a, v]) => [a.toHex(), v.toString()]).filter(([a]) => !hashes[a]).map(([a, v]) => `${this._runtimeMap[a] || a}/${v}`);
    if (!this._options.noInitWarn && !hasLogged) {
      if (older.length) {
        l16.warn(`${implName}: Not decorating runtime apis without matching versions: ${older.join(", ")}`);
      }
      if (notFound.length) {
        l16.warn(`${implName}: Not decorating unknown runtime apis: ${notFound.join(", ")}`);
      }
    }
    const stateCall = blockHash ? (name, bytes5) => this._rpcCore.state.call(name, bytes5, blockHash) : (name, bytes5) => this._rpcCore.state.call(name, bytes5);
    const lazySection = (section2) => lazyMethods({}, Object.keys(named[section2]), (method) => this._decorateCall(registry, named[section2][method], stateCall, decorateMethod));
    const modules = Object.keys(named);
    for (let i = 0, count2 = modules.length; i < count2; i++) {
      lazyMethod(result, modules[i], lazySection);
    }
    return result;
  }
  _decorateCall(registry, def, stateCall, decorateMethod) {
    const decorated = decorateMethod((...args) => {
      if (args.length !== def.params.length) {
        throw new Error(`${def.name}:: Expected ${def.params.length} arguments, found ${args.length}`);
      }
      const bytes5 = registry.createType("Raw", u8aConcatStrict5(args.map((a, i) => registry.createTypeUnsafe(def.params[i].type, [a]).toU8a())));
      return stateCall(def.name, bytes5).pipe(map((r) => registry.createTypeUnsafe(def.type, [r])));
    });
    decorated.meta = def;
    return decorated;
  }
  // only be called if supportMulti is true
  _decorateMulti(decorateMethod) {
    return decorateMethod((keys2) => keys2.length ? (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(keys2.map((args) => Array.isArray(args) ? args[0].creator.meta.type.isPlain ? [args[0].creator] : args[0].creator.meta.type.asMap.hashers.length === 1 ? [args[0].creator, args.slice(1)] : [args[0].creator, ...args.slice(1)] : [args.creator])) : of([]));
  }
  _decorateMultiAt(atApi, decorateMethod, blockHash) {
    return decorateMethod((calls) => calls.length ? this._rpcCore.state.queryStorageAt(calls.map((args) => {
      if (Array.isArray(args)) {
        const { creator } = getAtQueryFn(atApi, args[0].creator);
        return creator.meta.type.isPlain ? [creator] : creator.meta.type.asMap.hashers.length === 1 ? [creator, args.slice(1)] : [creator, ...args.slice(1)];
      }
      return [getAtQueryFn(atApi, args.creator).creator];
    }), blockHash) : of([]));
  }
  _decorateExtrinsics({ tx }, decorateMethod) {
    const result = createSubmittable(this._type, this._rx, decorateMethod);
    const lazySection = (section2) => lazyMethods({}, Object.keys(tx[section2]), (method) => method.startsWith("$") ? tx[section2][method] : this._decorateExtrinsicEntry(tx[section2][method], result));
    const sections = Object.keys(tx);
    for (let i = 0, count2 = sections.length; i < count2; i++) {
      lazyMethod(result, sections[i], lazySection);
    }
    return result;
  }
  _decorateExtrinsicEntry(method, creator) {
    const decorated = (...params) => creator(method(...params));
    decorated.is = (other) => method.is(other);
    return this._decorateFunctionMeta(method, decorated);
  }
  _decorateStorage({ query: query2, registry }, decorateMethod, blockHash) {
    const result = {};
    const lazySection = (section2) => lazyMethods({}, Object.keys(query2[section2]), (method) => blockHash ? this._decorateStorageEntryAt(registry, query2[section2][method], decorateMethod, blockHash) : this._decorateStorageEntry(query2[section2][method], decorateMethod));
    const sections = Object.keys(query2);
    for (let i = 0, count2 = sections.length; i < count2; i++) {
      lazyMethod(result, sections[i], lazySection);
    }
    return result;
  }
  _decorateStorageEntry(creator, decorateMethod) {
    const getArgs = (args, registry) => extractStorageArgs(registry || this.__internal__registry, creator, args);
    const getQueryAt = (blockHash) => from(this.at(blockHash)).pipe(map((api) => getAtQueryFn(api, creator)));
    const decorated = this._decorateStorageCall(creator, decorateMethod);
    decorated.creator = creator;
    decorated.at = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => q(...args))));
    decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));
    decorated.is = (key) => key.section === creator.section && key.method === creator.method;
    decorated.key = (...args) => u8aToHex5(compactStripLength4(creator(...args))[1]);
    decorated.keyPrefix = (...args) => u8aToHex5(creator.keyPrefix(...args));
    decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
    decorated.sizeAt = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash))));
    if (creator.iterKey && creator.meta.type.isMap) {
      decorated.entries = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, null, args)));
      decorated.entriesAt = decorateMethod(memo(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapEntries(q.creator, blockHash, args)))));
      decorated.entriesPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, void 0, opts)));
      decorated.keys = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, null, args)));
      decorated.keysAt = decorateMethod(memo(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapKeys(q.creator, blockHash, args)))));
      decorated.keysPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, void 0, opts)));
    }
    if (this.supportMulti && creator.meta.type.isMap) {
      decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a) => [creator, [a]])) : this._retrieveMulti(args.map((a) => [creator, a])));
    }
    return this._decorateFunctionMeta(creator, decorated);
  }
  _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
    const getArgs = (args) => extractStorageArgs(registry, creator, args);
    const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
    decorated.creator = creator;
    decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));
    decorated.is = (key) => key.section === creator.section && key.method === creator.method;
    decorated.key = (...args) => u8aToHex5(compactStripLength4(creator(...args))[1]);
    decorated.keyPrefix = (...keys2) => u8aToHex5(creator.keyPrefix(...keys2));
    decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash));
    if (creator.iterKey && creator.meta.type.isMap) {
      decorated.entries = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, blockHash, args)));
      decorated.entriesPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, blockHash, opts)));
      decorated.keys = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, blockHash, args)));
      decorated.keysPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, blockHash, opts)));
    }
    if (this.supportMulti && creator.meta.type.isMap) {
      decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a) => [creator, [a]]), blockHash) : this._retrieveMulti(args.map((a) => [creator, a]), blockHash));
    }
    return this._decorateFunctionMeta(creator, decorated);
  }
  _queueStorage(call, queue2) {
    const query2 = queue2 === this.__internal__storageSubQ ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
    let queueIdx = queue2.length - 1;
    let valueIdx = 0;
    let valueObs;
    if (queueIdx === -1 || !queue2[queueIdx] || queue2[queueIdx][1].length === PAGE_SIZE_Q) {
      queueIdx++;
      valueObs = from(
        // we delay the execution until the next tick, this allows
        // any queries made in this timeframe to be added to the same
        // queue for a single query
        new Promise((resolve) => {
          nextTick(() => {
            const calls = queue2[queueIdx][1];
            delete queue2[queueIdx];
            resolve(calls);
          });
        })
      ).pipe(switchMap((calls) => query2(calls)));
      queue2.push([valueObs, [call]]);
    } else {
      valueObs = queue2[queueIdx][0];
      valueIdx = queue2[queueIdx][1].length;
      queue2[queueIdx][1].push(call);
    }
    return valueObs.pipe(
      // return the single value at this index
      map((values) => values[valueIdx])
    );
  }
  // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
  // we make a subscription, alternatively we push this through a single-shot query
  _decorateStorageCall(creator, decorateMethod) {
    const memoed = memo(this.__internal__instanceId, (...args) => {
      const call = extractStorageArgs(this.__internal__registry, creator, args);
      if (!this.hasSubscriptions) {
        return this._rpcCore.state.getStorage(call);
      }
      return this._queueStorage(call, this.__internal__storageSubQ);
    });
    return decorateMethod(memoed, {
      methodName: creator.method,
      overrideNoSub: (...args) => this._queueStorage(extractStorageArgs(this.__internal__registry, creator, args), this.__internal__storageGetQ)
    });
  }
  // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes
  _retrieveMulti(keys2, blockHash) {
    if (!keys2.length) {
      return of([]);
    }
    const query2 = this.hasSubscriptions && !blockHash ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
    if (keys2.length <= PAGE_SIZE_V) {
      return blockHash ? query2(keys2, blockHash) : query2(keys2);
    }
    return combineLatest(arrayChunk4(keys2, PAGE_SIZE_V).map((k) => blockHash ? query2(k, blockHash) : query2(k))).pipe(map(arrayFlatten4));
  }
  _retrieveMapKeys({ iterKey, meta, method, section: section2 }, at, args) {
    if (!iterKey || !meta.type.isMap) {
      throw new Error("keys can only be retrieved on maps");
    }
    const headKey = iterKey(...args).toHex();
    const startSubject = new BehaviorSubject(headKey);
    const query2 = at ? (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K2, startKey, at) : (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K2, startKey);
    const setMeta = (key) => key.setMeta(meta, section2, method);
    return startSubject.pipe(
      switchMap(query2),
      map((keys2) => keys2.map(setMeta)),
      tap((keys2) => nextTick(() => {
        keys2.length === PAGE_SIZE_K2 ? startSubject.next(keys2[PAGE_SIZE_K2 - 1].toHex()) : startSubject.complete();
      })),
      toArray(),
      // toArray since we want to startSubject to be completed
      map(arrayFlatten4)
    );
  }
  _retrieveMapKeysPaged({ iterKey, meta, method, section: section2 }, at, opts) {
    if (!iterKey || !meta.type.isMap) {
      throw new Error("keys can only be retrieved on maps");
    }
    const setMeta = (key) => key.setMeta(meta, section2, method);
    const query2 = at ? (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at) : (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
    return query2(iterKey(...opts.args).toHex()).pipe(map((keys2) => keys2.map(setMeta)));
  }
  _retrieveMapEntries(entry, at, args) {
    const query2 = at ? (keys2) => this._rpcCore.state.queryStorageAt(keys2, at) : (keys2) => this._rpcCore.state.queryStorageAt(keys2);
    return this._retrieveMapKeys(entry, at, args).pipe(switchMap((keys2) => keys2.length ? combineLatest(arrayChunk4(keys2, PAGE_SIZE_V).map(query2)).pipe(map((valsArr) => arrayFlatten4(valsArr).map((value, index) => [keys2[index], value]))) : of([])));
  }
  _retrieveMapEntriesPaged(entry, at, opts) {
    const query2 = at ? (keys2) => this._rpcCore.state.queryStorageAt(keys2, at) : (keys2) => this._rpcCore.state.queryStorageAt(keys2);
    return this._retrieveMapKeysPaged(entry, at, opts).pipe(switchMap((keys2) => keys2.length ? query2(keys2).pipe(map((valsArr) => valsArr.map((value, index) => [keys2[index], value]))) : of([])));
  }
  _decorateDeriveRx(decorateMethod) {
    var _a, _b, _c, _d;
    const specName = (_a = this._runtimeVersion) == null ? void 0 : _a.specName.toString();
    const available = getAvailableDerives(this.__internal__instanceId, this._rx, objectSpread4({}, this._options.derives, (_d = (_c = (_b = this._options.typesBundle) == null ? void 0 : _b.spec) == null ? void 0 : _c[specName || ""]) == null ? void 0 : _d.derives));
    return decorateDeriveSections(decorateMethod, available);
  }
  _decorateDerive(decorateMethod) {
    return decorateDeriveSections(decorateMethod, this._rx.derive);
  }
};

// node_modules/@polkadot/api/base/Init.js
var KEEPALIVE_INTERVAL = 1e4;
var WITH_VERSION_SHORTCUT = false;
var l17 = logger2("api/init");
function textToString(t) {
  return t.toString();
}
var Init = class extends Decorate {
  constructor(options, type, decorateMethod) {
    super(options, type, decorateMethod);
    this.__internal__atLast = null;
    this.__internal__healthTimer = null;
    this.__internal__registries = [];
    this.__internal__updateSub = null;
    this.__internal__waitingRegistries = {};
    this.registry.setKnownTypes(options);
    if (!options.source) {
      this.registerTypes(options.types);
    } else {
      this.__internal__registries = options.source.__internal__registries;
    }
    this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
    this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);
    if (this.supportMulti) {
      this._queryMulti = this._decorateMulti(this._decorateMethod);
      this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
    }
    this._rx.signer = options.signer;
    this._rpcCore.setRegistrySwap((blockHash) => this.getBlockRegistry(blockHash));
    this._rpcCore.setResolveBlockHash((blockNumber) => firstValueFrom(this._rpcCore.chain.getBlockHash(blockNumber)));
    if (this.hasSubscriptions) {
      this._rpcCore.provider.on("disconnected", () => this.__internal__onProviderDisconnect());
      this._rpcCore.provider.on("error", (e) => this.__internal__onProviderError(e));
      this._rpcCore.provider.on("connected", () => this.__internal__onProviderConnect());
    } else if (!this._options.noInitWarn) {
      l17.warn("Api will be available in a limited mode since the provider does not support subscriptions");
    }
    if (this._rpcCore.provider.isConnected) {
      this.__internal__onProviderConnect().catch(noop4);
    }
  }
  /**
   * @description Decorates a registry based on the runtime version
   */
  _initRegistry(registry, chain5, version, metadata, chainProps) {
    registry.clearCache();
    registry.setChainProperties(chainProps || this.registry.getChainProperties());
    registry.setKnownTypes(this._options);
    registry.register(getSpecTypes(registry, chain5, version.specName, version.specVersion));
    registry.setHasher(getSpecHasher(registry, chain5, version.specName));
    if (registry.knownTypes.typesBundle) {
      registry.knownTypes.typesAlias = getSpecAlias(registry, chain5, version.specName);
    }
    registry.setMetadata(metadata, void 0, objectSpread4({}, getSpecExtensions(registry, chain5, version.specName), this._options.signedExtensions), this._options.noInitWarn);
  }
  /**
   * @description Returns the default versioned registry
   */
  _getDefaultRegistry() {
    return assertReturn(this.__internal__registries.find(({ isDefault }) => isDefault), "Initialization error, cannot find the default registry");
  }
  /**
   * @description Returns a decorated API instance at a specific point in time
   */
  async at(blockHash, knownVersion) {
    const u8aHash = u8aToU8a5(blockHash);
    const u8aHex = u8aToHex5(u8aHash);
    const registry = await this.getBlockRegistry(u8aHash, knownVersion);
    if (!this.__internal__atLast || this.__internal__atLast[0] !== u8aHex) {
      this.__internal__atLast = [u8aHex, this._createDecorated(registry, true, null, u8aHash).decoratedApi];
    }
    return this.__internal__atLast[1];
  }
  async _createBlockRegistry(blockHash, header, version) {
    const registry = new TypeRegistry(blockHash);
    const metadata = new Metadata(registry, await firstValueFrom(this._rpcCore.state.getMetadata.raw(header.parentHash)));
    const runtimeChain = this._runtimeChain;
    if (!runtimeChain) {
      throw new Error("Invalid initializion order, runtimeChain is not available");
    }
    this._initRegistry(registry, runtimeChain, version, metadata);
    const result = { counter: 0, lastBlockHash: blockHash, metadata, registry, runtimeVersion: version };
    this.__internal__registries.push(result);
    return result;
  }
  _cacheBlockRegistryProgress(key, creator) {
    let waiting = this.__internal__waitingRegistries[key];
    if (isUndefined4(waiting)) {
      waiting = this.__internal__waitingRegistries[key] = new Promise((resolve, reject) => {
        creator().then((registry) => {
          delete this.__internal__waitingRegistries[key];
          resolve(registry);
        }).catch((error) => {
          delete this.__internal__waitingRegistries[key];
          reject(error);
        });
      });
    }
    return waiting;
  }
  _getBlockRegistryViaVersion(blockHash, version) {
    if (version) {
      const existingViaVersion = this.__internal__registries.find(({ runtimeVersion: { specName, specVersion } }) => specName.eq(version.specName) && specVersion.eq(version.specVersion));
      if (existingViaVersion) {
        existingViaVersion.counter++;
        existingViaVersion.lastBlockHash = blockHash;
        return existingViaVersion;
      }
    }
    return null;
  }
  async _getBlockRegistryViaHash(blockHash) {
    if (!this._genesisHash || !this._runtimeVersion) {
      throw new Error("Cannot retrieve data on an uninitialized chain");
    }
    const header = this.registry.createType("HeaderPartial", this._genesisHash.eq(blockHash) ? { number: BN_ZERO4, parentHash: this._genesisHash } : await firstValueFrom(this._rpcCore.chain.getHeader.raw(blockHash)));
    if (header.parentHash.isEmpty) {
      throw new Error("Unable to retrieve header and parent from supplied hash");
    }
    const [firstVersion, lastVersion] = getUpgradeVersion(this._genesisHash, header.number);
    const version = this.registry.createType("RuntimeVersionPartial", WITH_VERSION_SHORTCUT && (firstVersion && (lastVersion || firstVersion.specVersion.eq(this._runtimeVersion.specVersion))) ? { apis: firstVersion.apis, specName: this._runtimeVersion.specName, specVersion: firstVersion.specVersion } : await firstValueFrom(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));
    return (
      // try to find via version
      this._getBlockRegistryViaVersion(blockHash, version) || // return new or in-flight result
      await this._cacheBlockRegistryProgress(version.toHex(), () => this._createBlockRegistry(blockHash, header, version))
    );
  }
  /**
   * @description Sets up a registry based on the block hash defined
   */
  async getBlockRegistry(blockHash, knownVersion) {
    return (
      // try to find via blockHash
      this.__internal__registries.find(({ lastBlockHash }) => lastBlockHash && u8aEq5(lastBlockHash, blockHash)) || // try to find via version
      this._getBlockRegistryViaVersion(blockHash, knownVersion) || // return new or in-flight result
      await this._cacheBlockRegistryProgress(u8aToHex5(blockHash), () => this._getBlockRegistryViaHash(blockHash))
    );
  }
  async _loadMeta() {
    var _a;
    if (this._isReady) {
      return true;
    }
    this._unsubscribeUpdates();
    [this._genesisHash, this._runtimeMetadata] = ((_a = this._options.source) == null ? void 0 : _a._isReady) ? await this._metaFromSource(this._options.source) : await this._metaFromChain(this._options.metadata);
    return this._initFromMeta(this._runtimeMetadata);
  }
  // eslint-disable-next-line @typescript-eslint/require-await
  async _metaFromSource(source) {
    this._extrinsicType = source.extrinsicVersion;
    this._runtimeChain = source.runtimeChain;
    this._runtimeVersion = source.runtimeVersion;
    const sections = Object.keys(source.rpc);
    const rpcs = [];
    for (let s = 0, scount = sections.length; s < scount; s++) {
      const section2 = sections[s];
      const methods = Object.keys(source.rpc[section2]);
      for (let m = 0, mcount = methods.length; m < mcount; m++) {
        rpcs.push(`${section2}_${methods[m]}`);
      }
    }
    this._filterRpc(rpcs, getSpecRpc(this.registry, source.runtimeChain, source.runtimeVersion.specName));
    return [source.genesisHash, source.runtimeMetadata];
  }
  // subscribe to metadata updates, inject the types on changes
  _subscribeUpdates() {
    if (this.__internal__updateSub || !this.hasSubscriptions) {
      return;
    }
    this.__internal__updateSub = this._rpcCore.state.subscribeRuntimeVersion().pipe(switchMap((version) => {
      var _a;
      return (
        // only retrieve the metadata when the on-chain version has been changed
        ((_a = this._runtimeVersion) == null ? void 0 : _a.specVersion.eq(version.specVersion)) ? of(false) : this._rpcCore.state.getMetadata().pipe(map((metadata) => {
          l17.log(`Runtime version updated to spec=${version.specVersion.toString()}, tx=${version.transactionVersion.toString()}`);
          this._runtimeMetadata = metadata;
          this._runtimeVersion = version;
          this._rx.runtimeVersion = version;
          const thisRegistry = this._getDefaultRegistry();
          const runtimeChain = this._runtimeChain;
          if (!runtimeChain) {
            throw new Error("Invalid initializion order, runtimeChain is not available");
          }
          thisRegistry.metadata = metadata;
          thisRegistry.runtimeVersion = version;
          this._initRegistry(this.registry, runtimeChain, version, metadata);
          this._injectMetadata(thisRegistry, true);
          return true;
        }))
      );
    })).subscribe();
  }
  async _metaFromChain(optMetadata) {
    const [genesisHash, runtimeVersion, chain5, chainProps, rpcMethods, chainMetadata] = await Promise.all([
      firstValueFrom(this._rpcCore.chain.getBlockHash(0)),
      firstValueFrom(this._rpcCore.state.getRuntimeVersion()),
      firstValueFrom(this._rpcCore.system.chain()),
      firstValueFrom(this._rpcCore.system.properties()),
      firstValueFrom(this._rpcCore.rpc.methods()),
      optMetadata ? Promise.resolve(null) : firstValueFrom(this._rpcCore.state.getMetadata())
    ]);
    this._runtimeChain = chain5;
    this._runtimeVersion = runtimeVersion;
    this._rx.runtimeVersion = runtimeVersion;
    const metadataKey = `${genesisHash.toHex() || "0x"}-${runtimeVersion.specVersion.toString()}`;
    const metadata = chainMetadata || ((optMetadata == null ? void 0 : optMetadata[metadataKey]) ? new Metadata(this.registry, optMetadata[metadataKey]) : await firstValueFrom(this._rpcCore.state.getMetadata()));
    this._initRegistry(this.registry, chain5, runtimeVersion, metadata, chainProps);
    this._filterRpc(rpcMethods.methods.map(textToString), getSpecRpc(this.registry, chain5, runtimeVersion.specName));
    this._subscribeUpdates();
    if (!this.__internal__registries.length) {
      this.__internal__registries.push({ counter: 0, isDefault: true, metadata, registry: this.registry, runtimeVersion });
    }
    metadata.getUniqTypes(this._options.throwOnUnknown || false);
    return [genesisHash, metadata];
  }
  _initFromMeta(metadata) {
    const runtimeVersion = this._runtimeVersion;
    if (!runtimeVersion) {
      throw new Error("Invalid initializion order, runtimeVersion is not available");
    }
    this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
    this._rx.extrinsicType = this._extrinsicType;
    this._rx.genesisHash = this._genesisHash;
    this._rx.runtimeVersion = runtimeVersion;
    this._injectMetadata(this._getDefaultRegistry(), true);
    this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
    this._derive = this._decorateDerive(this._decorateMethod);
    return true;
  }
  _subscribeHealth() {
    this._unsubscribeHealth();
    this.__internal__healthTimer = this.hasSubscriptions ? setInterval(() => {
      firstValueFrom(this._rpcCore.system.health.raw()).catch(noop4);
    }, KEEPALIVE_INTERVAL) : null;
  }
  _unsubscribeHealth() {
    if (this.__internal__healthTimer) {
      clearInterval(this.__internal__healthTimer);
      this.__internal__healthTimer = null;
    }
  }
  _unsubscribeUpdates() {
    if (this.__internal__updateSub) {
      this.__internal__updateSub.unsubscribe();
      this.__internal__updateSub = null;
    }
  }
  _unsubscribe() {
    this._unsubscribeHealth();
    this._unsubscribeUpdates();
  }
  async __internal__onProviderConnect() {
    this._isConnected.next(true);
    this.emit("connected");
    try {
      const cryptoReady = this._options.initWasm === false ? true : await cryptoWaitReady();
      const hasMeta = await this._loadMeta();
      this._subscribeHealth();
      if (hasMeta && !this._isReady && cryptoReady) {
        this._isReady = true;
        this.emit("ready", this);
      }
    } catch (_error) {
      const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
      l17.error(error);
      this.emit("error", error);
    }
  }
  __internal__onProviderDisconnect() {
    this._isConnected.next(false);
    this._unsubscribe();
    this.emit("disconnected");
  }
  __internal__onProviderError(error) {
    this.emit("error", error);
  }
};

// node_modules/@polkadot/api/base/Getters.js
function assertResult(value) {
  if (value === void 0) {
    throw new Error("Api interfaces needs to be initialized before using, wait for 'isReady'");
  }
  return value;
}
var Getters = class extends Init {
  /**
   * @description Runtime call interfaces (currently untyped, only decorated via API options)
   */
  get call() {
    return assertResult(this._call);
  }
  /**
   * @description Contains the parameter types (constants) of all modules.
   *
   * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
   *
   * @example
   * <BR>
   *
   * ```javascript
   * console.log(api.consts.democracy.enactmentPeriod.toString())
   * ```
   */
  get consts() {
    return assertResult(this._consts);
  }
  /**
   * @description Derived results that are injected into the API, allowing for combinations of various query results.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.bestNumber((number) => {
   *   console.log('best number', number);
   * });
   * ```
   */
  get derive() {
    return assertResult(this._derive);
  }
  /**
   * @description Errors from metadata
   */
  get errors() {
    return assertResult(this._errors);
  }
  /**
   * @description Events from metadata
   */
  get events() {
    return assertResult(this._events);
  }
  /**
   * @description  Returns the version of extrinsics in-use on this chain
   */
  get extrinsicVersion() {
    return this._extrinsicType;
  }
  /**
   * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
   */
  get genesisHash() {
    return assertResult(this._genesisHash);
  }
  /**
   * @description true is the underlying provider is connected
   */
  get isConnected() {
    return this._isConnected.getValue();
  }
  /**
   * @description The library information name & version (from package.json)
   */
  get libraryInfo() {
    return `${packageInfo25.name} v${packageInfo25.version}`;
  }
  /**
   * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
   *
   * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.query.system.account(<accountId>, ([nonce, balance]) => {
   *   console.log('new free balance', balance.free, 'new nonce', nonce);
   * });
   * ```
   */
  get query() {
    return assertResult(this._query);
  }
  /**
   * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const unsub = await api.queryMulti(
   *   [
   *     // you can include the storage without any parameters
   *     api.query.balances.totalIssuance,
   *     // or you can pass parameters to the storage query
   *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
   *   ],
   *   ([existential, [, { free }]]) => {
   *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
   *
   *     unsub();
   *   }
   * );
   * ```
   */
  get queryMulti() {
    return assertResult(this._queryMulti);
  }
  /**
   * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
   *
   * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.rpc.chain.subscribeNewHeads((header) => {
   *   console.log('new header', header);
   * });
   * ```
   */
  get rpc() {
    return assertResult(this._rpc);
  }
  /**
   * @description Contains the chain information for the current node.
   */
  get runtimeChain() {
    return assertResult(this._runtimeChain);
  }
  /**
   * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
   */
  get runtimeMetadata() {
    return assertResult(this._runtimeMetadata);
  }
  /**
   * @description Contains the version information for the current runtime.
   */
  get runtimeVersion() {
    return assertResult(this._runtimeVersion);
  }
  /**
   * @description The underlying Rx API interface
   */
  get rx() {
    return assertResult(this._rx);
  }
  /**
   * @description Returns the underlying provider stats
   */
  get stats() {
    return this._rpcCore.stats;
  }
  /**
   * @description The type of this API instance, either 'rxjs' or 'promise'
   */
  get type() {
    return this._type;
  }
  /**
   * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.tx.balances
   *   .transfer(<recipientId>, <balance>)
   *   .signAndSend(<keyPair>, ({status}) => {
   *     console.log('tx status', status.asFinalized.toHex());
   *   });
   * ```
   */
  get tx() {
    return assertResult(this._extrinsics);
  }
  /**
   * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
   */
  findCall(callIndex) {
    return findCall(this.registry, callIndex);
  }
  /**
   * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
   */
  findError(errorIndex) {
    return findError(this.registry, errorIndex);
  }
};

// node_modules/@polkadot/api/base/index.js
var ApiBase = class extends Getters {
  /**
   * @description Create an instance of the class
   *
   * @param options Options object to create API instance or a Provider instance
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * const api = new Api().isReady();
   *
   * api.rpc.subscribeNewHeads((header) => {
   *   console.log(`new block #${header.number.toNumber()}`);
   * });
   * ```
   */
  constructor(options = {}, type, decorateMethod) {
    super(options, type, decorateMethod);
  }
  /**
   * @description Connect from the underlying provider, halting all network traffic
   */
  connect() {
    return this._rpcCore.connect();
  }
  /**
   * @description Disconnect from the underlying provider, halting all network traffic
   */
  disconnect() {
    this._unsubscribe();
    return this._rpcCore.disconnect();
  }
  /**
   * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
   */
  setSigner(signer) {
    this._rx.signer = signer;
  }
  /**
   * @description Signs a raw signer payload, string or Uint8Array
   */
  async sign(address, data, { signer } = {}) {
    if (isString5(address)) {
      const _signer = signer || this._rx.signer;
      if (!(_signer == null ? void 0 : _signer.signRaw)) {
        throw new Error("No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
      }
      return (await _signer.signRaw(objectSpread4({ type: "bytes" }, data, { address }))).signature;
    }
    return u8aToHex5(address.sign(u8aToU8a5(data.data)));
  }
};

// node_modules/@polkadot/api/promise/Combinator.js
init_shim();
var Combinator = class {
  constructor(fns, callback) {
    this.__internal__allHasFired = false;
    this.__internal__fired = [];
    this.__internal__fns = [];
    this.__internal__isActive = true;
    this.__internal__results = [];
    this.__internal__subscriptions = [];
    this.__internal__callback = callback;
    this.__internal__subscriptions = fns.map(async (input, index) => {
      const [fn, ...args] = Array.isArray(input) ? input : [input];
      this.__internal__fired.push(false);
      this.__internal__fns.push(fn);
      return fn(...args, this._createCallback(index));
    });
  }
  _allHasFired() {
    this.__internal__allHasFired || (this.__internal__allHasFired = this.__internal__fired.filter((hasFired) => !hasFired).length === 0);
    return this.__internal__allHasFired;
  }
  _createCallback(index) {
    return (value) => {
      this.__internal__fired[index] = true;
      this.__internal__results[index] = value;
      this._triggerUpdate();
    };
  }
  _triggerUpdate() {
    if (!this.__internal__isActive || !isFunction5(this.__internal__callback) || !this._allHasFired()) {
      return;
    }
    try {
      Promise.resolve(this.__internal__callback(this.__internal__results)).catch(noop4);
    } catch {
    }
  }
  unsubscribe() {
    if (!this.__internal__isActive) {
      return;
    }
    this.__internal__isActive = false;
    this.__internal__subscriptions.map(async (subscription) => {
      try {
        const unsubscribe = await subscription;
        if (isFunction5(unsubscribe)) {
          unsubscribe();
        }
      } catch {
      }
    });
  }
};

// node_modules/@polkadot/api/promise/decorateMethod.js
init_shim();
function promiseTracker(resolve, reject) {
  let isCompleted = false;
  return {
    reject: (error) => {
      if (!isCompleted) {
        isCompleted = true;
        reject(error);
      }
      return EMPTY;
    },
    resolve: (value) => {
      if (!isCompleted) {
        isCompleted = true;
        resolve(value);
      }
    }
  };
}
function extractArgs(args, needsCallback) {
  const actualArgs = args.slice();
  const callback = args.length && isFunction5(args[args.length - 1]) ? actualArgs.pop() : void 0;
  if (needsCallback && !isFunction5(callback)) {
    throw new Error("Expected a callback to be passed with subscriptions");
  }
  return [actualArgs, callback];
}
function decorateCall(method, args) {
  return new Promise((resolve, reject) => {
    const tracker = promiseTracker(resolve, reject);
    const subscription = method(...args).pipe(catchError((error) => tracker.reject(error))).subscribe((result) => {
      tracker.resolve(result);
      nextTick(() => subscription.unsubscribe());
    });
  });
}
function decorateSubscribe(method, args, resultCb) {
  return new Promise((resolve, reject) => {
    const tracker = promiseTracker(resolve, reject);
    const subscription = method(...args).pipe(catchError((error) => tracker.reject(error)), tap(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe((result) => {
      nextTick(() => resultCb(result));
    });
  });
}
function toPromiseMethod(method, options) {
  const needsCallback = !!((options == null ? void 0 : options.methodName) && options.methodName.includes("subscribe"));
  return function(...args) {
    const [actualArgs, resultCb] = extractArgs(args, needsCallback);
    return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall((options == null ? void 0 : options.overrideNoSub) || method, actualArgs);
  };
}

// node_modules/@polkadot/api/promise/Api.js
var ApiPromise = class extends ApiBase {
  /**
   * @description Creates an instance of the ApiPromise class
   * @param options Options to create an instance. This can be either [[ApiOptions]] or
   * an [[WsProvider]].
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * new Api().isReady.then((api) => {
   *   api.rpc.subscribeNewHeads((header) => {
   *     console.log(`new block #${header.number.toNumber()}`);
   *   });
   * });
   * ```
   */
  constructor(options) {
    super(options, "promise", toPromiseMethod);
    this.__internal__isReadyPromise = new Promise((resolve) => {
      super.once("ready", () => resolve(this));
    });
    this.__internal__isReadyOrErrorPromise = new Promise((resolve, reject) => {
      const tracker = promiseTracker(resolve, reject);
      super.once("ready", () => tracker.resolve(this));
      super.once("error", (error) => tracker.reject(error));
    });
  }
  /**
   * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
   * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
   * provider (see the constructor arguments)
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * Api.create().then(async (api) => {
   *   const timestamp = await api.query.timestamp.now();
   *
   *   console.log(`lastest block timestamp ${timestamp}`);
   * });
   * ```
   */
  static create(options) {
    const instance = new ApiPromise(options);
    if (options && options.throwOnConnect) {
      return instance.isReadyOrError;
    }
    instance.isReadyOrError.catch(noop4);
    return instance.isReady;
  }
  /**
   * @description Promise that resolves the first time we are connected and loaded
   */
  get isReady() {
    return this.__internal__isReadyPromise;
  }
  /**
   * @description Promise that resolves if we can connect, or reject if there is an error
   */
  get isReadyOrError() {
    return this.__internal__isReadyOrErrorPromise;
  }
  /**
   * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
   */
  clone() {
    return new ApiPromise(objectSpread4({}, this._options, { source: this }));
  }
  /**
   * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
   * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
   * @param callback A callback that will return an Array of all the values this combinator has been applied to
   * @example
   * <BR>
   *
   * ```javascript
   * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
   *
   * // combines values from balance & nonce as it updates
   * api.combineLatest([
   *   api.rpc.chain.subscribeNewHeads,
   *   (cb) => api.query.system.account(address, cb)
   * ], ([head, [balance, nonce]]) => {
   *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
   * });
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/require-await
  async combineLatest(fns, callback) {
    const combinator = new Combinator(fns, callback);
    return () => {
      combinator.unsubscribe();
    };
  }
};

// node_modules/@polkadot/api/rx/index.js
init_shim();

// node_modules/@polkadot/api/rx/Api.js
init_shim();

// node_modules/@polkadot/api/rx/decorateMethod.js
init_shim();

// node_modules/@gear-js/api/default/index.js
init_shim();

// node_modules/@gear-js/api/default/rpc.json.js
var rpc_json_exports = {};
__export(rpc_json_exports, {
  default: () => rpc$1,
  rpc: () => rpc18
});
init_shim();
var rpc18 = {
  gear: {
    calculateInitUploadGas: {
      description: "Calculate gas for Init message using upload_program extrinsic",
      params: [
        {
          name: "source",
          type: "H256"
        },
        {
          name: "code",
          type: "Vec<u8>"
        },
        {
          name: "payload",
          type: "Vec<u8>"
        },
        {
          name: "value",
          type: "u128"
        },
        {
          name: "allow_other_panics",
          type: "bool"
        }
      ],
      type: "GasInfo"
    },
    calculateInitCreateGas: {
      description: "Calculate gas for Init message using create_program extrinsic",
      params: [
        {
          name: "source",
          type: "H256"
        },
        {
          name: "code_id",
          type: "H256"
        },
        {
          name: "payload",
          type: "Vec<u8>"
        },
        {
          name: "value",
          type: "u128"
        },
        {
          name: "allow_other_panics",
          type: "bool"
        }
      ],
      type: "GasInfo"
    },
    calculateHandleGas: {
      description: "Calculate gas for Handle message",
      params: [
        {
          name: "source",
          type: "H256"
        },
        {
          name: "dest",
          type: "H256"
        },
        {
          name: "payload",
          type: "Vec<u8>"
        },
        {
          name: "value",
          type: "u128"
        },
        {
          name: "allow_other_panics",
          type: "bool"
        }
      ],
      type: "GasInfo"
    },
    calculateReplyGas: {
      description: "Calculate gas for Reply message",
      params: [
        {
          name: "source",
          type: "H256"
        },
        {
          name: "message_id",
          type: "H256"
        },
        {
          name: "payload",
          type: "Vec<u8>"
        },
        {
          name: "value",
          type: "u128"
        },
        {
          name: "allow_other_panics",
          type: "bool"
        }
      ],
      type: "GasInfo"
    },
    readMetahash: {
      params: [
        {
          name: "program_id",
          type: "H256"
        },
        {
          name: "at",
          type: "Option<BlockHash>"
        }
      ],
      type: "H256"
    },
    readState: {
      params: [
        {
          name: "program_id",
          type: "H256"
        },
        {
          name: "payload",
          type: "Vec<u8>"
        },
        {
          name: "at",
          type: "Option<BlockHash>"
        }
      ],
      type: "Bytes"
    },
    readStateUsingWasm: {
      params: [
        {
          name: "program_id",
          type: "H256"
        },
        {
          name: "payload",
          type: "Bytes"
        },
        {
          name: "fn_name",
          type: "Bytes"
        },
        {
          name: "wasm",
          type: "Bytes"
        },
        {
          name: "argument",
          type: "Option<Bytes>"
        },
        {
          name: "at",
          type: "Option<BlockHash>"
        }
      ],
      type: "Bytes"
    },
    readStateBatch: {
      params: [
        {
          name: "batch_id_payload",
          type: "Vec<(H256, Bytes)>"
        },
        {
          name: "at",
          type: "Option<BlockHash>"
        }
      ],
      type: "Vec<Bytes>"
    },
    readStateUsingWasmBatch: {
      params: [
        {
          name: "batch_id_payload",
          type: "Vec<(H256, Bytes)>"
        },
        {
          name: "fn_name",
          type: "Bytes"
        },
        {
          name: "wasm",
          type: "Bytes"
        },
        {
          name: "argument",
          type: "Option<Bytes>"
        },
        {
          name: "at",
          type: "Option<BlockHash>"
        }
      ],
      type: "Vec<Bytes>"
    }
  },
  chainSpec_unstable: {
    chainName: {
      params: [],
      type: "String"
    },
    properties: {
      params: [],
      type: "String"
    },
    genesisHash: {
      params: [],
      type: "H256"
    }
  },
  transaction_unstable: {
    submitAndWatch: {
      params: []
    },
    unwatch: {
      params: []
    }
  },
  runtime: {
    wasmBlobVersion: {
      description: "Returns the version of the WASM blob in storage.",
      params: [],
      type: "String"
    }
  },
  stakingRewards: {
    inflationInfo: {
      params: [],
      type: "Bytes"
    }
  }
};
var rpc$1 = {
  rpc: rpc18
};

// node_modules/@gear-js/api/default/types-common.json.js
var types_common_json_exports = {};
__export(types_common_json_exports, {
  default: () => typesCommon,
  types: () => types2
});
init_shim();
var types2 = {
  InflationInfo: {
    inflation: "u64",
    roi: "u64"
  }
};
var typesCommon = {
  types: types2
};

// node_modules/@gear-js/api/default/types-message.json.js
var types_message_json_exports = {};
__export(types_message_json_exports, {
  default: () => typesMessage,
  types: () => types3
});
init_shim();
var types3 = {
  MessageId: "[u8;32]",
  Payload: "Vec<u8>",
  Value: "Compact<u128>",
  Dispatch: {
    kind: "DispatchKind",
    message: "Message"
  },
  DispatchKind: {
    _enum: [
      "Init",
      "Handle",
      "Reply",
      "Signal"
    ]
  },
  Reason: {
    _enum: {
      "Error": "Null",
      ValueTransfer: "Null",
      Dispatch: "Vec<u8>"
    }
  },
  DispatchOutcome: {
    message_id: "H256",
    outcome: "ExecutionResult"
  },
  MessageInfo: {
    message_id: "H256",
    program_id: "H256",
    origin: "H256"
  },
  UserStoredMessage: {
    id: "MessageId",
    source: "ProgramId",
    destination: "ProgramId",
    payload: "Payload",
    value: "Value"
  },
  Interval: {
    start: "u32",
    finish: "u32"
  }
};
var typesMessage = {
  types: types3
};

// node_modules/@gear-js/api/default/types-metadata.json.js
var types_metadata_json_exports = {};
__export(types_metadata_json_exports, {
  default: () => typesMetadata,
  types: () => types4
});
init_shim();
var types4 = {
  MessageId: "[u8;32]",
  ExitCode: "i32",
  Payload: "Vec<u8>",
  TypesRepr: {
    input: "Option<u32>",
    output: "Option<u32>"
  },
  ProgramMetadataReprRustV1: {
    init: "TypesRepr",
    handle: "TypesRepr",
    reply: "Option<u32>",
    others: "TypesRepr",
    signal: "Option<u32>",
    state: "Option<u32>",
    reg: "Vec<u8>"
  },
  ProgramMetadataReprRustV2: {
    init: "TypesRepr",
    handle: "TypesRepr",
    reply: "Option<u32>",
    others: "TypesRepr",
    signal: "Option<u32>",
    state: "TypesRepr",
    reg: "Vec<u8>"
  },
  StateMetadataRepr: {
    functions: "BTreeMap<String, TypesRepr>",
    reg: "Vec<u8>"
  }
};
var typesMetadata = {
  types: types4
};

// node_modules/@gear-js/api/default/types-program.json.js
var types_program_json_exports = {};
__export(types_program_json_exports, {
  default: () => typesProgram,
  types: () => types5
});
init_shim();
var types5 = {
  ProgramId: "[u8;32]",
  Program: {
    _enum: {
      Active: "ActiveProgram",
      Exited: "ProgramId",
      Terminated: "ProgramId"
    }
  },
  WasmPageNumber: "u32",
  PageNumber: "u32",
  ReservationId: "[u8;32]",
  GasReservationSlot: {
    amount: "u64",
    start: "u32",
    finish: "u32"
  },
  ActiveProgram: {
    allocations: "BTreeSet<WasmPageNumber>",
    pages_with_data: "BTreeSet<PageNumber>",
    gas_reservation_map: "BTreeMap<ReservationId, GasReservationSlot>",
    code_hash: "H256",
    code_length_bytes: "u32",
    code_exports: "BTreeSet<DispatchKind>",
    static_pages: "WasmPageNumber",
    state: "ProgramState",
    expiration_block: "BlockNumber"
  },
  ProgramState: {
    _enum: {
      Uninitialized: {
        message_id: "MessageId"
      },
      Initialized: "Null"
    }
  },
  ExecutionResult: {
    _enum: {
      Success: "Null",
      Failure: "Vec<u8>"
    }
  },
  GasInfo: {
    min_limit: "u64",
    reserved: "u64",
    burned: "u64",
    may_be_returned: "u64",
    waited: "bool"
  }
};
var typesProgram = {
  types: types5
};

// node_modules/@gear-js/api/utils/types.js
init_shim();

// node_modules/@gear-js/api/utils/regexp.js
init_shim();
var REGULAR_EXP = {
  endWord: /\b[\w:]+\b/g,
  angleBracket: /<.+>/,
  roundBracket: /^\(.+\)$/,
  squareBracket: /^\[.+\]$/,
  generic: /\b\w+</g
};

// node_modules/@gear-js/api/utils/types.js
function transformTypes(types6) {
  return Object.values(types6).reduce((res, types7) => ({ ...res, ...types7 }), {});
}
function convertString(string) {
  const wordsArray = string.replace(/[_:, .]+/g, " ").trim().split(" ");
  return wordsArray.map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join("");
}
function joinTypePath(path) {
  return convertString(path.join("_"));
}
function typeIsGeneric(type) {
  const matches = type.match(REGULAR_EXP.generic);
  if (matches) {
    return true;
  } else {
    return false;
  }
}
function typeIsString(type) {
  return ["string", "utf8", "utf-8", "text"].includes(type.toLowerCase());
}
function getTypeAndPayload(type, payload) {
  if (payload === void 0) {
    payload = "0x";
  }
  if (type === void 0) {
    type = "Bytes";
  }
  return [type, payload];
}

// node_modules/@gear-js/api/default/index.js
var gearRpc = transformTypes(rpc_json_exports).rpc;
var gearTypes = {
  ...transformTypes(types_metadata_json_exports).types,
  ...transformTypes(types_program_json_exports).types,
  ...transformTypes(types_message_json_exports).types,
  ...transformTypes(types_common_json_exports).types
};

// node_modules/@gear-js/api/Balance.js
init_shim();

// node_modules/@gear-js/api/Transaction.js
init_shim();

// node_modules/@gear-js/api/errors/gear.errors.js
init_shim();
var TransactionError = class extends Error {
  constructor(message) {
    super();
    __publicField(this, "name", "TransactionError");
    this.message = `${message}`;
  }
};

// node_modules/@gear-js/api/Transaction.js
var GearTransaction = class {
  constructor(_api) {
    __publicField(this, "_api");
    __publicField(this, "extrinsic");
    this._api = _api;
  }
  async signAndSend(account3, optionsOrCallback, optionalCallback) {
    const [options, callback] = isFunction(optionsOrCallback) ? [void 0, optionsOrCallback] : [optionsOrCallback, optionalCallback];
    try {
      return await this.extrinsic.signAndSend(account3, options, callback);
    } catch (error) {
      console.log(error);
      const errorCode = +error.message.split(":")[0];
      if (errorCode === 1010) {
        throw new TransactionError("Account balance too low");
      } else {
        throw new TransactionError(error.message);
      }
    }
  }
  /**
   *
   * @param account
   * @param options
   * @example
   * ```javascript
   * const api = await GearApi.create();
   * api.program.submit({code, gasLimit});
   * // same for api.message, api.reply and others
   * const paymentInfo = await api.program.paymentInfo(alice);
   * const transactionFee = paymentInfo.partialFee.toNumber();
   * consolg.log(transactionFee);
   * ```
   */
  paymentInfo(account3, options) {
    return this.extrinsic.paymentInfo(account3, options);
  }
};

// node_modules/@gear-js/api/Balance.js
var GearBalance = class extends GearTransaction {
  async findOut(publicKey2) {
    const { data: balance } = await this._api.query.system.account(publicKey2);
    return this._api.createType("Balance", balance.free);
  }
  transfer(to, value) {
    this.extrinsic = this._api.tx.balances.transfer(to, value);
    return this.extrinsic;
  }
};

// node_modules/@gear-js/api/Blocks.js
init_shim();
var import_assert20 = __toESM(require_assert(), 1);

// node_modules/@gear-js/api/metadata/create-type.js
init_shim();

// node_modules/@gear-js/api/utils/json.js
init_shim();
function isJSON(data) {
  try {
    JSON.parse(data);
  } catch (error) {
    try {
      if (JSON.stringify(data)[0] !== "{") {
        return false;
      }
    } catch (error2) {
      return false;
    }
    return true;
  }
  return true;
}
function toJSON(data) {
  try {
    return JSON.parse(data);
  } catch (error) {
    return data;
  }
}

// node_modules/@gear-js/api/metadata/metadata.js
init_shim();
var import_assert19 = __toESM(require_assert(), 1);
var LOOKUP_REGEXP = /\bLookup\d+\b/g;
var DIGITS_REGEXP = /\d+/;
var OPTION_REGEXP = /^Option<[\w\][;\d<>, ]+>$/;
function isOption(typeName, typeDef) {
  if (!typeDef.isVariant) {
    return false;
  }
  if (!OPTION_REGEXP.test(typeName)) {
    return false;
  }
  if (typeDef.asVariant.variants.length !== 2 || typeDef.asVariant.variants.filter((v) => v.name.eq("Some") || v.name.eq("None")).length !== 2) {
    return false;
  }
  return true;
}
var GearMetadata = class {
  constructor(hexRegistry) {
    __publicField(this, "registry");
    __publicField(this, "regTypes");
    __publicField(this, "portableRegistry");
    this.registry = new TypeRegistry();
    this.portableRegistry = new PortableRegistry(this.registry, hexToU8a(hexRegistry), true);
    this.regTypes = /* @__PURE__ */ new Map();
    this.prepare();
    this.registerTypes();
  }
  prepare() {
    const updateTypes = [];
    for (const type of this.portableRegistry.types) {
      const name = this.portableRegistry.getName(type.id);
      const typeDef = this.portableRegistry.getTypeDef(type.id);
      if (name !== void 0) {
        this.regTypes.set(type.id.toNumber(), { name: this.portableRegistry.getName(type.id), def: typeDef.type });
      } else {
        (0, import_assert19.default)(typeDef.lookupIndex === type.id.toNumber(), "Lookup index of type is not equal to index in portable registry");
        if (typeDef.type.includes("Lookup")) {
          updateTypes.push(typeDef.lookupIndex);
        }
        this.regTypes.set(typeDef.lookupIndex, { name: typeDef.type, def: null });
      }
    }
    if (updateTypes.length > 0) {
      for (const id of updateTypes) {
        this.regTypes.get(id).name = this.getTypeName(id);
        for (const [type, { name, def }] of this.regTypes.entries()) {
          if (LOOKUP_REGEXP.test(def)) {
            const match = def.match(LOOKUP_REGEXP);
            let newDef = def;
            for (const m of match) {
              const index = Number(m.match(DIGITS_REGEXP)[0]);
              newDef = def.replace(m, this.getTypeName(index));
            }
            this.regTypes.set(type, { name, def: newDef });
          }
        }
      }
    }
  }
  registerTypes() {
    const types6 = {};
    Array.from(this.regTypes.values()).forEach(({ name, def }) => {
      if (def) {
        types6[name] = def;
      }
    });
    this.registry.setKnownTypes({ types: types6 });
    this.registry.register(types6);
  }
  createType(typeIndex, payload) {
    const type = this.regTypes.get(typeIndex);
    import_assert19.default.notStrictEqual(type, void 0, `Type with index ${typeIndex} not found in registered types`);
    return this.registry.createType(type.name, payload);
  }
  getTypeDef(typeIndex, additionalFields = false) {
    const { def, path } = this.portableRegistry.getSiType(typeIndex);
    if (def.isPrimitive) {
      return additionalFields ? { name: def.asPrimitive.type, kind: "primitive", type: def.asPrimitive.type } : def.asPrimitive.type;
    }
    if (path.length > 0 && path.at(0).toString() === "primitive_types") {
      const type = this.getTypeName(typeIndex);
      return additionalFields ? { name: type, kind: "primitive", type } : type;
    }
    if (def.isEmpty) {
      return additionalFields ? { name: "()", kind: "empty", type: null } : null;
    }
    if (def.isNone) {
      return additionalFields ? { name: "None", kind: "none", type: null } : null;
    }
    if (def.isSequence) {
      return additionalFields ? {
        name: this.getTypeName(typeIndex),
        kind: "sequence",
        type: this.getTypeDef(def.asSequence.type, additionalFields)
      } : [this.getTypeDef(def.asSequence.type, additionalFields)];
    }
    if (def.isTuple) {
      const tuple = def.asTuple.map((index) => this.getTypeDef(index, additionalFields));
      return additionalFields ? { name: this.getTypeName(typeIndex), kind: "tuple", type: tuple } : tuple;
    }
    if (def.isArray) {
      const arrayType = this.getTypeDef(def.asArray.type, additionalFields);
      const len = def.asArray.len.toNumber();
      return additionalFields ? { name: this.getTypeName(typeIndex), kind: "array", type: arrayType, len } : [arrayType, len];
    }
    if (def.isComposite) {
      const isTuple = def.asComposite.fields[0].name.isNone;
      let result = isTuple ? [] : {};
      const name = this.getTypeName(typeIndex);
      if (name === "ActorId") {
        return additionalFields ? { name, kind: "actorid", type: "actorid" } : name;
      }
      for (const { name: name2, type } of def.asComposite.fields) {
        if (name2.isSome) {
          result[name2.unwrap().toString()] = this.getTypeDef(type, additionalFields);
          continue;
        } else if (def.asComposite.fields.length === 1) {
          result = this.getTypeDef(type, additionalFields);
          return additionalFields ? { ...result, name: this.getTypeName(typeIndex) } : result;
        } else {
          result.push(this.getTypeDef(type, additionalFields));
        }
      }
      return additionalFields ? { name, kind: isTuple ? "tuple" : "composite", type: result } : result;
    }
    if (def.isVariant) {
      const _variants = {};
      const name = this.getTypeName(typeIndex);
      for (const { name: name2, fields } of def.asVariant.variants) {
        if (name2.eq("None")) {
          _variants[name2.toString()] = additionalFields ? { name: "None", kind: "none", type: null } : null;
          continue;
        }
        if (fields.length === 0) {
          _variants[name2.toString()] = null;
          continue;
        }
        if (fields[0].name.isNone) {
          if (fields.length === 1) {
            _variants[name2.toString()] = this.getTypeDef(fields[0].type, additionalFields);
          } else {
            const tuple = fields.map(({ type }) => this.getTypeDef(type, additionalFields));
            _variants[name2.toString()] = additionalFields ? { name: null, kind: "tuple", type: tuple } : tuple;
          }
        } else {
          const result = {};
          for (const { name: name3, type } of fields) {
            result[name3.unwrap().toString()] = this.getTypeDef(type, additionalFields);
          }
          _variants[name2.toString()] = additionalFields ? { name: null, kind: "composite", type: result } : result;
        }
      }
      return additionalFields ? {
        name,
        kind: isOption(name, def) ? "option" : "variant",
        type: _variants
      } : { _variants };
    }
  }
  getTypeName(index) {
    const { def, params, path } = this.portableRegistry.getSiType(index);
    if (def.isPrimitive) {
      return def.asPrimitive.toString();
    }
    if (def.isEmpty) {
      return "()";
    }
    if (def.isNone) {
      return "None";
    }
    if (def.isSequence) {
      return `Vec<${this.getTypeName(def.asSequence.type)}>`;
    }
    if (def.isTuple) {
      return `(${def.asTuple.map((index2) => this.getTypeName(index2)).join(", ")})`;
    }
    if (def.isArray) {
      return `[${this.getTypeName(def.asArray.type)};${def.asArray.len.toNumber()}]`;
    }
    if (def.isComposite) {
      if (params.length > 0) {
        return `${path.at(-1)}<${params.map(({ type, name }) => type.isSome ? this.getTypeName(type.unwrap()) : name.toString()).join(", ")}>`;
      }
      return path.at(-1).toString();
    }
    if (def.isVariant) {
      if (params.length > 0) {
        return `${path.at(-1)}<${params.map(({ type, name }) => type.isSome ? this.getTypeName(type.unwrap()) : name.toString()).join(", ")}>`;
      }
      return this.portableRegistry.getName(index);
    }
  }
  getAllTypes() {
    return this.registry.knownTypes.types;
  }
  getTypeIndexByName(typeName) {
    for (const [index, { name }] of this.regTypes.entries()) {
      if (name.toLowerCase() === typeName.toLowerCase()) {
        return index;
      }
    }
    return null;
  }
};

// node_modules/@gear-js/api/metadata/create-type.js
var CreateType = class {
  constructor(hexRegistry) {
    __publicField(this, "registry");
    __publicField(this, "metadata");
    if (!hexRegistry) {
      this.registry = new TypeRegistry();
      this.registerDefaultTypes();
    } else {
      this.metadata = new GearMetadata(hexRegistry);
    }
  }
  registerDefaultTypes() {
    this.registry.setKnownTypes({ types: gearTypes });
    this.registry.register(gearTypes);
  }
  /**
   *
   * @param type `TypeName` to encode or decode payload
   * @param payload `Payload` that have to be encoded or decoded
   * @returns Codec
   * @example
   * ```javascript
   * const createType = new CreateType();
   * const encoded = createType.create('String', 'Hello, World');
   * console.log(encoded.toHex()); // 0x48656c6c6f2c20576f726c6421
   *
   * const decoded = createType.create('String', '0x48656c6c6f2c20576f726c6421');
   * console.log(decoded.toHuman()); // "Hello, World!"
   */
  create(typeOrTypeIndex, payload) {
    let [type, index] = typeof typeOrTypeIndex === "string" ? [typeOrTypeIndex, void 0] : [void 0, typeOrTypeIndex];
    if (payload === void 0) {
      payload = "0x";
    } else if (isJSON(payload)) {
      payload = toJSON(payload);
    }
    if (type === void 0) {
      type = "Bytes";
    }
    if (this.metadata) {
      index = index || this.metadata.getTypeIndexByName(type);
      return this.metadata.createType(index, payload);
    }
    return this.registry.createType(type, payload);
  }
  /**
   *
   * @param type `TypeName` to encode or decode payload
   * @param payload `Payload` that have to be encoded or decoded
   * @param hexRegistry registry in hex format
   * @param defaultTypes set to true if you want to register default types too
   * @returns Codec
   * @example
   * ```javascript
   * const encoded = CreateType.create('String', 'Hello, World');
   * console.log(encoded.toHex()); // 0x48656c6c6f2c20576f726c6421
   * ```
   */
  static create(type, payload, hexRegistry) {
    const createType = new CreateType(hexRegistry);
    return createType.create(type, payload);
  }
};

// node_modules/@gear-js/api/metadata/programMetadata.js
init_shim();
var Lang;
(function(Lang2) {
  Lang2[Lang2["RUST"] = 0] = "RUST";
})(Lang || (Lang = {}));
var MetadataVersion;
(function(MetadataVersion2) {
  MetadataVersion2[MetadataVersion2["V1Rust"] = 1] = "V1Rust";
  MetadataVersion2[MetadataVersion2["V2Rust"] = 2] = "V2Rust";
})(MetadataVersion || (MetadataVersion = {}));
var MetadataTypeName;
(function(MetadataTypeName2) {
  MetadataTypeName2["V1Rust"] = "ProgramMetadataReprRustV1";
  MetadataTypeName2["V2Rust"] = "ProgramMetadataReprRustV2";
})(MetadataTypeName || (MetadataTypeName = {}));
function getMetadataTypeName(version) {
  switch (version) {
    case MetadataVersion.V1Rust:
      return MetadataTypeName.V1Rust;
    case MetadataVersion.V2Rust:
      return MetadataTypeName.V2Rust;
    default:
      throw new Error("Metadata: Invalid metadata version");
  }
}
var ProgramMetadata = class extends GearMetadata {
  constructor(metadata, lang, version) {
    let metaRepr;
    if (lang === Lang.RUST) {
      try {
        metaRepr = CreateType.create(getMetadataTypeName(version), metadata);
      } catch (err) {
        throw new Error("Metadata: Invalid metadata");
      }
    } else {
      throw new Error("Metadata: Unsupported lang");
    }
    const { reg, ...types6 } = version === MetadataVersion.V1Rust ? metaRepr.toJSON() : metaRepr.toJSON();
    super(reg);
    __publicField(this, "types");
    __publicField(this, "lang");
    __publicField(this, "version");
    this.version = version;
    this.lang = lang;
    this.types = types6;
  }
  /**
   * ### Get `ProgramMetadata` instance from metadata in hex format
   * Since we've started to support different versions of metadata generated when compilng a program written in Rust
   * it may be necessary to check what the version is. This can be obtained from the `metadata.version` field of `ProgramMetadata` class.
   *
   *
   * This will help to understand what types the metadata contains. For instance, metadata V1 has a `state` field
   * thath describes the type of the output of the `state` function. However, in metadata V2, the `state` field includes 2 types: `input` and `output`.
   * This change was made because starting from this version, the program expects input for the state function.
   * @param hexMetadata metadata generated during program compilation
   *
   * @example
   * import { ProgramMetada, MetadataVersion } from '@gear-js/api';
   *
   * const metaHex = '0x...';
   * const meta = ProgramMetadata.from(metaHex);
   *
   * // State decoding
   * const someBytes = '0x...';
   *
   * if (meta.version === MetadataVersion.V1Rust) {
   *   const result = CreateType.create(meta.types.state, somBytes).toJSON();
   * } else {
   *   const result = CreateType.create(meta.types.state.output, someBytes).toJSON();
   * }
   *
   */
  static from(hexMetadata) {
    if (!hexMetadata.startsWith("0x")) {
      hexMetadata = "0x" + hexMetadata;
    }
    const u8aMeta = hexToU8a(hexMetadata);
    const lang = CreateType.create("u8", u8aMeta[0]).toNumber();
    const version = CreateType.create("u16", u8aMeta.slice(1, 3)).toNumber();
    return new ProgramMetadata(u8aMeta.slice(3), lang, version);
  }
};

// node_modules/@gear-js/api/errors/blocks.errors.js
init_shim();
var GetBlockError = class extends Error {
  constructor(message, hash5) {
    super();
    __publicField(this, "name", "GetBlockError");
    const splittedMessage = message.split(":");
    if (isU8a(hash5)) {
      hash5 = u8aToString(hash5);
    }
    const errorCode = splittedMessage.length > 0 ? parseInt(splittedMessage[0]) : NaN;
    switch (errorCode) {
      case -32603:
        this.message = `State already discarded for block ${hash5}`;
        break;
      default:
        this.message = "Unknow error occurred";
        break;
    }
  }
};

// node_modules/@gear-js/api/Blocks.js
var GearBlock = class {
  constructor(api) {
    __publicField(this, "api");
    __publicField(this, "subscribeNewHeads");
    this.api = api;
    api.isReady.then(() => {
      this.subscribeNewHeads = api.derive.chain.subscribeNewHeads;
    });
  }
  /**
   * Get data of particular block by blockNumber or blockHash
   * @param hashOrNumber
   * @returns
   */
  async get(hashOrNumber) {
    const hash5 = isU8a(hashOrNumber) || isHex(hashOrNumber) ? hashOrNumber : await this.getBlockHash(+hashOrNumber);
    try {
      return await this.api.rpc.chain.getBlock(hash5);
    } catch (error) {
      throw new GetBlockError(error.message, hash5);
    }
  }
  /**
   * Get blockHash by number
   * @param number number of block
   * @returns blockHash
   */
  async getBlockHash(number5) {
    return await this.api.rpc.chain.getBlockHash(number5);
  }
  /**
   * Get block number
   * @param hash
   * @returns Compact<BlockNumber>
   */
  async getBlockNumber(hash5) {
    const block = await this.get(hash5);
    return block.block.header.number;
  }
  async getBlockTimestamp(blockOrHashOrNumber) {
    const block = isHex(blockOrHashOrNumber) || isU8a(blockOrHashOrNumber) || isNumber(blockOrHashOrNumber) ? await this.get(blockOrHashOrNumber) : blockOrHashOrNumber;
    const tsAsU8a = block.block.extrinsics.find((value) => value.method.method === "set" && value.method.section === "timestamp").data;
    const ts = CreateType.create("Compact<u64>", tsAsU8a);
    return ts;
  }
  /**
   * Get all extrinsic of particular block
   * @param blockHash hash of particular block
   * @returns Vec of extrinsics
   */
  async getExtrinsics(blockHash) {
    return (await this.get(blockHash)).block.extrinsics;
  }
  /**
   * Get all events of particular block
   * @param blockHash hash of particular block
   * @returns Vec of events
   */
  async getEvents(blockHash) {
    const apiAt = await this.api.at(blockHash);
    return apiAt.query.system.events();
  }
  /**
   * Get hash of last finalized block
   * @returns Hash of finalized head
   */
  async getFinalizedHead() {
    return this.api.rpc.chain.getFinalizedHead();
  }
};

// node_modules/@gear-js/api/Claim.js
init_shim();

// node_modules/@gear-js/api/errors/claim.errors.js
init_shim();
var ClaimValueError = class extends Error {
  constructor(message) {
    super(message || "Unable to claim value from mailbox. Params are invalid");
    __publicField(this, "name", "ClaimValueError");
  }
};

// node_modules/@gear-js/api/Claim.js
var GearClaimValue = class extends GearTransaction {
  /**
   * Submit `claimValueFromMailbox` extrinsic
   * @param messageId MessageId with value to be claimed
   */
  submit(messageId) {
    try {
      this.extrinsic = this._api.tx.gear.claimValue(messageId);
      return this.extrinsic;
    } catch (error) {
      throw new ClaimValueError();
    }
  }
};

// node_modules/@gear-js/api/Code.js
init_shim();

// node_modules/@gear-js/api/utils/generate.js
init_shim();

// node_modules/@polkadot/util-crypto/index.js
init_shim();

// node_modules/@polkadot/util-crypto/detectPackage.js
init_shim();

// node_modules/@polkadot/util-crypto/detectOther.js
init_shim();

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/networks/packageInfo.js
init_shim();
var packageInfo53 = { name: "@polkadot/networks", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.3.2" };

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/x-randomvalues/browser.js
init_shim();

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/x-global/index.js
init_shim();

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/x-global/packageInfo.js
init_shim();
var packageInfo54 = { name: "@polkadot/x-global", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.3.2" };

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/x-global/index.js
function evaluateThis(fn) {
  return fn("return this");
}
var xglobal2 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis(Function);
function extractGlobal2(name, fallback) {
  return typeof xglobal2[name] === "undefined" ? fallback : xglobal2[name];
}
function exposeGlobal2(name, fallback) {
  if (typeof xglobal2[name] === "undefined") {
    xglobal2[name] = fallback;
  }
}

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/x-randomvalues/packageInfo.js
init_shim();
var packageInfo55 = { name: "@polkadot/x-randomvalues", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.3.2" };

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/x-randomvalues/browser.js
var crypto4 = xglobal2.crypto;
function getRandomValues2(arr) {
  return crypto4.getRandomValues(arr);
}

// node_modules/@polkadot/util-crypto/detectOther.js
var detectOther_default26 = [packageInfo53, packageInfo2, packageInfo55];

// node_modules/@polkadot/util-crypto/packageInfo.js
init_shim();
var packageInfo56 = { name: "@polkadot/util-crypto", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.3.2" };

// node_modules/@polkadot/util-crypto/detectPackage.js
detectPackage(packageInfo56, null, detectOther_default26);

// node_modules/@polkadot/util-crypto/bundle.js
init_shim();

// node_modules/@polkadot/util-crypto/bundleInit.js
init_shim();

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/x-bigint/shim.js
init_shim();

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/x-bigint/index.js
init_shim();

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/x-bigint/packageInfo.js
init_shim();
var packageInfo57 = { name: "@polkadot/x-bigint", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.3.2" };

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/x-bigint/index.js
function invalidFallback() {
  return Number.NaN;
}
var BigInt3 = extractGlobal2("BigInt", invalidFallback);

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/x-bigint/shim.js
exposeGlobal2("BigInt", BigInt3);

// node_modules/@polkadot/util-crypto/crypto.js
init_shim();
function cryptoWaitReady4() {
  return waitReady().then(() => {
    if (!isReady()) {
      throw new Error("Unable to initialize @polkadot/util-crypto");
    }
    return true;
  }).catch(() => false);
}

// node_modules/@polkadot/util-crypto/bundleInit.js
cryptoWaitReady4().catch(() => {
});

// node_modules/@polkadot/util-crypto/address/index.js
init_shim();

// node_modules/@polkadot/util-crypto/address/addressToEvm.js
init_shim();

// node_modules/@polkadot/util-crypto/address/decode.js
init_shim();

// node_modules/@polkadot/util-crypto/base58/index.js
init_shim();

// node_modules/@polkadot/util-crypto/base58/bs58.js
init_shim();

// node_modules/@scure/base/lib/esm/index.js
init_shim();
function assertNumber4(n) {
  if (!Number.isSafeInteger(n))
    throw new Error(`Wrong integer: ${n}`);
}
function chain4(...args) {
  const wrap = (a, b) => (c) => a(b(c));
  const encode = Array.from(args).reverse().reduce((acc, i) => acc ? wrap(acc, i.encode) : i.encode, void 0);
  const decode2 = args.reduce((acc, i) => acc ? wrap(acc, i.decode) : i.decode, void 0);
  return { encode, decode: decode2 };
}
function alphabet4(alphabet5) {
  return {
    encode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return digits.map((i) => {
        assertNumber4(i);
        if (i < 0 || i >= alphabet5.length)
          throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet5.length})`);
        return alphabet5[i];
      });
    },
    decode: (input) => {
      if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
        throw new Error("alphabet.decode input should be array of strings");
      return input.map((letter) => {
        if (typeof letter !== "string")
          throw new Error(`alphabet.decode: not string element=${letter}`);
        const index = alphabet5.indexOf(letter);
        if (index === -1)
          throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet5}`);
        return index;
      });
    }
  };
}
function join4(separator = "") {
  if (typeof separator !== "string")
    throw new Error("join separator should be string");
  return {
    encode: (from2) => {
      if (!Array.isArray(from2) || from2.length && typeof from2[0] !== "string")
        throw new Error("join.encode input should be array of strings");
      for (let i of from2)
        if (typeof i !== "string")
          throw new Error(`join.encode: non-string input=${i}`);
      return from2.join(separator);
    },
    decode: (to) => {
      if (typeof to !== "string")
        throw new Error("join.decode input should be string");
      return to.split(separator);
    }
  };
}
function padding4(bits, chr = "=") {
  assertNumber4(bits);
  if (typeof chr !== "string")
    throw new Error("padding chr should be string");
  return {
    encode(data) {
      if (!Array.isArray(data) || data.length && typeof data[0] !== "string")
        throw new Error("padding.encode input should be array of strings");
      for (let i of data)
        if (typeof i !== "string")
          throw new Error(`padding.encode: non-string input=${i}`);
      while (data.length * bits % 8)
        data.push(chr);
      return data;
    },
    decode(input) {
      if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
        throw new Error("padding.encode input should be array of strings");
      for (let i of input)
        if (typeof i !== "string")
          throw new Error(`padding.decode: non-string input=${i}`);
      let end = input.length;
      if (end * bits % 8)
        throw new Error("Invalid padding: string should have whole number of bytes");
      for (; end > 0 && input[end - 1] === chr; end--) {
        if (!((end - 1) * bits % 8))
          throw new Error("Invalid padding: string has too much padding");
      }
      return input.slice(0, end);
    }
  };
}
function normalize5(fn) {
  if (typeof fn !== "function")
    throw new Error("normalize fn should be function");
  return { encode: (from2) => from2, decode: (to) => fn(to) };
}
function convertRadix5(data, from2, to) {
  if (from2 < 2)
    throw new Error(`convertRadix: wrong from=${from2}, base cannot be less than 2`);
  if (to < 2)
    throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
  if (!Array.isArray(data))
    throw new Error("convertRadix: data should be array");
  if (!data.length)
    return [];
  let pos = 0;
  const res = [];
  const digits = Array.from(data);
  digits.forEach((d) => {
    assertNumber4(d);
    if (d < 0 || d >= from2)
      throw new Error(`Wrong integer: ${d}`);
  });
  while (true) {
    let carry = 0;
    let done = true;
    for (let i = pos; i < digits.length; i++) {
      const digit = digits[i];
      const digitBase = from2 * carry + digit;
      if (!Number.isSafeInteger(digitBase) || from2 * carry / from2 !== carry || digitBase - digit !== from2 * carry) {
        throw new Error("convertRadix: carry overflow");
      }
      carry = digitBase % to;
      digits[i] = Math.floor(digitBase / to);
      if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)
        throw new Error("convertRadix: carry overflow");
      if (!done)
        continue;
      else if (!digits[i])
        pos = i;
      else
        done = false;
    }
    res.push(carry);
    if (done)
      break;
  }
  for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
    res.push(0);
  return res.reverse();
}
var gcd4 = (a, b) => !b ? a : gcd4(b, a % b);
var radix2carry4 = (from2, to) => from2 + (to - gcd4(from2, to));
function convertRadix24(data, from2, to, padding5) {
  if (!Array.isArray(data))
    throw new Error("convertRadix2: data should be array");
  if (from2 <= 0 || from2 > 32)
    throw new Error(`convertRadix2: wrong from=${from2}`);
  if (to <= 0 || to > 32)
    throw new Error(`convertRadix2: wrong to=${to}`);
  if (radix2carry4(from2, to) > 32) {
    throw new Error(`convertRadix2: carry overflow from=${from2} to=${to} carryBits=${radix2carry4(from2, to)}`);
  }
  let carry = 0;
  let pos = 0;
  const mask = 2 ** to - 1;
  const res = [];
  for (const n of data) {
    assertNumber4(n);
    if (n >= 2 ** from2)
      throw new Error(`convertRadix2: invalid data word=${n} from=${from2}`);
    carry = carry << from2 | n;
    if (pos + from2 > 32)
      throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from2}`);
    pos += from2;
    for (; pos >= to; pos -= to)
      res.push((carry >> pos - to & mask) >>> 0);
    carry &= 2 ** pos - 1;
  }
  carry = carry << to - pos & mask;
  if (!padding5 && pos >= from2)
    throw new Error("Excess padding");
  if (!padding5 && carry)
    throw new Error(`Non-zero padding: ${carry}`);
  if (padding5 && pos > 0)
    res.push(carry >>> 0);
  return res;
}
function radix5(num) {
  assertNumber4(num);
  return {
    encode: (bytes5) => {
      if (!(bytes5 instanceof Uint8Array))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix5(Array.from(bytes5), 2 ** 8, num);
    },
    decode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("radix.decode input should be array of strings");
      return Uint8Array.from(convertRadix5(digits, num, 2 ** 8));
    }
  };
}
function radix24(bits, revPadding = false) {
  assertNumber4(bits);
  if (bits <= 0 || bits > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (radix2carry4(8, bits) > 32 || radix2carry4(bits, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (bytes5) => {
      if (!(bytes5 instanceof Uint8Array))
        throw new Error("radix2.encode input should be Uint8Array");
      return convertRadix24(Array.from(bytes5), 8, bits, !revPadding);
    },
    decode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("radix2.decode input should be array of strings");
      return Uint8Array.from(convertRadix24(digits, bits, 8, revPadding));
    }
  };
}
function unsafeWrapper4(fn) {
  if (typeof fn !== "function")
    throw new Error("unsafeWrapper fn should be function");
  return function(...args) {
    try {
      return fn.apply(null, args);
    } catch (e) {
    }
  };
}
function checksum4(len, fn) {
  assertNumber4(len);
  if (typeof fn !== "function")
    throw new Error("checksum fn should be function");
  return {
    encode(data) {
      if (!(data instanceof Uint8Array))
        throw new Error("checksum.encode: input should be Uint8Array");
      const checksum5 = fn(data).slice(0, len);
      const res = new Uint8Array(data.length + len);
      res.set(data);
      res.set(checksum5, data.length);
      return res;
    },
    decode(data) {
      if (!(data instanceof Uint8Array))
        throw new Error("checksum.decode: input should be Uint8Array");
      const payload = data.slice(0, -len);
      const newChecksum = fn(payload).slice(0, len);
      const oldChecksum = data.slice(-len);
      for (let i = 0; i < len; i++)
        if (newChecksum[i] !== oldChecksum[i])
          throw new Error("Invalid checksum");
      return payload;
    }
  };
}
var utils4 = { alphabet: alphabet4, chain: chain4, checksum: checksum4, radix: radix5, radix2: radix24, join: join4, padding: padding4 };
var base164 = chain4(radix24(4), alphabet4("0123456789ABCDEF"), join4(""));
var base324 = chain4(radix24(5), alphabet4("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding4(5), join4(""));
var base32hex4 = chain4(radix24(5), alphabet4("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding4(5), join4(""));
var base32crockford4 = chain4(radix24(5), alphabet4("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join4(""), normalize5((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
var base644 = chain4(radix24(6), alphabet4("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding4(6), join4(""));
var base64url4 = chain4(radix24(6), alphabet4("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding4(6), join4(""));
var genBase584 = (abc) => chain4(radix5(58), alphabet4(abc), join4(""));
var base584 = genBase584("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var base58flickr4 = genBase584("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
var base58xrp4 = genBase584("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
var XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
var base58xmr = {
  encode(data) {
    let res = "";
    for (let i = 0; i < data.length; i += 8) {
      const block = data.subarray(i, i + 8);
      res += base584.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
    }
    return res;
  },
  decode(str) {
    let res = [];
    for (let i = 0; i < str.length; i += 11) {
      const slice = str.slice(i, i + 11);
      const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
      const block = base584.decode(slice);
      for (let j = 0; j < block.length - blockLen; j++) {
        if (block[j] !== 0)
          throw new Error("base58xmr: wrong padding");
      }
      res = res.concat(Array.from(block.slice(block.length - blockLen)));
    }
    return Uint8Array.from(res);
  }
};
var BECH_ALPHABET4 = chain4(alphabet4("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join4(""));
var POLYMOD_GENERATORS4 = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod4(pre) {
  const b = pre >> 25;
  let chk = (pre & 33554431) << 5;
  for (let i = 0; i < POLYMOD_GENERATORS4.length; i++) {
    if ((b >> i & 1) === 1)
      chk ^= POLYMOD_GENERATORS4[i];
  }
  return chk;
}
function bechChecksum4(prefix2, words, encodingConst = 1) {
  const len = prefix2.length;
  let chk = 1;
  for (let i = 0; i < len; i++) {
    const c = prefix2.charCodeAt(i);
    if (c < 33 || c > 126)
      throw new Error(`Invalid prefix (${prefix2})`);
    chk = bech32Polymod4(chk) ^ c >> 5;
  }
  chk = bech32Polymod4(chk);
  for (let i = 0; i < len; i++)
    chk = bech32Polymod4(chk) ^ prefix2.charCodeAt(i) & 31;
  for (let v of words)
    chk = bech32Polymod4(chk) ^ v;
  for (let i = 0; i < 6; i++)
    chk = bech32Polymod4(chk);
  chk ^= encodingConst;
  return BECH_ALPHABET4.encode(convertRadix24([chk % 2 ** 30], 30, 5, false));
}
function genBech324(encoding) {
  const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
  const _words = radix24(5);
  const fromWords = _words.decode;
  const toWords = _words.encode;
  const fromWordsUnsafe = unsafeWrapper4(fromWords);
  function encode(prefix2, words, limit = 90) {
    if (typeof prefix2 !== "string")
      throw new Error(`bech32.encode prefix should be string, not ${typeof prefix2}`);
    if (!Array.isArray(words) || words.length && typeof words[0] !== "number")
      throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
    const actualLength = prefix2.length + 7 + words.length;
    if (limit !== false && actualLength > limit)
      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
    prefix2 = prefix2.toLowerCase();
    return `${prefix2}1${BECH_ALPHABET4.encode(words)}${bechChecksum4(prefix2, words, ENCODING_CONST)}`;
  }
  function decode2(str, limit = 90) {
    if (typeof str !== "string")
      throw new Error(`bech32.decode input should be string, not ${typeof str}`);
    if (str.length < 8 || limit !== false && str.length > limit)
      throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
    const lowered = str.toLowerCase();
    if (str !== lowered && str !== str.toUpperCase())
      throw new Error(`String must be lowercase or uppercase`);
    str = lowered;
    const sepIndex = str.lastIndexOf("1");
    if (sepIndex === 0 || sepIndex === -1)
      throw new Error(`Letter "1" must be present between prefix and data only`);
    const prefix2 = str.slice(0, sepIndex);
    const _words2 = str.slice(sepIndex + 1);
    if (_words2.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const words = BECH_ALPHABET4.decode(_words2).slice(0, -6);
    const sum = bechChecksum4(prefix2, words, ENCODING_CONST);
    if (!_words2.endsWith(sum))
      throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
    return { prefix: prefix2, words };
  }
  const decodeUnsafe = unsafeWrapper4(decode2);
  function decodeToBytes(str) {
    const { prefix: prefix2, words } = decode2(str, false);
    return { prefix: prefix2, words, bytes: fromWords(words) };
  }
  return { encode, decode: decode2, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };
}
var bech324 = genBech324("bech32");
var bech32m4 = genBech324("bech32m");
var utf8 = {
  encode: (data) => new TextDecoder().decode(data),
  decode: (str) => new TextEncoder().encode(str)
};
var hex10 = chain4(radix24(4), alphabet4("0123456789abcdef"), join4(""), normalize5((s) => {
  if (typeof s !== "string" || s.length % 2)
    throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
  return s.toLowerCase();
}));
var CODERS = {
  utf8,
  hex: hex10,
  base16: base164,
  base32: base324,
  base64: base644,
  base64url: base64url4,
  base58: base584,
  base58xmr
};
var coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(", ")}`;

// node_modules/@polkadot/util-crypto/base32/helpers.js
init_shim();
function createDecode4({ coder, ipfs }, validate) {
  return (value, ipfsCompat) => {
    validate(value, ipfsCompat);
    return coder.decode(ipfs && ipfsCompat ? value.substring(1) : value);
  };
}
function createEncode4({ coder, ipfs }) {
  return (value, ipfsCompat) => {
    const out = coder.encode(u8aToU8a(value));
    return ipfs && ipfsCompat ? `${ipfs}${out}` : out;
  };
}
function createIs4(validate) {
  return (value, ipfsCompat) => {
    try {
      return validate(value, ipfsCompat);
    } catch {
      return false;
    }
  };
}
function createValidate4({ chars: chars5, ipfs, type, withPadding }) {
  return (value, ipfsCompat) => {
    if (typeof value !== "string") {
      throw new Error(`Expected ${type} string input`);
    } else if (ipfs && ipfsCompat && value[0] !== ipfs) {
      throw new Error(`Expected ipfs-compatible ${type} to start with '${ipfs}'`);
    }
    for (let i = ipfsCompat ? 1 : 0, count2 = value.length; i < count2; i++) {
      if (chars5.includes(value[i])) {
      } else if (withPadding && value[i] === "=") {
        if (i === count2 - 1) {
        } else if (value[i + 1] === "=") {
        } else {
          throw new Error(`Invalid ${type} padding sequence "${value[i]}${value[i + 1]}" at index ${i}`);
        }
      } else {
        throw new Error(`Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
      }
    }
    return true;
  };
}

// node_modules/@polkadot/util-crypto/base58/bs58.js
var config11 = {
  chars: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
  coder: base584,
  ipfs: "z",
  type: "base58"
};
var base58Validate4 = createValidate4(config11);
var base58Decode4 = createDecode4(config11, base58Validate4);
var base58Encode4 = createEncode4(config11);
var isBase584 = createIs4(base58Validate4);

// node_modules/@polkadot/util-crypto/address/checksum.js
init_shim();

// node_modules/@polkadot/util-crypto/address/sshash.js
init_shim();

// node_modules/@polkadot/util-crypto/blake2/asU8a.js
init_shim();

// node_modules/@noble/hashes/esm/blake2b.js
init_shim();

// node_modules/@noble/hashes/esm/_blake2.js
init_shim();

// node_modules/@noble/hashes/esm/_assert.js
init_shim();
function number4(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error(`Wrong positive integer: ${n}`);
}
function bool2(b) {
  if (typeof b !== "boolean")
    throw new Error(`Expected boolean, not ${b}`);
}
function bytes4(b, ...lengths) {
  if (!(b instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
function hash4(hash5) {
  if (typeof hash5 !== "function" || typeof hash5.create !== "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number4(hash5.outputLen);
  number4(hash5.blockLen);
}
function exists4(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function output4(out, instance) {
  bytes4(out);
  const min2 = instance.outputLen;
  if (out.length < min2) {
    throw new Error(`digestInto() expects output buffer of length at least ${min2}`);
  }
}
var assert5 = {
  number: number4,
  bool: bool2,
  bytes: bytes4,
  hash: hash4,
  exists: exists4,
  output: output4
};
var assert_default = assert5;

// node_modules/@noble/hashes/esm/utils.js
init_shim();

// node_modules/@noble/hashes/esm/crypto.js
init_shim();
var crypto5 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@noble/hashes/esm/utils.js
var u8a7 = (a) => a instanceof Uint8Array;
var u325 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
var createView4 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
var rotr4 = (word, shift) => word << 32 - shift | word >>> shift;
var isLE4 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE4)
  throw new Error("Non little-endian hardware is not supported");
var hexes7 = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, "0"));
function utf8ToBytes7(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes4(data) {
  if (typeof data === "string")
    data = utf8ToBytes7(data);
  if (!u8a7(data))
    throw new Error(`expected Uint8Array, got ${typeof data}`);
  return data;
}
function concatBytes7(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a7(a))
      throw new Error("Uint8Array expected");
    r.set(a, pad);
    pad += a.length;
  });
  return r;
}
var Hash4 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
var isPlainObject = (obj) => Object.prototype.toString.call(obj) === "[object Object]" && obj.constructor === Object;
function checkOpts4(defaults5, opts) {
  if (opts !== void 0 && (typeof opts !== "object" || !isPlainObject(opts)))
    throw new Error("Options should be object or undefined");
  const merged = Object.assign(defaults5, opts);
  return merged;
}
function wrapConstructor4(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes4(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function wrapConstructorWithOpts4(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes4(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function wrapXOFConstructorWithOpts4(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes4(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function randomBytes4(bytesLength = 32) {
  if (crypto5 && typeof crypto5.getRandomValues === "function") {
    return crypto5.getRandomValues(new Uint8Array(bytesLength));
  }
  throw new Error("crypto.getRandomValues must be defined");
}

// node_modules/@noble/hashes/esm/_blake2.js
var SIGMA4 = new Uint8Array([
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3,
  11,
  8,
  12,
  0,
  5,
  2,
  15,
  13,
  10,
  14,
  3,
  6,
  7,
  1,
  9,
  4,
  7,
  9,
  3,
  1,
  13,
  12,
  11,
  14,
  2,
  6,
  5,
  10,
  4,
  0,
  15,
  8,
  9,
  0,
  5,
  7,
  2,
  4,
  10,
  15,
  14,
  1,
  11,
  12,
  6,
  8,
  3,
  13,
  2,
  12,
  6,
  10,
  0,
  11,
  8,
  3,
  4,
  13,
  7,
  5,
  15,
  14,
  1,
  9,
  12,
  5,
  1,
  15,
  14,
  13,
  4,
  10,
  0,
  7,
  6,
  3,
  9,
  2,
  8,
  11,
  13,
  11,
  7,
  14,
  12,
  1,
  3,
  9,
  5,
  0,
  15,
  4,
  8,
  6,
  2,
  10,
  6,
  15,
  14,
  9,
  11,
  3,
  0,
  8,
  12,
  2,
  13,
  7,
  1,
  4,
  10,
  5,
  10,
  2,
  8,
  4,
  7,
  6,
  1,
  5,
  15,
  11,
  9,
  14,
  3,
  12,
  13,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3
]);
var BLAKE24 = class extends Hash4 {
  constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.length = 0;
    this.pos = 0;
    this.finished = false;
    this.destroyed = false;
    assert_default.number(blockLen);
    assert_default.number(outputLen);
    assert_default.number(keyLen);
    if (outputLen < 0 || outputLen > keyLen)
      throw new Error("outputLen bigger than keyLen");
    if (opts.key !== void 0 && (opts.key.length < 1 || opts.key.length > keyLen))
      throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
    if (opts.salt !== void 0 && opts.salt.length !== saltLen)
      throw new Error(`salt must be ${saltLen} byte long or undefined`);
    if (opts.personalization !== void 0 && opts.personalization.length !== persLen)
      throw new Error(`personalization must be ${persLen} byte long or undefined`);
    this.buffer32 = u325(this.buffer = new Uint8Array(blockLen));
  }
  update(data) {
    assert_default.exists(this);
    const { blockLen, buffer: buffer2, buffer32 } = this;
    data = toBytes4(data);
    const len = data.length;
    const offset = data.byteOffset;
    const buf = data.buffer;
    for (let pos = 0; pos < len; ) {
      if (this.pos === blockLen) {
        this.compress(buffer32, 0, false);
        this.pos = 0;
      }
      const take2 = Math.min(blockLen - this.pos, len - pos);
      const dataOffset = offset + pos;
      if (take2 === blockLen && !(dataOffset % 4) && pos + take2 < len) {
        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
          this.length += blockLen;
          this.compress(data32, pos32, false);
        }
        continue;
      }
      buffer2.set(data.subarray(pos, pos + take2), this.pos);
      this.pos += take2;
      this.length += take2;
      pos += take2;
    }
    return this;
  }
  digestInto(out) {
    assert_default.exists(this);
    assert_default.output(out, this);
    const { pos, buffer32 } = this;
    this.finished = true;
    this.buffer.subarray(pos).fill(0);
    this.compress(buffer32, 0, true);
    const out32 = u325(out);
    this.get().forEach((v, i) => out32[i] = v);
  }
  digest() {
    const { buffer: buffer2, outputLen } = this;
    this.digestInto(buffer2);
    const res = buffer2.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    const { buffer: buffer2, length, finished, destroyed, outputLen, pos } = this;
    to || (to = new this.constructor({ dkLen: outputLen }));
    to.set(...this.get());
    to.length = length;
    to.finished = finished;
    to.destroyed = destroyed;
    to.outputLen = outputLen;
    to.buffer.set(buffer2);
    to.pos = pos;
    return to;
  }
};

// node_modules/@noble/hashes/esm/_u64.js
init_shim();
var U32_MASK644 = BigInt(2 ** 32 - 1);
var _32n7 = BigInt(32);
function fromBig4(n, le = false) {
  if (le)
    return { h: Number(n & U32_MASK644), l: Number(n >> _32n7 & U32_MASK644) };
  return { h: Number(n >> _32n7 & U32_MASK644) | 0, l: Number(n & U32_MASK644) | 0 };
}
function split4(lst, le = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0; i < lst.length; i++) {
    const { h, l: l19 } = fromBig4(lst[i], le);
    [Ah[i], Al[i]] = [h, l19];
  }
  return [Ah, Al];
}
var toBig4 = (h, l19) => BigInt(h >>> 0) << _32n7 | BigInt(l19 >>> 0);
var shrSH4 = (h, l19, s) => h >>> s;
var shrSL4 = (h, l19, s) => h << 32 - s | l19 >>> s;
var rotrSH4 = (h, l19, s) => h >>> s | l19 << 32 - s;
var rotrSL4 = (h, l19, s) => h << 32 - s | l19 >>> s;
var rotrBH4 = (h, l19, s) => h << 64 - s | l19 >>> s - 32;
var rotrBL4 = (h, l19, s) => h >>> s - 32 | l19 << 64 - s;
var rotr32H4 = (h, l19) => l19;
var rotr32L4 = (h, l19) => h;
var rotlSH4 = (h, l19, s) => h << s | l19 >>> 32 - s;
var rotlSL4 = (h, l19, s) => l19 << s | h >>> 32 - s;
var rotlBH4 = (h, l19, s) => l19 << s - 32 | h >>> 64 - s;
var rotlBL4 = (h, l19, s) => h << s - 32 | l19 >>> 64 - s;
function add4(Ah, Al, Bh, Bl) {
  const l19 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l19 / 2 ** 32 | 0) | 0, l: l19 | 0 };
}
var add3L4 = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H4 = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L4 = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H4 = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L4 = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H4 = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
var u645 = {
  fromBig: fromBig4,
  split: split4,
  toBig: toBig4,
  shrSH: shrSH4,
  shrSL: shrSL4,
  rotrSH: rotrSH4,
  rotrSL: rotrSL4,
  rotrBH: rotrBH4,
  rotrBL: rotrBL4,
  rotr32H: rotr32H4,
  rotr32L: rotr32L4,
  rotlSH: rotlSH4,
  rotlSL: rotlSL4,
  rotlBH: rotlBH4,
  rotlBL: rotlBL4,
  add: add4,
  add3L: add3L4,
  add3H: add3H4,
  add4L: add4L4,
  add4H: add4H4,
  add5H: add5H4,
  add5L: add5L4
};
var u64_default4 = u645;

// node_modules/@noble/hashes/esm/blake2b.js
var IV7 = new Uint32Array([
  4089235720,
  1779033703,
  2227873595,
  3144134277,
  4271175723,
  1013904242,
  1595750129,
  2773480762,
  2917565137,
  1359893119,
  725511199,
  2600822924,
  4215389547,
  528734635,
  327033209,
  1541459225
]);
var BUF4 = new Uint32Array(32);
function G14(a, b, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BUF4[2 * a], Ah = BUF4[2 * a + 1];
  let Bl = BUF4[2 * b], Bh = BUF4[2 * b + 1];
  let Cl = BUF4[2 * c], Ch = BUF4[2 * c + 1];
  let Dl = BUF4[2 * d], Dh = BUF4[2 * d + 1];
  let ll = u64_default4.add3L(Al, Bl, Xl);
  Ah = u64_default4.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64_default4.rotr32H(Dh, Dl), Dl: u64_default4.rotr32L(Dh, Dl) });
  ({ h: Ch, l: Cl } = u64_default4.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64_default4.rotrSH(Bh, Bl, 24), Bl: u64_default4.rotrSL(Bh, Bl, 24) });
  BUF4[2 * a] = Al, BUF4[2 * a + 1] = Ah;
  BUF4[2 * b] = Bl, BUF4[2 * b + 1] = Bh;
  BUF4[2 * c] = Cl, BUF4[2 * c + 1] = Ch;
  BUF4[2 * d] = Dl, BUF4[2 * d + 1] = Dh;
}
function G24(a, b, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BUF4[2 * a], Ah = BUF4[2 * a + 1];
  let Bl = BUF4[2 * b], Bh = BUF4[2 * b + 1];
  let Cl = BUF4[2 * c], Ch = BUF4[2 * c + 1];
  let Dl = BUF4[2 * d], Dh = BUF4[2 * d + 1];
  let ll = u64_default4.add3L(Al, Bl, Xl);
  Ah = u64_default4.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64_default4.rotrSH(Dh, Dl, 16), Dl: u64_default4.rotrSL(Dh, Dl, 16) });
  ({ h: Ch, l: Cl } = u64_default4.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64_default4.rotrBH(Bh, Bl, 63), Bl: u64_default4.rotrBL(Bh, Bl, 63) });
  BUF4[2 * a] = Al, BUF4[2 * a + 1] = Ah;
  BUF4[2 * b] = Bl, BUF4[2 * b + 1] = Bh;
  BUF4[2 * c] = Cl, BUF4[2 * c + 1] = Ch;
  BUF4[2 * d] = Dl, BUF4[2 * d + 1] = Dh;
}
var BLAKE2b4 = class extends BLAKE24 {
  constructor(opts = {}) {
    super(128, opts.dkLen === void 0 ? 64 : opts.dkLen, opts, 64, 16, 16);
    this.v0l = IV7[0] | 0;
    this.v0h = IV7[1] | 0;
    this.v1l = IV7[2] | 0;
    this.v1h = IV7[3] | 0;
    this.v2l = IV7[4] | 0;
    this.v2h = IV7[5] | 0;
    this.v3l = IV7[6] | 0;
    this.v3h = IV7[7] | 0;
    this.v4l = IV7[8] | 0;
    this.v4h = IV7[9] | 0;
    this.v5l = IV7[10] | 0;
    this.v5h = IV7[11] | 0;
    this.v6l = IV7[12] | 0;
    this.v6h = IV7[13] | 0;
    this.v7l = IV7[14] | 0;
    this.v7h = IV7[15] | 0;
    const keyLength = opts.key ? opts.key.length : 0;
    this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
    if (opts.salt) {
      const salt = u325(toBytes4(opts.salt));
      this.v4l ^= salt[0];
      this.v4h ^= salt[1];
      this.v5l ^= salt[2];
      this.v5h ^= salt[3];
    }
    if (opts.personalization) {
      const pers = u325(toBytes4(opts.personalization));
      this.v6l ^= pers[0];
      this.v6h ^= pers[1];
      this.v7l ^= pers[2];
      this.v7h ^= pers[3];
    }
    if (opts.key) {
      const tmp = new Uint8Array(this.blockLen);
      tmp.set(toBytes4(opts.key));
      this.update(tmp);
    }
  }
  // prettier-ignore
  get() {
    let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
    return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
  }
  // prettier-ignore
  set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
    this.v0l = v0l | 0;
    this.v0h = v0h | 0;
    this.v1l = v1l | 0;
    this.v1h = v1h | 0;
    this.v2l = v2l | 0;
    this.v2h = v2h | 0;
    this.v3l = v3l | 0;
    this.v3h = v3h | 0;
    this.v4l = v4l | 0;
    this.v4h = v4h | 0;
    this.v5l = v5l | 0;
    this.v5h = v5h | 0;
    this.v6l = v6l | 0;
    this.v6h = v6h | 0;
    this.v7l = v7l | 0;
    this.v7h = v7h | 0;
  }
  compress(msg, offset, isLast) {
    this.get().forEach((v, i) => BUF4[i] = v);
    BUF4.set(IV7, 16);
    let { h, l: l19 } = u64_default4.fromBig(BigInt(this.length));
    BUF4[24] = IV7[8] ^ l19;
    BUF4[25] = IV7[9] ^ h;
    if (isLast) {
      BUF4[28] = ~BUF4[28];
      BUF4[29] = ~BUF4[29];
    }
    let j = 0;
    const s = SIGMA4;
    for (let i = 0; i < 12; i++) {
      G14(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G24(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G14(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G24(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G14(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G24(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G14(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G24(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G14(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G24(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G14(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G24(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G14(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G24(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G14(3, 4, 9, 14, msg, offset + 2 * s[j++]);
      G24(3, 4, 9, 14, msg, offset + 2 * s[j++]);
    }
    this.v0l ^= BUF4[0] ^ BUF4[16];
    this.v0h ^= BUF4[1] ^ BUF4[17];
    this.v1l ^= BUF4[2] ^ BUF4[18];
    this.v1h ^= BUF4[3] ^ BUF4[19];
    this.v2l ^= BUF4[4] ^ BUF4[20];
    this.v2h ^= BUF4[5] ^ BUF4[21];
    this.v3l ^= BUF4[6] ^ BUF4[22];
    this.v3h ^= BUF4[7] ^ BUF4[23];
    this.v4l ^= BUF4[8] ^ BUF4[24];
    this.v4h ^= BUF4[9] ^ BUF4[25];
    this.v5l ^= BUF4[10] ^ BUF4[26];
    this.v5h ^= BUF4[11] ^ BUF4[27];
    this.v6l ^= BUF4[12] ^ BUF4[28];
    this.v6h ^= BUF4[13] ^ BUF4[29];
    this.v7l ^= BUF4[14] ^ BUF4[30];
    this.v7h ^= BUF4[15] ^ BUF4[31];
    BUF4.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer32.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var blake2b5 = wrapConstructorWithOpts4((opts) => new BLAKE2b4(opts));

// node_modules/@polkadot/util-crypto/helpers.js
init_shim();
function createAsHex4(fn) {
  return (...args) => u8aToHex(fn(...args));
}
function createBitHasher4(bitLength, fn) {
  return (data, onlyJs) => fn(data, bitLength, onlyJs);
}
function createDualHasher4(wa, js) {
  return (value, bitLength = 256, onlyJs) => {
    const u8a9 = u8aToU8a(value);
    return !hasBigInt || !onlyJs && isReady() ? wa[bitLength](u8a9) : js[bitLength](u8a9);
  };
}

// node_modules/@polkadot/util-crypto/blake2/asU8a.js
function blake2AsU8a4(data, bitLength = 256, key, onlyJs) {
  const byteLength = Math.ceil(bitLength / 8);
  const u8a9 = u8aToU8a(data);
  return !hasBigInt || !onlyJs && isReady() ? blake2b(u8a9, u8aToU8a(key), byteLength) : key ? blake2b5(u8a9, { dkLen: byteLength, key }) : blake2b5(u8a9, { dkLen: byteLength });
}
var blake2AsHex4 = createAsHex4(blake2AsU8a4);

// node_modules/@polkadot/util-crypto/address/sshash.js
var SS58_PREFIX4 = stringToU8a("SS58PRE");
function sshash4(key) {
  return blake2AsU8a4(u8aConcat(SS58_PREFIX4, key), 512);
}

// node_modules/@polkadot/util-crypto/address/checksum.js
function checkAddressChecksum4(decoded) {
  const ss58Length = decoded[0] & 64 ? 2 : 1;
  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;
  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
  const length = decoded.length - (isPublicKey ? 2 : 1);
  const hash5 = sshash4(decoded.subarray(0, length));
  const isValid = (decoded[0] & 128) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash5[0] && decoded[decoded.length - 1] === hash5[1] : decoded[decoded.length - 1] === hash5[0]);
  return [isValid, length, ss58Length, ss58Decoded];
}

// node_modules/@polkadot/util-crypto/address/defaults.js
init_shim();

// node_modules/@polkadot/util-crypto/networks.js
init_shim();

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/networks/index.js
init_shim();

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/networks/interfaces.js
init_shim();

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/networks/defaults/index.js
init_shim();

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/networks/defaults/genesis.js
init_shim();
var knownGenesis2 = {
  acala: [
    "0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"
  ],
  ajuna: [
    "0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"
  ],
  "aleph-node": [
    "0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"
  ],
  astar: [
    "0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"
  ],
  basilisk: [
    "0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"
  ],
  bifrost: [
    "0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"
  ],
  "bifrost-kusama": [
    "0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"
  ],
  bittensor: [
    "0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03"
  ],
  centrifuge: [
    "0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82",
    "0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"
  ],
  cere: [
    "0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c"
  ],
  composable: [
    "0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"
  ],
  darwinia: [
    "0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"
  ],
  "dock-mainnet": [
    "0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae",
    "0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"
  ],
  edgeware: [
    "0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"
  ],
  equilibrium: [
    "0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"
  ],
  genshiro: [
    "0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"
  ],
  hydradx: [
    "0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d",
    "0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc",
    "0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9",
    "0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047",
    "0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"
    // Snakenet Gen1
  ],
  "interlay-parachain": [
    "0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"
  ],
  karura: [
    "0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"
  ],
  khala: [
    "0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"
  ],
  kulupu: [
    "0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"
  ],
  kusama: [
    "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe",
    "0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636",
    "0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"
    // Kusama CC1
  ],
  nodle: [
    "0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"
  ],
  origintrail: [
    "0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"
  ],
  p3d: [
    "0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66"
  ],
  parallel: [
    "0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"
  ],
  pendulum: [
    "0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"
  ],
  phala: [
    "0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"
  ],
  picasso: [
    "0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc",
    "0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"
  ],
  polkadex: [
    "0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"
  ],
  polkadot: [
    "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"
  ],
  polymesh: [
    "0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"
  ],
  rococo: [
    "0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e",
    "0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897",
    "0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770",
    "0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff",
    "0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a",
    "0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9",
    "0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779",
    "0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215",
    "0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9",
    "0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147",
    "0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd",
    "0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"
  ],
  sora: [
    "0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"
  ],
  stafi: [
    "0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"
  ],
  statemine: [
    "0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"
  ],
  statemint: [
    "0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"
  ],
  subsocial: [
    "0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"
  ],
  ternoa: [
    "0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"
  ],
  unique: [
    "0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"
  ],
  vtb: [
    "0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f",
    "0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"
  ],
  westend: [
    "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"
  ],
  xxnetwork: [
    "0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"
  ],
  zeitgeist: [
    "0x1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060"
  ]
};

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/networks/defaults/icons.js
init_shim();
var knownIcon2 = {
  centrifuge: "polkadot",
  kusama: "polkadot",
  polkadot: "polkadot",
  sora: "polkadot",
  statemine: "polkadot",
  statemint: "polkadot",
  westmint: "polkadot"
};

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/networks/defaults/ledger.js
init_shim();
var knownLedger2 = {
  acala: 787,
  ajuna: 354,
  "aleph-node": 643,
  astar: 810,
  bifrost: 788,
  "bifrost-kusama": 788,
  centrifuge: 747,
  composable: 354,
  darwinia: 354,
  "dock-mainnet": 594,
  edgeware: 523,
  equilibrium: 99999997,
  genshiro: 99999996,
  hydradx: 354,
  "interlay-parachain": 354,
  karura: 686,
  khala: 434,
  kusama: 434,
  nodle: 1003,
  origintrail: 354,
  parallel: 354,
  pendulum: 354,
  phala: 354,
  picasso: 434,
  polkadex: 799,
  polkadot: 354,
  polymesh: 595,
  sora: 617,
  stafi: 907,
  statemine: 434,
  statemint: 354,
  ternoa: 995,
  unique: 354,
  vtb: 694,
  xxnetwork: 1955,
  zeitgeist: 354
};

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/networks/defaults/testnets.js
init_shim();
var knownTestnet2 = {
  "": true,
  "cess-testnet": true,
  "dock-testnet": true,
  jupiter: true,
  "mathchain-testnet": true,
  p3dt: true,
  subspace_testnet: true,
  "zero-alphaville": true
};

// node_modules/@polkadot/util-crypto/node_modules/@polkadot/networks/interfaces.js
var UNSORTED2 = [0, 2, 42];
var TESTNETS2 = ["testnet"];
function toExpanded2(o) {
  const network = o.network || "";
  const nameParts = network.replace(/_/g, "-").split("-");
  const n = o;
  n.slip44 = knownLedger2[network];
  n.hasLedgerSupport = !!n.slip44;
  n.genesisHash = knownGenesis2[network] || [];
  n.icon = knownIcon2[network] || "substrate";
  n.isTestnet = !!knownTestnet2[network] || TESTNETS2.includes(nameParts[nameParts.length - 1]);
  n.isIgnored = n.isTestnet || !(o.standardAccount && o.decimals && o.decimals.length && o.symbols && o.symbols.length) && o.prefix !== 42;
  return n;
}
function filterSelectable2({ genesisHash, prefix: prefix2 }) {
  return !!genesisHash.length || prefix2 === 42;
}
function filterAvailable2(n) {
  return !n.isIgnored && !!n.network;
}
function sortNetworks2(a, b) {
  const isUnSortedA = UNSORTED2.includes(a.prefix);
  const isUnSortedB = UNSORTED2.includes(b.prefix);
  return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;
}
var allNetworks2 = esm_default.map(toExpanded2);
var availableNetworks2 = allNetworks2.filter(filterAvailable2).sort(sortNetworks2);
var selectableNetworks2 = availableNetworks2.filter(filterSelectable2);

// node_modules/@polkadot/util-crypto/address/defaults.js
var defaults4 = {
  allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
  // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
  allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
  allowedPrefix: availableNetworks2.map(({ prefix: prefix2 }) => prefix2),
  prefix: 42
};

// node_modules/@polkadot/util-crypto/address/decode.js
function decodeAddress4(encoded, ignoreChecksum, ss58Format = -1) {
  if (!encoded) {
    throw new Error("Invalid empty address passed");
  }
  if (isU8a(encoded) || isHex(encoded)) {
    return u8aToU8a(encoded);
  }
  try {
    const decoded = base58Decode4(encoded);
    if (!defaults4.allowedEncodedLengths.includes(decoded.length)) {
      throw new Error("Invalid decoded address length");
    }
    const [isValid, endPos, ss58Length, ss58Decoded] = checkAddressChecksum4(decoded);
    if (!isValid && !ignoreChecksum) {
      throw new Error("Invalid decoded address checksum");
    } else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
      throw new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
    }
    return decoded.slice(ss58Length, endPos);
  } catch (error) {
    throw new Error(`Decoding ${encoded}: ${error.message}`);
  }
}

// node_modules/@polkadot/util-crypto/address/check.js
init_shim();

// node_modules/@polkadot/util-crypto/address/derive.js
init_shim();

// node_modules/@polkadot/util-crypto/key/index.js
init_shim();

// node_modules/@polkadot/util-crypto/key/extractPath.js
init_shim();

// node_modules/@polkadot/util-crypto/key/DeriveJunction.js
init_shim();

// node_modules/@polkadot/util-crypto/bn.js
init_shim();
var BN_BE_256_OPTS4 = { bitLength: 256, isLe: false };

// node_modules/@polkadot/util-crypto/key/extractSuri.js
init_shim();

// node_modules/@polkadot/util-crypto/key/fromPath.js
init_shim();

// node_modules/@polkadot/util-crypto/key/hdkdEcdsa.js
init_shim();

// node_modules/@polkadot/util-crypto/secp256k1/deriveHard.js
init_shim();
var HDKD7 = compactAddLength(stringToU8a("Secp256k1HDKD"));
function secp256k1DeriveHard4(seed, chainCode) {
  if (!isU8a(chainCode) || chainCode.length !== 32) {
    throw new Error("Invalid chainCode passed to derive");
  }
  return blake2AsU8a4(u8aConcat(HDKD7, seed, chainCode), 256);
}

// node_modules/@polkadot/util-crypto/secp256k1/pair/fromSeed.js
init_shim();

// node_modules/@noble/curves/esm/secp256k1.js
init_shim();

// node_modules/@noble/hashes/esm/sha256.js
init_shim();

// node_modules/@noble/hashes/esm/_sha2.js
init_shim();
function setBigUint644(view, byteOffset, value, isLE5) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE5);
  const _32n9 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n9 & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE5 ? 4 : 0;
  const l19 = isLE5 ? 0 : 4;
  view.setUint32(byteOffset + h, wh, isLE5);
  view.setUint32(byteOffset + l19, wl, isLE5);
}
var SHA24 = class extends Hash4 {
  constructor(blockLen, outputLen, padOffset, isLE5) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE5;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView4(this.buffer);
  }
  update(data) {
    assert_default.exists(this);
    const { view, buffer: buffer2, blockLen } = this;
    data = toBytes4(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take2 = Math.min(blockLen - this.pos, len - pos);
      if (take2 === blockLen) {
        const dataView = createView4(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer2.set(data.subarray(pos, pos + take2), this.pos);
      this.pos += take2;
      pos += take2;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    assert_default.exists(this);
    assert_default.output(out, this);
    this.finished = true;
    const { buffer: buffer2, view, blockLen, isLE: isLE5 } = this;
    let { pos } = this;
    buffer2[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i = pos; i < blockLen; i++)
      buffer2[i] = 0;
    setBigUint644(view, blockLen - 8, BigInt(this.length * 8), isLE5);
    this.process(view, 0);
    const oview = createView4(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i = 0; i < outLen; i++)
      oview.setUint32(4 * i, state[i], isLE5);
  }
  digest() {
    const { buffer: buffer2, outputLen } = this;
    this.digestInto(buffer2);
    const res = buffer2.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
    to.length = length;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length % blockLen)
      to.buffer.set(buffer2);
    return to;
  }
};

// node_modules/@noble/hashes/esm/sha256.js
var Chi4 = (a, b, c) => a & b ^ ~a & c;
var Maj4 = (a, b, c) => a & b ^ a & c ^ b & c;
var SHA256_K4 = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var IV8 = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA256_W4 = new Uint32Array(64);
var SHA2564 = class extends SHA24 {
  constructor() {
    super(64, 32, 8, false);
    this.A = IV8[0] | 0;
    this.B = IV8[1] | 0;
    this.C = IV8[2] | 0;
    this.D = IV8[3] | 0;
    this.E = IV8[4] | 0;
    this.F = IV8[5] | 0;
    this.G = IV8[6] | 0;
    this.H = IV8[7] | 0;
  }
  get() {
    const { A, B, C, D, E, F, G, H } = this;
    return [A, B, C, D, E, F, G, H];
  }
  // prettier-ignore
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA256_W4[i] = view.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W4[i - 15];
      const W2 = SHA256_W4[i - 2];
      const s0 = rotr4(W15, 7) ^ rotr4(W15, 18) ^ W15 >>> 3;
      const s1 = rotr4(W2, 17) ^ rotr4(W2, 19) ^ W2 >>> 10;
      SHA256_W4[i] = s1 + SHA256_W4[i - 7] + s0 + SHA256_W4[i - 16] | 0;
    }
    let { A, B, C, D, E, F, G, H } = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = rotr4(E, 6) ^ rotr4(E, 11) ^ rotr4(E, 25);
      const T1 = H + sigma1 + Chi4(E, F, G) + SHA256_K4[i] + SHA256_W4[i] | 0;
      const sigma0 = rotr4(A, 2) ^ rotr4(A, 13) ^ rotr4(A, 22);
      const T2 = sigma0 + Maj4(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T1 | 0;
      D = C;
      C = B;
      B = A;
      A = T1 + T2 | 0;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    SHA256_W4.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
};
var SHA2244 = class extends SHA2564 {
  constructor() {
    super();
    this.A = 3238371032 | 0;
    this.B = 914150663 | 0;
    this.C = 812702999 | 0;
    this.D = 4144912697 | 0;
    this.E = 4290775857 | 0;
    this.F = 1750603025 | 0;
    this.G = 1694076839 | 0;
    this.H = 3204075428 | 0;
    this.outputLen = 28;
  }
};
var sha2565 = wrapConstructor4(() => new SHA2564());
var sha2244 = wrapConstructor4(() => new SHA2244());

// node_modules/@noble/curves/esm/abstract/modular.js
init_shim();

// node_modules/@noble/curves/esm/abstract/utils.js
var utils_exports4 = {};
__export(utils_exports4, {
  bitGet: () => bitGet4,
  bitLen: () => bitLen4,
  bitMask: () => bitMask4,
  bitSet: () => bitSet4,
  bytesToHex: () => bytesToHex4,
  bytesToNumberBE: () => bytesToNumberBE4,
  bytesToNumberLE: () => bytesToNumberLE4,
  concatBytes: () => concatBytes8,
  createHmacDrbg: () => createHmacDrbg4,
  ensureBytes: () => ensureBytes4,
  equalBytes: () => equalBytes4,
  hexToBytes: () => hexToBytes4,
  hexToNumber: () => hexToNumber14,
  numberToBytesBE: () => numberToBytesBE4,
  numberToBytesLE: () => numberToBytesLE4,
  numberToHexUnpadded: () => numberToHexUnpadded4,
  numberToVarBytesBE: () => numberToVarBytesBE4,
  utf8ToBytes: () => utf8ToBytes8,
  validateObject: () => validateObject4
});
init_shim();
var _0n39 = BigInt(0);
var _1n39 = BigInt(1);
var _2n32 = BigInt(2);
var u8a8 = (a) => a instanceof Uint8Array;
var hexes8 = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, "0"));
function bytesToHex4(bytes5) {
  if (!u8a8(bytes5))
    throw new Error("Uint8Array expected");
  let hex11 = "";
  for (let i = 0; i < bytes5.length; i++) {
    hex11 += hexes8[bytes5[i]];
  }
  return hex11;
}
function numberToHexUnpadded4(num) {
  const hex11 = num.toString(16);
  return hex11.length & 1 ? `0${hex11}` : hex11;
}
function hexToNumber14(hex11) {
  if (typeof hex11 !== "string")
    throw new Error("hex string expected, got " + typeof hex11);
  return BigInt(hex11 === "" ? "0" : `0x${hex11}`);
}
function hexToBytes4(hex11) {
  if (typeof hex11 !== "string")
    throw new Error("hex string expected, got " + typeof hex11);
  const len = hex11.length;
  if (len % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + len);
  const array = new Uint8Array(len / 2);
  for (let i = 0; i < array.length; i++) {
    const j = i * 2;
    const hexByte = hex11.slice(j, j + 2);
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte) || byte < 0)
      throw new Error("Invalid byte sequence");
    array[i] = byte;
  }
  return array;
}
function bytesToNumberBE4(bytes5) {
  return hexToNumber14(bytesToHex4(bytes5));
}
function bytesToNumberLE4(bytes5) {
  if (!u8a8(bytes5))
    throw new Error("Uint8Array expected");
  return hexToNumber14(bytesToHex4(Uint8Array.from(bytes5).reverse()));
}
function numberToBytesBE4(n, len) {
  return hexToBytes4(n.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE4(n, len) {
  return numberToBytesBE4(n, len).reverse();
}
function numberToVarBytesBE4(n) {
  return hexToBytes4(numberToHexUnpadded4(n));
}
function ensureBytes4(title, hex11, expectedLength) {
  let res;
  if (typeof hex11 === "string") {
    try {
      res = hexToBytes4(hex11);
    } catch (e) {
      throw new Error(`${title} must be valid hex string, got "${hex11}". Cause: ${e}`);
    }
  } else if (u8a8(hex11)) {
    res = Uint8Array.from(hex11);
  } else {
    throw new Error(`${title} must be hex string or Uint8Array`);
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
  return res;
}
function concatBytes8(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a8(a))
      throw new Error("Uint8Array expected");
    r.set(a, pad);
    pad += a.length;
  });
  return r;
}
function equalBytes4(b1, b2) {
  if (b1.length !== b2.length)
    return false;
  for (let i = 0; i < b1.length; i++)
    if (b1[i] !== b2[i])
      return false;
  return true;
}
function utf8ToBytes8(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function bitLen4(n) {
  let len;
  for (len = 0; n > _0n39; n >>= _1n39, len += 1)
    ;
  return len;
}
function bitGet4(n, pos) {
  return n >> BigInt(pos) & _1n39;
}
var bitSet4 = (n, pos, value) => {
  return n | (value ? _1n39 : _0n39) << BigInt(pos);
};
var bitMask4 = (n) => (_2n32 << BigInt(n - 1)) - _1n39;
var u8n4 = (data) => new Uint8Array(data);
var u8fr4 = (arr) => Uint8Array.from(arr);
function createHmacDrbg4(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  let v = u8n4(hashLen);
  let k = u8n4(hashLen);
  let i = 0;
  const reset = () => {
    v.fill(1);
    k.fill(0);
    i = 0;
  };
  const h = (...b) => hmacFn(k, v, ...b);
  const reseed = (seed = u8n4()) => {
    k = h(u8fr4([0]), seed);
    v = h();
    if (seed.length === 0)
      return;
    k = h(u8fr4([1]), seed);
    v = h();
  };
  const gen5 = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v = h();
      const sl = v.slice();
      out.push(sl);
      len += v.length;
    }
    return concatBytes8(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = void 0;
    while (!(res = pred(gen5())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
var validatorFns4 = {
  bigint: (val) => typeof val === "bigint",
  function: (val) => typeof val === "function",
  boolean: (val) => typeof val === "boolean",
  string: (val) => typeof val === "string",
  isSafeInteger: (val) => Number.isSafeInteger(val),
  array: (val) => Array.isArray(val),
  field: (val, object) => object.Fp.isValid(val),
  hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
function validateObject4(object, validators2, optValidators = {}) {
  const checkField = (fieldName, type, isOptional) => {
    const checkVal = validatorFns4[type];
    if (typeof checkVal !== "function")
      throw new Error(`Invalid validator "${type}", expected function`);
    const val = object[fieldName];
    if (isOptional && val === void 0)
      return;
    if (!checkVal(val, object)) {
      throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
    }
  };
  for (const [fieldName, type] of Object.entries(validators2))
    checkField(fieldName, type, false);
  for (const [fieldName, type] of Object.entries(optValidators))
    checkField(fieldName, type, true);
  return object;
}

// node_modules/@noble/curves/esm/abstract/modular.js
var _0n40 = BigInt(0);
var _1n40 = BigInt(1);
var _2n33 = BigInt(2);
var _3n17 = BigInt(3);
var _4n17 = BigInt(4);
var _5n17 = BigInt(5);
var _8n17 = BigInt(8);
var _9n14 = BigInt(9);
var _16n7 = BigInt(16);
function mod4(a, b) {
  const result = a % b;
  return result >= _0n40 ? result : b + result;
}
function pow5(num, power, modulo) {
  if (modulo <= _0n40 || power < _0n40)
    throw new Error("Expected power/modulo > 0");
  if (modulo === _1n40)
    return _0n40;
  let res = _1n40;
  while (power > _0n40) {
    if (power & _1n40)
      res = res * num % modulo;
    num = num * num % modulo;
    power >>= _1n40;
  }
  return res;
}
function pow24(x, power, modulo) {
  let res = x;
  while (power-- > _0n40) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert4(number5, modulo) {
  if (number5 === _0n40 || modulo <= _0n40) {
    throw new Error(`invert: expected positive integers, got n=${number5} mod=${modulo}`);
  }
  let a = mod4(number5, modulo);
  let b = modulo;
  let x = _0n40, y = _1n40, u = _1n40, v = _0n40;
  while (a !== _0n40) {
    const q = b / a;
    const r = b % a;
    const m = x - u * q;
    const n = y - v * q;
    b = a, a = r, x = u, y = v, u = m, v = n;
  }
  const gcd5 = b;
  if (gcd5 !== _1n40)
    throw new Error("invert: does not exist");
  return mod4(x, modulo);
}
function tonelliShanks4(P) {
  const legendreC = (P - _1n40) / _2n33;
  let Q, S, Z;
  for (Q = P - _1n40, S = 0; Q % _2n33 === _0n40; Q /= _2n33, S++)
    ;
  for (Z = _2n33; Z < P && pow5(Z, legendreC, P) !== P - _1n40; Z++)
    ;
  if (S === 1) {
    const p1div4 = (P + _1n40) / _4n17;
    return function tonelliFast(Fp9, n) {
      const root = Fp9.pow(n, p1div4);
      if (!Fp9.eql(Fp9.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  const Q1div2 = (Q + _1n40) / _2n33;
  return function tonelliSlow(Fp9, n) {
    if (Fp9.pow(n, legendreC) === Fp9.neg(Fp9.ONE))
      throw new Error("Cannot find square root");
    let r = S;
    let g = Fp9.pow(Fp9.mul(Fp9.ONE, Z), Q);
    let x = Fp9.pow(n, Q1div2);
    let b = Fp9.pow(n, Q);
    while (!Fp9.eql(b, Fp9.ONE)) {
      if (Fp9.eql(b, Fp9.ZERO))
        return Fp9.ZERO;
      let m = 1;
      for (let t2 = Fp9.sqr(b); m < r; m++) {
        if (Fp9.eql(t2, Fp9.ONE))
          break;
        t2 = Fp9.sqr(t2);
      }
      const ge5 = Fp9.pow(g, _1n40 << BigInt(r - m - 1));
      g = Fp9.sqr(ge5);
      x = Fp9.mul(x, ge5);
      b = Fp9.mul(b, g);
      r = m;
    }
    return x;
  };
}
function FpSqrt4(P) {
  if (P % _4n17 === _3n17) {
    const p1div4 = (P + _1n40) / _4n17;
    return function sqrt3mod4(Fp9, n) {
      const root = Fp9.pow(n, p1div4);
      if (!Fp9.eql(Fp9.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _8n17 === _5n17) {
    const c1 = (P - _5n17) / _8n17;
    return function sqrt5mod8(Fp9, n) {
      const n2 = Fp9.mul(n, _2n33);
      const v = Fp9.pow(n2, c1);
      const nv = Fp9.mul(n, v);
      const i = Fp9.mul(Fp9.mul(nv, _2n33), v);
      const root = Fp9.mul(nv, Fp9.sub(i, Fp9.ONE));
      if (!Fp9.eql(Fp9.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _16n7 === _9n14) {
  }
  return tonelliShanks4(P);
}
var isNegativeLE4 = (num, modulo) => (mod4(num, modulo) & _1n40) === _1n40;
var FIELD_FIELDS4 = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField4(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  };
  const opts = FIELD_FIELDS4.reduce((map2, val) => {
    map2[val] = "function";
    return map2;
  }, initial);
  return validateObject4(field, opts);
}
function FpPow4(f, num, power) {
  if (power < _0n40)
    throw new Error("Expected power > 0");
  if (power === _0n40)
    return f.ONE;
  if (power === _1n40)
    return num;
  let p = f.ONE;
  let d = num;
  while (power > _0n40) {
    if (power & _1n40)
      p = f.mul(p, d);
    d = f.sqr(d);
    power >>= _1n40;
  }
  return p;
}
function FpInvertBatch4(f, nums) {
  const tmp = new Array(nums.length);
  const lastMultiplied = nums.reduce((acc, num, i) => {
    if (f.is0(num))
      return acc;
    tmp[i] = acc;
    return f.mul(acc, num);
  }, f.ONE);
  const inverted = f.inv(lastMultiplied);
  nums.reduceRight((acc, num, i) => {
    if (f.is0(num))
      return acc;
    tmp[i] = f.mul(acc, tmp[i]);
    return f.mul(acc, num);
  }, inverted);
  return tmp;
}
function nLength4(n, nBitLength) {
  const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field4(ORDER, bitLen5, isLE5 = false, redef = {}) {
  if (ORDER <= _0n40)
    throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);
  const { nBitLength: BITS, nByteLength: BYTES } = nLength4(ORDER, bitLen5);
  if (BYTES > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const sqrtP = FpSqrt4(ORDER);
  const f = Object.freeze({
    ORDER,
    BITS,
    BYTES,
    MASK: bitMask4(BITS),
    ZERO: _0n40,
    ONE: _1n40,
    create: (num) => mod4(num, ORDER),
    isValid: (num) => {
      if (typeof num !== "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
      return _0n40 <= num && num < ORDER;
    },
    is0: (num) => num === _0n40,
    isOdd: (num) => (num & _1n40) === _1n40,
    neg: (num) => mod4(-num, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num) => mod4(num * num, ORDER),
    add: (lhs, rhs) => mod4(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod4(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod4(lhs * rhs, ORDER),
    pow: (num, power) => FpPow4(f, num, power),
    div: (lhs, rhs) => mod4(lhs * invert4(rhs, ORDER), ORDER),
    // Same as above, but doesn't normalize
    sqrN: (num) => num * num,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num) => invert4(num, ORDER),
    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
    invertBatch: (lst) => FpInvertBatch4(f, lst),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (a, b, c) => c ? b : a,
    toBytes: (num) => isLE5 ? numberToBytesLE4(num, BYTES) : numberToBytesBE4(num, BYTES),
    fromBytes: (bytes5) => {
      if (bytes5.length !== BYTES)
        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes5.length}`);
      return isLE5 ? bytesToNumberLE4(bytes5) : bytesToNumberBE4(bytes5);
    }
  });
  return Object.freeze(f);
}
function FpSqrtEven4(Fp9, elm) {
  if (!Fp9.isOdd)
    throw new Error(`Field doesn't have isOdd`);
  const root = Fp9.sqrt(elm);
  return Fp9.isOdd(root) ? Fp9.neg(root) : root;
}
function hashToPrivateScalar(hash5, groupOrder, isLE5 = false) {
  hash5 = ensureBytes4("privateHash", hash5);
  const hashLen = hash5.length;
  const minLen = nLength4(groupOrder).nByteLength + 8;
  if (minLen < 24 || hashLen < minLen || hashLen > 1024)
    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
  const num = isLE5 ? bytesToNumberLE4(hash5) : bytesToNumberBE4(hash5);
  return mod4(num, groupOrder - _1n40) + _1n40;
}

// node_modules/@noble/curves/esm/abstract/weierstrass.js
init_shim();

// node_modules/@noble/curves/esm/abstract/curve.js
init_shim();
var _0n41 = BigInt(0);
var _1n41 = BigInt(1);
function wNAF4(c, bits) {
  const constTimeNegate = (condition, item) => {
    const neg = item.negate();
    return condition ? neg : item;
  };
  const opts = (W) => {
    const windows = Math.ceil(bits / W) + 1;
    const windowSize = 2 ** (W - 1);
    return { windows, windowSize };
  };
  return {
    constTimeNegate,
    // non-const time multiplication ladder
    unsafeLadder(elm, n) {
      let p = c.ZERO;
      let d = elm;
      while (n > _0n41) {
        if (n & _1n41)
          p = p.add(d);
        d = d.double();
        n >>= _1n41;
      }
      return p;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(elm, W) {
      const { windows, windowSize } = opts(W);
      const points = [];
      let p = elm;
      let base = p;
      for (let window3 = 0; window3 < windows; window3++) {
        base = p;
        points.push(base);
        for (let i = 1; i < windowSize; i++) {
          base = base.add(p);
          points.push(base);
        }
        p = base.double();
      }
      return points;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(W, precomputes, n) {
      const { windows, windowSize } = opts(W);
      let p = c.ZERO;
      let f = c.BASE;
      const mask = BigInt(2 ** W - 1);
      const maxNumber = 2 ** W;
      const shiftBy = BigInt(W);
      for (let window3 = 0; window3 < windows; window3++) {
        const offset = window3 * windowSize;
        let wbits = Number(n & mask);
        n >>= shiftBy;
        if (wbits > windowSize) {
          wbits -= maxNumber;
          n += _1n41;
        }
        const offset1 = offset;
        const offset2 = offset + Math.abs(wbits) - 1;
        const cond1 = window3 % 2 !== 0;
        const cond2 = wbits < 0;
        if (wbits === 0) {
          f = f.add(constTimeNegate(cond1, precomputes[offset1]));
        } else {
          p = p.add(constTimeNegate(cond2, precomputes[offset2]));
        }
      }
      return { p, f };
    },
    wNAFCached(P, precomputesMap, n, transform) {
      const W = P._WINDOW_SIZE || 1;
      let comp = precomputesMap.get(P);
      if (!comp) {
        comp = this.precomputeWindow(P, W);
        if (W !== 1) {
          precomputesMap.set(P, transform(comp));
        }
      }
      return this.wNAF(W, comp, n);
    }
  };
}
function validateBasic4(curve) {
  validateField4(curve.Fp);
  validateObject4(curve, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  });
  return Object.freeze({
    ...nLength4(curve.n, curve.nBitLength),
    ...curve,
    ...{ p: curve.Fp.ORDER }
  });
}

// node_modules/@noble/curves/esm/abstract/weierstrass.js
function validatePointOpts4(curve) {
  const opts = validateBasic4(curve);
  validateObject4(opts, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo, Fp: Fp9, a } = opts;
  if (endo) {
    if (!Fp9.eql(a, Fp9.ZERO)) {
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    }
    if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
    }
  }
  return Object.freeze({ ...opts });
}
var { bytesToNumberBE: b2n4, hexToBytes: h2b4 } = utils_exports4;
var DER4 = {
  // asn.1 DER encoding utils
  Err: class DERErr4 extends Error {
    constructor(m = "") {
      super(m);
    }
  },
  _parseInt(data) {
    const { Err: E } = DER4;
    if (data.length < 2 || data[0] !== 2)
      throw new E("Invalid signature integer tag");
    const len = data[1];
    const res = data.subarray(2, len + 2);
    if (!len || res.length !== len)
      throw new E("Invalid signature integer: wrong length");
    if (res[0] & 128)
      throw new E("Invalid signature integer: negative");
    if (res[0] === 0 && !(res[1] & 128))
      throw new E("Invalid signature integer: unnecessary leading zero");
    return { d: b2n4(res), l: data.subarray(len + 2) };
  },
  toSig(hex11) {
    const { Err: E } = DER4;
    const data = typeof hex11 === "string" ? h2b4(hex11) : hex11;
    if (!(data instanceof Uint8Array))
      throw new Error("ui8a expected");
    let l19 = data.length;
    if (l19 < 2 || data[0] != 48)
      throw new E("Invalid signature tag");
    if (data[1] !== l19 - 2)
      throw new E("Invalid signature: incorrect length");
    const { d: r, l: sBytes } = DER4._parseInt(data.subarray(2));
    const { d: s, l: rBytesLeft } = DER4._parseInt(sBytes);
    if (rBytesLeft.length)
      throw new E("Invalid signature: left bytes after parsing");
    return { r, s };
  },
  hexFromSig(sig2) {
    const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
    const h = (num) => {
      const hex11 = num.toString(16);
      return hex11.length & 1 ? `0${hex11}` : hex11;
    };
    const s = slice(h(sig2.s));
    const r = slice(h(sig2.r));
    const shl = s.length / 2;
    const rhl = r.length / 2;
    const sl = h(shl);
    const rl = h(rhl);
    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
  }
};
var _0n42 = BigInt(0);
var _1n42 = BigInt(1);
var _2n34 = BigInt(2);
var _3n18 = BigInt(3);
var _4n18 = BigInt(4);
function weierstrassPoints4(opts) {
  const CURVE = validatePointOpts4(opts);
  const { Fp: Fp9 } = CURVE;
  const toBytes5 = CURVE.toBytes || ((c, point, isCompressed) => {
    const a = point.toAffine();
    return concatBytes8(Uint8Array.from([4]), Fp9.toBytes(a.x), Fp9.toBytes(a.y));
  });
  const fromBytes = CURVE.fromBytes || ((bytes5) => {
    const tail = bytes5.subarray(1);
    const x = Fp9.fromBytes(tail.subarray(0, Fp9.BYTES));
    const y = Fp9.fromBytes(tail.subarray(Fp9.BYTES, 2 * Fp9.BYTES));
    return { x, y };
  });
  function weierstrassEquation(x) {
    const { a, b } = CURVE;
    const x2 = Fp9.sqr(x);
    const x3 = Fp9.mul(x2, x);
    return Fp9.add(Fp9.add(x3, Fp9.mul(x, a)), b);
  }
  if (!Fp9.eql(Fp9.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
    throw new Error("bad generator point: equation left != right");
  function isWithinCurveOrder(num) {
    return typeof num === "bigint" && _0n42 < num && num < CURVE.n;
  }
  function assertGE(num) {
    if (!isWithinCurveOrder(num))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function normPrivateKeyToScalar(key) {
    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
    if (lengths && typeof key !== "bigint") {
      if (key instanceof Uint8Array)
        key = bytesToHex4(key);
      if (typeof key !== "string" || !lengths.includes(key.length))
        throw new Error("Invalid key");
      key = key.padStart(nByteLength * 2, "0");
    }
    let num;
    try {
      num = typeof key === "bigint" ? key : bytesToNumberBE4(ensureBytes4("private key", key, nByteLength));
    } catch (error) {
      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
    }
    if (wrapPrivateKey)
      num = mod4(num, n);
    assertGE(num);
    return num;
  }
  const pointPrecomputes = /* @__PURE__ */ new Map();
  function assertPrjPoint(other) {
    if (!(other instanceof Point5))
      throw new Error("ProjectivePoint expected");
  }
  class Point5 {
    constructor(px, py, pz) {
      this.px = px;
      this.py = py;
      this.pz = pz;
      if (px == null || !Fp9.isValid(px))
        throw new Error("x required");
      if (py == null || !Fp9.isValid(py))
        throw new Error("y required");
      if (pz == null || !Fp9.isValid(pz))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(p) {
      const { x, y } = p || {};
      if (!p || !Fp9.isValid(x) || !Fp9.isValid(y))
        throw new Error("invalid affine point");
      if (p instanceof Point5)
        throw new Error("projective point not allowed");
      const is0 = (i) => Fp9.eql(i, Fp9.ZERO);
      if (is0(x) && is0(y))
        return Point5.ZERO;
      return new Point5(x, y, Fp9.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(points) {
      const toInv = Fp9.invertBatch(points.map((p) => p.pz));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point5.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(hex11) {
      const P = Point5.fromAffine(fromBytes(ensureBytes4("pointHex", hex11)));
      P.assertValidity();
      return P;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(privateKey) {
      return Point5.BASE.multiply(normPrivateKeyToScalar(privateKey));
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (CURVE.allowInfinityPoint)
          return;
        throw new Error("bad point: ZERO");
      }
      const { x, y } = this.toAffine();
      if (!Fp9.isValid(x) || !Fp9.isValid(y))
        throw new Error("bad point: x or y not FE");
      const left = Fp9.sqr(y);
      const right = weierstrassEquation(x);
      if (!Fp9.eql(left, right))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y } = this.toAffine();
      if (Fp9.isOdd)
        return !Fp9.isOdd(y);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      const U1 = Fp9.eql(Fp9.mul(X1, Z2), Fp9.mul(X2, Z1));
      const U2 = Fp9.eql(Fp9.mul(Y1, Z2), Fp9.mul(Y2, Z1));
      return U1 && U2;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new Point5(this.px, Fp9.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a, b } = CURVE;
      const b3 = Fp9.mul(b, _3n18);
      const { px: X1, py: Y1, pz: Z1 } = this;
      let X3 = Fp9.ZERO, Y3 = Fp9.ZERO, Z3 = Fp9.ZERO;
      let t0 = Fp9.mul(X1, X1);
      let t1 = Fp9.mul(Y1, Y1);
      let t2 = Fp9.mul(Z1, Z1);
      let t3 = Fp9.mul(X1, Y1);
      t3 = Fp9.add(t3, t3);
      Z3 = Fp9.mul(X1, Z1);
      Z3 = Fp9.add(Z3, Z3);
      X3 = Fp9.mul(a, Z3);
      Y3 = Fp9.mul(b3, t2);
      Y3 = Fp9.add(X3, Y3);
      X3 = Fp9.sub(t1, Y3);
      Y3 = Fp9.add(t1, Y3);
      Y3 = Fp9.mul(X3, Y3);
      X3 = Fp9.mul(t3, X3);
      Z3 = Fp9.mul(b3, Z3);
      t2 = Fp9.mul(a, t2);
      t3 = Fp9.sub(t0, t2);
      t3 = Fp9.mul(a, t3);
      t3 = Fp9.add(t3, Z3);
      Z3 = Fp9.add(t0, t0);
      t0 = Fp9.add(Z3, t0);
      t0 = Fp9.add(t0, t2);
      t0 = Fp9.mul(t0, t3);
      Y3 = Fp9.add(Y3, t0);
      t2 = Fp9.mul(Y1, Z1);
      t2 = Fp9.add(t2, t2);
      t0 = Fp9.mul(t2, t3);
      X3 = Fp9.sub(X3, t0);
      Z3 = Fp9.mul(t2, t1);
      Z3 = Fp9.add(Z3, Z3);
      Z3 = Fp9.add(Z3, Z3);
      return new Point5(X3, Y3, Z3);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      let X3 = Fp9.ZERO, Y3 = Fp9.ZERO, Z3 = Fp9.ZERO;
      const a = CURVE.a;
      const b3 = Fp9.mul(CURVE.b, _3n18);
      let t0 = Fp9.mul(X1, X2);
      let t1 = Fp9.mul(Y1, Y2);
      let t2 = Fp9.mul(Z1, Z2);
      let t3 = Fp9.add(X1, Y1);
      let t4 = Fp9.add(X2, Y2);
      t3 = Fp9.mul(t3, t4);
      t4 = Fp9.add(t0, t1);
      t3 = Fp9.sub(t3, t4);
      t4 = Fp9.add(X1, Z1);
      let t5 = Fp9.add(X2, Z2);
      t4 = Fp9.mul(t4, t5);
      t5 = Fp9.add(t0, t2);
      t4 = Fp9.sub(t4, t5);
      t5 = Fp9.add(Y1, Z1);
      X3 = Fp9.add(Y2, Z2);
      t5 = Fp9.mul(t5, X3);
      X3 = Fp9.add(t1, t2);
      t5 = Fp9.sub(t5, X3);
      Z3 = Fp9.mul(a, t4);
      X3 = Fp9.mul(b3, t2);
      Z3 = Fp9.add(X3, Z3);
      X3 = Fp9.sub(t1, Z3);
      Z3 = Fp9.add(t1, Z3);
      Y3 = Fp9.mul(X3, Z3);
      t1 = Fp9.add(t0, t0);
      t1 = Fp9.add(t1, t0);
      t2 = Fp9.mul(a, t2);
      t4 = Fp9.mul(b3, t4);
      t1 = Fp9.add(t1, t2);
      t2 = Fp9.sub(t0, t2);
      t2 = Fp9.mul(a, t2);
      t4 = Fp9.add(t4, t2);
      t0 = Fp9.mul(t1, t4);
      Y3 = Fp9.add(Y3, t0);
      t0 = Fp9.mul(t5, t4);
      X3 = Fp9.mul(t3, X3);
      X3 = Fp9.sub(X3, t0);
      t0 = Fp9.mul(t3, t1);
      Z3 = Fp9.mul(t5, Z3);
      Z3 = Fp9.add(Z3, t0);
      return new Point5(X3, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point5.ZERO);
    }
    wNAF(n) {
      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
        const toInv = Fp9.invertBatch(comp.map((p) => p.pz));
        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point5.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(n) {
      const I = Point5.ZERO;
      if (n === _0n42)
        return I;
      assertGE(n);
      if (n === _1n42)
        return this;
      const { endo } = CURVE;
      if (!endo)
        return wnaf.unsafeLadder(this, n);
      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
      let k1p = I;
      let k2p = I;
      let d = this;
      while (k1 > _0n42 || k2 > _0n42) {
        if (k1 & _1n42)
          k1p = k1p.add(d);
        if (k2 & _1n42)
          k2p = k2p.add(d);
        d = d.double();
        k1 >>= _1n42;
        k2 >>= _1n42;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new Point5(Fp9.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
      return k1p.add(k2p);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(scalar) {
      assertGE(scalar);
      let n = scalar;
      let point, fake;
      const { endo } = CURVE;
      if (endo) {
        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
        let { p: k1p, f: f1p } = this.wNAF(k1);
        let { p: k2p, f: f2p } = this.wNAF(k2);
        k1p = wnaf.constTimeNegate(k1neg, k1p);
        k2p = wnaf.constTimeNegate(k2neg, k2p);
        k2p = new Point5(Fp9.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p, f } = this.wNAF(n);
        point = p;
        fake = f;
      }
      return Point5.normalizeZ([point, fake])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(Q, a, b) {
      const G = Point5.BASE;
      const mul = (P, a2) => a2 === _0n42 || a2 === _1n42 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
      const sum = mul(this, a).add(mul(Q, b));
      return sum.is0() ? void 0 : sum;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(iz) {
      const { px: x, py: y, pz: z } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? Fp9.ONE : Fp9.inv(z);
      const ax = Fp9.mul(x, iz);
      const ay = Fp9.mul(y, iz);
      const zz = Fp9.mul(z, iz);
      if (is0)
        return { x: Fp9.ZERO, y: Fp9.ZERO };
      if (!Fp9.eql(zz, Fp9.ONE))
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    isTorsionFree() {
      const { h: cofactor, isTorsionFree } = CURVE;
      if (cofactor === _1n42)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point5, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: cofactor, clearCofactor } = CURVE;
      if (cofactor === _1n42)
        return this;
      if (clearCofactor)
        return clearCofactor(Point5, this);
      return this.multiplyUnsafe(CURVE.h);
    }
    toRawBytes(isCompressed = true) {
      this.assertValidity();
      return toBytes5(Point5, this, isCompressed);
    }
    toHex(isCompressed = true) {
      return bytesToHex4(this.toRawBytes(isCompressed));
    }
  }
  Point5.BASE = new Point5(CURVE.Gx, CURVE.Gy, Fp9.ONE);
  Point5.ZERO = new Point5(Fp9.ZERO, Fp9.ONE, Fp9.ZERO);
  const _bits = CURVE.nBitLength;
  const wnaf = wNAF4(Point5, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
  return {
    CURVE,
    ProjectivePoint: Point5,
    normPrivateKeyToScalar,
    weierstrassEquation,
    isWithinCurveOrder
  };
}
function validateOpts10(curve) {
  const opts = validateBasic4(curve);
  validateObject4(opts, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  });
  return Object.freeze({ lowS: true, ...opts });
}
function weierstrass4(curveDef) {
  const CURVE = validateOpts10(curveDef);
  const { Fp: Fp9, n: CURVE_ORDER } = CURVE;
  const compressedLen = Fp9.BYTES + 1;
  const uncompressedLen = 2 * Fp9.BYTES + 1;
  function isValidFieldElement(num) {
    return _0n42 < num && num < Fp9.ORDER;
  }
  function modN5(a) {
    return mod4(a, CURVE_ORDER);
  }
  function invN(a) {
    return invert4(a, CURVE_ORDER);
  }
  const { ProjectivePoint: Point5, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints4({
    ...CURVE,
    toBytes(c, point, isCompressed) {
      const a = point.toAffine();
      const x = Fp9.toBytes(a.x);
      const cat = concatBytes8;
      if (isCompressed) {
        return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
      } else {
        return cat(Uint8Array.from([4]), x, Fp9.toBytes(a.y));
      }
    },
    fromBytes(bytes5) {
      const len = bytes5.length;
      const head = bytes5[0];
      const tail = bytes5.subarray(1);
      if (len === compressedLen && (head === 2 || head === 3)) {
        const x = bytesToNumberBE4(tail);
        if (!isValidFieldElement(x))
          throw new Error("Point is not on curve");
        const y2 = weierstrassEquation(x);
        let y = Fp9.sqrt(y2);
        const isYOdd = (y & _1n42) === _1n42;
        const isHeadOdd = (head & 1) === 1;
        if (isHeadOdd !== isYOdd)
          y = Fp9.neg(y);
        return { x, y };
      } else if (len === uncompressedLen && head === 4) {
        const x = Fp9.fromBytes(tail.subarray(0, Fp9.BYTES));
        const y = Fp9.fromBytes(tail.subarray(Fp9.BYTES, 2 * Fp9.BYTES));
        return { x, y };
      } else {
        throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
      }
    }
  });
  const numToNByteStr = (num) => bytesToHex4(numberToBytesBE4(num, CURVE.nByteLength));
  function isBiggerThanHalfOrder(number5) {
    const HALF = CURVE_ORDER >> _1n42;
    return number5 > HALF;
  }
  function normalizeS(s) {
    return isBiggerThanHalfOrder(s) ? modN5(-s) : s;
  }
  const slcNum = (b, from2, to) => bytesToNumberBE4(b.slice(from2, to));
  class Signature {
    constructor(r, s, recovery) {
      this.r = r;
      this.s = s;
      this.recovery = recovery;
      this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(hex11) {
      const l19 = CURVE.nByteLength;
      hex11 = ensureBytes4("compactSignature", hex11, l19 * 2);
      return new Signature(slcNum(hex11, 0, l19), slcNum(hex11, l19, 2 * l19));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(hex11) {
      const { r, s } = DER4.toSig(ensureBytes4("DER", hex11));
      return new Signature(r, s);
    }
    assertValidity() {
      if (!isWithinCurveOrder(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!isWithinCurveOrder(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(recovery) {
      return new Signature(this.r, this.s, recovery);
    }
    recoverPublicKey(msgHash) {
      const { r, s, recovery: rec } = this;
      const h = bits2int_modN(ensureBytes4("msgHash", msgHash));
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
      if (radj >= Fp9.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const prefix2 = (rec & 1) === 0 ? "02" : "03";
      const R = Point5.fromHex(prefix2 + numToNByteStr(radj));
      const ir = invN(radj);
      const u1 = modN5(-h * ir);
      const u2 = modN5(s * ir);
      const Q = Point5.BASE.multiplyAndAddUnsafe(R, u1, u2);
      if (!Q)
        throw new Error("point at infinify");
      Q.assertValidity();
      return Q;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, modN5(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes4(this.toDERHex());
    }
    toDERHex() {
      return DER4.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes4(this.toCompactHex());
    }
    toCompactHex() {
      return numToNByteStr(this.r) + numToNByteStr(this.s);
    }
  }
  const utils5 = {
    isValidPrivateKey(privateKey) {
      try {
        normPrivateKeyToScalar(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    normPrivateKeyToScalar,
    /**
     * Produces cryptographically secure private key from random of size (nBitLength+64)
     * as per FIPS 186 B.4.1 with modulo bias being neglible.
     */
    randomPrivateKey: () => {
      const rand = CURVE.randomBytes(Fp9.BYTES + 8);
      const num = hashToPrivateScalar(rand, CURVE_ORDER);
      return numberToBytesBE4(num, CURVE.nByteLength);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(windowSize = 8, point = Point5.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  function getPublicKey(privateKey, isCompressed = true) {
    return Point5.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    const arr = item instanceof Uint8Array;
    const str = typeof item === "string";
    const len = (arr || str) && item.length;
    if (arr)
      return len === compressedLen || len === uncompressedLen;
    if (str)
      return len === 2 * compressedLen || len === 2 * uncompressedLen;
    if (item instanceof Point5)
      return true;
    return false;
  }
  function getSharedSecret(privateA, publicB, isCompressed = true) {
    if (isProbPub(privateA))
      throw new Error("first arg must be private key");
    if (!isProbPub(publicB))
      throw new Error("second arg must be public key");
    const b = Point5.fromHex(publicB);
    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
  }
  const bits2int = CURVE.bits2int || function(bytes5) {
    const num = bytesToNumberBE4(bytes5);
    const delta = bytes5.length * 8 - CURVE.nBitLength;
    return delta > 0 ? num >> BigInt(delta) : num;
  };
  const bits2int_modN = CURVE.bits2int_modN || function(bytes5) {
    return modN5(bits2int(bytes5));
  };
  const ORDER_MASK = bitMask4(CURVE.nBitLength);
  function int2octets(num) {
    if (typeof num !== "bigint")
      throw new Error("bigint expected");
    if (!(_0n42 <= num && num < ORDER_MASK))
      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
    return numberToBytesBE4(num, CURVE.nByteLength);
  }
  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
    if (["recovered", "canonical"].some((k) => k in opts))
      throw new Error("sign() legacy options not supported");
    const { hash: hash5, randomBytes: randomBytes5 } = CURVE;
    let { lowS, prehash, extraEntropy: ent } = opts;
    if (lowS == null)
      lowS = true;
    msgHash = ensureBytes4("msgHash", msgHash);
    if (prehash)
      msgHash = ensureBytes4("prehashed msgHash", hash5(msgHash));
    const h1int = bits2int_modN(msgHash);
    const d = normPrivateKeyToScalar(privateKey);
    const seedArgs = [int2octets(d), int2octets(h1int)];
    if (ent != null) {
      const e = ent === true ? randomBytes5(Fp9.BYTES) : ent;
      seedArgs.push(ensureBytes4("extraEntropy", e, Fp9.BYTES));
    }
    const seed = concatBytes8(...seedArgs);
    const m = h1int;
    function k2sig(kBytes) {
      const k = bits2int(kBytes);
      if (!isWithinCurveOrder(k))
        return;
      const ik = invN(k);
      const q = Point5.BASE.multiply(k).toAffine();
      const r = modN5(q.x);
      if (r === _0n42)
        return;
      const s = modN5(ik * modN5(m + r * d));
      if (s === _0n42)
        return;
      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n42);
      let normS = s;
      if (lowS && isBiggerThanHalfOrder(s)) {
        normS = normalizeS(s);
        recovery ^= 1;
      }
      return new Signature(r, normS, recovery);
    }
    return { seed, k2sig };
  }
  const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
  const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
  function sign2(msgHash, privKey, opts = defaultSigOpts) {
    const { seed, k2sig } = prepSig(msgHash, privKey, opts);
    const C = CURVE;
    const drbg = createHmacDrbg4(C.hash.outputLen, C.nByteLength, C.hmac);
    return drbg(seed, k2sig);
  }
  Point5.BASE._setWindowSize(8);
  function verify(signature, msgHash, publicKey2, opts = defaultVerOpts) {
    var _a;
    const sg = signature;
    msgHash = ensureBytes4("msgHash", msgHash);
    publicKey2 = ensureBytes4("publicKey", publicKey2);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    const { lowS, prehash } = opts;
    let _sig = void 0;
    let P;
    try {
      if (typeof sg === "string" || sg instanceof Uint8Array) {
        try {
          _sig = Signature.fromDER(sg);
        } catch (derError) {
          if (!(derError instanceof DER4.Err))
            throw derError;
          _sig = Signature.fromCompact(sg);
        }
      } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
        const { r: r2, s: s2 } = sg;
        _sig = new Signature(r2, s2);
      } else {
        throw new Error("PARSE");
      }
      P = Point5.fromHex(publicKey2);
    } catch (error) {
      if (error.message === "PARSE")
        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
      return false;
    }
    if (lowS && _sig.hasHighS())
      return false;
    if (prehash)
      msgHash = CURVE.hash(msgHash);
    const { r, s } = _sig;
    const h = bits2int_modN(msgHash);
    const is = invN(s);
    const u1 = modN5(h * is);
    const u2 = modN5(r * is);
    const R = (_a = Point5.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a.toAffine();
    if (!R)
      return false;
    const v = modN5(R.x);
    return v === r;
  }
  return {
    CURVE,
    getPublicKey,
    getSharedSecret,
    sign: sign2,
    verify,
    ProjectivePoint: Point5,
    Signature,
    utils: utils5
  };
}
function SWUFpSqrtRatio4(Fp9, Z) {
  const q = Fp9.ORDER;
  let l19 = _0n42;
  for (let o = q - _1n42; o % _2n34 === _0n42; o /= _2n34)
    l19 += _1n42;
  const c1 = l19;
  const _2n_pow_c1_1 = _2n34 << c1 - _1n42 - _1n42;
  const _2n_pow_c1 = _2n_pow_c1_1 * _2n34;
  const c2 = (q - _1n42) / _2n_pow_c1;
  const c3 = (c2 - _1n42) / _2n34;
  const c4 = _2n_pow_c1 - _1n42;
  const c5 = _2n_pow_c1_1;
  const c6 = Fp9.pow(Z, c2);
  const c7 = Fp9.pow(Z, (c2 + _1n42) / _2n34);
  let sqrtRatio = (u, v) => {
    let tv1 = c6;
    let tv2 = Fp9.pow(v, c4);
    let tv3 = Fp9.sqr(tv2);
    tv3 = Fp9.mul(tv3, v);
    let tv5 = Fp9.mul(u, tv3);
    tv5 = Fp9.pow(tv5, c3);
    tv5 = Fp9.mul(tv5, tv2);
    tv2 = Fp9.mul(tv5, v);
    tv3 = Fp9.mul(tv5, u);
    let tv4 = Fp9.mul(tv3, tv2);
    tv5 = Fp9.pow(tv4, c5);
    let isQR = Fp9.eql(tv5, Fp9.ONE);
    tv2 = Fp9.mul(tv3, c7);
    tv5 = Fp9.mul(tv4, tv1);
    tv3 = Fp9.cmov(tv2, tv3, isQR);
    tv4 = Fp9.cmov(tv5, tv4, isQR);
    for (let i = c1; i > _1n42; i--) {
      let tv52 = i - _2n34;
      tv52 = _2n34 << tv52 - _1n42;
      let tvv5 = Fp9.pow(tv4, tv52);
      const e1 = Fp9.eql(tvv5, Fp9.ONE);
      tv2 = Fp9.mul(tv3, tv1);
      tv1 = Fp9.mul(tv1, tv1);
      tvv5 = Fp9.mul(tv4, tv1);
      tv3 = Fp9.cmov(tv2, tv3, e1);
      tv4 = Fp9.cmov(tvv5, tv4, e1);
    }
    return { isValid: isQR, value: tv3 };
  };
  if (Fp9.ORDER % _4n18 === _3n18) {
    const c12 = (Fp9.ORDER - _3n18) / _4n18;
    const c22 = Fp9.sqrt(Fp9.neg(Z));
    sqrtRatio = (u, v) => {
      let tv1 = Fp9.sqr(v);
      const tv2 = Fp9.mul(u, v);
      tv1 = Fp9.mul(tv1, tv2);
      let y1 = Fp9.pow(tv1, c12);
      y1 = Fp9.mul(y1, tv2);
      const y2 = Fp9.mul(y1, c22);
      const tv3 = Fp9.mul(Fp9.sqr(y1), v);
      const isQR = Fp9.eql(tv3, u);
      let y = Fp9.cmov(y2, y1, isQR);
      return { isValid: isQR, value: y };
    };
  }
  return sqrtRatio;
}
function mapToCurveSimpleSWU4(Fp9, opts) {
  validateField4(Fp9);
  if (!Fp9.isValid(opts.A) || !Fp9.isValid(opts.B) || !Fp9.isValid(opts.Z))
    throw new Error("mapToCurveSimpleSWU: invalid opts");
  const sqrtRatio = SWUFpSqrtRatio4(Fp9, opts.Z);
  if (!Fp9.isOdd)
    throw new Error("Fp.isOdd is not implemented!");
  return (u) => {
    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
    tv1 = Fp9.sqr(u);
    tv1 = Fp9.mul(tv1, opts.Z);
    tv2 = Fp9.sqr(tv1);
    tv2 = Fp9.add(tv2, tv1);
    tv3 = Fp9.add(tv2, Fp9.ONE);
    tv3 = Fp9.mul(tv3, opts.B);
    tv4 = Fp9.cmov(opts.Z, Fp9.neg(tv2), !Fp9.eql(tv2, Fp9.ZERO));
    tv4 = Fp9.mul(tv4, opts.A);
    tv2 = Fp9.sqr(tv3);
    tv6 = Fp9.sqr(tv4);
    tv5 = Fp9.mul(tv6, opts.A);
    tv2 = Fp9.add(tv2, tv5);
    tv2 = Fp9.mul(tv2, tv3);
    tv6 = Fp9.mul(tv6, tv4);
    tv5 = Fp9.mul(tv6, opts.B);
    tv2 = Fp9.add(tv2, tv5);
    x = Fp9.mul(tv1, tv3);
    const { isValid, value } = sqrtRatio(tv2, tv6);
    y = Fp9.mul(tv1, u);
    y = Fp9.mul(y, value);
    x = Fp9.cmov(x, tv3, isValid);
    y = Fp9.cmov(y, value, isValid);
    const e1 = Fp9.isOdd(u) === Fp9.isOdd(y);
    y = Fp9.cmov(Fp9.neg(y), y, e1);
    x = Fp9.div(x, tv4);
    return { x, y };
  };
}

// node_modules/@noble/curves/esm/abstract/hash-to-curve.js
init_shim();
function validateDST4(dst) {
  if (dst instanceof Uint8Array)
    return dst;
  if (typeof dst === "string")
    return utf8ToBytes8(dst);
  throw new Error("DST must be Uint8Array or string");
}
var os2ip4 = bytesToNumberBE4;
function i2osp4(value, length) {
  if (value < 0 || value >= 1 << 8 * length) {
    throw new Error(`bad I2OSP call: value=${value} length=${length}`);
  }
  const res = Array.from({ length }).fill(0);
  for (let i = length - 1; i >= 0; i--) {
    res[i] = value & 255;
    value >>>= 8;
  }
  return new Uint8Array(res);
}
function strxor4(a, b) {
  const arr = new Uint8Array(a.length);
  for (let i = 0; i < a.length; i++) {
    arr[i] = a[i] ^ b[i];
  }
  return arr;
}
function isBytes4(item) {
  if (!(item instanceof Uint8Array))
    throw new Error("Uint8Array expected");
}
function isNum4(item) {
  if (!Number.isSafeInteger(item))
    throw new Error("number expected");
}
function expand_message_xmd4(msg, DST, lenInBytes, H) {
  isBytes4(msg);
  isBytes4(DST);
  isNum4(lenInBytes);
  if (DST.length > 255)
    DST = H(concatBytes8(utf8ToBytes8("H2C-OVERSIZE-DST-"), DST));
  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
  const ell = Math.ceil(lenInBytes / b_in_bytes);
  if (ell > 255)
    throw new Error("Invalid xmd length");
  const DST_prime = concatBytes8(DST, i2osp4(DST.length, 1));
  const Z_pad = i2osp4(0, r_in_bytes);
  const l_i_b_str = i2osp4(lenInBytes, 2);
  const b = new Array(ell);
  const b_0 = H(concatBytes8(Z_pad, msg, l_i_b_str, i2osp4(0, 1), DST_prime));
  b[0] = H(concatBytes8(b_0, i2osp4(1, 1), DST_prime));
  for (let i = 1; i <= ell; i++) {
    const args = [strxor4(b_0, b[i - 1]), i2osp4(i + 1, 1), DST_prime];
    b[i] = H(concatBytes8(...args));
  }
  const pseudo_random_bytes = concatBytes8(...b);
  return pseudo_random_bytes.slice(0, lenInBytes);
}
function expand_message_xof4(msg, DST, lenInBytes, k, H) {
  isBytes4(msg);
  isBytes4(DST);
  isNum4(lenInBytes);
  if (DST.length > 255) {
    const dkLen = Math.ceil(2 * k / 8);
    DST = H.create({ dkLen }).update(utf8ToBytes8("H2C-OVERSIZE-DST-")).update(DST).digest();
  }
  if (lenInBytes > 65535 || DST.length > 255)
    throw new Error("expand_message_xof: invalid lenInBytes");
  return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp4(lenInBytes, 2)).update(DST).update(i2osp4(DST.length, 1)).digest();
}
function hash_to_field4(msg, count2, options) {
  validateObject4(options, {
    DST: "string",
    p: "bigint",
    m: "isSafeInteger",
    k: "isSafeInteger",
    hash: "hash"
  });
  const { p, k, m, hash: hash5, expand: expand3, DST: _DST } = options;
  isBytes4(msg);
  isNum4(count2);
  const DST = validateDST4(_DST);
  const log2p = p.toString(2).length;
  const L = Math.ceil((log2p + k) / 8);
  const len_in_bytes = count2 * m * L;
  let prb;
  if (expand3 === "xmd") {
    prb = expand_message_xmd4(msg, DST, len_in_bytes, hash5);
  } else if (expand3 === "xof") {
    prb = expand_message_xof4(msg, DST, len_in_bytes, k, hash5);
  } else if (expand3 === "_internal_pass") {
    prb = msg;
  } else {
    throw new Error('expand must be "xmd" or "xof"');
  }
  const u = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const e = new Array(m);
    for (let j = 0; j < m; j++) {
      const elm_offset = L * (j + i * m);
      const tv = prb.subarray(elm_offset, elm_offset + L);
      e[j] = mod4(os2ip4(tv), p);
    }
    u[i] = e;
  }
  return u;
}
function isogenyMap4(field, map2) {
  const COEFF = map2.map((i) => Array.from(i).reverse());
  return (x, y) => {
    const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
    x = field.div(xNum, xDen);
    y = field.mul(y, field.div(yNum, yDen));
    return { x, y };
  };
}
function createHasher4(Point5, mapToCurve, def) {
  if (typeof mapToCurve !== "function")
    throw new Error("mapToCurve() must be defined");
  return {
    // Encodes byte string to elliptic curve
    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3
    hashToCurve(msg, options) {
      const u = hash_to_field4(msg, 2, { ...def, DST: def.DST, ...options });
      const u0 = Point5.fromAffine(mapToCurve(u[0]));
      const u1 = Point5.fromAffine(mapToCurve(u[1]));
      const P = u0.add(u1).clearCofactor();
      P.assertValidity();
      return P;
    },
    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3
    encodeToCurve(msg, options) {
      const u = hash_to_field4(msg, 1, { ...def, DST: def.encodeDST, ...options });
      const P = Point5.fromAffine(mapToCurve(u[0])).clearCofactor();
      P.assertValidity();
      return P;
    }
  };
}

// node_modules/@noble/curves/esm/_shortw_utils.js
init_shim();

// node_modules/@noble/hashes/esm/hmac.js
init_shim();
var HMAC4 = class extends Hash4 {
  constructor(hash5, _key) {
    super();
    this.finished = false;
    this.destroyed = false;
    assert_default.hash(hash5);
    const key = toBytes4(_key);
    this.iHash = hash5.create();
    if (typeof this.iHash.update !== "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen;
    this.outputLen = this.iHash.outputLen;
    const blockLen = this.blockLen;
    const pad = new Uint8Array(blockLen);
    pad.set(key.length > blockLen ? hash5.create().update(key).digest() : key);
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54;
    this.iHash.update(pad);
    this.oHash = hash5.create();
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54 ^ 92;
    this.oHash.update(pad);
    pad.fill(0);
  }
  update(buf) {
    assert_default.exists(this);
    this.iHash.update(buf);
    return this;
  }
  digestInto(out) {
    assert_default.exists(this);
    assert_default.bytes(out, this.outputLen);
    this.finished = true;
    this.iHash.digestInto(out);
    this.oHash.update(out);
    this.oHash.digestInto(out);
    this.destroy();
  }
  digest() {
    const out = new Uint8Array(this.oHash.outputLen);
    this.digestInto(out);
    return out;
  }
  _cloneInto(to) {
    to || (to = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
    to = to;
    to.finished = finished;
    to.destroyed = destroyed;
    to.blockLen = blockLen;
    to.outputLen = outputLen;
    to.oHash = oHash._cloneInto(to.oHash);
    to.iHash = iHash._cloneInto(to.iHash);
    return to;
  }
  destroy() {
    this.destroyed = true;
    this.oHash.destroy();
    this.iHash.destroy();
  }
};
var hmac4 = (hash5, key, message) => new HMAC4(hash5, key).update(message).digest();
hmac4.create = (hash5, key) => new HMAC4(hash5, key);

// node_modules/@noble/curves/esm/_shortw_utils.js
function getHash4(hash5) {
  return {
    hash: hash5,
    hmac: (key, ...msgs) => hmac4(hash5, key, concatBytes7(...msgs)),
    randomBytes: randomBytes4
  };
}
function createCurve4(curveDef, defHash) {
  const create = (hash5) => weierstrass4({ ...curveDef, ...getHash4(hash5) });
  return Object.freeze({ ...create(defHash), create });
}

// node_modules/@noble/curves/esm/secp256k1.js
var secp256k1P4 = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
var secp256k1N4 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var _1n43 = BigInt(1);
var _2n35 = BigInt(2);
var divNearest4 = (a, b) => (a + b / _2n35) / b;
function sqrtMod4(y) {
  const P = secp256k1P4;
  const _3n19 = BigInt(3), _6n11 = BigInt(6), _11n5 = BigInt(11), _22n = BigInt(22);
  const _23n5 = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b2 = y * y * y % P;
  const b3 = b2 * b2 * y % P;
  const b6 = pow24(b3, _3n19, P) * b3 % P;
  const b9 = pow24(b6, _3n19, P) * b3 % P;
  const b11 = pow24(b9, _2n35, P) * b2 % P;
  const b22 = pow24(b11, _11n5, P) * b11 % P;
  const b44 = pow24(b22, _22n, P) * b22 % P;
  const b88 = pow24(b44, _44n, P) * b44 % P;
  const b176 = pow24(b88, _88n, P) * b88 % P;
  const b220 = pow24(b176, _44n, P) * b44 % P;
  const b223 = pow24(b220, _3n19, P) * b3 % P;
  const t1 = pow24(b223, _23n5, P) * b22 % P;
  const t2 = pow24(t1, _6n11, P) * b2 % P;
  const root = pow24(t2, _2n35, P);
  if (!Fp7.eql(Fp7.sqr(root), y))
    throw new Error("Cannot find square root");
  return root;
}
var Fp7 = Field4(secp256k1P4, void 0, void 0, { sqrt: sqrtMod4 });
var secp256k14 = createCurve4({
  a: BigInt(0),
  b: BigInt(7),
  Fp: Fp7,
  n: secp256k1N4,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: true,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (k) => {
      const n = secp256k1N4;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n43 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b2 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest4(b2 * k, n);
      const c2 = divNearest4(-b1 * k, n);
      let k1 = mod4(k - c1 * a1 - c2 * a2, n);
      let k2 = mod4(-c1 * b1 - c2 * b2, n);
      const k1neg = k1 > POW_2_128;
      const k2neg = k2 > POW_2_128;
      if (k1neg)
        k1 = n - k1;
      if (k2neg)
        k2 = n - k2;
      if (k1 > POW_2_128 || k2 > POW_2_128) {
        throw new Error("splitScalar: Endomorphism failed, k=" + k);
      }
      return { k1neg, k1, k2neg, k2 };
    }
  }
}, sha2565);
var _0n43 = BigInt(0);
var fe4 = (x) => typeof x === "bigint" && _0n43 < x && x < secp256k1P4;
var ge4 = (x) => typeof x === "bigint" && _0n43 < x && x < secp256k1N4;
var TAGGED_HASH_PREFIXES4 = {};
function taggedHash4(tag, ...messages) {
  let tagP = TAGGED_HASH_PREFIXES4[tag];
  if (tagP === void 0) {
    const tagH = sha2565(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
    tagP = concatBytes8(tagH, tagH);
    TAGGED_HASH_PREFIXES4[tag] = tagP;
  }
  return sha2565(concatBytes8(tagP, ...messages));
}
var pointToBytes4 = (point) => point.toRawBytes(true).slice(1);
var numTo32b4 = (n) => numberToBytesBE4(n, 32);
var modP4 = (x) => mod4(x, secp256k1P4);
var modN4 = (x) => mod4(x, secp256k1N4);
var Point4 = secp256k14.ProjectivePoint;
var GmulAdd4 = (Q, a, b) => Point4.BASE.multiplyAndAddUnsafe(Q, a, b);
function schnorrGetExtPubKey4(priv) {
  let d_ = secp256k14.utils.normPrivateKeyToScalar(priv);
  let p = Point4.fromPrivateKey(d_);
  const scalar = p.hasEvenY() ? d_ : modN4(-d_);
  return { scalar, bytes: pointToBytes4(p) };
}
function lift_x4(x) {
  if (!fe4(x))
    throw new Error("bad x: need 0 < x < p");
  const xx = modP4(x * x);
  const c = modP4(xx * x + BigInt(7));
  let y = sqrtMod4(c);
  if (y % _2n35 !== _0n43)
    y = modP4(-y);
  const p = new Point4(x, y, _1n43);
  p.assertValidity();
  return p;
}
function challenge4(...args) {
  return modN4(bytesToNumberBE4(taggedHash4("BIP0340/challenge", ...args)));
}
function schnorrGetPublicKey4(privateKey) {
  return schnorrGetExtPubKey4(privateKey).bytes;
}
function schnorrSign4(message, privateKey, auxRand = randomBytes4(32)) {
  const m = ensureBytes4("message", message);
  const { bytes: px, scalar: d } = schnorrGetExtPubKey4(privateKey);
  const a = ensureBytes4("auxRand", auxRand, 32);
  const t = numTo32b4(d ^ bytesToNumberBE4(taggedHash4("BIP0340/aux", a)));
  const rand = taggedHash4("BIP0340/nonce", t, px, m);
  const k_ = modN4(bytesToNumberBE4(rand));
  if (k_ === _0n43)
    throw new Error("sign failed: k is zero");
  const { bytes: rx, scalar: k } = schnorrGetExtPubKey4(k_);
  const e = challenge4(rx, px, m);
  const sig2 = new Uint8Array(64);
  sig2.set(rx, 0);
  sig2.set(numTo32b4(modN4(k + e * d)), 32);
  if (!schnorrVerify4(sig2, m, px))
    throw new Error("sign: Invalid signature produced");
  return sig2;
}
function schnorrVerify4(signature, message, publicKey2) {
  const sig2 = ensureBytes4("signature", signature, 64);
  const m = ensureBytes4("message", message);
  const pub = ensureBytes4("publicKey", publicKey2, 32);
  try {
    const P = lift_x4(bytesToNumberBE4(pub));
    const r = bytesToNumberBE4(sig2.subarray(0, 32));
    if (!fe4(r))
      return false;
    const s = bytesToNumberBE4(sig2.subarray(32, 64));
    if (!ge4(s))
      return false;
    const e = challenge4(numTo32b4(r), pointToBytes4(P), m);
    const R = GmulAdd4(P, s, modN4(-e));
    if (!R || !R.hasEvenY() || R.toAffine().x !== r)
      return false;
    return true;
  } catch (error) {
    return false;
  }
}
var schnorr4 = (() => ({
  getPublicKey: schnorrGetPublicKey4,
  sign: schnorrSign4,
  verify: schnorrVerify4,
  utils: {
    randomPrivateKey: secp256k14.utils.randomPrivateKey,
    lift_x: lift_x4,
    pointToBytes: pointToBytes4,
    numberToBytesBE: numberToBytesBE4,
    bytesToNumberBE: bytesToNumberBE4,
    taggedHash: taggedHash4,
    mod: mod4
  }
}))();
var isoMap4 = (() => isogenyMap4(Fp7, [
  // xNum
  [
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
    "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
    "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
  ],
  // xDen
  [
    "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
    "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
    "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
    "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
    "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
  ],
  // yDen
  [
    "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
    "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
    "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((i) => i.map((j) => BigInt(j)))))();
var mapSWU4 = (() => mapToCurveSimpleSWU4(Fp7, {
  A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
  B: BigInt("1771"),
  Z: Fp7.create(BigInt("-11"))
}))();
var htf7 = (() => createHasher4(secp256k14.ProjectivePoint, (scalars) => {
  const { x, y } = mapSWU4(Fp7.create(scalars[0]));
  return isoMap4(x, y);
}, {
  DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
  encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
  p: Fp7.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha2565
}))();
var hashToCurve7 = (() => htf7.hashToCurve)();
var encodeToCurve7 = (() => htf7.encodeToCurve)();

// node_modules/@polkadot/util-crypto/secp256k1/pair/fromSeed.js
function secp256k1PairFromSeed4(seed, onlyJs) {
  if (seed.length !== 32) {
    throw new Error("Expected valid 32-byte private key as a seed");
  }
  if (!hasBigInt || !onlyJs && isReady()) {
    const full = secp256k1FromSeed(seed);
    const publicKey2 = full.slice(32);
    if (u8aEmpty(publicKey2)) {
      throw new Error("Invalid publicKey generated from WASM interface");
    }
    return {
      publicKey: publicKey2,
      secretKey: full.slice(0, 32)
    };
  }
  return {
    publicKey: secp256k14.getPublicKey(seed, true),
    secretKey: seed
  };
}

// node_modules/@polkadot/util-crypto/key/hdkdDerive.js
init_shim();
function createSeedDeriveFn4(fromSeed, derive2) {
  return (keypair, { chainCode, isHard }) => {
    if (!isHard) {
      throw new Error("A soft key was found in the path and is not supported");
    }
    return fromSeed(derive2(keypair.secretKey.subarray(0, 32), chainCode));
  };
}

// node_modules/@polkadot/util-crypto/key/hdkdEcdsa.js
var keyHdkdEcdsa4 = createSeedDeriveFn4(secp256k1PairFromSeed4, secp256k1DeriveHard4);

// node_modules/@polkadot/util-crypto/key/hdkdEd25519.js
init_shim();

// node_modules/@polkadot/util-crypto/ed25519/index.js
init_shim();

// node_modules/@polkadot/util-crypto/ed25519/deriveHard.js
init_shim();
var HDKD8 = compactAddLength(stringToU8a("Ed25519HDKD"));
function ed25519DeriveHard4(seed, chainCode) {
  if (!isU8a(chainCode) || chainCode.length !== 32) {
    throw new Error("Invalid chainCode passed to derive");
  }
  return blake2AsU8a4(u8aConcat(HDKD8, seed, chainCode));
}

// node_modules/@polkadot/util-crypto/ed25519/pair/fromRandom.js
init_shim();

// node_modules/@polkadot/util-crypto/random/index.js
init_shim();

// node_modules/@polkadot/util-crypto/random/asNumber.js
init_shim();

// node_modules/@polkadot/util-crypto/random/asU8a.js
init_shim();
function randomAsU8a4(length = 32) {
  return getRandomValues2(new Uint8Array(length));
}
var randomAsHex4 = createAsHex4(randomAsU8a4);

// node_modules/@polkadot/util-crypto/random/asNumber.js
var BN_534 = new import_bn.default(9007199254740991);

// node_modules/@polkadot/util-crypto/ed25519/pair/fromSeed.js
init_shim();

// node_modules/@noble/curves/esm/ed25519.js
init_shim();

// node_modules/@noble/hashes/esm/sha512.js
init_shim();
var [SHA512_Kh4, SHA512_Kl4] = u64_default4.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n) => BigInt(n)));
var SHA512_W_H4 = new Uint32Array(80);
var SHA512_W_L4 = new Uint32Array(80);
var SHA5124 = class extends SHA24 {
  constructor() {
    super(128, 64, 16, false);
    this.Ah = 1779033703 | 0;
    this.Al = 4089235720 | 0;
    this.Bh = 3144134277 | 0;
    this.Bl = 2227873595 | 0;
    this.Ch = 1013904242 | 0;
    this.Cl = 4271175723 | 0;
    this.Dh = 2773480762 | 0;
    this.Dl = 1595750129 | 0;
    this.Eh = 1359893119 | 0;
    this.El = 2917565137 | 0;
    this.Fh = 2600822924 | 0;
    this.Fl = 725511199 | 0;
    this.Gh = 528734635 | 0;
    this.Gl = 4215389547 | 0;
    this.Hh = 1541459225 | 0;
    this.Hl = 327033209 | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4) {
      SHA512_W_H4[i] = view.getUint32(offset);
      SHA512_W_L4[i] = view.getUint32(offset += 4);
    }
    for (let i = 16; i < 80; i++) {
      const W15h = SHA512_W_H4[i - 15] | 0;
      const W15l = SHA512_W_L4[i - 15] | 0;
      const s0h = u64_default4.rotrSH(W15h, W15l, 1) ^ u64_default4.rotrSH(W15h, W15l, 8) ^ u64_default4.shrSH(W15h, W15l, 7);
      const s0l = u64_default4.rotrSL(W15h, W15l, 1) ^ u64_default4.rotrSL(W15h, W15l, 8) ^ u64_default4.shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H4[i - 2] | 0;
      const W2l = SHA512_W_L4[i - 2] | 0;
      const s1h = u64_default4.rotrSH(W2h, W2l, 19) ^ u64_default4.rotrBH(W2h, W2l, 61) ^ u64_default4.shrSH(W2h, W2l, 6);
      const s1l = u64_default4.rotrSL(W2h, W2l, 19) ^ u64_default4.rotrBL(W2h, W2l, 61) ^ u64_default4.shrSL(W2h, W2l, 6);
      const SUMl = u64_default4.add4L(s0l, s1l, SHA512_W_L4[i - 7], SHA512_W_L4[i - 16]);
      const SUMh = u64_default4.add4H(SUMl, s0h, s1h, SHA512_W_H4[i - 7], SHA512_W_H4[i - 16]);
      SHA512_W_H4[i] = SUMh | 0;
      SHA512_W_L4[i] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i = 0; i < 80; i++) {
      const sigma1h = u64_default4.rotrSH(Eh, El, 14) ^ u64_default4.rotrSH(Eh, El, 18) ^ u64_default4.rotrBH(Eh, El, 41);
      const sigma1l = u64_default4.rotrSL(Eh, El, 14) ^ u64_default4.rotrSL(Eh, El, 18) ^ u64_default4.rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = u64_default4.add5L(Hl, sigma1l, CHIl, SHA512_Kl4[i], SHA512_W_L4[i]);
      const T1h = u64_default4.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh4[i], SHA512_W_H4[i]);
      const T1l = T1ll | 0;
      const sigma0h = u64_default4.rotrSH(Ah, Al, 28) ^ u64_default4.rotrBH(Ah, Al, 34) ^ u64_default4.rotrBH(Ah, Al, 39);
      const sigma0l = u64_default4.rotrSL(Ah, Al, 28) ^ u64_default4.rotrBL(Ah, Al, 34) ^ u64_default4.rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = u64_default4.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = u64_default4.add3L(T1l, sigma0l, MAJl);
      Ah = u64_default4.add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = u64_default4.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = u64_default4.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = u64_default4.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = u64_default4.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = u64_default4.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = u64_default4.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = u64_default4.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = u64_default4.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    SHA512_W_H4.fill(0);
    SHA512_W_L4.fill(0);
  }
  destroy() {
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var SHA512_2244 = class extends SHA5124 {
  constructor() {
    super();
    this.Ah = 2352822216 | 0;
    this.Al = 424955298 | 0;
    this.Bh = 1944164710 | 0;
    this.Bl = 2312950998 | 0;
    this.Ch = 502970286 | 0;
    this.Cl = 855612546 | 0;
    this.Dh = 1738396948 | 0;
    this.Dl = 1479516111 | 0;
    this.Eh = 258812777 | 0;
    this.El = 2077511080 | 0;
    this.Fh = 2011393907 | 0;
    this.Fl = 79989058 | 0;
    this.Gh = 1067287976 | 0;
    this.Gl = 1780299464 | 0;
    this.Hh = 286451373 | 0;
    this.Hl = 2446758561 | 0;
    this.outputLen = 28;
  }
};
var SHA512_2564 = class extends SHA5124 {
  constructor() {
    super();
    this.Ah = 573645204 | 0;
    this.Al = 4230739756 | 0;
    this.Bh = 2673172387 | 0;
    this.Bl = 3360449730 | 0;
    this.Ch = 596883563 | 0;
    this.Cl = 1867755857 | 0;
    this.Dh = 2520282905 | 0;
    this.Dl = 1497426621 | 0;
    this.Eh = 2519219938 | 0;
    this.El = 2827943907 | 0;
    this.Fh = 3193839141 | 0;
    this.Fl = 1401305490 | 0;
    this.Gh = 721525244 | 0;
    this.Gl = 746961066 | 0;
    this.Hh = 246885852 | 0;
    this.Hl = 2177182882 | 0;
    this.outputLen = 32;
  }
};
var SHA3844 = class extends SHA5124 {
  constructor() {
    super();
    this.Ah = 3418070365 | 0;
    this.Al = 3238371032 | 0;
    this.Bh = 1654270250 | 0;
    this.Bl = 914150663 | 0;
    this.Ch = 2438529370 | 0;
    this.Cl = 812702999 | 0;
    this.Dh = 355462360 | 0;
    this.Dl = 4144912697 | 0;
    this.Eh = 1731405415 | 0;
    this.El = 4290775857 | 0;
    this.Fh = 2394180231 | 0;
    this.Fl = 1750603025 | 0;
    this.Gh = 3675008525 | 0;
    this.Gl = 1694076839 | 0;
    this.Hh = 1203062813 | 0;
    this.Hl = 3204075428 | 0;
    this.outputLen = 48;
  }
};
var sha5125 = wrapConstructor4(() => new SHA5124());
var sha512_2244 = wrapConstructor4(() => new SHA512_2244());
var sha512_2564 = wrapConstructor4(() => new SHA512_2564());
var sha3844 = wrapConstructor4(() => new SHA3844());

// node_modules/@noble/curves/esm/abstract/edwards.js
init_shim();
var _0n44 = BigInt(0);
var _1n44 = BigInt(1);
var _2n36 = BigInt(2);
var _8n18 = BigInt(8);
var VERIFY_DEFAULT4 = { zip215: true };
function validateOpts11(curve) {
  const opts = validateBasic4(curve);
  validateObject4(curve, {
    hash: "function",
    a: "bigint",
    d: "bigint",
    randomBytes: "function"
  }, {
    adjustScalarBytes: "function",
    domain: "function",
    uvRatio: "function",
    mapToCurve: "function"
  });
  return Object.freeze({ ...opts });
}
function twistedEdwards4(curveDef) {
  const CURVE = validateOpts11(curveDef);
  const { Fp: Fp9, n: CURVE_ORDER, prehash, hash: cHash, randomBytes: randomBytes5, nByteLength, h: cofactor } = CURVE;
  const MASK = _2n36 << BigInt(nByteLength * 8) - _1n44;
  const modP5 = Fp9.create;
  const uvRatio5 = CURVE.uvRatio || ((u, v) => {
    try {
      return { isValid: true, value: Fp9.sqrt(u * Fp9.inv(v)) };
    } catch (e) {
      return { isValid: false, value: _0n44 };
    }
  });
  const adjustScalarBytes5 = CURVE.adjustScalarBytes || ((bytes5) => bytes5);
  const domain = CURVE.domain || ((data, ctx, phflag) => {
    if (ctx.length || phflag)
      throw new Error("Contexts/pre-hash are not supported");
    return data;
  });
  const inBig = (n) => typeof n === "bigint" && _0n44 < n;
  const inRange = (n, max2) => inBig(n) && inBig(max2) && n < max2;
  const in0MaskRange = (n) => n === _0n44 || inRange(n, MASK);
  function assertInRange(n, max2) {
    if (inRange(n, max2))
      return n;
    throw new Error(`Expected valid scalar < ${max2}, got ${typeof n} ${n}`);
  }
  function assertGE0(n) {
    return n === _0n44 ? n : assertInRange(n, CURVE_ORDER);
  }
  const pointPrecomputes = /* @__PURE__ */ new Map();
  function isPoint(other) {
    if (!(other instanceof Point5))
      throw new Error("ExtendedPoint expected");
  }
  class Point5 {
    constructor(ex, ey, ez, et) {
      this.ex = ex;
      this.ey = ey;
      this.ez = ez;
      this.et = et;
      if (!in0MaskRange(ex))
        throw new Error("x required");
      if (!in0MaskRange(ey))
        throw new Error("y required");
      if (!in0MaskRange(ez))
        throw new Error("z required");
      if (!in0MaskRange(et))
        throw new Error("t required");
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(p) {
      if (p instanceof Point5)
        throw new Error("extended point not allowed");
      const { x, y } = p || {};
      if (!in0MaskRange(x) || !in0MaskRange(y))
        throw new Error("invalid affine point");
      return new Point5(x, y, _1n44, modP5(x * y));
    }
    static normalizeZ(points) {
      const toInv = Fp9.invertBatch(points.map((p) => p.ez));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point5.fromAffine);
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    // Not required for fromHex(), which always creates valid points.
    // Could be useful for fromAffine().
    assertValidity() {
      const { a, d } = CURVE;
      if (this.is0())
        throw new Error("bad point: ZERO");
      const { ex: X, ey: Y, ez: Z, et: T } = this;
      const X2 = modP5(X * X);
      const Y2 = modP5(Y * Y);
      const Z2 = modP5(Z * Z);
      const Z4 = modP5(Z2 * Z2);
      const aX2 = modP5(X2 * a);
      const left = modP5(Z2 * modP5(aX2 + Y2));
      const right = modP5(Z4 + modP5(d * modP5(X2 * Y2)));
      if (left !== right)
        throw new Error("bad point: equation left != right (1)");
      const XY = modP5(X * Y);
      const ZT = modP5(Z * T);
      if (XY !== ZT)
        throw new Error("bad point: equation left != right (2)");
    }
    // Compare one point to another.
    equals(other) {
      isPoint(other);
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const { ex: X2, ey: Y2, ez: Z2 } = other;
      const X1Z2 = modP5(X1 * Z2);
      const X2Z1 = modP5(X2 * Z1);
      const Y1Z2 = modP5(Y1 * Z2);
      const Y2Z1 = modP5(Y2 * Z1);
      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
    }
    is0() {
      return this.equals(Point5.ZERO);
    }
    negate() {
      return new Point5(modP5(-this.ex), this.ey, this.ez, modP5(-this.et));
    }
    // Fast algo for doubling Extended Point.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
    // Cost: 4M + 4S + 1*a + 6add + 1*2.
    double() {
      const { a } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const A = modP5(X1 * X1);
      const B = modP5(Y1 * Y1);
      const C = modP5(_2n36 * modP5(Z1 * Z1));
      const D = modP5(a * A);
      const x1y1 = X1 + Y1;
      const E = modP5(modP5(x1y1 * x1y1) - A - B);
      const G3 = D + B;
      const F = G3 - C;
      const H = D - B;
      const X3 = modP5(E * F);
      const Y3 = modP5(G3 * H);
      const T3 = modP5(E * H);
      const Z3 = modP5(F * G3);
      return new Point5(X3, Y3, Z3, T3);
    }
    // Fast algo for adding 2 Extended Points.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
    // Cost: 9M + 1*a + 1*d + 7add.
    add(other) {
      isPoint(other);
      const { a, d } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;
      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;
      if (a === BigInt(-1)) {
        const A2 = modP5((Y1 - X1) * (Y2 + X2));
        const B2 = modP5((Y1 + X1) * (Y2 - X2));
        const F2 = modP5(B2 - A2);
        if (F2 === _0n44)
          return this.double();
        const C2 = modP5(Z1 * _2n36 * T2);
        const D2 = modP5(T1 * _2n36 * Z2);
        const E2 = D2 + C2;
        const G4 = B2 + A2;
        const H2 = D2 - C2;
        const X32 = modP5(E2 * F2);
        const Y32 = modP5(G4 * H2);
        const T32 = modP5(E2 * H2);
        const Z32 = modP5(F2 * G4);
        return new Point5(X32, Y32, Z32, T32);
      }
      const A = modP5(X1 * X2);
      const B = modP5(Y1 * Y2);
      const C = modP5(T1 * d * T2);
      const D = modP5(Z1 * Z2);
      const E = modP5((X1 + Y1) * (X2 + Y2) - A - B);
      const F = D - C;
      const G3 = D + C;
      const H = modP5(B - a * A);
      const X3 = modP5(E * F);
      const Y3 = modP5(G3 * H);
      const T3 = modP5(E * H);
      const Z3 = modP5(F * G3);
      return new Point5(X3, Y3, Z3, T3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    wNAF(n) {
      return wnaf.wNAFCached(this, pointPrecomputes, n, Point5.normalizeZ);
    }
    // Constant-time multiplication.
    multiply(scalar) {
      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));
      return Point5.normalizeZ([p, f])[0];
    }
    // Non-constant-time multiplication. Uses double-and-add algorithm.
    // It's faster, but should only be used when you don't care about
    // an exposed private key e.g. sig verification.
    // Does NOT allow scalars higher than CURVE.n.
    multiplyUnsafe(scalar) {
      let n = assertGE0(scalar);
      if (n === _0n44)
        return I;
      if (this.equals(I) || n === _1n44)
        return this;
      if (this.equals(G))
        return this.wNAF(n).p;
      return wnaf.unsafeLadder(this, n);
    }
    // Checks if point is of small order.
    // If you add something to small order point, you will have "dirty"
    // point with torsion component.
    // Multiplies point by cofactor and checks if the result is 0.
    isSmallOrder() {
      return this.multiplyUnsafe(cofactor).is0();
    }
    // Multiplies point by curve order and checks if the result is 0.
    // Returns `false` is the point is dirty.
    isTorsionFree() {
      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
    }
    // Converts Extended point to default (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    toAffine(iz) {
      const { ex: x, ey: y, ez: z } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? _8n18 : Fp9.inv(z);
      const ax = modP5(x * iz);
      const ay = modP5(y * iz);
      const zz = modP5(z * iz);
      if (is0)
        return { x: _0n44, y: _1n44 };
      if (zz !== _1n44)
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    clearCofactor() {
      const { h: cofactor2 } = CURVE;
      if (cofactor2 === _1n44)
        return this;
      return this.multiplyUnsafe(cofactor2);
    }
    // Converts hash string or Uint8Array to Point.
    // Uses algo from RFC8032 5.1.3.
    static fromHex(hex11, zip215 = false) {
      const { d, a } = CURVE;
      const len = Fp9.BYTES;
      hex11 = ensureBytes4("pointHex", hex11, len);
      const normed = hex11.slice();
      const lastByte = hex11[len - 1];
      normed[len - 1] = lastByte & ~128;
      const y = bytesToNumberLE4(normed);
      if (y === _0n44) {
      } else {
        if (zip215)
          assertInRange(y, MASK);
        else
          assertInRange(y, Fp9.ORDER);
      }
      const y2 = modP5(y * y);
      const u = modP5(y2 - _1n44);
      const v = modP5(d * y2 - a);
      let { isValid, value: x } = uvRatio5(u, v);
      if (!isValid)
        throw new Error("Point.fromHex: invalid y coordinate");
      const isXOdd = (x & _1n44) === _1n44;
      const isLastByteOdd = (lastByte & 128) !== 0;
      if (!zip215 && x === _0n44 && isLastByteOdd)
        throw new Error("Point.fromHex: x=0 and x_0=1");
      if (isLastByteOdd !== isXOdd)
        x = modP5(-x);
      return Point5.fromAffine({ x, y });
    }
    static fromPrivateKey(privKey) {
      return getExtendedPublicKey(privKey).point;
    }
    toRawBytes() {
      const { x, y } = this.toAffine();
      const bytes5 = numberToBytesLE4(y, Fp9.BYTES);
      bytes5[bytes5.length - 1] |= x & _1n44 ? 128 : 0;
      return bytes5;
    }
    toHex() {
      return bytesToHex4(this.toRawBytes());
    }
  }
  Point5.BASE = new Point5(CURVE.Gx, CURVE.Gy, _1n44, modP5(CURVE.Gx * CURVE.Gy));
  Point5.ZERO = new Point5(_0n44, _1n44, _1n44, _0n44);
  const { BASE: G, ZERO: I } = Point5;
  const wnaf = wNAF4(Point5, nByteLength * 8);
  function modN5(a) {
    return mod4(a, CURVE_ORDER);
  }
  function modN_LE(hash5) {
    return modN5(bytesToNumberLE4(hash5));
  }
  function getExtendedPublicKey(key) {
    const len = nByteLength;
    key = ensureBytes4("private key", key, len);
    const hashed = ensureBytes4("hashed private key", cHash(key), 2 * len);
    const head = adjustScalarBytes5(hashed.slice(0, len));
    const prefix2 = hashed.slice(len, 2 * len);
    const scalar = modN_LE(head);
    const point = G.multiply(scalar);
    const pointBytes = point.toRawBytes();
    return { head, prefix: prefix2, scalar, point, pointBytes };
  }
  function getPublicKey(privKey) {
    return getExtendedPublicKey(privKey).pointBytes;
  }
  function hashDomainToScalar(context2 = new Uint8Array(), ...msgs) {
    const msg = concatBytes8(...msgs);
    return modN_LE(cHash(domain(msg, ensureBytes4("context", context2), !!prehash)));
  }
  function sign2(msg, privKey, options = {}) {
    msg = ensureBytes4("message", msg);
    if (prehash)
      msg = prehash(msg);
    const { prefix: prefix2, scalar, pointBytes } = getExtendedPublicKey(privKey);
    const r = hashDomainToScalar(options.context, prefix2, msg);
    const R = G.multiply(r).toRawBytes();
    const k = hashDomainToScalar(options.context, R, pointBytes, msg);
    const s = modN5(r + k * scalar);
    assertGE0(s);
    const res = concatBytes8(R, numberToBytesLE4(s, Fp9.BYTES));
    return ensureBytes4("result", res, nByteLength * 2);
  }
  const verifyOpts = VERIFY_DEFAULT4;
  function verify(sig2, msg, publicKey2, options = verifyOpts) {
    const { context: context2, zip215 } = options;
    const len = Fp9.BYTES;
    sig2 = ensureBytes4("signature", sig2, 2 * len);
    msg = ensureBytes4("message", msg);
    if (prehash)
      msg = prehash(msg);
    const s = bytesToNumberLE4(sig2.slice(len, 2 * len));
    let A, R, SB;
    try {
      A = Point5.fromHex(publicKey2, zip215);
      R = Point5.fromHex(sig2.slice(0, len), zip215);
      SB = G.multiplyUnsafe(s);
    } catch (error) {
      return false;
    }
    if (!zip215 && A.isSmallOrder())
      return false;
    const k = hashDomainToScalar(context2, R.toRawBytes(), A.toRawBytes(), msg);
    const RkA = R.add(A.multiplyUnsafe(k));
    return RkA.subtract(SB).clearCofactor().equals(Point5.ZERO);
  }
  G._setWindowSize(8);
  const utils5 = {
    getExtendedPublicKey,
    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.
    randomPrivateKey: () => randomBytes5(Fp9.BYTES),
    /**
     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
     * values. This slows down first getPublicKey() by milliseconds (see Speed section),
     * but allows to speed-up subsequent getPublicKey() calls up to 20x.
     * @param windowSize 2, 4, 8, 16
     */
    precompute(windowSize = 8, point = Point5.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  return {
    CURVE,
    getPublicKey,
    sign: sign2,
    verify,
    ExtendedPoint: Point5,
    utils: utils5
  };
}

// node_modules/@noble/curves/esm/abstract/montgomery.js
init_shim();
var _0n45 = BigInt(0);
var _1n45 = BigInt(1);
function validateOpts12(curve) {
  validateObject4(curve, {
    a: "bigint"
  }, {
    montgomeryBits: "isSafeInteger",
    nByteLength: "isSafeInteger",
    adjustScalarBytes: "function",
    domain: "function",
    powPminus2: "function",
    Gu: "bigint"
  });
  return Object.freeze({ ...curve });
}
function montgomery4(curveDef) {
  const CURVE = validateOpts12(curveDef);
  const { P } = CURVE;
  const modP5 = (n) => mod4(n, P);
  const montgomeryBits = CURVE.montgomeryBits;
  const montgomeryBytes = Math.ceil(montgomeryBits / 8);
  const fieldLen = CURVE.nByteLength;
  const adjustScalarBytes5 = CURVE.adjustScalarBytes || ((bytes5) => bytes5);
  const powPminus2 = CURVE.powPminus2 || ((x) => pow5(x, P - BigInt(2), P));
  function cswap(swap, x_2, x_3) {
    const dummy = modP5(swap * (x_2 - x_3));
    x_2 = modP5(x_2 - dummy);
    x_3 = modP5(x_3 + dummy);
    return [x_2, x_3];
  }
  function assertFieldElement(n) {
    if (typeof n === "bigint" && _0n45 <= n && n < P)
      return n;
    throw new Error("Expected valid scalar 0 < scalar < CURVE.P");
  }
  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);
  function montgomeryLadder(pointU, scalar) {
    const u = assertFieldElement(pointU);
    const k = assertFieldElement(scalar);
    const x_1 = u;
    let x_2 = _1n45;
    let z_2 = _0n45;
    let x_3 = u;
    let z_3 = _1n45;
    let swap = _0n45;
    let sw;
    for (let t = BigInt(montgomeryBits - 1); t >= _0n45; t--) {
      const k_t = k >> t & _1n45;
      swap ^= k_t;
      sw = cswap(swap, x_2, x_3);
      x_2 = sw[0];
      x_3 = sw[1];
      sw = cswap(swap, z_2, z_3);
      z_2 = sw[0];
      z_3 = sw[1];
      swap = k_t;
      const A = x_2 + z_2;
      const AA = modP5(A * A);
      const B = x_2 - z_2;
      const BB = modP5(B * B);
      const E = AA - BB;
      const C = x_3 + z_3;
      const D = x_3 - z_3;
      const DA = modP5(D * A);
      const CB = modP5(C * B);
      const dacb = DA + CB;
      const da_cb = DA - CB;
      x_3 = modP5(dacb * dacb);
      z_3 = modP5(x_1 * modP5(da_cb * da_cb));
      x_2 = modP5(AA * BB);
      z_2 = modP5(E * (AA + modP5(a24 * E)));
    }
    sw = cswap(swap, x_2, x_3);
    x_2 = sw[0];
    x_3 = sw[1];
    sw = cswap(swap, z_2, z_3);
    z_2 = sw[0];
    z_3 = sw[1];
    const z2 = powPminus2(z_2);
    return modP5(x_2 * z2);
  }
  function encodeUCoordinate(u) {
    return numberToBytesLE4(modP5(u), montgomeryBytes);
  }
  function decodeUCoordinate(uEnc) {
    const u = ensureBytes4("u coordinate", uEnc, montgomeryBytes);
    if (fieldLen === montgomeryBytes)
      u[fieldLen - 1] &= 127;
    return bytesToNumberLE4(u);
  }
  function decodeScalar(n) {
    const bytes5 = ensureBytes4("scalar", n);
    if (bytes5.length !== montgomeryBytes && bytes5.length !== fieldLen)
      throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${bytes5.length}`);
    return bytesToNumberLE4(adjustScalarBytes5(bytes5));
  }
  function scalarMult(scalar, u) {
    const pointU = decodeUCoordinate(u);
    const _scalar = decodeScalar(scalar);
    const pu = montgomeryLadder(pointU, _scalar);
    if (pu === _0n45)
      throw new Error("Invalid private or public key received");
    return encodeUCoordinate(pu);
  }
  const GuBytes = encodeUCoordinate(CURVE.Gu);
  function scalarMultBase(scalar) {
    return scalarMult(scalar, GuBytes);
  }
  return {
    scalarMult,
    scalarMultBase,
    getSharedSecret: (privateKey, publicKey2) => scalarMult(privateKey, publicKey2),
    getPublicKey: (privateKey) => scalarMultBase(privateKey),
    utils: { randomPrivateKey: () => CURVE.randomBytes(CURVE.nByteLength) },
    GuBytes
  };
}

// node_modules/@noble/curves/esm/ed25519.js
var ED25519_P4 = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var ED25519_SQRT_M14 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
var _0n46 = BigInt(0);
var _1n46 = BigInt(1);
var _2n37 = BigInt(2);
var _5n18 = BigInt(5);
var _10n14 = BigInt(10);
var _20n4 = BigInt(20);
var _40n4 = BigInt(40);
var _80n4 = BigInt(80);
function ed25519_pow_2_252_34(x) {
  const P = ED25519_P4;
  const x2 = x * x % P;
  const b2 = x2 * x % P;
  const b4 = pow24(b2, _2n37, P) * b2 % P;
  const b5 = pow24(b4, _1n46, P) * x % P;
  const b10 = pow24(b5, _5n18, P) * b5 % P;
  const b20 = pow24(b10, _10n14, P) * b10 % P;
  const b40 = pow24(b20, _20n4, P) * b20 % P;
  const b80 = pow24(b40, _40n4, P) * b40 % P;
  const b160 = pow24(b80, _80n4, P) * b80 % P;
  const b240 = pow24(b160, _80n4, P) * b80 % P;
  const b250 = pow24(b240, _10n14, P) * b10 % P;
  const pow_p_5_8 = pow24(b250, _2n37, P) * x % P;
  return { pow_p_5_8, b2 };
}
function adjustScalarBytes4(bytes5) {
  bytes5[0] &= 248;
  bytes5[31] &= 127;
  bytes5[31] |= 64;
  return bytes5;
}
function uvRatio4(u, v) {
  const P = ED25519_P4;
  const v3 = mod4(v * v * v, P);
  const v7 = mod4(v3 * v3 * v, P);
  const pow6 = ed25519_pow_2_252_34(u * v7).pow_p_5_8;
  let x = mod4(u * v3 * pow6, P);
  const vx2 = mod4(v * x * x, P);
  const root1 = x;
  const root2 = mod4(x * ED25519_SQRT_M14, P);
  const useRoot1 = vx2 === u;
  const useRoot2 = vx2 === mod4(-u, P);
  const noRoot = vx2 === mod4(-u * ED25519_SQRT_M14, P);
  if (useRoot1)
    x = root1;
  if (useRoot2 || noRoot)
    x = root2;
  if (isNegativeLE4(x, P))
    x = mod4(-x, P);
  return { isValid: useRoot1 || useRoot2, value: x };
}
var Fp8 = Field4(ED25519_P4, void 0, true);
var ed25519Defaults4 = {
  // Param: a
  a: BigInt(-1),
  // d is equal to -121665/121666 over finite field.
  // Negative number is P - number, and division is invert(number, P)
  d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),
  // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n
  Fp: Fp8,
  // Subgroup order: how many points curve has
  // 2n**252n + 27742317777372353535851937790883648493n;
  n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),
  // Cofactor
  h: BigInt(8),
  // Base point (x, y) aka generator point
  Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),
  Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),
  hash: sha5125,
  randomBytes: randomBytes4,
  adjustScalarBytes: adjustScalarBytes4,
  // dom2
  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
  // Constant-time, u/√v
  uvRatio: uvRatio4
};
var ed255194 = twistedEdwards4(ed25519Defaults4);
function ed25519_domain4(data, ctx, phflag) {
  if (ctx.length > 255)
    throw new Error("Context is too big");
  return concatBytes7(utf8ToBytes7("SigEd25519 no Ed25519 collisions"), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);
}
var ed25519ctx4 = twistedEdwards4({ ...ed25519Defaults4, domain: ed25519_domain4 });
var ed25519ph4 = twistedEdwards4({
  ...ed25519Defaults4,
  domain: ed25519_domain4,
  prehash: sha5125
});
var x255194 = (() => montgomery4({
  P: ED25519_P4,
  a: BigInt(486662),
  montgomeryBits: 255,
  nByteLength: 32,
  Gu: BigInt(9),
  powPminus2: (x) => {
    const P = ED25519_P4;
    const { pow_p_5_8, b2 } = ed25519_pow_2_252_34(x);
    return mod4(pow24(pow_p_5_8, BigInt(3), P) * b2, P);
  },
  adjustScalarBytes: adjustScalarBytes4,
  randomBytes: randomBytes4
}))();
var ELL2_C14 = (Fp8.ORDER + BigInt(3)) / BigInt(8);
var ELL2_C24 = Fp8.pow(_2n37, ELL2_C14);
var ELL2_C34 = Fp8.sqrt(Fp8.neg(Fp8.ONE));
var ELL2_C44 = (Fp8.ORDER - BigInt(5)) / BigInt(8);
var ELL2_J4 = BigInt(486662);
function map_to_curve_elligator2_curve255194(u) {
  let tv1 = Fp8.sqr(u);
  tv1 = Fp8.mul(tv1, _2n37);
  let xd = Fp8.add(tv1, Fp8.ONE);
  let x1n = Fp8.neg(ELL2_J4);
  let tv2 = Fp8.sqr(xd);
  let gxd = Fp8.mul(tv2, xd);
  let gx1 = Fp8.mul(tv1, ELL2_J4);
  gx1 = Fp8.mul(gx1, x1n);
  gx1 = Fp8.add(gx1, tv2);
  gx1 = Fp8.mul(gx1, x1n);
  let tv3 = Fp8.sqr(gxd);
  tv2 = Fp8.sqr(tv3);
  tv3 = Fp8.mul(tv3, gxd);
  tv3 = Fp8.mul(tv3, gx1);
  tv2 = Fp8.mul(tv2, tv3);
  let y11 = Fp8.pow(tv2, ELL2_C44);
  y11 = Fp8.mul(y11, tv3);
  let y12 = Fp8.mul(y11, ELL2_C34);
  tv2 = Fp8.sqr(y11);
  tv2 = Fp8.mul(tv2, gxd);
  let e1 = Fp8.eql(tv2, gx1);
  let y1 = Fp8.cmov(y12, y11, e1);
  let x2n = Fp8.mul(x1n, tv1);
  let y21 = Fp8.mul(y11, u);
  y21 = Fp8.mul(y21, ELL2_C24);
  let y22 = Fp8.mul(y21, ELL2_C34);
  let gx2 = Fp8.mul(gx1, tv1);
  tv2 = Fp8.sqr(y21);
  tv2 = Fp8.mul(tv2, gxd);
  let e2 = Fp8.eql(tv2, gx2);
  let y2 = Fp8.cmov(y22, y21, e2);
  tv2 = Fp8.sqr(y1);
  tv2 = Fp8.mul(tv2, gxd);
  let e3 = Fp8.eql(tv2, gx1);
  let xn = Fp8.cmov(x2n, x1n, e3);
  let y = Fp8.cmov(y2, y1, e3);
  let e4 = Fp8.isOdd(y);
  y = Fp8.cmov(y, Fp8.neg(y), e3 !== e4);
  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n46 };
}
var ELL2_C1_EDWARDS4 = FpSqrtEven4(Fp8, Fp8.neg(BigInt(486664)));
function map_to_curve_elligator2_edwards255194(u) {
  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve255194(u);
  let xn = Fp8.mul(xMn, yMd);
  xn = Fp8.mul(xn, ELL2_C1_EDWARDS4);
  let xd = Fp8.mul(xMd, yMn);
  let yn = Fp8.sub(xMn, xMd);
  let yd = Fp8.add(xMn, xMd);
  let tv1 = Fp8.mul(xd, yd);
  let e = Fp8.eql(tv1, Fp8.ZERO);
  xn = Fp8.cmov(xn, Fp8.ZERO, e);
  xd = Fp8.cmov(xd, Fp8.ONE, e);
  yn = Fp8.cmov(yn, Fp8.ONE, e);
  yd = Fp8.cmov(yd, Fp8.ONE, e);
  const inv = Fp8.invertBatch([xd, yd]);
  return { x: Fp8.mul(xn, inv[0]), y: Fp8.mul(yn, inv[1]) };
}
var htf8 = (() => createHasher4(ed255194.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards255194(scalars[0]), {
  DST: "edwards25519_XMD:SHA-512_ELL2_RO_",
  encodeDST: "edwards25519_XMD:SHA-512_ELL2_NU_",
  p: Fp8.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha5125
}))();
var hashToCurve8 = (() => htf8.hashToCurve)();
var encodeToCurve8 = (() => htf8.encodeToCurve)();
function assertRstPoint4(other) {
  if (!(other instanceof RistPoint4))
    throw new Error("RistrettoPoint expected");
}
var SQRT_M14 = ED25519_SQRT_M14;
var SQRT_AD_MINUS_ONE4 = BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235");
var INVSQRT_A_MINUS_D4 = BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578");
var ONE_MINUS_D_SQ4 = BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838");
var D_MINUS_ONE_SQ4 = BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
var invertSqrt4 = (number5) => uvRatio4(_1n46, number5);
var MAX_255B4 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var bytes255ToNumberLE4 = (bytes5) => ed255194.CURVE.Fp.create(bytesToNumberLE4(bytes5) & MAX_255B4);
function calcElligatorRistrettoMap4(r0) {
  const { d } = ed255194.CURVE;
  const P = ed255194.CURVE.Fp.ORDER;
  const mod5 = ed255194.CURVE.Fp.create;
  const r = mod5(SQRT_M14 * r0 * r0);
  const Ns = mod5((r + _1n46) * ONE_MINUS_D_SQ4);
  let c = BigInt(-1);
  const D = mod5((c - d * r) * mod5(r + d));
  let { isValid: Ns_D_is_sq, value: s } = uvRatio4(Ns, D);
  let s_ = mod5(s * r0);
  if (!isNegativeLE4(s_, P))
    s_ = mod5(-s_);
  if (!Ns_D_is_sq)
    s = s_;
  if (!Ns_D_is_sq)
    c = r;
  const Nt = mod5(c * (r - _1n46) * D_MINUS_ONE_SQ4 - D);
  const s2 = s * s;
  const W0 = mod5((s + s) * D);
  const W1 = mod5(Nt * SQRT_AD_MINUS_ONE4);
  const W2 = mod5(_1n46 - s2);
  const W3 = mod5(_1n46 + s2);
  return new ed255194.ExtendedPoint(mod5(W0 * W3), mod5(W2 * W1), mod5(W1 * W3), mod5(W0 * W2));
}
var RistPoint4 = class {
  // Private property to discourage combining ExtendedPoint + RistrettoPoint
  // Always use Ristretto encoding/decoding instead.
  constructor(ep) {
    this.ep = ep;
  }
  static fromAffine(ap) {
    return new RistPoint4(ed255194.ExtendedPoint.fromAffine(ap));
  }
  /**
   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.
   * The hash-to-group operation applies Elligator twice and adds the results.
   * **Note:** this is one-way map, there is no conversion from point to hash.
   * https://ristretto.group/formulas/elligator.html
   * @param hex 64-byte output of a hash function
   */
  static hashToCurve(hex11) {
    hex11 = ensureBytes4("ristrettoHash", hex11, 64);
    const r1 = bytes255ToNumberLE4(hex11.slice(0, 32));
    const R1 = calcElligatorRistrettoMap4(r1);
    const r2 = bytes255ToNumberLE4(hex11.slice(32, 64));
    const R2 = calcElligatorRistrettoMap4(r2);
    return new RistPoint4(R1.add(R2));
  }
  /**
   * Converts ristretto-encoded string to ristretto point.
   * https://ristretto.group/formulas/decoding.html
   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
   */
  static fromHex(hex11) {
    hex11 = ensureBytes4("ristrettoHex", hex11, 32);
    const { a, d } = ed255194.CURVE;
    const P = ed255194.CURVE.Fp.ORDER;
    const mod5 = ed255194.CURVE.Fp.create;
    const emsg = "RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint";
    const s = bytes255ToNumberLE4(hex11);
    if (!equalBytes4(numberToBytesLE4(s, 32), hex11) || isNegativeLE4(s, P))
      throw new Error(emsg);
    const s2 = mod5(s * s);
    const u1 = mod5(_1n46 + a * s2);
    const u2 = mod5(_1n46 - a * s2);
    const u1_2 = mod5(u1 * u1);
    const u2_2 = mod5(u2 * u2);
    const v = mod5(a * d * u1_2 - u2_2);
    const { isValid, value: I } = invertSqrt4(mod5(v * u2_2));
    const Dx = mod5(I * u2);
    const Dy = mod5(I * Dx * v);
    let x = mod5((s + s) * Dx);
    if (isNegativeLE4(x, P))
      x = mod5(-x);
    const y = mod5(u1 * Dy);
    const t = mod5(x * y);
    if (!isValid || isNegativeLE4(t, P) || y === _0n46)
      throw new Error(emsg);
    return new RistPoint4(new ed255194.ExtendedPoint(x, y, _1n46, t));
  }
  /**
   * Encodes ristretto point to Uint8Array.
   * https://ristretto.group/formulas/encoding.html
   */
  toRawBytes() {
    let { ex: x, ey: y, ez: z, et: t } = this.ep;
    const P = ed255194.CURVE.Fp.ORDER;
    const mod5 = ed255194.CURVE.Fp.create;
    const u1 = mod5(mod5(z + y) * mod5(z - y));
    const u2 = mod5(x * y);
    const u2sq = mod5(u2 * u2);
    const { value: invsqrt } = invertSqrt4(mod5(u1 * u2sq));
    const D1 = mod5(invsqrt * u1);
    const D2 = mod5(invsqrt * u2);
    const zInv = mod5(D1 * D2 * t);
    let D;
    if (isNegativeLE4(t * zInv, P)) {
      let _x = mod5(y * SQRT_M14);
      let _y = mod5(x * SQRT_M14);
      x = _x;
      y = _y;
      D = mod5(D1 * INVSQRT_A_MINUS_D4);
    } else {
      D = D2;
    }
    if (isNegativeLE4(x * zInv, P))
      y = mod5(-y);
    let s = mod5((z - y) * D);
    if (isNegativeLE4(s, P))
      s = mod5(-s);
    return numberToBytesLE4(s, 32);
  }
  toHex() {
    return bytesToHex4(this.toRawBytes());
  }
  toString() {
    return this.toHex();
  }
  // Compare one point to another.
  equals(other) {
    assertRstPoint4(other);
    const { ex: X1, ey: Y1 } = this.ep;
    const { ex: X2, ey: Y2 } = other.ep;
    const mod5 = ed255194.CURVE.Fp.create;
    const one = mod5(X1 * Y2) === mod5(Y1 * X2);
    const two = mod5(Y1 * Y2) === mod5(X1 * X2);
    return one || two;
  }
  add(other) {
    assertRstPoint4(other);
    return new RistPoint4(this.ep.add(other.ep));
  }
  subtract(other) {
    assertRstPoint4(other);
    return new RistPoint4(this.ep.subtract(other.ep));
  }
  multiply(scalar) {
    return new RistPoint4(this.ep.multiply(scalar));
  }
  multiplyUnsafe(scalar) {
    return new RistPoint4(this.ep.multiplyUnsafe(scalar));
  }
};
var RistrettoPoint4 = (() => {
  if (!RistPoint4.BASE)
    RistPoint4.BASE = new RistPoint4(ed255194.ExtendedPoint.BASE);
  if (!RistPoint4.ZERO)
    RistPoint4.ZERO = new RistPoint4(ed255194.ExtendedPoint.ZERO);
  return RistPoint4;
})();

// node_modules/@polkadot/util-crypto/ed25519/pair/fromSeed.js
function ed25519PairFromSeed4(seed, onlyJs) {
  if (!hasBigInt || !onlyJs && isReady()) {
    const full = ed25519KeypairFromSeed(seed);
    return {
      publicKey: full.slice(32),
      secretKey: full.slice(0, 64)
    };
  }
  const publicKey2 = ed255194.getPublicKey(seed);
  return {
    publicKey: publicKey2,
    secretKey: u8aConcatStrict([seed, publicKey2])
  };
}

// node_modules/@polkadot/util-crypto/ed25519/pair/fromSecret.js
init_shim();

// node_modules/@polkadot/util-crypto/ed25519/pair/fromString.js
init_shim();

// node_modules/@polkadot/util-crypto/ed25519/sign.js
init_shim();

// node_modules/@polkadot/util-crypto/ed25519/verify.js
init_shim();
function ed25519Verify5(message, signature, publicKey2, onlyJs) {
  const messageU8a = u8aToU8a(message);
  const publicKeyU8a = u8aToU8a(publicKey2);
  const signatureU8a = u8aToU8a(signature);
  if (publicKeyU8a.length !== 32) {
    throw new Error(`Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);
  } else if (signatureU8a.length !== 64) {
    throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  }
  try {
    return !hasBigInt || !onlyJs && isReady() ? ed25519Verify(signatureU8a, messageU8a, publicKeyU8a) : ed255194.verify(signatureU8a, messageU8a, publicKeyU8a);
  } catch {
    return false;
  }
}

// node_modules/@polkadot/util-crypto/key/hdkdEd25519.js
var keyHdkdEd255194 = createSeedDeriveFn4(ed25519PairFromSeed4, ed25519DeriveHard4);

// node_modules/@polkadot/util-crypto/key/hdkdSr25519.js
init_shim();

// node_modules/@polkadot/util-crypto/sr25519/deriveHard.js
init_shim();

// node_modules/@polkadot/util-crypto/sr25519/derive.js
init_shim();

// node_modules/@polkadot/util-crypto/sr25519/pair/fromU8a.js
init_shim();
var SEC_LEN4 = 64;
var PUB_LEN4 = 32;
var TOT_LEN4 = SEC_LEN4 + PUB_LEN4;
function sr25519PairFromU8a4(full) {
  const fullU8a = u8aToU8a(full);
  if (fullU8a.length !== TOT_LEN4) {
    throw new Error(`Expected keypair with ${TOT_LEN4} bytes, found ${fullU8a.length}`);
  }
  return {
    publicKey: fullU8a.slice(SEC_LEN4, TOT_LEN4),
    secretKey: fullU8a.slice(0, SEC_LEN4)
  };
}

// node_modules/@polkadot/util-crypto/sr25519/pair/toU8a.js
init_shim();
function sr25519KeypairToU8a4({ publicKey: publicKey2, secretKey }) {
  return u8aConcat(secretKey, publicKey2).slice();
}

// node_modules/@polkadot/util-crypto/sr25519/derive.js
function createDeriveFn4(derive2) {
  return (keypair, chainCode) => {
    if (!isU8a(chainCode) || chainCode.length !== 32) {
      throw new Error("Invalid chainCode passed to derive");
    }
    return sr25519PairFromU8a4(derive2(sr25519KeypairToU8a4(keypair), chainCode));
  };
}

// node_modules/@polkadot/util-crypto/sr25519/deriveHard.js
var sr25519DeriveHard4 = createDeriveFn4(sr25519DeriveKeypairHard);

// node_modules/@polkadot/util-crypto/sr25519/deriveSoft.js
init_shim();
var sr25519DeriveSoft4 = createDeriveFn4(sr25519DeriveKeypairSoft);

// node_modules/@polkadot/util-crypto/sr25519/index.js
init_shim();

// node_modules/@polkadot/util-crypto/sr25519/agreement.js
init_shim();

// node_modules/@polkadot/util-crypto/sr25519/derivePublic.js
init_shim();

// node_modules/@polkadot/util-crypto/sr25519/pair/fromSeed.js
init_shim();

// node_modules/@polkadot/util-crypto/sr25519/sign.js
init_shim();

// node_modules/@polkadot/util-crypto/sr25519/verify.js
init_shim();
function sr25519Verify5(message, signature, publicKey2) {
  const publicKeyU8a = u8aToU8a(publicKey2);
  const signatureU8a = u8aToU8a(signature);
  if (publicKeyU8a.length !== 32) {
    throw new Error(`Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
  } else if (signatureU8a.length !== 64) {
    throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  }
  return sr25519Verify(signatureU8a, u8aToU8a(message), publicKeyU8a);
}

// node_modules/@polkadot/util-crypto/sr25519/vrfSign.js
init_shim();
var EMPTY_U8A8 = new Uint8Array();

// node_modules/@polkadot/util-crypto/sr25519/vrfVerify.js
init_shim();
var EMPTY_U8A9 = new Uint8Array();

// node_modules/@polkadot/util-crypto/address/encode.js
init_shim();

// node_modules/@polkadot/util-crypto/address/encodeDerived.js
init_shim();

// node_modules/@polkadot/util-crypto/address/keyDerived.js
init_shim();
var PREFIX7 = stringToU8a("modlpy/utilisuba");

// node_modules/@polkadot/util-crypto/address/encodeMulti.js
init_shim();

// node_modules/@polkadot/util-crypto/address/keyMulti.js
init_shim();

// node_modules/@polkadot/util-crypto/address/util.js
init_shim();

// node_modules/@polkadot/util-crypto/address/keyMulti.js
var PREFIX8 = stringToU8a("modlpy/utilisuba");

// node_modules/@polkadot/util-crypto/address/eq.js
init_shim();

// node_modules/@polkadot/util-crypto/address/evmToAddress.js
init_shim();

// node_modules/@polkadot/util-crypto/secp256k1/hasher.js
init_shim();

// node_modules/@polkadot/util-crypto/blake2/index.js
init_shim();

// node_modules/@polkadot/util-crypto/keccak/index.js
init_shim();

// node_modules/@polkadot/util-crypto/keccak/asU8a.js
init_shim();

// node_modules/@noble/hashes/esm/sha3.js
init_shim();
var [SHA3_PI4, SHA3_ROTL4, _SHA3_IOTA4] = [[], [], []];
var _0n47 = BigInt(0);
var _1n47 = BigInt(1);
var _2n38 = BigInt(2);
var _7n17 = BigInt(7);
var _256n7 = BigInt(256);
var _0x71n4 = BigInt(113);
for (let round = 0, R = _1n47, x = 1, y = 0; round < 24; round++) {
  [x, y] = [y, (2 * x + 3 * y) % 5];
  SHA3_PI4.push(2 * (5 * y + x));
  SHA3_ROTL4.push((round + 1) * (round + 2) / 2 % 64);
  let t = _0n47;
  for (let j = 0; j < 7; j++) {
    R = (R << _1n47 ^ (R >> _7n17) * _0x71n4) % _256n7;
    if (R & _2n38)
      t ^= _1n47 << (_1n47 << BigInt(j)) - _1n47;
  }
  _SHA3_IOTA4.push(t);
}
var [SHA3_IOTA_H4, SHA3_IOTA_L4] = u64_default4.split(_SHA3_IOTA4, true);
var rotlH4 = (h, l19, s) => s > 32 ? u64_default4.rotlBH(h, l19, s) : u64_default4.rotlSH(h, l19, s);
var rotlL4 = (h, l19, s) => s > 32 ? u64_default4.rotlBL(h, l19, s) : u64_default4.rotlSL(h, l19, s);
function keccakP4(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x = 0; x < 10; x++)
      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
    for (let x = 0; x < 10; x += 2) {
      const idx1 = (x + 8) % 10;
      const idx0 = (x + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH4(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL4(B0, B1, 1) ^ B[idx1 + 1];
      for (let y = 0; y < 50; y += 10) {
        s[x + y] ^= Th;
        s[x + y + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL4[t];
      const Th = rotlH4(curH, curL, shift);
      const Tl = rotlL4(curH, curL, shift);
      const PI = SHA3_PI4[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y = 0; y < 50; y += 10) {
      for (let x = 0; x < 10; x++)
        B[x] = s[y + x];
      for (let x = 0; x < 10; x++)
        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H4[round];
    s[1] ^= SHA3_IOTA_L4[round];
  }
  B.fill(0);
}
var Keccak4 = class extends Hash4 {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    assert_default.number(outputLen);
    if (0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200);
    this.state32 = u325(this.state);
  }
  keccak() {
    keccakP4(this.state32, this.rounds);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    assert_default.exists(this);
    const { blockLen, state } = this;
    data = toBytes4(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take2 = Math.min(blockLen - this.pos, len - pos);
      for (let i = 0; i < take2; i++)
        state[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state, suffix, pos, blockLen } = this;
    state[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    assert_default.exists(this, false);
    assert_default.bytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take2 = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take2), pos);
      this.posOut += take2;
      pos += take2;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes5) {
    assert_default.number(bytes5);
    return this.xofInto(new Uint8Array(bytes5));
  }
  digestInto(out) {
    assert_default.output(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    this.state.fill(0);
  }
  _cloneInto(to) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to || (to = new Keccak4(blockLen, suffix, outputLen, enableXOF, rounds));
    to.state32.set(this.state32);
    to.pos = this.pos;
    to.posOut = this.posOut;
    to.finished = this.finished;
    to.rounds = rounds;
    to.suffix = suffix;
    to.outputLen = outputLen;
    to.enableXOF = enableXOF;
    to.destroyed = this.destroyed;
    return to;
  }
};
var gen4 = (suffix, blockLen, outputLen) => wrapConstructor4(() => new Keccak4(blockLen, suffix, outputLen));
var sha3_2244 = gen4(6, 144, 224 / 8);
var sha3_2564 = gen4(6, 136, 256 / 8);
var sha3_3844 = gen4(6, 104, 384 / 8);
var sha3_5124 = gen4(6, 72, 512 / 8);
var keccak_2244 = gen4(1, 144, 224 / 8);
var keccak_2564 = gen4(1, 136, 256 / 8);
var keccak_3844 = gen4(1, 104, 384 / 8);
var keccak_5124 = gen4(1, 72, 512 / 8);
var genShake4 = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts4((opts = {}) => new Keccak4(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake1284 = genShake4(31, 168, 128 / 8);
var shake2564 = genShake4(31, 136, 256 / 8);

// node_modules/@polkadot/util-crypto/keccak/asU8a.js
var keccakAsU8a4 = createDualHasher4({ 256: keccak256, 512: keccak512 }, { 256: keccak_2564, 512: keccak_5124 });
var keccak256AsU8a4 = createBitHasher4(256, keccakAsU8a4);
var keccak512AsU8a4 = createBitHasher4(512, keccakAsU8a4);
var keccakAsHex4 = createAsHex4(keccakAsU8a4);

// node_modules/@polkadot/util-crypto/secp256k1/hasher.js
function hasher4(hashType, data, onlyJs) {
  return hashType === "keccak" ? keccakAsU8a4(data, void 0, onlyJs) : blake2AsU8a4(data, void 0, void 0, onlyJs);
}

// node_modules/@polkadot/util-crypto/address/is.js
init_shim();

// node_modules/@polkadot/util-crypto/address/validate.js
init_shim();

// node_modules/@polkadot/util-crypto/address/sort.js
init_shim();

// node_modules/@polkadot/util-crypto/address/setSS58Format.js
init_shim();
var l18 = logger("setSS58Format");

// node_modules/@polkadot/util-crypto/base32/index.js
init_shim();

// node_modules/@polkadot/util-crypto/base32/bs32.js
init_shim();
var chars4 = "abcdefghijklmnopqrstuvwxyz234567";
var config12 = {
  chars: chars4,
  coder: utils4.chain(
    // We define our own chain, the default base32 has padding
    utils4.radix2(5),
    utils4.alphabet(chars4),
    {
      decode: (input) => input.split(""),
      encode: (input) => input.join("")
    }
  ),
  ipfs: "b",
  type: "base32"
};
var base32Validate4 = createValidate4(config12);
var isBase324 = createIs4(base32Validate4);
var base32Decode4 = createDecode4(config12, base32Validate4);
var base32Encode4 = createEncode4(config12);

// node_modules/@polkadot/util-crypto/base64/index.js
init_shim();

// node_modules/@polkadot/util-crypto/base64/bs64.js
init_shim();
var config13 = {
  chars: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  coder: base644,
  type: "base64",
  withPadding: true
};
var base64Validate4 = createValidate4(config13);
var isBase644 = createIs4(base64Validate4);
var base64Decode4 = createDecode4(config13, base64Validate4);
var base64Encode4 = createEncode4(config13);

// node_modules/@polkadot/util-crypto/base64/pad.js
init_shim();

// node_modules/@polkadot/util-crypto/base64/trim.js
init_shim();

// node_modules/@polkadot/util-crypto/ethereum/index.js
init_shim();

// node_modules/@polkadot/util-crypto/ethereum/encode.js
init_shim();

// node_modules/@polkadot/util-crypto/secp256k1/index.js
init_shim();

// node_modules/@polkadot/util-crypto/secp256k1/compress.js
init_shim();
function secp256k1Compress5(publicKey2, onlyJs) {
  if (![33, 65].includes(publicKey2.length)) {
    throw new Error(`Invalid publicKey provided, received ${publicKey2.length} bytes input`);
  }
  if (publicKey2.length === 33) {
    return publicKey2;
  }
  return !hasBigInt || !onlyJs && isReady() ? secp256k1Compress(publicKey2) : secp256k14.ProjectivePoint.fromHex(publicKey2).toRawBytes(true);
}

// node_modules/@polkadot/util-crypto/secp256k1/expand.js
init_shim();
function secp256k1Expand5(publicKey2, onlyJs) {
  if (![33, 65].includes(publicKey2.length)) {
    throw new Error(`Invalid publicKey provided, received ${publicKey2.length} bytes input`);
  }
  if (publicKey2.length === 65) {
    return publicKey2.subarray(1);
  }
  if (!hasBigInt || !onlyJs && isReady()) {
    return secp256k1Expand(publicKey2).subarray(1);
  }
  const { px, py } = secp256k14.ProjectivePoint.fromHex(publicKey2);
  return u8aConcat(bnToU8a(px, BN_BE_256_OPTS4), bnToU8a(py, BN_BE_256_OPTS4));
}

// node_modules/@polkadot/util-crypto/secp256k1/recover.js
init_shim();
function secp256k1Recover5(msgHash, signature, recovery, hashType = "blake2", onlyJs) {
  const sig2 = u8aToU8a(signature).subarray(0, 64);
  const msg = u8aToU8a(msgHash);
  const publicKey2 = !hasBigInt || !onlyJs && isReady() ? secp256k1Recover(msg, sig2, recovery) : secp256k14.Signature.fromCompact(sig2).addRecoveryBit(recovery).recoverPublicKey(msg).toRawBytes();
  if (!publicKey2) {
    throw new Error("Unable to recover publicKey from signature");
  }
  return hashType === "keccak" ? secp256k1Expand5(publicKey2, onlyJs) : secp256k1Compress5(publicKey2, onlyJs);
}

// node_modules/@polkadot/util-crypto/secp256k1/sign.js
init_shim();

// node_modules/@polkadot/util-crypto/secp256k1/tweakAdd.js
init_shim();
var N4 = "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141".replace(/ /g, "");
var N_BI4 = BigInt3(`0x${N4}`);
var N_BN4 = new import_bn.default(N4, "hex");

// node_modules/@polkadot/util-crypto/secp256k1/verify.js
init_shim();
function secp256k1Verify4(msgHash, signature, address, hashType = "blake2", onlyJs) {
  const sig2 = u8aToU8a(signature);
  if (sig2.length !== 65) {
    throw new Error(`Expected signature with 65 bytes, ${sig2.length} found instead`);
  }
  const publicKey2 = secp256k1Recover5(hasher4(hashType, msgHash), sig2, sig2[64], hashType, onlyJs);
  const signerAddr = hasher4(hashType, publicKey2, onlyJs);
  const inputAddr = u8aToU8a(address);
  return u8aEq(publicKey2, inputAddr) || (hashType === "keccak" ? u8aEq(signerAddr.slice(-20), inputAddr.slice(-20)) : u8aEq(signerAddr, inputAddr));
}

// node_modules/@polkadot/util-crypto/ethereum/isAddress.js
init_shim();

// node_modules/@polkadot/util-crypto/ethereum/isChecksum.js
init_shim();

// node_modules/@polkadot/util-crypto/hd/index.js
init_shim();

// node_modules/@polkadot/util-crypto/hd/ethereum/index.js
init_shim();

// node_modules/@polkadot/util-crypto/hmac/index.js
init_shim();

// node_modules/@polkadot/util-crypto/hmac/shaAsU8a.js
init_shim();
var JS_HASH4 = {
  256: sha2565,
  512: sha5125
};
var WA_MHAC4 = {
  256: hmacSha256,
  512: hmacSha512
};
function createSha4(bitLength) {
  return (key, data, onlyJs) => hmacShaAsU8a4(key, data, bitLength, onlyJs);
}
function hmacShaAsU8a4(key, data, bitLength = 256, onlyJs) {
  const u8aKey = u8aToU8a(key);
  return !hasBigInt || !onlyJs && isReady() ? WA_MHAC4[bitLength](u8aKey, data) : hmac4(JS_HASH4[bitLength], u8aKey, data);
}
var hmacSha256AsU8a4 = createSha4(256);
var hmacSha512AsU8a4 = createSha4(512);

// node_modules/@polkadot/util-crypto/hd/validatePath.js
init_shim();

// node_modules/@polkadot/util-crypto/hd/ethereum/index.js
var MASTER_SECRET4 = stringToU8a("Bitcoin seed");

// node_modules/@polkadot/util-crypto/hd/ledger/index.js
init_shim();

// node_modules/@polkadot/util-crypto/mnemonic/index.js
init_shim();

// node_modules/@polkadot/util-crypto/mnemonic/generate.js
init_shim();

// node_modules/@polkadot/util-crypto/mnemonic/bip39.js
init_shim();

// node_modules/@polkadot/util-crypto/pbkdf2/index.js
init_shim();

// node_modules/@polkadot/util-crypto/pbkdf2/encode.js
init_shim();

// node_modules/@noble/hashes/esm/pbkdf2.js
init_shim();
function pbkdf2Init2(hash5, _password, _salt, _opts) {
  assert_default.hash(hash5);
  const opts = checkOpts4({ dkLen: 32, asyncTick: 10 }, _opts);
  const { c, dkLen, asyncTick } = opts;
  assert_default.number(c);
  assert_default.number(dkLen);
  assert_default.number(asyncTick);
  if (c < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const password = toBytes4(_password);
  const salt = toBytes4(_salt);
  const DK = new Uint8Array(dkLen);
  const PRF = hmac4.create(hash5, password);
  const PRFSalt = PRF._cloneInto().update(salt);
  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
function pbkdf2Output2(PRF, PRFSalt, DK, prfW, u) {
  PRF.destroy();
  PRFSalt.destroy();
  if (prfW)
    prfW.destroy();
  u.fill(0);
  return DK;
}
function pbkdf25(hash5, password, salt, opts) {
  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init2(hash5, password, salt, opts);
  let prfW;
  const arr = new Uint8Array(4);
  const view = createView4(arr);
  const u = new Uint8Array(PRF.outputLen);
  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
    const Ti = DK.subarray(pos, pos + PRF.outputLen);
    view.setInt32(0, ti, false);
    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
    Ti.set(u.subarray(0, Ti.length));
    for (let ui = 1; ui < c; ui++) {
      PRF._cloneInto(prfW).update(u).digestInto(u);
      for (let i = 0; i < Ti.length; i++)
        Ti[i] ^= u[i];
    }
  }
  return pbkdf2Output2(PRF, PRFSalt, DK, prfW, u);
}

// node_modules/@polkadot/util-crypto/pbkdf2/encode.js
function pbkdf2Encode4(passphrase, salt = randomAsU8a4(), rounds = 2048, onlyJs) {
  const u8aPass = u8aToU8a(passphrase);
  const u8aSalt = u8aToU8a(salt);
  return {
    password: !hasBigInt || !onlyJs && isReady() ? pbkdf2(u8aPass, u8aSalt, rounds) : pbkdf25(sha5125, u8aPass, u8aSalt, { c: rounds, dkLen: 64 }),
    rounds,
    salt
  };
}

// node_modules/@polkadot/util-crypto/sha/index.js
init_shim();

// node_modules/@polkadot/util-crypto/sha/asU8a.js
init_shim();
var shaAsU8a4 = createDualHasher4({ 256: sha256, 512: sha512 }, { 256: sha2565, 512: sha5125 });
var sha256AsU8a4 = createBitHasher4(256, shaAsU8a4);
var sha512AsU8a4 = createBitHasher4(512, shaAsU8a4);

// node_modules/@polkadot/util-crypto/mnemonic/wordlists/en.js
init_shim();
var en_default4 = "abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo".split("|");

// node_modules/@polkadot/util-crypto/mnemonic/bip39.js
var INVALID_MNEMONIC2 = "Invalid mnemonic";
var INVALID_ENTROPY2 = "Invalid entropy";
var INVALID_CHECKSUM2 = "Invalid mnemonic checksum";
function normalize6(str) {
  return (str || "").normalize("NFKD");
}
function binaryToByte2(bin) {
  return parseInt(bin, 2);
}
function bytesToBinary2(bytes5) {
  return bytes5.map((x) => x.toString(2).padStart(8, "0")).join("");
}
function deriveChecksumBits2(entropyBuffer) {
  return bytesToBinary2(Array.from(sha256AsU8a4(entropyBuffer))).slice(0, entropyBuffer.length * 8 / 32);
}
function mnemonicToEntropy7(mnemonic, wordlist = en_default4) {
  const words = normalize6(mnemonic).split(" ");
  if (words.length % 3 !== 0) {
    throw new Error(INVALID_MNEMONIC2);
  }
  const bits = words.map((word) => {
    const index = wordlist.indexOf(word);
    if (index === -1) {
      throw new Error(INVALID_MNEMONIC2);
    }
    return index.toString(2).padStart(11, "0");
  }).join("");
  const dividerIndex = Math.floor(bits.length / 33) * 32;
  const entropyBits = bits.slice(0, dividerIndex);
  const checksumBits = bits.slice(dividerIndex);
  const matched = entropyBits.match(/(.{1,8})/g);
  const entropyBytes = matched && matched.map(binaryToByte2);
  if (!entropyBytes || entropyBytes.length % 4 !== 0 || entropyBytes.length < 16 || entropyBytes.length > 32) {
    throw new Error(INVALID_ENTROPY2);
  }
  const entropy = u8aToU8a(entropyBytes);
  if (deriveChecksumBits2(entropy) !== checksumBits) {
    throw new Error(INVALID_CHECKSUM2);
  }
  return entropy;
}
function entropyToMnemonic(entropy, wordlist = en_default4) {
  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
    throw new Error(INVALID_ENTROPY2);
  }
  const matched = `${bytesToBinary2(Array.from(entropy))}${deriveChecksumBits2(entropy)}`.match(/(.{1,11})/g);
  const mapped = matched && matched.map((b) => wordlist[binaryToByte2(b)]);
  if (!mapped || mapped.length < 12) {
    throw new Error("Unable to map entropy to mnemonic");
  }
  return mapped.join(" ");
}
function generateMnemonic4(numWords, wordlist) {
  return entropyToMnemonic(randomAsU8a4(numWords / 3 * 4), wordlist);
}
function validateMnemonic4(mnemonic, wordlist) {
  try {
    mnemonicToEntropy7(mnemonic, wordlist);
  } catch {
    return false;
  }
  return true;
}

// node_modules/@polkadot/util-crypto/mnemonic/generate.js
function mnemonicGenerate4(numWords = 12, wordlist, onlyJs) {
  return !hasBigInt || !wordlist && !onlyJs && isReady() ? bip39Generate(numWords) : generateMnemonic4(numWords, wordlist);
}

// node_modules/@polkadot/util-crypto/mnemonic/toEntropy.js
init_shim();
function mnemonicToEntropy8(mnemonic, wordlist, onlyJs) {
  return !hasBigInt || !wordlist && !onlyJs && isReady() ? bip39ToEntropy(mnemonic) : mnemonicToEntropy7(mnemonic, wordlist);
}

// node_modules/@polkadot/util-crypto/mnemonic/toLegacySeed.js
init_shim();

// node_modules/@polkadot/util-crypto/mnemonic/validate.js
init_shim();
function mnemonicValidate4(mnemonic, wordlist, onlyJs) {
  return !hasBigInt || !wordlist && !onlyJs && isReady() ? bip39Validate(mnemonic) : validateMnemonic4(mnemonic, wordlist);
}

// node_modules/@polkadot/util-crypto/mnemonic/toMiniSecret.js
init_shim();
function mnemonicToMiniSecret4(mnemonic, password = "", wordlist, onlyJs) {
  if (!mnemonicValidate4(mnemonic, wordlist, onlyJs)) {
    throw new Error("Invalid bip39 mnemonic specified");
  } else if (!wordlist && !onlyJs && isReady()) {
    return bip39ToMiniSecret(mnemonic, password);
  }
  const entropy = mnemonicToEntropy8(mnemonic, wordlist);
  const salt = stringToU8a(`mnemonic${password}`);
  return pbkdf2Encode4(entropy, salt).password.slice(0, 32);
}

// node_modules/@polkadot/util-crypto/hd/ledger/derivePrivate.js
init_shim();

// node_modules/@polkadot/util-crypto/hd/ledger/master.js
init_shim();

// node_modules/@polkadot/util-crypto/json/index.js
init_shim();

// node_modules/@polkadot/util-crypto/json/decrypt.js
init_shim();

// node_modules/@polkadot/util-crypto/json/decryptData.js
init_shim();

// node_modules/@polkadot/util-crypto/nacl/index.js
init_shim();

// node_modules/@polkadot/util-crypto/nacl/decrypt.js
init_shim();

// node_modules/@polkadot/util-crypto/nacl/tweetnacl.js
init_shim();
var sigma4 = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
var minusp4 = new Uint32Array([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252]);

// node_modules/@polkadot/util-crypto/nacl/encrypt.js
init_shim();

// node_modules/@polkadot/util-crypto/scrypt/index.js
init_shim();

// node_modules/@polkadot/util-crypto/scrypt/encode.js
init_shim();

// node_modules/@noble/hashes/esm/scrypt.js
init_shim();

// node_modules/@polkadot/util-crypto/scrypt/defaults.js
init_shim();
var DEFAULT_PARAMS4 = {
  N: 1 << 15,
  p: 1,
  r: 8
};

// node_modules/@polkadot/util-crypto/scrypt/fromU8a.js
init_shim();

// node_modules/@polkadot/util-crypto/scrypt/toU8a.js
init_shim();

// node_modules/@polkadot/util-crypto/json/constants.js
init_shim();
var SCRYPT_LENGTH4 = 32 + 3 * 4;

// node_modules/@polkadot/util-crypto/json/encrypt.js
init_shim();

// node_modules/@polkadot/util-crypto/json/encryptFormat.js
init_shim();

// node_modules/@polkadot/util-crypto/signature/index.js
init_shim();

// node_modules/@polkadot/util-crypto/signature/verify.js
init_shim();
var secp256k1VerifyHasher4 = (hashType) => (message, signature, publicKey2) => secp256k1Verify4(message, signature, publicKey2, hashType);
var VERIFIERS_ECDSA4 = [
  ["ecdsa", secp256k1VerifyHasher4("blake2")],
  ["ethereum", secp256k1VerifyHasher4("keccak")]
];
var VERIFIERS4 = [
  ["ed25519", ed25519Verify5],
  ["sr25519", sr25519Verify5],
  ...VERIFIERS_ECDSA4
];
var CRYPTO_TYPES2 = ["ed25519", "sr25519", "ecdsa"];
function verifyDetect2(result, { message, publicKey: publicKey2, signature }, verifiers = VERIFIERS4) {
  result.isValid = verifiers.some(([crypto6, verify]) => {
    try {
      if (verify(message, signature, publicKey2)) {
        result.crypto = crypto6;
        return true;
      }
    } catch {
    }
    return false;
  });
  return result;
}
function verifyMultisig2(result, { message, publicKey: publicKey2, signature }) {
  if (![0, 1, 2].includes(signature[0])) {
    throw new Error(`Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);
  }
  const type = CRYPTO_TYPES2[signature[0]] || "none";
  result.crypto = type;
  try {
    result.isValid = {
      ecdsa: () => verifyDetect2(result, { message, publicKey: publicKey2, signature: signature.subarray(1) }, VERIFIERS_ECDSA4).isValid,
      ed25519: () => ed25519Verify5(message, signature.subarray(1), publicKey2),
      none: () => {
        throw Error("no verify for `none` crypto type");
      },
      sr25519: () => sr25519Verify5(message, signature.subarray(1), publicKey2)
    }[type]();
  } catch {
  }
  return result;
}
function getVerifyFn2(signature) {
  return [0, 1, 2].includes(signature[0]) && [65, 66].includes(signature.length) ? verifyMultisig2 : verifyDetect2;
}
function signatureVerify4(message, signature, addressOrPublicKey) {
  const signatureU8a = u8aToU8a(signature);
  if (![64, 65, 66].includes(signatureU8a.length)) {
    throw new Error(`Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);
  }
  const publicKey2 = decodeAddress4(addressOrPublicKey);
  const input = { message: u8aToU8a(message), publicKey: publicKey2, signature: signatureU8a };
  const result = { crypto: "none", isValid: false, isWrapped: u8aIsWrapped(input.message, true), publicKey: publicKey2 };
  const isWrappedBytes = u8aIsWrapped(input.message, false);
  const verifyFn = getVerifyFn2(signatureU8a);
  verifyFn(result, input);
  if (result.crypto !== "none" || result.isWrapped && !isWrappedBytes) {
    return result;
  }
  input.message = isWrappedBytes ? u8aUnwrapBytes(input.message) : u8aWrapBytes(input.message);
  return verifyFn(result, input);
}

// node_modules/@polkadot/util-crypto/xxhash/index.js
init_shim();

// node_modules/@polkadot/util-crypto/xxhash/asU8a.js
init_shim();

// node_modules/@polkadot/util-crypto/xxhash/xxhash64.js
init_shim();
var P64_14 = BigInt3("11400714785074694791");
var P64_24 = BigInt3("14029467366897019727");
var P64_34 = BigInt3("1609587929392839161");
var P64_44 = BigInt3("9650029242287828579");
var P64_54 = BigInt3("2870177450012600261");
var U644 = BigInt3("0xffffffffffffffff");
var _7n18 = BigInt3(7);
var _11n4 = BigInt3(11);
var _12n4 = BigInt3(12);
var _16n8 = BigInt3(16);
var _18n4 = BigInt3(18);
var _23n4 = BigInt3(23);
var _27n4 = BigInt3(27);
var _29n4 = BigInt3(29);
var _31n4 = BigInt3(31);
var _32n8 = BigInt3(32);
var _33n4 = BigInt3(33);
var _64n4 = BigInt3(64);
var _256n8 = BigInt3(256);
function rotl5(a, b) {
  const c = a & U644;
  return (c << b | c >> _64n4 - b) & U644;
}
function fromU8a4(u8a9, p, count2) {
  const bigints = new Array(count2);
  let offset = 0;
  for (let i = 0; i < count2; i++, offset += 2) {
    bigints[i] = BigInt3(u8a9[p + offset] | u8a9[p + 1 + offset] << 8);
  }
  let result = _0n;
  for (let i = count2 - 1; i >= 0; i--) {
    result = (result << _16n8) + bigints[i];
  }
  return result;
}
function init4(seed, input) {
  const state = {
    seed,
    u8a: new Uint8Array(32),
    u8asize: 0,
    v1: seed + P64_14 + P64_24,
    v2: seed + P64_24,
    v3: seed,
    v4: seed - P64_14
  };
  if (input.length < 32) {
    state.u8a.set(input);
    state.u8asize = input.length;
    return state;
  }
  const limit = input.length - 32;
  let p = 0;
  if (limit >= 0) {
    const adjustV = (v) => P64_14 * rotl5(v + P64_24 * fromU8a4(input, p, 4), _31n4);
    do {
      state.v1 = adjustV(state.v1);
      p += 8;
      state.v2 = adjustV(state.v2);
      p += 8;
      state.v3 = adjustV(state.v3);
      p += 8;
      state.v4 = adjustV(state.v4);
      p += 8;
    } while (p <= limit);
  }
  if (p < input.length) {
    state.u8a.set(input.subarray(p, input.length));
    state.u8asize = input.length - p;
  }
  return state;
}
function xxhash644(input, initSeed) {
  const { seed, u8a: u8a9, u8asize, v1: v17, v2: v22, v3, v4: v411 } = init4(BigInt3(initSeed), input);
  let p = 0;
  let h64 = U644 & BigInt3(input.length) + (input.length >= 32 ? ((((rotl5(v17, _1n) + rotl5(v22, _7n18) + rotl5(v3, _12n4) + rotl5(v411, _18n4) ^ P64_14 * rotl5(v17 * P64_24, _31n4)) * P64_14 + P64_44 ^ P64_14 * rotl5(v22 * P64_24, _31n4)) * P64_14 + P64_44 ^ P64_14 * rotl5(v3 * P64_24, _31n4)) * P64_14 + P64_44 ^ P64_14 * rotl5(v411 * P64_24, _31n4)) * P64_14 + P64_44 : seed + P64_54);
  while (p <= u8asize - 8) {
    h64 = U644 & P64_44 + P64_14 * rotl5(h64 ^ P64_14 * rotl5(P64_24 * fromU8a4(u8a9, p, 4), _31n4), _27n4);
    p += 8;
  }
  if (p + 4 <= u8asize) {
    h64 = U644 & P64_34 + P64_24 * rotl5(h64 ^ P64_14 * fromU8a4(u8a9, p, 2), _23n4);
    p += 4;
  }
  while (p < u8asize) {
    h64 = U644 & P64_14 * rotl5(h64 ^ P64_54 * BigInt3(u8a9[p++]), _11n4);
  }
  h64 = U644 & P64_24 * (h64 ^ h64 >> _33n4);
  h64 = U644 & P64_34 * (h64 ^ h64 >> _29n4);
  h64 = U644 & (h64 ^ h64 >> _32n8);
  const result = new Uint8Array(8);
  for (let i = 7; i >= 0; i--) {
    result[i] = Number(h64 % _256n8);
    h64 = h64 / _256n8;
  }
  return result;
}

// node_modules/@polkadot/util-crypto/xxhash/asU8a.js
function xxhashAsU8a4(data, bitLength = 64, onlyJs) {
  const rounds = Math.ceil(bitLength / 64);
  const u8a9 = u8aToU8a(data);
  if (!hasBigInt || !onlyJs && isReady()) {
    return twox(u8a9, rounds);
  }
  const result = new Uint8Array(rounds * 8);
  for (let seed = 0; seed < rounds; seed++) {
    result.set(xxhash644(u8a9, seed).reverse(), seed * 8);
  }
  return result;
}
var xxhashAsHex4 = createAsHex4(xxhashAsU8a4);

// node_modules/@gear-js/api/utils/generate.js
var import_assert27 = __toESM(require_assert(), 1);
var VOUCHER_PREFIX = stringToU8a("modlpy/voucher__");
function generateCodeHash(code) {
  return blake2AsHex4(u8aToU8a(code), 256);
}
function generateProgramId(api, codeOrHash, salt) {
  const [code, codeHash] = typeof codeOrHash === "string" ? [void 0, codeOrHash] : [codeOrHash, void 0];
  const codeHashU8a = codeHash ? u8aToU8a(codeHash) : blake2AsU8a4(code, 256);
  const saltU8a = CreateType.create("Vec<u8>", salt).toU8a().slice(1);
  const prefix2 = api.specVersion >= 1010 ? "program_from_user" : "program";
  const programStrU8a = new TextEncoder().encode(prefix2);
  const id = Uint8Array.from([...programStrU8a, ...codeHashU8a, ...saltU8a]);
  return blake2AsHex4(id, 256);
}
function generateVoucherId(who, program) {
  const whoU8a = u8aToU8a(who);
  const programU8a = u8aToU8a(program);
  const id = Uint8Array.from([...VOUCHER_PREFIX, ...whoU8a, ...programU8a]);
  return blake2AsHex4(id, 256);
}

// node_modules/@gear-js/api/utils/prefixes.js
init_shim();
var GPROG = "g::prog::";
var GPAGES = "g::pages::";
var GPROG_HEX = import_buffer.Buffer.from(GPROG).toString("hex");
var GPAGES_HEX = import_buffer.Buffer.from("g::pages::").toString("hex");
function getIdsFromKeys(keys2, prefix2) {
  return keys2.map((key) => "0x" + key.toHex().slice(prefix2.length));
}

// node_modules/@gear-js/api/utils/separator.js
init_shim();
var SEPARATOR = import_buffer.Buffer.from("::").toString("hex");

// node_modules/@gear-js/api/utils/validate.js
init_shim();

// node_modules/@gear-js/api/errors/validation.errors.js
init_shim();
var ValidationError = class extends Error {
  constructor(message) {
    super(message);
    __publicField(this, "name", "ValidationError");
  }
};

// node_modules/@gear-js/api/utils/validate.js
function validateValue(value, api) {
  if (!value)
    return;
  const existentialDeposit = api.existentialDeposit;
  const bigintValue = value instanceof Uint8Array ? u8aToBigInt(value) : value instanceof u128 || value instanceof import_bn.default ? BigInt(value.toString()) : BigInt(value);
  if (bigintValue > 0 && bigintValue < existentialDeposit.toBigInt()) {
    throw new ValidationError(`Value less than minimal. Minimal value: ${existentialDeposit.toHuman()}`);
  }
}
function validateGasLimit(gas, api) {
  if (gas === void 0)
    throw new ValidationError("Gas limit doesn't specified");
  const bigintGas = gas instanceof Uint8Array ? u8aToBigInt(gas) : gas instanceof u642 || gas instanceof import_bn.default ? BigInt(gas.toString()) : BigInt(gas);
  if (bigintGas > api.blockGasLimit.toBigInt()) {
    throw new ValidationError(`GasLimit too high. Maximum gasLimit value is ${api.blockGasLimit.toHuman()}`);
  }
}
async function validateCodeId(codeId, api) {
  if (await api.code.exists(codeId)) {
    throw new ValidationError("Code already exists");
  }
}
async function validateProgramId(programId, api) {
  const isExist = await api.program.exists(programId);
  if (!isExist) {
    throw new ValidationError(`Program with id ${programId} doesn't exist`);
  }
}
async function validateVoucher(programId, who, api) {
  const id = generateVoucherId(who, programId);
  const balance = await api.balance.findOut(id);
  if (balance.eqn(0)) {
    throw new ValidationError(`Voucher with id ${id} doesn't exist`);
  }
}
async function validateMailboxItem(account3, messageId, api) {
  const mailbox = await api.mailbox.read(account3, messageId);
  if (!mailbox) {
    throw new Error(`There is no message with id ${messageId} in the mailbox`);
  }
  return mailbox[0];
}

// node_modules/@gear-js/api/Code.js
var import_assert29 = __toESM(require_assert(), 1);

// node_modules/@gear-js/api/errors/program.errors.js
init_shim();
var SubmitProgramError = class extends Error {
  constructor(message) {
    super(message || "Unable to submit the program. Params are invalid");
    __publicField(this, "name", "SubmitProgramError");
  }
};
var ProgramDoesNotExistError = class extends Error {
  constructor(id) {
    super(`Program with id ${id} does not exist`);
    __publicField(this, "name", "ProgramDoesNotExist");
  }
};
var PausedProgramDoesNotExistError = class extends Error {
  constructor(id) {
    super(`Program with id ${id} not found in paused program storage`);
    __publicField(this, "name", "PausedProgramDoesNotExistError");
  }
};
var ProgramTerminatedError = class extends Error {
  constructor(id) {
    super(`Program ${id} terminated`);
    __publicField(this, "name", "ProgramTerminated");
  }
};
var ProgramExitedError = class extends Error {
  constructor(id) {
    super(`Program ${id} exited`);
    __publicField(this, "name", "ProgramExited");
  }
};
var CodeDoesNotExistError = class extends Error {
  constructor(id) {
    super(`Code with id ${id} not found in the storage`);
    __publicField(this, "name", "CodeDoesNotExist");
  }
};
var ProgramHasNoMetahash = class extends Error {
  constructor(id) {
    super(`Program with id ${id} has not metahash function`);
    __publicField(this, "name", "ProgramHasNoMetahash");
  }
};
var ResumeSessionInitError = class extends Error {
  constructor(programId, msg) {
    super(`Resume session init for program ${programId} failed. ${msg ? msg : ""}`);
    __publicField(this, "name", "ResumeSessionInitError");
  }
};
var ResumeSessionPushError = class extends Error {
  constructor(sessionId, msg) {
    super(`Failed to push pages to session ${sessionId}. ${msg || ""}`);
    __publicField(this, "name", "ResumeSessionPushError");
  }
};
var ResumeSessionCommitError = class extends Error {
  constructor(sessionId, msg) {
    super(`Failed to commit session ${sessionId}. ${msg || ""}`);
    __publicField(this, "name", "ResumeSessionCommitError");
  }
};

// node_modules/@gear-js/api/wasm/reply.js
init_shim();

// node_modules/@gear-js/api/wasm/importObj.js
init_shim();
var import_assert28 = __toESM(require_assert(), 1);
var importObj = (memory, showDebug, inputValue, timestamp2, block_height, replyFn = () => {
}) => ({
  env: {
    abortStackOverflow: () => {
      throw new Error("overflow");
    },
    table: new WebAssembly.Table({
      initial: 0,
      maximum: 0,
      element: "anyfunc"
    }),
    tableBase: 0,
    memory,
    memoryBase: 1024,
    STACKTOP: 0,
    STACK_MAX: memory.buffer.byteLength,
    alloc: (pages) => {
      return memory.grow(pages);
    },
    free: () => {
    },
    gr_block_height: () => block_height,
    gr_block_timestamp: () => timestamp2,
    gr_create_program_wgas: () => {
    },
    gr_create_program: () => {
    },
    gr_reply_deposit: () => {
    },
    gr_debug: (payload, len) => {
      if (showDebug) {
        console.debug("[GR_DEBUG]", new TypeRegistry().createType("String", new Uint8Array(memory.buffer.slice(payload, payload + len))).toHuman());
      }
    },
    gr_error: (error, len) => {
      console.error("[GR_ERROR]", new TypeRegistry().createType("String", new Uint8Array(memory.buffer.slice(error, error + len))).toHuman());
    },
    gr_exit: () => {
    },
    gr_gas_available: () => {
    },
    gr_leave: () => {
    },
    gr_message_id: () => {
    },
    gr_oom_panic: () => {
    },
    gr_origin: () => {
    },
    gr_panic: () => {
    },
    gr_pay_program_rent: () => {
    },
    gr_reply_code: () => {
    },
    gr_signal_code: () => {
    },
    gr_program_id: () => {
    },
    gr_random: () => {
    },
    gr_read: (at, len, buffer2) => {
      import_assert28.default.notStrictEqual(inputValue, void 0, "Input value not found");
      new Uint8Array(memory.buffer).set(inputValue.slice(at, len), buffer2);
    },
    gr_reply_commit_wgas: () => {
    },
    gr_reply_commit: () => {
    },
    gr_reply_push: () => {
    },
    gr_reply_to: () => {
    },
    gr_signal_from: () => {
    },
    gr_reply_wgas: () => {
    },
    gr_reply: replyFn,
    gr_reservation_reply_commit: () => {
    },
    gr_reservation_reply: () => {
    },
    gr_reservation_send_commit: () => {
    },
    gr_reservation_send: () => {
    },
    gr_reserve_gas: () => {
    },
    gr_send_commit_wgas: () => {
    },
    gr_send_commit: () => {
    },
    gr_send_init: () => {
    },
    gr_send_push: () => {
    },
    gr_send_wgas: () => {
    },
    gr_send: () => {
    },
    gr_size: (size_ptr) => {
      import_assert28.default.notStrictEqual(inputValue, void 0, "Input value not found");
      const len = new TypeRegistry().createType("u32", inputValue.byteLength).toU8a();
      for (let i = 0; i < len.length; i++) {
        new Uint8Array(memory.buffer)[size_ptr + i] = len[i];
      }
    },
    gr_source: () => {
    },
    gr_status_code: () => {
    },
    gr_system_reserve_gas: () => {
    },
    gr_unreserve_gas: () => {
    },
    gr_value_available: () => {
    },
    gr_value: () => {
    },
    gr_wait: () => {
    },
    gr_wait_up_to: () => {
    },
    gr_wait_for: () => {
    },
    gr_wake: () => {
    },
    gr_reply_push_input: () => {
    },
    gr_reply_input_wgas: () => {
    },
    gr_reply_input: () => {
    },
    gr_send_push_input: () => {
    },
    gr_send_input_wgas: () => {
    },
    gr_send_input: () => {
    }
  }
});

// node_modules/@gear-js/api/wasm/reply.js
function getGrReply(wasm, fn) {
  const buffer2 = isHex(wasm) ? hexToU8a(wasm).buffer : isU8a(wasm) ? wasm.buffer : wasm;
  const memory = new WebAssembly.Memory({ initial: 256 });
  return new Promise((resolve, reject) => {
    WebAssembly.instantiate(buffer2, importObj(memory, false, void 0, void 0, void 0, (payload, len) => resolve(new Uint8Array(memory.buffer.slice(payload, payload + len))))).then(({ instance: { exports } }) => {
      if (!(fn in exports)) {
        reject(`${fn} function not found in exports`);
      } else if (typeof exports[fn] !== "function") {
        reject(`${fn} is not a function`);
      } else {
        exports[fn]();
      }
    });
  });
}

// node_modules/@gear-js/api/Code.js
var GearCode = class extends GearTransaction {
  /**
   * ### Submit code without initialization
   * @param code
   * @returns Code hash
   */
  async upload(code) {
    const codeHash = generateCodeHash(code);
    await validateCodeId(codeHash, this._api);
    const codeBytes = this._api.createType("Bytes", Array.from(code));
    this.extrinsic = this._api.tx.gear.uploadCode(codeBytes);
    return { codeHash, submitted: this.extrinsic };
  }
  /**
   * ### Check that codeId exists on chain
   * @param codeId
   */
  async exists(codeId) {
    const codeMetadata = await this._api.query.gearProgram.metadataStorage(codeId);
    return codeMetadata.isSome;
  }
  /**
   * ### Get code storage
   * @param codeId
   */
  async storage(codeId) {
    return this._api.query.gearProgram.codeStorage(codeId);
  }
  /**
   * ### Get static pages of code
   * @param codeId
   */
  async staticPages(codeId) {
    const storage = await this.storage(codeId);
    return storage.isSome ? storage.unwrap().staticPages.toNumber() : null;
  }
  /**
   * ### Get all ids of codes uploaded on connected chain
   * @returns array of code ids uploaded on chain
   */
  async all() {
    const prefix2 = this._api.query.gearProgram.metadataStorage.keyPrefix();
    const keys2 = await this._api.rpc.state.getKeys(prefix2);
    const codeIds = getIdsFromKeys(keys2, prefix2);
    return codeIds;
  }
  async metaHash(codeId) {
    const code = await this._api.query.gearProgram.originalCodeStorage(codeId);
    if (code.isNone) {
      throw new CodeDoesNotExistError(codeId);
    }
    const metahash = await getGrReply(code.unwrap().toHex(), "metahash");
    return u8aToHex(metahash);
  }
  async metaHashFromWasm(wasm) {
    const metahash = await getGrReply(wasm, "metahash");
    return u8aToHex(metahash);
  }
};

// node_modules/@gear-js/api/events/Events.js
init_shim();
var _umsActorsMatch, umsActorsMatch_fn;
var GearEvents = class {
  constructor(gearApi) {
    __privateAdd(this, _umsActorsMatch);
    __publicField(this, "api");
    this.api = gearApi;
  }
  subscribeToGearEvent(method, callback) {
    return this.api.query.system.events((events2) => {
      events2.filter(({ event }) => event.method === method).forEach(({ event }) => {
        callback(event);
      });
    });
  }
  subscribeToGearVoucherEvent(method, callback) {
    return this.api.query.system.events((events2) => {
      events2.filter(({ event }) => event.method === method).forEach(({ event }) => {
        callback(event);
      });
    });
  }
  subscribeToUserMessageSentByActor(options, callback) {
    return this.api.query.system.events((events2) => {
      events2.filter(({ event }) => event.method === "UserMessageSent").forEach(({ event }) => {
        if (__privateMethod(this, _umsActorsMatch, umsActorsMatch_fn).call(this, options.from, options.to, event)) {
          callback(event);
        }
      });
    });
  }
  subscribeToTransferEvents(callback) {
    return this.api.query.system.events((events2) => {
      events2.filter(({ event }) => this.api.events.balances.Transfer.is(event)).forEach(({ event }) => {
        callback(event);
      });
    });
  }
  /**
   * @deprecated Use api.blocks.subscribeNewHeads instead
   */
  subscribeToNewBlocks(callback) {
    return this.api.rpc.chain.subscribeNewHeads((header) => {
      callback(header);
    });
  }
  async subscribeToBalanceChanges(accountAddress, callback) {
    let { data: { free: previousFree } } = await this.api.query.system.account(accountAddress);
    return this.api.query.system.account(accountAddress, ({ data: { free: currentFree } }) => {
      if (!currentFree.sub(previousFree).isZero()) {
        callback(this.api.createType("Balance", currentFree));
        previousFree = currentFree;
      }
    });
  }
};
_umsActorsMatch = new WeakSet();
umsActorsMatch_fn = function(from2, to, event) {
  if (event.data.message.source.eq(from2) || event.data.message.destination.eq(to)) {
    return true;
  }
  return false;
};

// node_modules/@gear-js/api/Mailbox.js
init_shim();
var GearMailbox = class {
  constructor(api) {
    __publicField(this, "api");
    __publicField(this, "claimValue");
    this.api = api;
    this.claimValue = api.claimValueFromMailbox;
  }
  async read(accountId2, messageIdOrNumberOfMessages) {
    const [messageId, numberOfMessages] = typeof messageIdOrNumberOfMessages === "string" ? [messageIdOrNumberOfMessages, void 0] : [void 0, messageIdOrNumberOfMessages || 1e3];
    if (messageId) {
      const mailbox = await this.api.query.gearMessenger.mailbox(accountId2, messageId);
      const typedMailbox = this.api.createType("Option<(UserStoredMessage, Interval)>", mailbox);
      return typedMailbox.unwrapOr(null);
    } else {
      const keyPrefixes = this.api.query.gearMessenger.mailbox.keyPrefix(accountId2);
      const keysPaged = await this.api.rpc.state.getKeysPaged(keyPrefixes, numberOfMessages, keyPrefixes);
      if (keysPaged.length === 0) {
        return [];
      }
      const mailbox = await this.api.rpc.state.queryStorageAt(keysPaged);
      return mailbox.map((item) => {
        const typedItem = this.api.createType("Option<(UserStoredMessage, Interval)>", item);
        return typedItem.unwrapOr(null);
      });
    }
  }
};

// node_modules/@gear-js/api/Message.js
init_shim();

// node_modules/@gear-js/api/errors/message.errors.js
init_shim();
var SendMessageError = class extends Error {
  constructor(message) {
    super(message || "Can't send message. Params are invalid");
    __publicField(this, "name", "SendMessageError");
  }
};
var SendReplyError = class extends Error {
  constructor(message) {
    super(message || "Can't send reply. Params are invalid");
    __publicField(this, "name", "SendReplyError");
  }
};

// node_modules/@gear-js/api/utils/create-payload.js
init_shim();
var import_assert30 = __toESM(require_assert(), 1);

// node_modules/@gear-js/api/metadata/is.js
init_shim();

// node_modules/@gear-js/api/metadata/stateMetadata.js
init_shim();
var StateMetadata = class extends GearMetadata {
  constructor({ reg, functions }) {
    super(reg);
    __publicField(this, "functions");
    this.functions = functions;
  }
};
async function getStateMetadata(wasmBytes) {
  const memory = new WebAssembly.Memory({ initial: 17 });
  let resolveMetadataPromise;
  const metadata = new Promise((resolve) => {
    resolveMetadataPromise = resolve;
  });
  const { instance } = await WebAssembly.instantiate(wasmBytes, importObj(memory, void 0, void 0, void 0, void 0, (payload, len) => {
    resolveMetadataPromise(new Uint8Array(memory.buffer.slice(payload, payload + len)));
  }));
  const { exports } = instance;
  if (!(exports == null ? void 0 : exports.metadata)) {
    throw new Error("Unable to find metadata function in exports of applied wasm");
  }
  if (typeof exports.metadata !== "function") {
    throw new Error("exports.metadata is not a function");
  }
  exports.metadata();
  const meta = CreateType.create("StateMetadataRepr", await metadata);
  return new StateMetadata(meta.toJSON());
}

// node_modules/@gear-js/api/metadata/is.js
function isProgramMeta(arg) {
  if (typeof arg !== "object") {
    return false;
  }
  return arg instanceof ProgramMetadata;
}
function isStateMeta(arg) {
  if (typeof arg !== "object") {
    return false;
  }
  return arg instanceof StateMetadata;
}

// node_modules/@gear-js/api/utils/create-payload.js
function getRegistry(metaOrHexRegistry) {
  if (!metaOrHexRegistry) {
    return void 0;
  }
  if (isHex(metaOrHexRegistry)) {
    return metaOrHexRegistry;
  }
}
function encodePayload(payload, hexRegistryOrMeta, type, typeIndexOrPayloadType) {
  if (payload === void 0) {
    return [];
  }
  if (isHex(payload)) {
    return Array.from(hexToU8a(payload));
  }
  if (isU8a(payload)) {
    return Array.from(payload);
  }
  const [reg, meta] = isProgramMeta(hexRegistryOrMeta) ? [void 0, hexRegistryOrMeta] : [hexRegistryOrMeta, void 0];
  const [typeIndex, payloadType] = typeof typeIndexOrPayloadType === "number" ? [typeIndexOrPayloadType, void 0] : [void 0, typeIndexOrPayloadType];
  let result;
  if (meta) {
    if (typeIndex || typeIndex === 0) {
      result = meta.createType(typeIndex, payload);
    } else if (payloadType) {
      const index = meta.getTypeIndexByName(payloadType);
      if (index === null) {
        result = CreateType.create(payloadType, payload);
      } else {
        result = meta.createType(meta.getTypeIndexByName(payloadType), payload);
      }
    } else {
      const withType = type === "reply" ? meta.types[type] : meta.types[type].input;
      result = meta.createType(withType, payload);
    }
  } else if (reg) {
    if (typeIndex || typeIndex === 0) {
      result = new GearMetadata(reg).createType(typeIndex, payload);
    } else {
      result = CreateType.create(payloadType, payload, reg);
    }
  } else if (payloadType) {
    result = CreateType.create(payloadType, payload);
  } else {
    result = CreateType.create("Bytes", payload);
  }
  return Array.from(result.toU8a());
}

// node_modules/@gear-js/api/utils/getExtrinsic.js
init_shim();
function getExtrinsic(api, section2, method, args) {
  return api.tx[section2][method](...args);
}

// node_modules/@gear-js/api/Message.js
var GearMessage = class extends GearTransaction {
  /**
   * ## Send Message
   * @param message
   * @param metaOrHexRegistry Metadata
   * @param typeIndexOrTypeName type index in registry or type name
   * @returns Submitted result
   */
  send({ destination, value, gasLimit, payload, ...rest }, metaOrHexRegistry, typeIndexOrTypeName) {
    validateValue(value, this._api);
    validateGasLimit(gasLimit, this._api);
    const _payload = encodePayload(payload, metaOrHexRegistry, "handle", typeIndexOrTypeName);
    try {
      const txArgs = [destination, _payload, gasLimit, value || 0];
      if (this._api.specVersion >= 1010) {
        txArgs.push("keepAlive" in rest ? rest.keepAlive : true);
      } else {
        txArgs.push("prepaid" in rest ? rest.prepaid : false);
      }
      this.extrinsic = getExtrinsic(this._api, "gear", "sendMessage", txArgs);
      return this.extrinsic;
    } catch (error) {
      throw new SendMessageError(error.message);
    }
  }
  /**
   * Sends reply message
   * @param args Message parameters
   * @param metaOrHexRegistry Metadata
   * @param typeIndexOrTypeName type index in registry or type name
   * @returns Submitted result
   */
  async sendReply({ value, gasLimit, replyToId, payload, account: account3, ...rest }, metaOrHexRegistry, typeIndexOrTypeName) {
    validateValue(value, this._api);
    validateGasLimit(gasLimit, this._api);
    if (account3) {
      await validateMailboxItem(account3, replyToId, this._api);
    }
    const _payload = encodePayload(payload, metaOrHexRegistry, "reply", typeIndexOrTypeName);
    try {
      const txArgs = [replyToId, _payload, gasLimit, value || 0];
      if (this._api.specVersion >= 1010) {
        txArgs.push("keepAlive" in rest ? rest.keepAlive : true);
      } else {
        txArgs.push("prepaid" in rest ? rest.prepaid : false);
      }
      this.extrinsic = getExtrinsic(this._api, "gear", "sendReply", txArgs);
      return this.extrinsic;
    } catch (error) {
      throw new SendReplyError();
    }
  }
  listenToReplies(programId, bufferSize = 5) {
    let unsub;
    const subject = new ReplaySubject(bufferSize);
    this._api.gearEvents.subscribeToGearEvent("UserMessageSent", ({ data }) => {
      if (data.message.source.eq(programId)) {
        if (data.message.details.isSome) {
          data.message.details.unwrap().to.toHex();
          {
            subject.next([data.message.details.unwrap().to.toHex(), data]);
          }
        }
      }
    }).then((result) => {
      unsub = result;
    });
    return (messageId) => {
      return new Promise((resolve) => {
        subject.subscribe({
          next: ([id, data]) => {
            if (id === messageId) {
              subject.complete();
              unsub();
              resolve(data);
            }
          }
        });
      });
    };
  }
};

// node_modules/@gear-js/api/Program.js
init_shim();

// node_modules/@gear-js/api/Gas.js
init_shim();
var GearGas = class {
  constructor(_api) {
    __publicField(this, "_api");
    this._api = _api;
  }
  /**
   * ### Get gas spent of init message using upload_program extrinsic
   * @param sourceId Account Id
   * @param code Program code
   * @param payload Payload of init message
   * @param value Value of message
   * @param allowOtherPanics Should RPC call return error if other contracts panicked, during communication with the initial one
   * @param meta (optional) Program metadata obtained using `ProgramMetadata.from` method.
   * @param typeIndexOrTypeName  Index of type in the registry. If not specified the type index from `meta.init.input` will be used instead.
   * If meta is not passed it's possible to specify type name that can be one of the default rust types
   * @example
   * ```javascript
   * const code = fs.readFileSync('demo_meta.opt.wasm');
   * const meta = ProgramMetadata.from('0x...');
   * const gas = await gearApi.program.gasSpent.init(
   *   '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d',
   *   code,
   *   {
   *     amount: 255,
   *     currency: 'GRT',
   *   },
   *   0,
   *   true,
   *   meta
   * );
   * console.log(gas.toJSON());
   *
   * // Or
   * const gas = await gearApi.program.gasSpent.init(
   *   '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d',
   *   code,
   *   'Hello',
   *   0,
   *   true,
   *   undefined,
   *   'String',
   * );
   * ```
   */
  async initUpload(sourceId, code, payload, value, allowOtherPanics, meta, typeIndexOrTypeName) {
    return this._api.rpc.gear.calculateInitUploadGas(sourceId, encodePayload(code, void 0, void 0, "Bytes"), encodePayload(payload, meta, "init", typeIndexOrTypeName), value || 0, allowOtherPanics || true);
  }
  /**
   * ### Get gas spent of init message using create_program extrinsic
   * @param sourceId Account id
   * @param code Program code
   * @param payload Payload of init message
   * @param value Value of message
   * @param allowOtherPanics Should RPC call return error if other contracts panicked, during communication with the initial one
   * @param meta Metadata
   * @param typeIndexOrTypeName  Index of type in the registry. If not specified the type index from `meta.init.input` will be used instead.
   * If meta is not passed it's possible to specify type name that can be one of the default rust types
   * @example
   * ```javascript
   * const code = fs.readFileSync('demo_meta.opt.wasm');
   * const meta = ProgramMetadata.from('0x...');
   * const gas = await gearApi.program.gasSpent.init(
   *   '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d',
   *   code,
   *   {
   *     amount: 255,
   *     currency: 'GRT',
   *   },
   *   0,
   *   true,
   *   meta,
   *   meta.types.init.input
   * );
   * // Or
   * const gas = await gearApi.program.gasSpent.init(
   *   '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d',
   *   code,
   *   'Hello World!',
   *   0,
   *   true,
   *   undefined,
   *   'String'
   * );
   * console.log(gas.toJSON());
   * ```
   */
  async initCreate(sourceId, codeId, payload, value, allowOtherPanics, meta, typeIndexOrTypeName) {
    const _payload = encodePayload(payload, meta, "init", typeIndexOrTypeName);
    return this._api.rpc.gear.calculateInitCreateGas(sourceId, codeId, _payload, value || 0, allowOtherPanics || true);
  }
  /**
   * ### Get gas spent of hanle message
   * @param sourceId Account id
   * @param destinationId Program id
   * @param payload Payload of message
   * @param value Value of message
   * @param allowOtherPanics Should RPC call return error if other contracts panicked, during communication with the initial one
   * @param meta Metadata
   * @param typeIndexOrTypeName  Index of type in the registry. If not specified the type index from `meta.handle.input` will be used instead.
   * If meta is not passed it's possible to specify type name that can be one of the default rust types
   * @example
   * ```javascript
   * const code = fs.readFileSync('demo_meta.opt.wasm');
   * const meta = ProgramMetadata.from('0x...');
   * const gas = await gearApi.program.gasSpent.handle(
   *   '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d',
   *   '0xa178362715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d',
   *    {
   *       id: {
   *         decimal: 64,
   *         HexString: '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d',
   *       },
   *    },
   *   0,
   *   true,
   *   meta
   * );
   * console.log(gas.toHuman());
   * ```
   */
  async handle(sourceId, destinationId, payload, value, allowOtherPanics, meta, typeIndexOrTypeName) {
    const _payload = encodePayload(payload, meta, "handle", typeIndexOrTypeName);
    return this._api.rpc.gear.calculateHandleGas(sourceId, destinationId, _payload, value || 0, allowOtherPanics || true);
  }
  /**
   * ### Get gas spent of reply message
   * @param sourceId Account id
   * @param messageId Message id of a message waiting for response
   * @param exitCode Exit code of a message waiting for response
   * @param payload Payload of message
   * @param value Value of message
   * @param allowOtherPanics Should RPC call return error if other contracts panicked, during communication with the initial one
   * @param meta Metadata
   * @param typeIndexOrTypeName  Index of type in the registry. If not specified the type index from `meta.reply.input` will be used instead.
   * If meta is not passed it's possible to specify type name that can be one of the default rust types
   * @example
   * ```javascript
   * const code = fs.readFileSync('demo_async.opt.wasm');
   * const meta = ProgramMetadata.from('0x...');
   * const gas = await gearApi.program.gasSpent.reply(
   *   '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d',
   *   '0x518e6bc03d274aadb3454f566f634bc2b6aef9ae6faeb832c18ae8300fd72635',
   *   0,
   *   'PONG',
   *   1000,
   *   true,
   *   meta,
   * );
   * console.log(gas.toJSON());
   * ```
   */
  async reply(sourceId, messageId, payload, value, allowOtherPanics, meta, typeIndexOrTypeName) {
    const _payload = encodePayload(payload, meta, "reply", typeIndexOrTypeName);
    return this._api.rpc.gear.calculateReplyGas(sourceId, messageId, _payload, value || 0, allowOtherPanics || true);
  }
};

// node_modules/@gear-js/api/ResumeSession.js
init_shim();
var import_assert31 = __toESM(require_assert(), 1);
var SIXTEEN_KB = 16384;
var GearResumeSession = class extends GearTransaction {
  constructor(_api) {
    super(_api);
    __publicField(this, "_api");
    this._api = _api;
  }
  /**
   * ## Create a session for program resume. Get session id from `ProgramResumeSessionStarted` event
   * @param args Resume program args
   * @returns Submittable result
   * @example
   * ```javascript
   * const program = await api.programStorage.getProgram(programId, oneBlockBeforePauseHash);
   * const initTx = api.program.resumeSession.init({
   *   programId,
   *   allocations: program.allocations,
   *   codeHash: program.codeHash.toHex(),
   * });
   *
   * let sessionId: HexString;
   * initTx.signAndSend(account, ({ events }) => {
   *   events.forEach(({ event: { method, data }}) => {
   *     if (method === 'ProgramResumeSessionStarted') {
   *       sessionId = data.sessionId.toNumber();
   *     }
   *   })
   * })
   * ```
   */
  init({ programId, allocations, codeHash }) {
    try {
      this.extrinsic = this._api.tx.gear.resumeSessionInit(programId, Array.from(CreateType.create("BTreeSet<u32>", allocations).toU8a()), codeHash);
      return this.extrinsic;
    } catch (error) {
      console.log(error);
      throw new ResumeSessionInitError(programId, error.message);
    }
  }
  /**
   * ## Append program memory pages to the session data.
   * @param args Push pages args
   * @returns Submittable result
   * @example
   * ```javascript
   * const pages = await api.programStorage.getProgramPages(programId, program, oneBlockBeforePauseHash);
   * for (const memPage of Object.entries(page)) {
   *   const tx = api.program.resumeSession.push({ sessionId, memoryPages: [memPage] });
   *   tx.signAndSend(account);
   * }
   * ```
   */
  push({ sessionId, memoryPages }) {
    if (!memoryPages.every(([_, page]) => {
      if (typeof page === "string") {
        return page.length === SIXTEEN_KB * 2 + 2;
      } else {
        return page.length === SIXTEEN_KB;
      }
    })) {
      throw new ResumeSessionPushError(sessionId, "Invalid memory page length. Must be 16KB.");
    }
    const vecLen = CreateType.create("Compact<u8>", memoryPages.length).toHex();
    const tuples = memoryPages.map(([number5, page]) => {
      const num = CreateType.create("u32", number5).toHex();
      const p = typeof page === "string" ? page : u8aToHex(page);
      return num + p.slice(2);
    });
    try {
      this.extrinsic = this._api.tx.gear.resumeSessionPush(sessionId, vecLen + tuples.slice(2));
      return this.extrinsic;
    } catch (error) {
      throw new ResumeSessionPushError(sessionId);
    }
  }
  /**
   * ## Finish program resume session with the given key `sessionId`.
   * @param args Commit session args
   * @returns Submittable result
   * @example
   * ```javascript
   * const tx = api.program.resumeSession.commit({ sessionId, blockCount: 20_000 });
   * tx.signAndSend(account);
   * ```
   */
  commit({ sessionId, blockCount }) {
    try {
      this.extrinsic = this._api.tx.gear.resumeSessionCommit(sessionId, blockCount);
      return this.extrinsic;
    } catch (error) {
      console.log(error);
      throw new ResumeSessionCommitError(sessionId, error.message);
    }
  }
};

// node_modules/@gear-js/api/Program.js
var GearProgram = class extends GearTransaction {
  constructor(_api) {
    super(_api);
    __publicField(this, "_api");
    __publicField(this, "calculateGas");
    __publicField(this, "resumeSession");
    this._api = _api;
    this.calculateGas = new GearGas(_api);
    this.resumeSession = new GearResumeSession(_api);
  }
  upload(args, metaOrHexRegistry, typeIndexOrTypeName) {
    validateValue(args.value, this._api);
    validateGasLimit(args.gasLimit, this._api);
    const salt = args.salt || randomAsHex4(20);
    const code = this._api.createType("Bytes", Array.from(args.code));
    const payload = encodePayload(args.initPayload, metaOrHexRegistry, "init", typeIndexOrTypeName);
    const codeId = generateCodeHash(code);
    const programId = generateProgramId(this._api, codeId, salt);
    try {
      const txArgs = [code, salt, payload, args.gasLimit, args.value || 0];
      if (this._api.specVersion >= 1010) {
        txArgs.push("keepAlive" in args ? args.keepAlive : true);
      }
      this.extrinsic = getExtrinsic(this._api, "gear", "uploadProgram", txArgs);
      return { programId, codeId, salt, extrinsic: this.extrinsic };
    } catch (error) {
      console.log(error);
      throw new SubmitProgramError();
    }
  }
  create({ codeId, initPayload, value, gasLimit, ...args }, metaOrHexRegistry, typeIndexOrTypeName) {
    validateValue(value, this._api);
    validateGasLimit(gasLimit, this._api);
    const payload = encodePayload(initPayload, metaOrHexRegistry, "init", typeIndexOrTypeName);
    const salt = args.salt || randomAsHex4(20);
    const programId = generateProgramId(this._api, codeId, salt);
    try {
      const txArgs = [codeId, salt, payload, gasLimit, value || 0];
      if (this._api.specVersion >= 1010) {
        txArgs.push("keepAlive" in args ? args.keepAlive : true);
      }
      this.extrinsic = getExtrinsic(this._api, "gear", "createProgram", txArgs);
      return { programId, salt, extrinsic: this.extrinsic };
    } catch (error) {
      throw new SubmitProgramError();
    }
  }
  /**
   * ### Pay program rent
   * @param programId
   * @param blockCount
   * @returns
   * @example
   * ```javascript
   * const tx = await api.program.payRent('0x...', 100_000);
   * tx.signAndSend(account, (events) => {
   *   events.forEach(({event}) => console.log(event.toHuman()))
   * })
   * ```
   */
  async payRent(programId, blockCount) {
    await validateProgramId(programId, this._api);
    return this._api.tx.gear.payProgramRent(programId, blockCount);
  }
  /**
   * ### Calculate the cost of rent for a certain number of blocks
   * @param blockCount
   * @returns u128 number
   */
  calcualtePayRent(blockCount) {
    return this.costPerBlock.muln(blockCount);
  }
  /**
   * Get ids of all uploaded programs
   * @returns Array of program ids
   */
  async allUploadedPrograms(count2) {
    const prefix2 = this._api.query.gearProgram.programStorage.keyPrefix();
    const programIds = [];
    if (count2) {
      const keys2 = await this._api.rpc.state.getKeysPaged(prefix2, count2);
      programIds.push(...getIdsFromKeys(keys2, prefix2));
    } else {
      count2 = 1e3;
      const keys2 = await this._api.rpc.state.getKeysPaged(prefix2, count2);
      programIds.push(...getIdsFromKeys(keys2, prefix2));
      let keysLength = keys2.length;
      let lastKey = keys2.at(-1);
      while (keysLength === count2) {
        const keys3 = await this._api.rpc.state.getKeysPaged(prefix2, count2, lastKey);
        programIds.push(...getIdsFromKeys(keys3, prefix2));
        lastKey = keys3.at(-1);
        keysLength = keys3.length;
      }
    }
    return programIds;
  }
  /**
   *
   * @param id A program id
   * @returns `true` if address belongs to program, and `false` otherwise
   */
  async exists(id) {
    const program = await this._api.query.gearProgram.programStorage(id);
    return program.isSome;
  }
  /**
   * Get codeHash of program on-chain
   * @param programId
   * @returns codeHash of the program
   */
  async codeHash(id) {
    const program = await this._api.programStorage.getProgram(id);
    return program.codeHash.toHex();
  }
  /**
   * ### Get hash of program metadata
   * @param programId
   * @param at (optional) block hash
   * @returns
   */
  async metaHash(programId, at) {
    try {
      const metaHash = await this._api.rpc.gear.readMetahash(programId, at || null);
      return metaHash.toHex();
    } catch (error) {
      if (error.code === 8e3) {
        if (error.data.includes("Program not found")) {
          throw new ProgramDoesNotExistError(programId);
        }
        if (error.data.includes("unreachable")) {
          throw new ProgramHasNoMetahash(programId);
        }
      }
      throw error;
    }
  }
  get costPerBlock() {
    return this._api.consts.gear.programRentCostPerBlock;
  }
  get rentMinimalResumePeriod() {
    return this._api.consts.gear.programRentMinimalResumePeriod;
  }
  get rentFreePeriod() {
    return this._api.consts.gear.programRentFreePeriod;
  }
};

// node_modules/@gear-js/api/State.js
init_shim();
var import_assert32 = __toESM(require_assert(), 1);

// node_modules/@gear-js/api/Storage.js
init_shim();
var GearProgramStorage = class {
  constructor(_api) {
    __publicField(this, "_api");
    this._api = _api;
  }
  /**
   * ### Get program from chain
   * @param id Program id
   * @param at _(optional)_ Hash of block to query at
   * @returns
   */
  async getProgram(id, at) {
    const api = at ? await this._api.at(at) : this._api;
    const programOption = await api.query.gearProgram.programStorage(id);
    if (programOption.isNone) {
      throw new ProgramDoesNotExistError(id);
    }
    const program = programOption.unwrap();
    if (program.isTerminated)
      throw new ProgramTerminatedError(program.asTerminated.toHex());
    if (program.isExited)
      throw new ProgramExitedError(program.asExited.toHex());
    return program.asActive;
  }
  /**
   * Get list of pages for program
   * @param programId
   * @param gProg
   * @returns
   */
  async getProgramPages(programId, program, at) {
    const pages = {};
    for (const page of program.pagesWithData) {
      pages[page.toNumber()] = u8aToU8a(await this._api.provider.send("state_getStorage", [
        this._api.query.gearProgram.memoryPageStorage.key(programId, page),
        at
      ]));
    }
    return pages;
  }
  /**
   * ### Get block number and hash of paused program
   * @param id paused program id
   * @param at _(optional)_ Hash of block to query at
   * @returns
   */
  async getPausedProgramHashAndBlockNumber(id, at) {
    const storageOption = await this._api.query.gearProgram.pausedProgramStorage(id, at);
    if (storageOption.isNone) {
      throw new PausedProgramDoesNotExistError(id);
    }
    const storage = storageOption.unwrap();
    return {
      blockNumber: storage[0],
      hash: storage[1]
    };
  }
};

// node_modules/@gear-js/api/State.js
var GearProgramState = class extends GearProgramStorage {
  /**
   * ## Read state using meta wasm file
   * @param args
   * @param meta StateMetadata returned from getStateMetadata function
   */
  async readUsingWasm(params, stateMeta, programMeta) {
    const fnTypes = stateMeta == null ? void 0 : stateMeta.functions[params.fn_name];
    const argument = (fnTypes == null ? void 0 : fnTypes.input) !== void 0 && (fnTypes == null ? void 0 : fnTypes.input) !== null ? Array.from(stateMeta.createType(fnTypes.input, params.argument).toU8a()) : null;
    const payload = programMeta.version === MetadataVersion.V2Rust ? encodePayload(params.payload, programMeta, "state") : [];
    const code = typeof params.wasm === "string" ? params.wasm : CreateType.create("Bytes", Array.from(params.wasm));
    const state = await this._api.rpc.gear.readStateUsingWasm(params.programId, payload, params.fn_name, code, argument, params.at);
    return stateMeta && fnTypes ? stateMeta.createType(fnTypes.output, state) : state;
  }
  /**
   * ### Read state of program (calls `gear_readState` rpc call)
   * @param args ProgramId, payload and hash of block where it's necessary to read state (optional)
   * @param meta Program metadata returned from `ProgramMetadata.from` method.
   * @param type (optional) Index of type to decode state. metadata.types.state.input is uesd by default
   *
   * @example
   * const meta = ProgramMetadata.from('0x...');
   * const programId = '0x...';
   *
   * const result = await api.programState.read({ programId, payload: { id: 1 } }, meta);
   * console.log(result.toJSON());
   */
  async read(args, meta, type) {
    const payload = meta.version === MetadataVersion.V2Rust ? encodePayload(args.payload, meta, "state", type) : [];
    const state = await this._api.rpc.gear.readState(args.programId, payload, args.at || null);
    if (type !== void 0) {
      return meta.createType(type, state);
    }
    if (meta.version === MetadataVersion.V1Rust) {
      return meta.createType(meta.types.state, state);
    }
    return meta.createType(meta.types.state.output, state);
  }
  async readBatch(args) {
    return this._api.rpc.gear.readStateBatch(args.idPayloadBatch, args.at || null);
  }
};

// node_modules/@gear-js/api/Voucher.js
init_shim();
var import_assert33 = __toESM(require_assert(), 1);
var GearVoucher = class extends GearTransaction {
  /**
   * ### Issue a new voucher for a `user` to be used to pay for sending messages to `program_id` program.
   * @param to The voucher holder account id.
   * @param program The program id, messages to whom can be paid with the voucher.
   * @param value The voucher amount.
   * @returns Submittable result
   *
   * @example
   * ```javascript
   * const programId = '0x..';
   * const account = '0x...';
   * const tx = api.voucher.issue(account, programId, 10000);
   * tx.signAndSend(account, (events) => {
   *   events.forEach(({event}) => console.log(event.toHuman()));
   * })
   * ```
   */
  issue(to, program, value) {
    const voucherId = generateVoucherId(to, program);
    this.extrinsic = this._api.tx.gearVoucher.issue(to, program, value);
    return { extrinsic: this.extrinsic, voucherId };
  }
  call(params) {
    if ("SendMessage" in params) {
      if (params.SendMessage.method.method !== "sendMessage") {
        throw new Error(`Invalid method name. Expected 'SendMessage' but actual is ${params.SendMessage.method.method}`);
      }
      const [destination, payload, gasLimit, value, keepAlive] = params.SendMessage.args;
      return this._api.tx.gearVoucher.call({ SendMessage: { destination, payload, gasLimit, value, keepAlive } });
    } else if ("SendReply" in params) {
      if (params.SendReply.method.method !== "sendReply") {
        throw new Error(`Invalid method name. Expected 'SendReply' but actual is ${params.SendReply.method.method}`);
      }
      const [replyToId, payload, gasLimit, value, keepAlive] = params.SendReply.args;
      return this._api.tx.gearVoucher.call({ SendReply: { replyToId, payload, gasLimit, value, keepAlive } });
    }
    throw new Error("Invalid call params");
  }
  async exists(programId, accountId2) {
    try {
      await validateVoucher(programId, accountId2, this._api);
    } catch (_) {
      return false;
    }
    return true;
  }
};

// node_modules/@gear-js/api/Waitlist.js
init_shim();
var GearWaitlist = class {
  constructor(_api) {
    __publicField(this, "_api");
    this._api = _api;
  }
  async read(programId, messageIdOrNumberOfMessages) {
    const [messageId, numberOfMessages] = typeof messageIdOrNumberOfMessages === "string" ? [messageIdOrNumberOfMessages, void 0] : [void 0, messageIdOrNumberOfMessages || 1e3];
    if (messageId) {
      const waitlist = await this._api.query.gearMessenger.waitlist(programId, messageId);
      const typedWaitlist = this._api.createType("Option<(GearCoreMessageStoredStoredDispatch, GearCommonStoragePrimitivesInterval)>", waitlist);
      return typedWaitlist.unwrapOr(null);
    } else {
      const keyPrefix = this._api.query.gearMessenger.waitlist.keyPrefix(programId);
      const keysPaged = await this._api.rpc.state.getKeysPaged(keyPrefix, numberOfMessages, keyPrefix);
      if (keysPaged.length === 0) {
        return [];
      }
      const waitlist = await this._api.rpc.state.queryStorageAt(keysPaged);
      return waitlist.map((item) => {
        const typedItem = this._api.createType("Option<(GearCoreMessageStoredStoredDispatch, GearCommonStoragePrimitivesInterval)>", item);
        return typedItem.unwrapOr(null);
      });
    }
  }
};

// node_modules/@gear-js/api/GearApi.js
var GearApi = class extends ApiPromise {
  constructor(options = {}) {
    const { types: types6, providerAddress, ...restOptions } = options;
    const provider = (restOptions == null ? void 0 : restOptions.provider) || new WsProvider(providerAddress ?? "ws://127.0.0.1:9944");
    const defaultTypes = types6 ? { ...types6, ...gearTypes } : gearTypes;
    super({
      provider,
      derives: {},
      types: {
        ...defaultTypes
      },
      rpc: {
        ...gearRpc
      },
      runtime: {
        GearApi: [
          {
            methods: {},
            version: 2
          }
        ],
        Vara: [
          {
            methods: {},
            version: 1
          }
        ]
      },
      ...restOptions
    });
    __publicField(this, "program");
    __publicField(this, "programState");
    __publicField(this, "programStorage");
    __publicField(this, "message");
    __publicField(this, "balance");
    __publicField(this, "gearEvents");
    __publicField(this, "defaultTypes");
    __publicField(this, "blocks");
    __publicField(this, "mailbox");
    __publicField(this, "claimValueFromMailbox");
    __publicField(this, "code");
    __publicField(this, "waitlist");
    __publicField(this, "voucher");
    __publicField(this, "provider");
    this.provider = provider;
    this.program = new GearProgram(this);
    this.voucher = new GearVoucher(this);
    this.message = new GearMessage(this);
    this.balance = new GearBalance(this);
    this.gearEvents = new GearEvents(this);
    this.defaultTypes = defaultTypes;
    this.programState = new GearProgramState(this);
    this.blocks = new GearBlock(this);
    this.programStorage = new GearProgramStorage(this);
    this.claimValueFromMailbox = new GearClaimValue(this);
    this.mailbox = new GearMailbox(this);
    this.code = new GearCode(this);
    this.waitlist = new GearWaitlist(this);
  }
  static async create(options) {
    const api = new GearApi(options);
    await api.isReady;
    return api;
  }
  async totalIssuance() {
    return (await this.query.balances.totalIssuance()).toHuman();
  }
  async chain() {
    return (await this.rpc.system.chain()).toHuman();
  }
  async nodeName() {
    return (await this.rpc.system.name()).toHuman();
  }
  async nodeVersion() {
    return (await this.rpc.system.version()).toHuman();
  }
  get specVersion() {
    return this.runtimeVersion.specVersion.toNumber();
  }
  get specName() {
    return this.runtimeVersion.specName.toString();
  }
  get existentialDeposit() {
    return this.consts.balances.existentialDeposit;
  }
  get blockGasLimit() {
    return this.consts.gearGas.blockGasLimit;
  }
  get mailboxTreshold() {
    return this.consts.gear.mailboxThreshold;
  }
  get waitlistCost() {
    return this.consts.gearScheduler.waitlistCost;
  }
  get valuePerGas() {
    const gasMultiplier = this.consts.gearBank.gasMultiplier;
    if (gasMultiplier.isValuePerGas) {
      return gasMultiplier.asValuePerGas;
    }
  }
  async inflationInfo() {
    const info6 = await this.rpc.stakingRewards.inflationInfo();
    return this.createType("InflationInfo", info6);
  }
  async wasmBlobVersion() {
    const result = await this.rpc["runtime"].wasmBlobVersion();
    return result.toString();
  }
  /**
   * Method provides opportunity to get informations about error occurs in ExtrinsicFailed event
   * @param event
   * @returns
   */
  getExtrinsicFailedError(event) {
    const error = event.data[0];
    const { isModule, asModule } = error;
    return isModule ? this.registry.findMetaError(asModule) : null;
  }
};

// node_modules/@gear-js/api/Keyring.js
init_shim();

// node_modules/@gear-js/api/utils/address.js
init_shim();
function decodeAddress5(publicKey2) {
  return u8aToHex(new Keyring().decodeAddress(publicKey2));
}
function encodeAddress5(publicKeyRaw) {
  return new Keyring().encodeAddress(publicKeyRaw);
}

// node_modules/@gear-js/api/Keyring.js
var import_assert34 = __toESM(require_assert(), 1);
var GearKeyring = class {
  static unlock(keyring, passphrase) {
    if (keyring.isLocked) {
      keyring.unlock(passphrase);
    }
    return keyring;
  }
  static async fromSuri(suri, name) {
    const keyring = new Keyring({ type: "sr25519" });
    await waitReady();
    const keyPair = keyring.addFromUri(suri, { name });
    return keyPair;
  }
  static fromKeyPair(pair, name) {
    const keyring = new Keyring({ type: "sr25519" });
    return GearKeyring.unlock(keyring.addFromPair(pair, { name }));
  }
  static fromJson(keypairJson, passphrase) {
    const json = isString(keypairJson) ? JSON.parse(keypairJson) : keypairJson;
    const keyring = new Keyring().addFromJson(json);
    return GearKeyring.unlock(keyring, passphrase);
  }
  static async fromSeed(seed, name) {
    const keyring = new Keyring({ type: "sr25519" });
    await waitReady();
    const keypair = isU8a(seed) ? keyring.addFromSeed(seed, { name }) : keyring.addFromSeed(hexToU8a(seed), { name });
    return keypair;
  }
  static async fromMnemonic(mnemonic, name) {
    return await GearKeyring.fromSuri(mnemonic, name);
  }
  static toJson(keyring, passphrase) {
    return keyring.toJson(passphrase);
  }
  static async create(name, passphrase) {
    const mnemonic = mnemonicGenerate4();
    const seed = mnemonicToMiniSecret4(mnemonic);
    const keyring = await GearKeyring.fromSeed(seed, name);
    return {
      keyring,
      mnemonic,
      seed: u8aToHex(seed),
      json: keyring.toJson(passphrase)
    };
  }
  static generateMnemonic() {
    return mnemonicGenerate4();
  }
  static generateSeed(mnemonic) {
    if (!mnemonic) {
      mnemonic = mnemonicGenerate4();
    }
    return { seed: u8aToHex(mnemonicToMiniSecret4(mnemonic)), mnemonic };
  }
  static sign(keyring, message) {
    return keyring.sign(stringToU8a(message));
  }
  static checkPublicKey(publicKey2) {
    try {
      decodeAddress5(publicKey2);
    } catch (error) {
      return false;
    }
    return true;
  }
};

// node_modules/@gear-js/api/index.js
var import_assert35 = __toESM(require_assert());

// node_modules/@gear-js/api/wasm/readState.js
init_shim();

// node_modules/@gear-js/api/wasm/utils.js
init_shim();
function getExportValue(memory, func) {
  if (!func) {
    return void 0;
  }
  const result_ptr = func();
  const pointer = new Uint32Array(memory.buffer.slice(result_ptr, result_ptr + 4))[0];
  const length = new Uint32Array(memory.buffer.slice(result_ptr + 4, result_ptr + 8))[0];
  const buf = memory.buffer.slice(pointer, pointer + length);
  return buf;
}
var PAGE_SIZE = 4096;

// node_modules/@gear-js/api/wasm/readState.js
async function readState(wasmBytes, initialSize, pages, inputValue, blockTimestamp, blockNumber) {
  const memory = new WebAssembly.Memory({ initial: initialSize });
  const module2 = await WebAssembly.instantiate(wasmBytes, importObj(memory, true, inputValue, blockTimestamp, blockNumber));
  Object.keys(pages).forEach((pageNumber) => {
    const start = +pageNumber * PAGE_SIZE;
    const end = start + PAGE_SIZE;
    const page = pages[pageNumber];
    for (let i = start; i < end; i++) {
      new Uint8Array(memory.buffer)[i] = page[i % PAGE_SIZE];
    }
  });
  const { exports } = module2.instance;
  return (exports == null ? void 0 : exports.meta_state) ? new Uint8Array(getExportValue(memory, exports.meta_state)) : null;
}

// node_modules/@gear-js/api/events/GearEventData.js
init_shim();
var GearEventData = class extends GenericEventData {
  constructor(data) {
    super(data.registry, data.toU8a(), data.meta, data.section, data.method);
  }
};

// node_modules/@gear-js/api/utils/string.js
init_shim();
function toCamelCase(array) {
  let result = stringCamelCase(array.join("_"));
  result = result.slice(0, 1).toUpperCase() + result.slice(1, result.length);
  return result;
}
function splitByCommas(str) {
  let counter = 0;
  const result = [];
  let lastTypeIndex = 0;
  Array.from(str).forEach((char, index) => {
    if (char === "," && counter === 0) {
      result.push(str.slice(lastTypeIndex, index).trim());
      lastTypeIndex = index + 1;
    }
    (char === "<" || char === "(") && counter++;
    (char === ">" || char === ")") && counter--;
  });
  result.push(str.slice(lastTypeIndex).trim());
  return result;
}

// node_modules/@gear-js/api/utils/signature.js
init_shim();
function signatureIsValid(publicKey2, signature, message) {
  return signatureVerify4(message, signature, publicKey2).isValid;
}

// node_modules/@gear-js/api/apis/vara/api.js
init_shim();
var VaraApi = class extends GearApi {
};

// node_modules/@gear-js/api/apis/vara-testnet/api.js
init_shim();
var VaraTestnetApi = class extends GearApi {
};

// node_modules/@gear-js/api/specs/vara.js
init_shim();
var VARA_GENESIS = "0xfe1b4c55fd4d668101126434206571a7838a8b6b93a6d1b95d607e78e6c53763";
var VARA_RUNTIME_VERSION = 1e3;

// node_modules/@gear-js/api/specs/vara-testnet.js
init_shim();
var VARA_TESTNET_GENESIS = "0x525639f713f397dcf839bd022cd821f367ebcf179de7b9253531f8adbe5436d6";
var VARA_TESTNET_RUNTIME_VERSION = 1010;

export {
  ScProvider,
  WsProvider,
  REGULAR_EXP,
  transformTypes,
  convertString,
  joinTypePath,
  typeIsGeneric,
  typeIsString,
  getTypeAndPayload,
  GearTransaction,
  GearBalance,
  isJSON,
  toJSON,
  GearMetadata,
  CreateType,
  Lang,
  MetadataVersion,
  ProgramMetadata,
  GearBlock,
  GearClaimValue,
  generateCodeHash,
  generateProgramId,
  generateVoucherId,
  GPROG,
  GPAGES,
  GPROG_HEX,
  GPAGES_HEX,
  getIdsFromKeys,
  SEPARATOR,
  validateValue,
  validateGasLimit,
  validateCodeId,
  validateProgramId,
  validateVoucher,
  validateMailboxItem,
  getGrReply,
  GearEvents,
  GearMailbox,
  StateMetadata,
  getStateMetadata,
  isProgramMeta,
  isStateMeta,
  getRegistry,
  encodePayload,
  getExtrinsic,
  GearMessage,
  GearGas,
  GearProgram,
  GearProgramStorage,
  GearProgramState,
  GearWaitlist,
  GearApi,
  decodeAddress5 as decodeAddress,
  encodeAddress5 as encodeAddress,
  GearKeyring,
  readState,
  GearEventData,
  toCamelCase,
  splitByCommas,
  signatureIsValid,
  VaraApi,
  VaraTestnetApi,
  VARA_GENESIS,
  VARA_RUNTIME_VERSION,
  VARA_TESTNET_GENESIS,
  VARA_TESTNET_RUNTIME_VERSION
};
/*! Bundled license information:

assert/build/internal/util/comparisons.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/edwards.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/montgomery.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/ed25519.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/edwards.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/montgomery.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/ed25519.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/edwards.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/montgomery.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/ed25519.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/edwards.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/montgomery.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/ed25519.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-PBCVDCVT.js.map
